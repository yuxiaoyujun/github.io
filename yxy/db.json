{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/kratos-rebirth/source/css/kratosr.min.css","path":"css/kratosr.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/css/prismjs.min.css","path":"css/prismjs.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/css/kr-color-dark.min.css","path":"css/kr-color-dark.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/js/candy.min.js","path":"js/candy.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/js/kr-dark.min.js","path":"js/kr-dark.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/js/kratosr.min.js","path":"js/kratosr.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/js/local-search.min.js","path":"js/local-search.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/js/pjax.min.js","path":"js/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/js/snow.min.js","path":"js/snow.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/candy.min.js.map","path":"maps/candy.min.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/kr-color-dark.min.css.map","path":"maps/kr-color-dark.min.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/kr-dark.min.js.map","path":"maps/kr-dark.min.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/kratosr.min.css.map","path":"maps/kratosr.min.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/kratosr.min.js.map","path":"maps/kratosr.min.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/light.min.css.map","path":"maps/light.min.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/local-search.min.js.map","path":"maps/local-search.min.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/night-blue.min.css.map","path":"maps/night-blue.min.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/night-bright.min.css.map","path":"maps/night-bright.min.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/night-eighties.min.css.map","path":"maps/night-eighties.min.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/night.min.css.map","path":"maps/night.min.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/pjax.min.js.map","path":"maps/pjax.min.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/prismjs.min.css.map","path":"maps/prismjs.min.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/maps/snow.min.js.map","path":"maps/snow.min.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/css/highlight/light.min.css","path":"css/highlight/light.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/css/highlight/night-blue.min.css","path":"css/highlight/night-blue.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/css/highlight/night-bright.min.css","path":"css/highlight/night-bright.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/css/highlight/night-eighties.min.css","path":"css/highlight/night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/css/highlight/night.min.css","path":"css/highlight/night.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/HELP-US-OUT.txt","path":"vendors/font-awesome@4.7.0/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/README.md","path":"vendors/font-awesome@4.7.0/README.md","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/package.json","path":"vendors/font-awesome@4.7.0/package.json","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/History.md","path":"vendors/nprogress@0.2.0/History.md","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/License.md","path":"vendors/nprogress@0.2.0/License.md","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/Notes.md","path":"vendors/nprogress@0.2.0/Notes.md","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/Readme.md","path":"vendors/nprogress@0.2.0/Readme.md","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/bower.json","path":"vendors/nprogress@0.2.0/bower.json","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/component.json","path":"vendors/nprogress@0.2.0/component.json","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/nprogress.css","path":"vendors/nprogress@0.2.0/nprogress.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/nprogress.js","path":"vendors/nprogress@0.2.0/nprogress.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/package.json","path":"vendors/nprogress@0.2.0/package.json","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/LICENSE","path":"vendors/qrcode_js@1.0.0/LICENSE","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/README.md","path":"vendors/qrcode_js@1.0.0/README.md","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/bower.json","path":"vendors/qrcode_js@1.0.0/bower.json","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/index-svg.html","path":"vendors/qrcode_js@1.0.0/index-svg.html","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/index.html","path":"vendors/qrcode_js@1.0.0/index.html","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/index.svg","path":"vendors/qrcode_js@1.0.0/index.svg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/jquery.min.js","path":"vendors/qrcode_js@1.0.0/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/package.json","path":"vendors/qrcode_js@1.0.0/package.json","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/qrcode.js","path":"vendors/qrcode_js@1.0.0/qrcode.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/qrcode.min.js","path":"vendors/qrcode_js@1.0.0/qrcode.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/disqusjs@1.3.0/dist/disqus.js","path":"vendors/disqusjs@1.3.0/dist/disqus.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/disqusjs@1.3.0/dist/disqusjs.css","path":"vendors/disqusjs@1.3.0/dist/disqusjs.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/css/font-awesome.css","path":"vendors/font-awesome@4.7.0/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/css/font-awesome.css.map","path":"vendors/font-awesome@4.7.0/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/css/font-awesome.min.css","path":"vendors/font-awesome@4.7.0/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/FontAwesome.otf","path":"vendors/font-awesome@4.7.0/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.css","path":"vendors/aplayer@1.10.1/dist/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.js","path":"vendors/aplayer@1.10.1/dist/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.css.map","path":"vendors/aplayer@1.10.1/dist/APlayer.min.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.js.map","path":"vendors/aplayer@1.10.1/dist/APlayer.min.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/font-awesome.scss","path":"vendors/font-awesome@4.7.0/scss/font-awesome.scss","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.min.js","path":"vendors/jquery@3.6.0/dist/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.js","path":"vendors/jquery@3.6.0/dist/jquery.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.slim.js","path":"vendors/jquery@3.6.0/dist/jquery.slim.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.min.map","path":"vendors/jquery@3.6.0/dist/jquery.min.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.slim.min.js","path":"vendors/jquery@3.6.0/dist/jquery.slim.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/animated.less","path":"vendors/font-awesome@4.7.0/less/animated.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.slim.min.map","path":"vendors/jquery@3.6.0/dist/jquery.slim.min.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/fixed-width.less","path":"vendors/font-awesome@4.7.0/less/fixed-width.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/core.less","path":"vendors/font-awesome@4.7.0/less/core.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/bordered-pulled.less","path":"vendors/font-awesome@4.7.0/less/bordered-pulled.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/font-awesome.less","path":"vendors/font-awesome@4.7.0/less/font-awesome.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/icons.less","path":"vendors/font-awesome@4.7.0/less/icons.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/path.less","path":"vendors/font-awesome@4.7.0/less/path.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/larger.less","path":"vendors/font-awesome@4.7.0/less/larger.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/list.less","path":"vendors/font-awesome@4.7.0/less/list.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/mixins.less","path":"vendors/font-awesome@4.7.0/less/mixins.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/rotated-flipped.less","path":"vendors/font-awesome@4.7.0/less/rotated-flipped.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk-component.js","path":"vendors/gitalk@1.7.2/dist/gitalk-component.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk-component.js.map","path":"vendors/gitalk@1.7.2/dist/gitalk-component.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/variables.less","path":"vendors/font-awesome@4.7.0/less/variables.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.css","path":"vendors/gitalk@1.7.2/dist/gitalk.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/screen-reader.less","path":"vendors/font-awesome@4.7.0/less/screen-reader.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/stacked.less","path":"vendors/font-awesome@4.7.0/less/stacked.less","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.js","path":"vendors/gitalk@1.7.2/dist/gitalk.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.js.map","path":"vendors/gitalk@1.7.2/dist/gitalk.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.min.js.map","path":"vendors/gitalk@1.7.2/dist/gitalk.min.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.css.map","path":"vendors/gitalk@1.7.2/dist/gitalk.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.min.js","path":"vendors/gitalk@1.7.2/dist/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/layui.all.js","path":"vendors/layui-src@2.5.5/dist/layui.all.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/layui.js","path":"vendors/layui-src@2.5.5/dist/layui.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/constants.js.map","path":"vendors/gitment@0.0.3/dist/constants.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/constants.js","path":"vendors/gitment@0.0.3/dist/constants.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/meting@2.0.1/dist/Meting.min.js","path":"vendors/meting@2.0.1/dist/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.browser.js","path":"vendors/gitment@0.0.3/dist/gitment.browser.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.browser.js.map","path":"vendors/gitment@0.0.3/dist/gitment.browser.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/icons.js.map","path":"vendors/gitment@0.0.3/dist/icons.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.js.map","path":"vendors/gitment@0.0.3/dist/gitment.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/icons.js","path":"vendors/gitment@0.0.3/dist/icons.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.js","path":"vendors/gitment@0.0.3/dist/gitment.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/utils.js.map","path":"vendors/gitment@0.0.3/dist/utils.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/utils.js","path":"vendors/gitment@0.0.3/dist/utils.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.core.js","path":"vendors/mermaid@9.1.1/dist/mermaid.core.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/test/test.js","path":"vendors/nprogress@0.2.0/test/test.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/test/component.html","path":"vendors/nprogress@0.2.0/test/component.html","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs.map","path":"vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.js","path":"vendors/mermaid@9.1.1/dist/mermaid.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs","path":"vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.js.map","path":"vendors/mermaid@9.1.1/dist/mermaid.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.core.js.map","path":"vendors/mermaid@9.1.1/dist/mermaid.core.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.min.js","path":"vendors/mermaid@9.1.1/dist/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.min.js.LICENSE.txt","path":"vendors/mermaid@9.1.1/dist/mermaid.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.all.min.js","path":"vendors/twikoo@1.5.11/dist/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs.LICENSE.txt","path":"vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.all.min.js.LICENSE.txt","path":"vendors/twikoo@1.5.11/dist/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.min.js.LICENSE.txt","path":"vendors/twikoo@1.5.11/dist/twikoo.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.min.js.map","path":"vendors/mermaid@9.1.1/dist/mermaid.min.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.min.js","path":"vendors/twikoo@1.5.11/dist/twikoo.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.Pure.min.js.map","path":"vendors/valine@1.4.18/dist/Valine.Pure.min.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.Pure.min.js","path":"vendors/valine@1.4.18/dist/Valine.Pure.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.js.map","path":"vendors/valine@1.4.18/dist/Valine.min.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.js","path":"vendors/valine@1.4.18/dist/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.umd.js","path":"vendors/valine@1.4.18/dist/Valine.min.umd.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/detect.min.js","path":"vendors/valine@1.4.18/dist/detect.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.umd.js.map","path":"vendors/valine@1.4.18/dist/Valine.min.umd.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/escape.min.js","path":"vendors/valine@1.4.18/dist/escape.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.css","path":"vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.js","path":"vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css","path":"vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js","path":"vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.cjs","path":"vendors/@waline/client@2.14.1/dist/api.cjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.cjs.map","path":"vendors/@waline/client@2.14.1/dist/api.cjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.d.cts","path":"vendors/@waline/client@2.14.1/dist/api.d.cts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.d.mts","path":"vendors/@waline/client@2.14.1/dist/api.d.mts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.d.ts","path":"vendors/@waline/client@2.14.1/dist/api.d.ts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.mjs","path":"vendors/@waline/client@2.14.1/dist/api.mjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.mjs.map","path":"vendors/@waline/client@2.14.1/dist/api.mjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.cjs","path":"vendors/@waline/client@2.14.1/dist/comment.cjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.cjs.map","path":"vendors/@waline/client@2.14.1/dist/comment.cjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.d.cts","path":"vendors/@waline/client@2.14.1/dist/comment.d.cts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.d.mts","path":"vendors/@waline/client@2.14.1/dist/comment.d.mts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.d.ts","path":"vendors/@waline/client@2.14.1/dist/comment.d.ts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.js","path":"vendors/@waline/client@2.14.1/dist/comment.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.js.map","path":"vendors/@waline/client@2.14.1/dist/comment.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.mjs","path":"vendors/@waline/client@2.14.1/dist/comment.mjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.mjs.map","path":"vendors/@waline/client@2.14.1/dist/comment.mjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/component.mjs","path":"vendors/@waline/client@2.14.1/dist/component.mjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/component.mjs.map","path":"vendors/@waline/client@2.14.1/dist/component.mjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/legacy.umd.d.ts","path":"vendors/@waline/client@2.14.1/dist/legacy.umd.d.ts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/legacy.umd.js","path":"vendors/@waline/client@2.14.1/dist/legacy.umd.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/legacy.umd.js.map","path":"vendors/@waline/client@2.14.1/dist/legacy.umd.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.cjs","path":"vendors/@waline/client@2.14.1/dist/pageview.cjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.cjs.map","path":"vendors/@waline/client@2.14.1/dist/pageview.cjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.d.cts","path":"vendors/@waline/client@2.14.1/dist/pageview.d.cts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.d.mts","path":"vendors/@waline/client@2.14.1/dist/pageview.d.mts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.d.ts","path":"vendors/@waline/client@2.14.1/dist/pageview.d.ts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.js","path":"vendors/@waline/client@2.14.1/dist/pageview.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.js.map","path":"vendors/@waline/client@2.14.1/dist/pageview.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.mjs","path":"vendors/@waline/client@2.14.1/dist/pageview.mjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.mjs.map","path":"vendors/@waline/client@2.14.1/dist/pageview.mjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.cjs","path":"vendors/@waline/client@2.14.1/dist/shim.cjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.cjs.map","path":"vendors/@waline/client@2.14.1/dist/shim.cjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.d.cts","path":"vendors/@waline/client@2.14.1/dist/shim.d.cts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.d.mts","path":"vendors/@waline/client@2.14.1/dist/shim.d.mts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.mjs","path":"vendors/@waline/client@2.14.1/dist/shim.mjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.mjs.map","path":"vendors/@waline/client@2.14.1/dist/shim.mjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline-meta.css","path":"vendors/@waline/client@2.14.1/dist/waline-meta.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline-meta.css.map","path":"vendors/@waline/client@2.14.1/dist/waline-meta.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.cjs","path":"vendors/@waline/client@2.14.1/dist/waline.cjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.cjs.map","path":"vendors/@waline/client@2.14.1/dist/waline.cjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.css","path":"vendors/@waline/client@2.14.1/dist/waline.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.css.map","path":"vendors/@waline/client@2.14.1/dist/waline.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.d.cts","path":"vendors/@waline/client@2.14.1/dist/waline.d.cts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.d.mts","path":"vendors/@waline/client@2.14.1/dist/waline.d.mts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.d.ts","path":"vendors/@waline/client@2.14.1/dist/waline.d.ts","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.js","path":"vendors/@waline/client@2.14.1/dist/waline.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.js.map","path":"vendors/@waline/client@2.14.1/dist/waline.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.mjs","path":"vendors/@waline/client@2.14.1/dist/waline.mjs","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.mjs.map","path":"vendors/@waline/client@2.14.1/dist/waline.mjs.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/js/bootstrap.js","path":"vendors/bootstrap@3.3.4/dist/js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/js/bootstrap.min.js","path":"vendors/bootstrap@3.3.4/dist/js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/js/npm.js","path":"vendors/bootstrap@3.3.4/dist/js/npm.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.css","path":"vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.css.map","path":"vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.min.css","path":"vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap.css","path":"vendors/bootstrap@3.3.4/dist/css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap.css.map","path":"vendors/bootstrap@3.3.4/dist/css/bootstrap.css.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap.min.css","path":"vendors/bootstrap@3.3.4/dist/css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.eot","path":"vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.svg","path":"vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.ttf","path":"vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.woff","path":"vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.woff2","path":"vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/layui.css","path":"vendors/layui-src@2.5.5/dist/css/layui.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/layui.mobile.css","path":"vendors/layui-src@2.5.5/dist/css/layui.mobile.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.eot","path":"vendors/layui-src@2.5.5/dist/font/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.svg","path":"vendors/layui-src@2.5.5/dist/font/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.ttf","path":"vendors/layui-src@2.5.5/dist/font/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.woff","path":"vendors/layui-src@2.5.5/dist/font/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.woff2","path":"vendors/layui-src@2.5.5/dist/font/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/theme/default.js","path":"vendors/gitment@0.0.3/dist/theme/default.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/theme/default.js.map","path":"vendors/gitment@0.0.3/dist/theme/default.js.map","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/code.css","path":"vendors/layui-src@2.5.5/dist/css/modules/code.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/0.gif","path":"vendors/layui-src@2.5.5/dist/images/face/0.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/1.gif","path":"vendors/layui-src@2.5.5/dist/images/face/1.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/10.gif","path":"vendors/layui-src@2.5.5/dist/images/face/10.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/11.gif","path":"vendors/layui-src@2.5.5/dist/images/face/11.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/12.gif","path":"vendors/layui-src@2.5.5/dist/images/face/12.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/13.gif","path":"vendors/layui-src@2.5.5/dist/images/face/13.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/14.gif","path":"vendors/layui-src@2.5.5/dist/images/face/14.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/15.gif","path":"vendors/layui-src@2.5.5/dist/images/face/15.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/16.gif","path":"vendors/layui-src@2.5.5/dist/images/face/16.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/19.gif","path":"vendors/layui-src@2.5.5/dist/images/face/19.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/2.gif","path":"vendors/layui-src@2.5.5/dist/images/face/2.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/18.gif","path":"vendors/layui-src@2.5.5/dist/images/face/18.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/17.gif","path":"vendors/layui-src@2.5.5/dist/images/face/17.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/20.gif","path":"vendors/layui-src@2.5.5/dist/images/face/20.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/23.gif","path":"vendors/layui-src@2.5.5/dist/images/face/23.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/24.gif","path":"vendors/layui-src@2.5.5/dist/images/face/24.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/25.gif","path":"vendors/layui-src@2.5.5/dist/images/face/25.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/27.gif","path":"vendors/layui-src@2.5.5/dist/images/face/27.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/26.gif","path":"vendors/layui-src@2.5.5/dist/images/face/26.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/28.gif","path":"vendors/layui-src@2.5.5/dist/images/face/28.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/3.gif","path":"vendors/layui-src@2.5.5/dist/images/face/3.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/30.gif","path":"vendors/layui-src@2.5.5/dist/images/face/30.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/31.gif","path":"vendors/layui-src@2.5.5/dist/images/face/31.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/32.gif","path":"vendors/layui-src@2.5.5/dist/images/face/32.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/33.gif","path":"vendors/layui-src@2.5.5/dist/images/face/33.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/34.gif","path":"vendors/layui-src@2.5.5/dist/images/face/34.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/35.gif","path":"vendors/layui-src@2.5.5/dist/images/face/35.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/36.gif","path":"vendors/layui-src@2.5.5/dist/images/face/36.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/37.gif","path":"vendors/layui-src@2.5.5/dist/images/face/37.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/38.gif","path":"vendors/layui-src@2.5.5/dist/images/face/38.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/39.gif","path":"vendors/layui-src@2.5.5/dist/images/face/39.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/29.gif","path":"vendors/layui-src@2.5.5/dist/images/face/29.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/4.gif","path":"vendors/layui-src@2.5.5/dist/images/face/4.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/41.gif","path":"vendors/layui-src@2.5.5/dist/images/face/41.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/42.gif","path":"vendors/layui-src@2.5.5/dist/images/face/42.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/22.gif","path":"vendors/layui-src@2.5.5/dist/images/face/22.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/40.gif","path":"vendors/layui-src@2.5.5/dist/images/face/40.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/43.gif","path":"vendors/layui-src@2.5.5/dist/images/face/43.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/44.gif","path":"vendors/layui-src@2.5.5/dist/images/face/44.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/21.gif","path":"vendors/layui-src@2.5.5/dist/images/face/21.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/46.gif","path":"vendors/layui-src@2.5.5/dist/images/face/46.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/47.gif","path":"vendors/layui-src@2.5.5/dist/images/face/47.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/49.gif","path":"vendors/layui-src@2.5.5/dist/images/face/49.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/5.gif","path":"vendors/layui-src@2.5.5/dist/images/face/5.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/50.gif","path":"vendors/layui-src@2.5.5/dist/images/face/50.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/51.gif","path":"vendors/layui-src@2.5.5/dist/images/face/51.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/48.gif","path":"vendors/layui-src@2.5.5/dist/images/face/48.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/54.gif","path":"vendors/layui-src@2.5.5/dist/images/face/54.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/52.gif","path":"vendors/layui-src@2.5.5/dist/images/face/52.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/55.gif","path":"vendors/layui-src@2.5.5/dist/images/face/55.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/56.gif","path":"vendors/layui-src@2.5.5/dist/images/face/56.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/53.gif","path":"vendors/layui-src@2.5.5/dist/images/face/53.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/45.gif","path":"vendors/layui-src@2.5.5/dist/images/face/45.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/57.gif","path":"vendors/layui-src@2.5.5/dist/images/face/57.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/59.gif","path":"vendors/layui-src@2.5.5/dist/images/face/59.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/6.gif","path":"vendors/layui-src@2.5.5/dist/images/face/6.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/58.gif","path":"vendors/layui-src@2.5.5/dist/images/face/58.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/60.gif","path":"vendors/layui-src@2.5.5/dist/images/face/60.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/61.gif","path":"vendors/layui-src@2.5.5/dist/images/face/61.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/62.gif","path":"vendors/layui-src@2.5.5/dist/images/face/62.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/63.gif","path":"vendors/layui-src@2.5.5/dist/images/face/63.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/64.gif","path":"vendors/layui-src@2.5.5/dist/images/face/64.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/65.gif","path":"vendors/layui-src@2.5.5/dist/images/face/65.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/66.gif","path":"vendors/layui-src@2.5.5/dist/images/face/66.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/67.gif","path":"vendors/layui-src@2.5.5/dist/images/face/67.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/68.gif","path":"vendors/layui-src@2.5.5/dist/images/face/68.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/69.gif","path":"vendors/layui-src@2.5.5/dist/images/face/69.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/7.gif","path":"vendors/layui-src@2.5.5/dist/images/face/7.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/70.gif","path":"vendors/layui-src@2.5.5/dist/images/face/70.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/71.gif","path":"vendors/layui-src@2.5.5/dist/images/face/71.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/8.gif","path":"vendors/layui-src@2.5.5/dist/images/face/8.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/9.gif","path":"vendors/layui-src@2.5.5/dist/images/face/9.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/carousel.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/carousel.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/code.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/code.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/element.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/element.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/colorpicker.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/colorpicker.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/flow.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/flow.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/form.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/form.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/jquery.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/jquery.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/laydate.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/laydate.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/layedit.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/layedit.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/layer.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/layer.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/layim.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/layim.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/laypage.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/laypage.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/laytpl.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/laytpl.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/mobile.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/mobile.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/rate.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/rate.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/slider.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/slider.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/table.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/table.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/transfer.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/transfer.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/tree.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/tree.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/upload.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/upload.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/util.js","path":"vendors/layui-src@2.5.5/dist/lay/modules/util.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/plugins/emojis/index.js","path":"vendors/valine@1.4.18/dist/plugins/emojis/index.js","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/plugins/emojis/light.json","path":"vendors/valine@1.4.18/dist/plugins/emojis/light.json","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/layim.css","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/layim.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/icon-ext.png","path":"vendors/layui-src@2.5.5/dist/css/modules/layer/default/icon-ext.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/icon.png","path":"vendors/layui-src@2.5.5/dist/css/modules/layer/default/icon.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/layer.css","path":"vendors/layui-src@2.5.5/dist/css/modules/layer/default/layer.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-0.gif","path":"vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-0.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-1.gif","path":"vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-1.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-2.gif","path":"vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-2.gif","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/laydate/default/laydate.css","path":"vendors/layui-src@2.5.5/dist/css/modules/laydate/default/laydate.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/mobile/layim.css","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/mobile/layim.css","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/1.jpg","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/skin/1.jpg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/2.jpg","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/skin/2.jpg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/3.jpg","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/skin/3.jpg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/4.jpg","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/skin/4.jpg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/5.jpg","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/skin/5.jpg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/logo.jpg","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/skin/logo.jpg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/voice/default.mp3","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/voice/default.mp3","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/chatlog.html","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/html/chatlog.html","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/find.html","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/html/find.html","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/getmsg.json","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/html/getmsg.json","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/msgbox.html","path":"vendors/layui-src@2.5.5/dist/css/modules/layim/html/msgbox.html","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/kratos-rebirth/source/music/laxh.lrc","path":"music/laxh.lrc","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/music/laxh.mp3","path":"music/laxh.mp3","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/404.webp","path":"images/404.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/about.webp","path":"images/about.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/alipay.webp","path":"images/alipay.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/avatar.webp","path":"images/avatar.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/banner.webp","path":"images/banner.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/banner_dark.webp","path":"images/banner_dark.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/bg.webp","path":"images/bg.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/bg_dark.webp","path":"images/bg_dark.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/comment.webp","path":"images/comment.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/comment_dark.webp","path":"images/comment_dark.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/failure.ico","path":"images/failure.ico","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/psr.webp","path":"images/psr.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/wechat.webp","path":"images/wechat.webp","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/alipay_qr.jpg","path":"images/alipay_qr.jpg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/wechat_qr.jpg","path":"images/wechat_qr.jpg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"source/images/image-20230321111922096.png","path":"images/image-20230321111922096.png","modified":0,"renderable":0},{"_id":"source/images/image-20230321113354768.png","path":"images/image-20230321113354768.png","modified":0,"renderable":0},{"_id":"source/images/image-20230321113702555.png","path":"images/image-20230321113702555.png","modified":0,"renderable":0},{"_id":"source/images/image-20230321115405188.png","path":"images/image-20230321115405188.png","modified":0,"renderable":0},{"_id":"source/images/image-20230321115534751.png","path":"images/image-20230321115534751.png","modified":0,"renderable":0},{"_id":"source/images/image-20230321120507192.png","path":"images/image-20230321120507192.png","modified":0,"renderable":0},{"_id":"source/images/image-20230321120517471.png","path":"images/image-20230321120517471.png","modified":0,"renderable":0},{"_id":"source/images/image-20230321123326293.png","path":"images/image-20230321123326293.png","modified":0,"renderable":0},{"_id":"source/images/image-20230321142649225.png","path":"images/image-20230321142649225.png","modified":0,"renderable":0},{"_id":"source/images/image-20230321142727515.png","path":"images/image-20230321142727515.png","modified":0,"renderable":0},{"_id":"source/images/image-20230321142801734.png","path":"images/image-20230321142801734.png","modified":0,"renderable":0},{"_id":"source/images/image-20230322112531068.png","path":"images/image-20230322112531068.png","modified":0,"renderable":0},{"_id":"source/images/image-20230322113633072.png","path":"images/image-20230322113633072.png","modified":0,"renderable":0},{"_id":"source/images/image-20230322113719542.png","path":"images/image-20230322113719542.png","modified":0,"renderable":0},{"_id":"source/images/image-20230322114641394.png","path":"images/image-20230322114641394.png","modified":0,"renderable":0},{"_id":"source/images/image-20230330145149288.png","path":"images/image-20230330145149288.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403115710176.png","path":"images/image-20230403115710176.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403114938818.png","path":"images/image-20230403114938818.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403120334073.png","path":"images/image-20230403120334073.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403120827889.png","path":"images/image-20230403120827889.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403120853420.png","path":"images/image-20230403120853420.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403121020222.png","path":"images/image-20230403121020222.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403121533718.png","path":"images/image-20230403121533718.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403122133776.png","path":"images/image-20230403122133776.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403121603281.png","path":"images/image-20230403121603281.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403122249556.png","path":"images/image-20230403122249556.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403122304271.png","path":"images/image-20230403122304271.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403122315091.png","path":"images/image-20230403122315091.png","modified":0,"renderable":0},{"_id":"source/images/image-20230403122348895.png","path":"images/image-20230403122348895.png","modified":0,"renderable":0},{"_id":"source/images/image-20230404122021297.png","path":"images/image-20230404122021297.png","modified":0,"renderable":0},{"_id":"source/images/image-20230404120022600.png","path":"images/image-20230404120022600.png","modified":0,"renderable":0},{"_id":"source/images/image-20230404162215643.png","path":"images/image-20230404162215643.png","modified":0,"renderable":0},{"_id":"source/images/image-20230404162238094.png","path":"images/image-20230404162238094.png","modified":0,"renderable":0},{"_id":"source/images/image-20230404164215600.png","path":"images/image-20230404164215600.png","modified":0,"renderable":0},{"_id":"source/images/image-20230409164532726.png","path":"images/image-20230409164532726.png","modified":0,"renderable":0},{"_id":"source/images/image-20230409164610512.png","path":"images/image-20230409164610512.png","modified":0,"renderable":0},{"_id":"source/images/image-20230409164759496.png","path":"images/image-20230409164759496.png","modified":0,"renderable":0},{"_id":"source/images/image-20230409165247195.png","path":"images/image-20230409165247195.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410190100608.png","path":"images/image-20230410190100608.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410190226854.png","path":"images/image-20230410190226854.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410190355527.png","path":"images/image-20230410190355527.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410191407587.png","path":"images/image-20230410191407587.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410191419500.png","path":"images/image-20230410191419500.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410191532067.png","path":"images/image-20230410191532067.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410191913256.png","path":"images/image-20230410191913256.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410192047065.png","path":"images/image-20230410192047065.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410192127714.png","path":"images/image-20230410192127714.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410192107578.png","path":"images/image-20230410192107578.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410192145432.png","path":"images/image-20230410192145432.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410192201415.png","path":"images/image-20230410192201415.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410192246017.png","path":"images/image-20230410192246017.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410192219884.png","path":"images/image-20230410192219884.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410192301872.png","path":"images/image-20230410192301872.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410192315900.png","path":"images/image-20230410192315900.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410192742420.png","path":"images/image-20230410192742420.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410192335421.png","path":"images/image-20230410192335421.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410193749845.png","path":"images/image-20230410193749845.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410193810333.png","path":"images/image-20230410193810333.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410193945910.png","path":"images/image-20230410193945910.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410195212944.png","path":"images/image-20230410195212944.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410194339460.png","path":"images/image-20230410194339460.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410195242067.png","path":"images/image-20230410195242067.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410193935550.png","path":"images/image-20230410193935550.png","modified":0,"renderable":0},{"_id":"source/images/image-20230410202054882.png","path":"images/image-20230410202054882.png","modified":0,"renderable":0},{"_id":"themes/kratos-rebirth/source/images/laxh.jpeg","path":"images/laxh.jpeg","modified":0,"renderable":1},{"_id":"source/images/image-20230413175026367.png","path":"images/image-20230413175026367.png","modified":0,"renderable":0},{"_id":"source/images/image-20230414155204499.png","path":"images/image-20230414155204499.png","modified":0,"renderable":0},{"_id":"source/images/image-20230414155237311.png","path":"images/image-20230414155237311.png","modified":0,"renderable":0},{"_id":"source/images/image-20230414155338981.png","path":"images/image-20230414155338981.png","modified":0,"renderable":0},{"_id":"themes/kratos-rebirth/source/images/banner.png","path":"images/banner.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/banner_dark.png","path":"images/banner_dark.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/banner_dark1.jpeg","path":"images/banner_dark1.jpeg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/bg.png","path":"images/bg.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/bg_dark.png","path":"images/bg_dark.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/banner_web.png","path":"images/banner_web.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/banner_web_dark.png","path":"images/banner_web_dark.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/bg_web.png","path":"images/bg_web.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/bg_web_dark.png","path":"images/bg_web_dark.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/footer.png","path":"images/footer.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/bg_web1.png","path":"images/bg_web1.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/bg_web_dark1.png","path":"images/bg_web_dark1.png","modified":0,"renderable":1},{"_id":"source/images/image-20230423175103467.png","path":"images/image-20230423175103467.png","modified":0,"renderable":0},{"_id":"source/images/image-20230423175106275.png","path":"images/image-20230423175106275.png","modified":0,"renderable":0},{"_id":"source/images/image-20230423180758894.png","path":"images/image-20230423180758894.png","modified":0,"renderable":0},{"_id":"source/images/image-20230423182136592.png","path":"images/image-20230423182136592.png","modified":0,"renderable":0},{"_id":"source/images/image-20230423181147356.png","path":"images/image-20230423181147356.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424102129976.png","path":"images/image-20230424102129976.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424102243529.png","path":"images/image-20230424102243529.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424102616997.png","path":"images/image-20230424102616997.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424112750753.png","path":"images/image-20230424112750753.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424112851699.png","path":"images/image-20230424112851699.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424113107952.png","path":"images/image-20230424113107952.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424113120666.png","path":"images/image-20230424113120666.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424113700430.png","path":"images/image-20230424113700430.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424114321114.png","path":"images/image-20230424114321114.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424120625511.png","path":"images/image-20230424120625511.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424120816939.png","path":"images/image-20230424120816939.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424120842336.png","path":"images/image-20230424120842336.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424120926944.png","path":"images/image-20230424120926944.png","modified":0,"renderable":0},{"_id":"source/images/image-20230424121226422.png","path":"images/image-20230424121226422.png","modified":0,"renderable":0},{"_id":"themes/kratos-rebirth/source/images/fandom.png","path":"images/fandom.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/PDF.jpeg","path":"images/PDF.jpeg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/aigei.png","path":"images/aigei.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/akinator.jpeg","path":"images/akinator.jpeg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/chatGpt.png","path":"images/chatGpt.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/lineofaction.png","path":"images/lineofaction.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/midjourney.jpeg","path":"images/midjourney.jpeg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/petalica.png","path":"images/petalica.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/sms-activate.jpeg","path":"images/sms-activate.jpeg","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/wuliquankai.png","path":"images/wuliquankai.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/colab.png","path":"images/colab.png","modified":0,"renderable":1},{"_id":"themes/kratos-rebirth/source/images/chinaz.jpeg","path":"images/chinaz.jpeg","modified":0,"renderable":1},{"_id":"source/images/image-20230426113023587.png","path":"images/image-20230426113023587.png","modified":0,"renderable":0},{"_id":"source/images/image-20230426113405622.png","path":"images/image-20230426113405622.png","modified":0,"renderable":0},{"_id":"source/images/image-20230426113555877.png","path":"images/image-20230426113555877.png","modified":0,"renderable":0},{"_id":"source/images/image-20230426113907920.png","path":"images/image-20230426113907920.png","modified":0,"renderable":0},{"_id":"source/images/image-20230426114118275.png","path":"images/image-20230426114118275.png","modified":0,"renderable":0},{"_id":"source/images/image-20230426114437094.png","path":"images/image-20230426114437094.png","modified":0,"renderable":0},{"_id":"source/images/image-20230426114538654.png","path":"images/image-20230426114538654.png","modified":0,"renderable":0},{"_id":"source/images/image-20230426114709495.png","path":"images/image-20230426114709495.png","modified":0,"renderable":0},{"_id":"source/images/image-20230506135300582.png","path":"images/image-20230506135300582.png","modified":0,"renderable":0},{"_id":"source/images/image-20230506135322713.png","path":"images/image-20230506135322713.png","modified":0,"renderable":0},{"_id":"source/images/image-20230506135410013.png","path":"images/image-20230506135410013.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"87dcffd2763a57d16d1b93b83a2661ec1f61245f","modified":1674594018023},{"_id":"node_modules/hexo-theme-kratos-rebirth/Kratos-Rebirth-Manual.md","hash":"3a0b1cbfe8b25b3a4c6c29a28543ba95666babfb","modified":1674586168939},{"_id":"node_modules/hexo-theme-kratos-rebirth/ReadMe.md","hash":"226fe826a596132a9a288f19f7df5f6d093de1ac","modified":1674586168939},{"_id":"node_modules/hexo-theme-kratos-rebirth/package.json","hash":"64db7fd5e6650e45ebc00894b20e21795798dc44","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/gulpfile.js","hash":"ee5ebfd16459eda0bf9f82f5760b49cdf8cbb41c","modified":1674586168844},{"_id":"node_modules/hexo-theme-kratos-rebirth/_config.yml","hash":"685e7ba9966f66d37757bbbf3d83147e341652b5","modified":1674586168958},{"_id":"node_modules/hexo-theme-kratos-rebirth/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1674586168807},{"_id":"node_modules/hexo-theme-kratos-rebirth/scripts/additional-pages.js","hash":"b99cdd8fa23d0519403abefc595f031ebaace59a","modified":1674586168828},{"_id":"node_modules/hexo-theme-kratos-rebirth/scripts/cdn-optimize-helpers.js","hash":"b0865dc553d3b757757b5a0471d5bcef6fd5be41","modified":1674586168829},{"_id":"node_modules/hexo-theme-kratos-rebirth/scripts/check-update.js","hash":"fcadb1499a85d427d5b80fc6c64eab61ca999925","modified":1674586168829},{"_id":"node_modules/hexo-theme-kratos-rebirth/scripts/friends.js","hash":"4c7dfca9d47c508934d7d27a56f8037a761da7ff","modified":1674586168831},{"_id":"node_modules/hexo-theme-kratos-rebirth/scripts/genconfig.js","hash":"41e8da155a1cc418e05f3f9312568f0b3b9bd128","modified":1674586168831},{"_id":"node_modules/hexo-theme-kratos-rebirth/scripts/search.js","hash":"fb892991e53a272db74ec5f3d3ab26e728c8ee06","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/scripts/tag-widgets.js","hash":"78d14c05c6205762f73ad3df420d9c6e78b9cd4e","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/.demo/_config.kratos-rebirth.yml","hash":"ca33ed423a7123c50c75dd61d24392caa3c16615","modified":1674586168958},{"_id":"node_modules/hexo-theme-kratos-rebirth/.github/dependabot.yml","hash":"89c16d0b45677ff20b86b655e3bfc7f1e675b2d4","modified":1674586168959},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/archive.ejs","hash":"6dec1243c2d76a415d2fa5766ab184652c90c18c","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/category.ejs","hash":"5677b70953e6a33038a0e03eaa06e45c10ec7d73","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/index.ejs","hash":"ade7fe1a660c35e0dae8ed412f5ed133341ea76d","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/layout.ejs","hash":"ea86e5b8f64957145ff52f5e2660e62ff92e0b05","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/page.ejs","hash":"4593e0a73b36b34dce40e3fbfe4c8056a7c9eb8f","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/post.ejs","hash":"a18b7536c76087c83c3e518077b7ad935fc93f6e","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/languages/zh-CN.yml","hash":"f253d94bc5171ef6e00d0511c3f4db26d3441781","modified":1674586168959},{"_id":"node_modules/hexo-theme-kratos-rebirth/.github/ISSUE_TEMPLATE/feature_request.md","hash":"40e561f1af41b0b88d146ec1ea62d7eabda3e890","modified":1674586168939},{"_id":"node_modules/hexo-theme-kratos-rebirth/.github/workflows/build-test.yml","hash":"47e843a2c76a84720e059665cce259a8d40453f0","modified":1674586168958},{"_id":"node_modules/hexo-theme-kratos-rebirth/scripts/lib/cdn.js","hash":"4d408c31df9605ac9d45a3cea53fcd1ab70178df","modified":1674586168829},{"_id":"node_modules/hexo-theme-kratos-rebirth/.github/workflows/auto-release.yml","hash":"bb8f12db86ed191d831ef4036afeb047a41dce85","modified":1674586168958},{"_id":"node_modules/hexo-theme-kratos-rebirth/.github/workflows/build-demo.yml","hash":"a9db5770d0840e4d3072c1de70505be07339b7f5","modified":1674586168958},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/404.webp","hash":"d2e2bd5cc2627a2b04d5e449a67949a2605ae13e","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/alipay.webp","hash":"01fa6151d2122f0470ee6f38ac8e4ced6c81912e","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/about.webp","hash":"ca0fb739ab4426e7895742c1d8d52df1e14468e8","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/.github/ISSUE_TEMPLATE/bug_report.md","hash":"410f2b7b788f86585451c7f351245e4d51a87f91","modified":1674586168939},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/bg.webp","hash":"f232b442b64eaa90f45a48ff04d8e7d352caf212","modified":1674586168955},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/banner.webp","hash":"7c5093243bfd581a633ba8a905e2d379cfa78c00","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/banner_dark.webp","hash":"5589986444825e2b75c369d419ff736d3a396bac","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1674586168827},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/tag.ejs","hash":"5677b70953e6a33038a0e03eaa06e45c10ec7d73","modified":1674586168820},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/psr.webp","hash":"bf457bf84bca767bac1bd2b960d91c53ba3fbdee","modified":1674586168955},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/avatar.webp","hash":"3ed6e4e1e08e9c2700aa149d1f9e068fb02947cd","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/comment.webp","hash":"7756b5a69f2a85a2d1c4251e3055bfa0218aa385","modified":1674586168955},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/bg_dark.webp","hash":"f232b442b64eaa90f45a48ff04d8e7d352caf212","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/comment_dark.webp","hash":"7756b5a69f2a85a2d1c4251e3055bfa0218aa385","modified":1674586168955},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/js/candy.min.js","hash":"598f7f5c4efb85c6f7c55183418b070a441b56ee","modified":1674586168829},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/wechat.webp","hash":"06f3997bf554768c04cb588198c7b3d68c21b8e9","modified":1674586168957},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/js/local-search.min.js","hash":"8ed9ec22fa7a835c9f5f6e96b8368ae912e9afd0","modified":1674586168848},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/js/kratosr.min.js","hash":"bc5e952117fbd4e4dd6604ea6909b06c8f273e73","modified":1674586168846},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/js/kr-dark.min.js","hash":"8ff673018b5688e47f89fe461e30bf30abb81c6e","modified":1674586168846},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/js/snow.min.js","hash":"6cc50c7bb171b57b9149a3aa9b9e939ab36fd847","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/js/pjax.min.js","hash":"84b037cb01dcb34ebc0a1de1aa2f773fe1c51e7a","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/css/kr-color-dark.min.css","hash":"a3a06c23d5ac02170c64580e63b29b438fa82c0f","modified":1674586168813},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/css/kratosr.min.css","hash":"81dbd0ef92e013492439da9f539384f8fff43bc2","modified":1674586168813},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_pages/categories.ejs","hash":"39a1c79de03dbc8295c9da59cebec15ae30dd632","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_pages/search-page.ejs","hash":"3dc81379363c8ad0bedf8489a3e6200841ff2c79","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/css/prismjs.min.css","hash":"6f2def0d76387c908324f38f845516c7f2d559d7","modified":1674586168815},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_pages/404.ejs","hash":"b29697cfdbbf641c8efdff7d0273a4883e678f42","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_pages/tags.ejs","hash":"70b9ce41a0e149e60788ac6d16864fea5b3311e3","modified":1674586168820},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_partial/after-footer.ejs","hash":"715a0446c9aa0264d0e627e864ef59d884d48f19","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_partial/footer.ejs","hash":"109b4228622da923afd1be39b2ff04d43e5d11f5","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_partial/head.ejs","hash":"cc725b555f7afbf171394cc1cc5fd0ac6144f13d","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_partial/header.ejs","hash":"5a0c9e8d4e20bc0cc3cd397843ab4315ed9845c5","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_comments/disqus.ejs","hash":"38a80a494e861be233b145675696ad9699aeeba0","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_partial/sidebar.ejs","hash":"46b53d4131e1fce463054b5c4399cbd6ddd2f0fd","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_comments/disqusjs.ejs","hash":"703b125ce33489c9be62a2c6ccfc913af9d0ca05","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_comments/twikoo.ejs","hash":"7d0ac9d25737c75ab1236dd54c22d0a8c61f288e","modified":1674586168820},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_comments/livere.ejs","hash":"21dc5bc91d73b54b06ac36669eefd5258b07e83e","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_comments/gitalk.ejs","hash":"fc320153c67decfba8aea97aa8488a686c757e51","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_widget/about.ejs","hash":"25cde6dff270c41ff9bb37242e3e6aa6b85761a4","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_widget/category.ejs","hash":"1f24ccfd175fabc83c7ea81f3412e78e65b8f3ab","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_comments/waline.ejs","hash":"58223eb81e7a43c565f05c6364dbafb500c9341a","modified":1674586168820},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_widget/tagcloud.ejs","hash":"223730bfe007f26d5279cb66f1da9222c7d64c62","modified":1674586168820},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_tools/player.ejs","hash":"af36d7c6cb593af243f5342028bb337364e9afaf","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_widget/posts.ejs","hash":"43461f2e3cb32b9092dcd9a977098ff8be6a3f68","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_widget/toc.ejs","hash":"a2c8f900369ada4dfa9793ac496a5eafc38502a9","modified":1674586168820},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_plugins/mermaid.ejs","hash":"827cdcbfa44205a2a4114b1bdb0644bedc3efade","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_tools/share.ejs","hash":"3f7369fc6344965f12315e5214aa9eee3fe8b5f1","modified":1674586168819},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_1.webp","hash":"a818f050112ceb75e3a60dc1673a10783b254595","modified":1674586168955},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_10.webp","hash":"4983eeca7886bbe7c09b0c79f4774302fdfa1315","modified":1674586168955},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_13.webp","hash":"c4c9050637f4ffa3cb7d782f59dadc993ac3a6de","modified":1674586168955},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_11.webp","hash":"08d8d91e2b01768842abb47cd48a0f07d22d070c","modified":1674586168955},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_14.webp","hash":"f9300e2b45c1f061ec8cc21527142dafc558a9e6","modified":1674586168956},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_16.webp","hash":"61714ccffd55d6fa74cf94bcdd5a464da04ce891","modified":1674586168956},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_15.webp","hash":"8629f2a7d3b0192549f809e6b7479159af0222da","modified":1674586168956},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_comments/valine.ejs","hash":"209c463bc047bac75b9ebe45e8cf87f6255a6368","modified":1674586168820},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_12.webp","hash":"b6b8e1281f9146925e45e937cb4d5b28bcabe957","modified":1674586168955},{"_id":"node_modules/hexo-theme-kratos-rebirth/layout/_comments/gitment.ejs","hash":"7366111beed060f528e6ab6a1e907444d61519f5","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_17.webp","hash":"b5a036ec234a23c820a89d1c640b1f2e8dd3dfa4","modified":1674586168956},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_19.webp","hash":"15e0cd0cbe5c7166915a4b68680681beccc2afef","modified":1674586168956},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_2.webp","hash":"1bcf7461c2b9408b8a893013fa425eb46701faf6","modified":1674586168956},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_20.webp","hash":"4ab961d94a0d3abbefc7f6d9188a889ec2225e7a","modified":1674586168956},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_3.webp","hash":"3faffd2575e0751526249c5c56a2a5045a21363b","modified":1674586168957},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_4.webp","hash":"1d0f136590632e7ba31f5510d24891ba443f1f33","modified":1674586168957},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_5.webp","hash":"ba384ada1c2a17b67036addd68ffa1f604ab5a41","modified":1674586168957},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_6.webp","hash":"c2d8b68971dacd111566526f64d94932f5c6f076","modified":1674586168957},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_7.webp","hash":"4be8fe8ea1b3563b78924062e3aa013cd5c4e82b","modified":1674586168957},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_8.webp","hash":"9e6d74786d8459440d68c409eb654364dd279f8a","modified":1674586168957},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/README.md","hash":"3880a58a50ef7514317c4f47b5707d4fd0106c9c","modified":1674586168939},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/nprogress@0.2.0/History.md","hash":"38f837f30c75bed4b8990b36fdf540fe3c63ccd3","modified":1674586168939},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/nprogress@0.2.0/License.md","hash":"bc3e61d337e51c177534c644c20f190148d7905e","modified":1674586168939},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_9.webp","hash":"bca69e7d56982b43c52e9ffa17c8d5bb268834d8","modified":1674586168957},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/nprogress@0.2.0/Notes.md","hash":"e7b5de6240b6918cbdccc708a06e4b20555966c1","modified":1674586168939},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/package.json","hash":"1f2b1a268fb702727f33f348e043ffd7d0b86ec5","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/nprogress@0.2.0/bower.json","hash":"55980d38b6f24ec91f44579bcd38c667986368c5","modified":1674586168865},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/nprogress@0.2.0/nprogress.css","hash":"17ca817a091da9dcf5fe0f2f1e1f2eea60a33149","modified":1674586168815},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/nprogress@0.2.0/component.json","hash":"ecbc4792d8583f73050dd4d918fea8073a7ded60","modified":1674586168865},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/qrcode_js@1.0.0/README.md","hash":"1a8e6fb255a22f8233dff9815ab8790bada84b3d","modified":1674586168940},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/nprogress@0.2.0/package.json","hash":"574122118ffc8d4705e58806a13612553bc41588","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/images/thumb/thumb_18.webp","hash":"5bc78b9d6cb0a0cf6daa3a35b93e575777a49ddd","modified":1674586168956},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/qrcode_js@1.0.0/bower.json","hash":"99449e46555b0ba514eca8246f1621048db97aa5","modified":1674586168865},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/qrcode_js@1.0.0/LICENSE","hash":"7041717dd3a7d35354f94321b666e11977c7610e","modified":1674586168808},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/qrcode_js@1.0.0/index-svg.html","hash":"3c856315a2467efcd00b278c570fbc7897021d98","modified":1674586168827},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/qrcode_js@1.0.0/index.html","hash":"7314a123d8a9acbd51321d4f538ba4b36b0673b5","modified":1674586168827},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/qrcode_js@1.0.0/package.json","hash":"b77af52b956e89bd76c6bf75cc33f0eca47c0bf4","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/nprogress@0.2.0/nprogress.js","hash":"a7e1146d2021c42e68b599dc8bcc69d44fc31df3","modified":1674586168861},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/qrcode_js@1.0.0/index.svg","hash":"15730a03273bba608180e8b182453ae393b3c3e0","modified":1674586168952},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/css/highlight/light.min.css","hash":"0c2ee23e4f7a443f90b65905e72f1fca3a89137d","modified":1674586168815},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/qrcode_js@1.0.0/qrcode.js","hash":"8fa3048613aab15c7f7edc3ac74a84e90375126d","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/css/highlight/night-blue.min.css","hash":"5f298f7125dcf08fed56d393a65b027c447a4c67","modified":1674586168815},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/qrcode_js@1.0.0/qrcode.min.js","hash":"2d06c1f823f34c19981c6ae0b0eb0f5861c5e14b","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/nprogress@0.2.0/Readme.md","hash":"63959b38ef0747eadd6f731b48d7aded7edc227b","modified":1674586168939},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/css/highlight/night-bright.min.css","hash":"a2bbbb95cb63124d0f5bc9c351bcf31455b8ecf8","modified":1674586168815},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1674586168810},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1674586168828},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1674586168812},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/css/highlight/night-eighties.min.css","hash":"eafd77c47ada4f8120d683a66cf486426b260205","modified":1674586168815},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1674586168867},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/css/highlight/night.min.css","hash":"379e2f99b3b92a710a241f5770ca43237a74238e","modified":1674586168815},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1674586168869},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1674586168812},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/animated.less","hash":"421f2c4e10191f148c13b8a34e5ff3f484d4c393","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/bordered-pulled.less","hash":"a2c292137b17406183ad0fdbf4880fd648b9a5ca","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/core.less","hash":"1a37352286619b789d151a06eb4b7551e4c1aaa2","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/fixed-width.less","hash":"ec0c24b97184dab86177660f486b8d08cd636c42","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/font-awesome.less","hash":"9ffe7422dc235450a21f019f410ed359ed151f4b","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/icons.less","hash":"0285a999eb1adad868366678c2d9365b77186a45","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/larger.less","hash":"e7119e82dc50540dbc3472bba7d74282815a7ecc","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/list.less","hash":"f53bc20884a1410d950b4a36a330c5181a8b55ab","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/mixins.less","hash":"3c5b36b0069372b525ed8bbbcf6b3d4d2bed4e78","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/path.less","hash":"1afb4a849059631f76ed2a519d7fb1bd0af14802","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/rotated-flipped.less","hash":"95de5de9009714692430b04f9cd4388be8fba8f3","modified":1674586168867},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/stacked.less","hash":"f044077bc8be1a989c245254e81eb084d52d29a7","modified":1674586168867},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/screen-reader.less","hash":"71139132f170ebe7712836210f4d2c4905151899","modified":1674586168867},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/disqusjs@1.3.0/dist/disqus.js","hash":"b79249dfb619836cfd1251cb3c3d5c603bc55e61","modified":1674586168830},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/disqusjs@1.3.0/dist/disqusjs.css","hash":"0d8ae5946142b17f9a75683c7649cf73d6fdbe17","modified":1674586168812},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/less/variables.less","hash":"8a5c800747705df16117cc598c1b9f512e873bfe","modified":1674586168867},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1674586168813},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.css.map","hash":"9dda04c29af8da6ac13a507beefea6fce4d7032e","modified":1674586168872},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_animated.scss","hash":"8daf189b2f8a404495b8424b6fd1ba630dd1c2dc","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_bordered-pulled.scss","hash":"164b6a0a2b307cd293f4a914ab0fcdf643950374","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_fixed-width.scss","hash":"224417ca266c657849afb2bbcb6dc455894ff387","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_icons.scss","hash":"830e0183337d16c07b1c63838f7593a33ee87b15","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_larger.scss","hash":"940e1c5ebc690283bfaee92560cf15fabedbf6a9","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_list.scss","hash":"4b53ee01513df8b9ce76442b2d8f1851613a435c","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_core.scss","hash":"55a14a34267edc401b82e5ee41d8bd84fbb5da3f","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_mixins.scss","hash":"4f3881034a4c11cae8cc915f288477b498a357a2","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_rotated-flipped.scss","hash":"ca08a0af3da63c2f2a7d3c27a8747637744cc785","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_path.scss","hash":"080158aeb1bf6df59ec98b2bbed44da61d9c9ca3","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_screen-reader.scss","hash":"2d8563c488f68e75a28d540dd89301ee4ee08c97","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_stacked.scss","hash":"cf6752ee609af36eb293a7197c88d31ecacbbc74","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_variables.scss","hash":"0d6d70535104b42e60d7f44ae6ccf9de023a7b8b","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/font-awesome.scss","hash":"dd83648ea5bc832f87c3c1bf956c54dec065a9bd","modified":1674586168949},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/constants.js","hash":"08f6c79bf52239cbdd457bc0a94df395f578ee07","modified":1674586168830},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/layui.js","hash":"be7bcdcb4eb932f3e700e63584661f19b4139739","modified":1674586168848},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/constants.js.map","hash":"6b7b473ef4bba09ea572b3baaac73c122372439e","modified":1674586168869},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.js","hash":"df37d9fe8c1a0a1fb2883e5bcb93f880bb2bbf2e","modified":1674586168844},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/icons.js","hash":"d303f91799600aa8c7f5f5bb18c652fafac4359d","modified":1674586168844},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.js.map","hash":"2cb4d20d09b110268e0ea8c199f72501aa2d66e8","modified":1674586168884},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/utils.js","hash":"df76ada59b1cf94a7ea1d44c56a6624d248b4228","modified":1674586168864},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/icons.js.map","hash":"5604e4382d787a9a1976359d92bb9827f11c2c2b","modified":1674586168884},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/utils.js.map","hash":"6f99a8c2269c938d4422f3a244a8086f89800890","modified":1674586168918},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/meting@2.0.1/dist/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1674586168861},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/nprogress@0.2.0/test/component.html","hash":"5965cc7f9bb812ada1ffcd6abec39124c20a4ef8","modified":1674586168827},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/nprogress@0.2.0/test/test.js","hash":"5c795debb89ec7d35ba1ec1e8ccbab0a7a353d78","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs.LICENSE.txt","hash":"38165332beeccd3551309f85addb2354f2d18676","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.min.js.LICENSE.txt","hash":"38165332beeccd3551309f85addb2354f2d18676","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.all.min.js.LICENSE.txt","hash":"c00fe261d987618ec25243062c089a6982d4480c","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.min.js.LICENSE.txt","hash":"c00fe261d987618ec25243062c089a6982d4480c","modified":1674586168954},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/valine@1.4.18/dist/detect.min.js","hash":"596d6dcbe379f78a2ec655188d7bfa7182848e03","modified":1674586168830},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/valine@1.4.18/dist/escape.min.js","hash":"4f91bb0e3a71ce6421b303c6c32bb3fb3e751192","modified":1674586168830},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.cjs","hash":"2da315666c52a2a0205da342f3fc7808834d0231","modified":1674586168808},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.css","hash":"e43435fb9eaa918f5b8e35c9e110124b8bd13751","modified":1674586168813},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.cjs.map","hash":"555cf9adc857430a799507a250f6ae8cf4454268","modified":1674586168867},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1674586168813},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.d.ts","hash":"c1cafa6064ccb6851580d9f11600124c060db78b","modified":1674586168952},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.d.cts","hash":"c1cafa6064ccb6851580d9f11600124c060db78b","modified":1674586168816},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.d.mts","hash":"c1cafa6064ccb6851580d9f11600124c060db78b","modified":1674586168945},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.mjs","hash":"208a0b855cf31a54c2130f0aaa0bc7fb3ff766a4","modified":1674586168940},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.mjs.map","hash":"4a590871076e07d59664a0fda40d037a6d2f2344","modified":1674586168867},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.cjs","hash":"48777cf6661b69f54cebc970896a4b7528add2ad","modified":1674586168809},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.d.mts","hash":"376c612b7771eec314f855e69e82523d4f7f922f","modified":1674586168945},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.d.ts","hash":"376c612b7771eec314f855e69e82523d4f7f922f","modified":1674586168952},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.js","hash":"a3e6d8ccf4e6ba2251487e83b79b580153d2b515","modified":1674586168830},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.cjs.map","hash":"1d162b21f3b9b513036b53ed45950f7c35e6e0f5","modified":1674586168868},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.d.cts","hash":"376c612b7771eec314f855e69e82523d4f7f922f","modified":1674586168817},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.mjs","hash":"d6b7d79d2b213888f829e7b44ff312aae3cd2378","modified":1674586168940},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.mjs.map","hash":"efdc8c853f806168f32b4433a19bda6f62c3f5bf","modified":1674586168868},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.js.map","hash":"ab28febbf60a2979a8baca97c958a05c2555fbd4","modified":1674586168868},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/legacy.umd.d.ts","hash":"b957f75fde95eb046a31ce075d6e311a2d7450d0","modified":1674586168952},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.cjs","hash":"ff6d9246e7b256eae10aa8c0d35f3b201b1ac8b7","modified":1674586168809},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/component.mjs","hash":"395fabdd03cb56bc0757b14a06a70470dbe0259e","modified":1674586168940},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.d.ts","hash":"4b3fad71d77ead2ad05e4dfe9e0906a4e025a233","modified":1674586168952},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.js","hash":"ceea6a5a7b83c99ea92cf338ed05f5803ce9a943","modified":1674586168861},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.d.cts","hash":"4b3fad71d77ead2ad05e4dfe9e0906a4e025a233","modified":1674586168817},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.d.mts","hash":"4b3fad71d77ead2ad05e4dfe9e0906a4e025a233","modified":1674586168945},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.cjs.map","hash":"d29ca67cfab54c0ff984438d47060aee70e6fa15","modified":1674586168912},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.js.map","hash":"dfa4f18a6ed4dec6232ae770ac66d30158e45b27","modified":1674586168914},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.mjs.map","hash":"67ae874c2c6fdcbe3ba5ad7f3895a52b518f4924","modified":1674586168914},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.mjs","hash":"4dc75845f6c827a0c1c8d6a92e7a0602bd03f2a1","modified":1674586168941},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.d.mts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1674586168945},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline-meta.css.map","hash":"f3796986f06b46a16a17995b9642922c3d029764","modified":1674586168937},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.d.cts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1674586168817},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline-meta.css","hash":"4c5e417fb615505112fa87eb466eda52e8a90ec0","modified":1674586168815},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.css.map","hash":"14c2e889034c99033dbac74a4bdbba9e53801a3d","modified":1674586168938},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.d.ts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1674586168952},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.mjs","hash":"0c7689080af2d07976a56ea09ec75f8a360e9663","modified":1674586168943},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.cjs","hash":"1fad1bb7c23bd023d34bafd94c7f3fb937222766","modified":1674586168809},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.css","hash":"6722bd03953e1f8c48c3e01b5776a68e5f901928","modified":1674586168816},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.d.cts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1674586168818},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.min.css","hash":"fc6b4268fbd57ad95d2b41a1d4d6866f222fbdb2","modified":1674586168811},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.d.mts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1674586168948},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.css","hash":"a22e254bf086bf442a09344afe0e6cf188f5a1d5","modified":1674586168810},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.css.map","hash":"ccb7ff3435bb5cff1fe9643fc0ac8cdde2dcd177","modified":1674586168868},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1674586168821},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1674586168958},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/js/npm.js","hash":"e2b7590d6ec1fdac66b01fdf66ae0879f53b1262","modified":1674586168861},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1674586168957},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/js/bootstrap.min.js","hash":"27947c0c0fa837da9bdfdfc36f649c25f54bd1c0","modified":1674586168829},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1674586168953},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.eot","hash":"de1bec30d0ef87af6ab83ab6a269c3c59bc83124","modified":1674586168821},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.woff2","hash":"c9b04ae5b10f88f8bc7c48840164f468ee7b10b0","modified":1674586168958},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.woff","hash":"6133b92b4e5c3866675b2656ceae14606fa01eb0","modified":1674586168958},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.ttf","hash":"5d2b8777c623bb6e96577cee675489d0299ffa1f","modified":1674586168953},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/layui.mobile.css","hash":"f15da6c149002dd57ea25b8346534c8161c86e3c","modified":1674586168815},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/theme/default.js.map","hash":"0b7317800be0ea17fa142c7bb26f7e8158b54447","modified":1674586168869},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/theme/default.js","hash":"449e59ac4b6b9c66384ee123e1523b5392d684a5","modified":1674586168830},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/code.css","hash":"d7adeb3ada7c3c069aa6d098f953e0a87cfb49ef","modified":1674586168812},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/colorpicker.js","hash":"0234f7a6eba2238583fe4644c0a247dacd67f73b","modified":1674586168829},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/element.js","hash":"1900e7f8bca28958e0a495731c7b3957ea0157c6","modified":1674586168830},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/code.js","hash":"31972b8e26aac0f3b1233ad76c45187a39f4d977","modified":1674586168829},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/flow.js","hash":"b6b4ffe415022a6788767906b837e2894057371b","modified":1674586168831},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/form.js","hash":"6ed3220f5b8cbee7f287ca851dd5d294790281ee","modified":1674586168831},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/layedit.js","hash":"ce8c049188c64ec3cd3d302f8e72d0094d85c462","modified":1674586168847},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/layer.js","hash":"448f76fa3ccfb66a5d86b02cf785f67adf0d8033","modified":1674586168847},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/laytpl.js","hash":"b79191723a99f3e52b56e0afbd183d7338b9cfd4","modified":1674586168847},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/layim.js","hash":"c79d7e577901f2ceab86f01f00cc4c26ff1b038e","modified":1674586168847},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/laypage.js","hash":"fec79457cffad05f261ab518e9d69bbebab548f0","modified":1674586168847},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/laydate.js","hash":"53e871827a2c0bc04ec239e9461a5eb18a309075","modified":1674586168847},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/slider.js","hash":"c4e37a45ff9ae08f90492f894d86e7bec7542b26","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/rate.js","hash":"c3a4b2dad9e829afb8cfae69203eef8ede02191b","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/mobile.js","hash":"0f82e8ce6b6deb51afdc307f488fb24c6dd02dbc","modified":1674586168861},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/transfer.js","hash":"e85e366ff7ca8a49d195e149ec971cb6893b8409","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/table.js","hash":"3a18563a832e11ae642bf6c2a8634a18768f2dbb","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/valine@1.4.18/dist/plugins/emojis/light.json","hash":"3ac2cd3cc07efff7c30ece9857b0527c5fc534d3","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/upload.js","hash":"8eef1ed175c49a7f09f6ce472a7d12138ed8f8ed","modified":1674586168864},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/util.js","hash":"e5e39048df40763ddfff8ec271a6f8070fcb4f4e","modified":1674586168864},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/valine@1.4.18/dist/plugins/emojis/index.js","hash":"452e66f0b900282eab6f98743592793361ccbc65","modified":1674586168844},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/0.gif","hash":"87db440c06299666a8a1f407a6008c5bf6d70817","modified":1674586168821},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/10.gif","hash":"04fe5b26b7e2c980d12ad7157a4ce908c2a74f14","modified":1674586168821},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/11.gif","hash":"170c2e16dd383e26d9d68406eb217dbf191ea14e","modified":1674586168821},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/14.gif","hash":"1af45520e97328498b1a281b6955df5029fc9679","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/1.gif","hash":"e6da9a45ecb8c766a8f7c2362ccf2976d20d17a9","modified":1674586168821},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/tree.js","hash":"5a0c3d9b31a49d8e30e13ef187894d9d07bec69e","modified":1674586168862},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/carousel.js","hash":"ff770a94f4e7edd26f4449909e3d72644de83149","modified":1674586168829},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/15.gif","hash":"a0f216d0aaaeec369109e4b581eacd4e83e5ccb6","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/18.gif","hash":"eeee84a351d6e84d291b0c27e5d70014a3a2748d","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/17.gif","hash":"0b88c01b477d4ca98eb99a665c0ab8738551aeec","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/12.gif","hash":"f5da3f33448e67537e3df8ff63b010247b06841c","modified":1674586168821},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/19.gif","hash":"620b2afa4c36cbfdd09c57807d8a662a5267ea51","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/2.gif","hash":"43b3ca892341431f697e1326aa693c1f252922be","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/20.gif","hash":"7f1cefe1db5c5ee6a9b0eea4d9618cba4b1ac790","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/21.gif","hash":"86d3d5273ffd13841d246698eb648d85e178c4dc","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/22.gif","hash":"dcad257d86505e921618f7d85b60bf6ac2ce319d","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/23.gif","hash":"43295056d287f3da526dfb77915edc3de7551e3e","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/25.gif","hash":"05eeb7a9c42a2cd3876417944143078ce514a8b9","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/27.gif","hash":"814bad015177103646b0216367fa9707361998d3","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/26.gif","hash":"153c5f602881b04bed23d5c7d21a977563075ee2","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/24.gif","hash":"02a263028625496740eea9a50141a4ad98d826a1","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/28.gif","hash":"5830d72546907c962b6c9003fa923798a67b0406","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/16.gif","hash":"54db2506b93b76c58174177245dcc6ef3fd0591f","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/29.gif","hash":"ef1d583626e7447f546995a5b296f34eb3364902","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/34.gif","hash":"e0e500feecd8274490a3bdbf64d2555c16a86261","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/3.gif","hash":"339482962bc4995e16e99ac9de9fc067636fd79e","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/30.gif","hash":"886222551781040325cfd3307fbfba2a1d434a9e","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/13.gif","hash":"0afcb6c47cb53fa4a8467d7d7bf00ec464df2f8e","modified":1674586168822},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/38.gif","hash":"336cb3cbe0fd6cac96cd7cd5ca847c6a01f95b50","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/37.gif","hash":"850b9425421c3072a4898154d41776c02a4d64f7","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/32.gif","hash":"9af01aea73b614e5820a00bcc890840493f9dd70","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/35.gif","hash":"141ae180796db9800770dc9dbb8c9beda6f170e8","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/4.gif","hash":"878c3da67e6aec79c9b8dba6f34368586f4bd097","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/31.gif","hash":"29043ca9d16adf6574d4d7efde1af7a615689931","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/33.gif","hash":"5f02bc5ec8d6220a872f1ca1fa2abaa92d46c361","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/40.gif","hash":"c1b0fef186697125b66c1b4617fa3f9abc4d92eb","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/45.gif","hash":"864dfc9b99f5641f6d5a0081dc14d84872c1b3c6","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/43.gif","hash":"6a16279bea1179b3fd3a45736ecffd983a42272d","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/42.gif","hash":"86f11fca6a9c42d3678ec8af35c077a9790ce777","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/46.gif","hash":"b6c74edb2dc383e0f3e28a0859fa87683fea18e2","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/47.gif","hash":"653e07693ee719cafbce662bb5e410646fe4695a","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/44.gif","hash":"32a9fa973626a3a06646095aeeecb919923f7d16","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/39.gif","hash":"6380eb13d87fc4242d2c6eec57f482ac8ca1ad1f","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/48.gif","hash":"8a8483cd4e3b4b6ac0567eab41c5655ace4b3a81","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/49.gif","hash":"dbf616c5537074ace036340bdddf7948c138c3d7","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/53.gif","hash":"a03f9bbb0202d24d3313286f60ce08b214c013d2","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/5.gif","hash":"cf43cfcf14bbc7f8e430b74a97eb3b260f16b08c","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/50.gif","hash":"94a521d4f9a69c4eb59f5bbe673c8803246bdf5e","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/51.gif","hash":"1ef1419f1ba2fd28e7de676ae5c388074646be53","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/54.gif","hash":"75c738c517217f6b09d51ca3036cf54a01891c4d","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/52.gif","hash":"b516f6bd28cee1fe34144d897b702989782be4ec","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/58.gif","hash":"5c70cba8adb0b42c0da4d922498c265e5d8034d7","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/57.gif","hash":"b797ac8509a8f8bc328b10153e0026449a6139ec","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/55.gif","hash":"c446b5eca2cce1faa7f2147a8b646cc774011de1","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/56.gif","hash":"a71c1ef36706c4ddf7959c68d6c40920db3efe67","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/6.gif","hash":"697d8f2262c535cd61808a564b21fc10ea93f0db","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/59.gif","hash":"c50da42e6f2ec33112261f46c30e5ea5b4a0f889","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/61.gif","hash":"a5db56b975970ebe7048a5c824604d64559392b9","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/60.gif","hash":"bdb24b7ec836fbf6c60c4d7ad97d73f041a154a8","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/64.gif","hash":"38a537e9ac930736e162be81c13c5f708ff948bd","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/62.gif","hash":"a839a263600c034bb11411a7f762dfa917155d10","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/65.gif","hash":"93cab4423539955a25d17c83da6aee277a6402aa","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/63.gif","hash":"28e9ec7a3882fec8c63dd731b06a9bbcc179aff7","modified":1674586168825},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/68.gif","hash":"e779199003a7415a29d50ecf0bbfed04e031f1ab","modified":1674586168826},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/66.gif","hash":"6efe452b1f7a697db1c654130a9c2b872f528654","modified":1674586168826},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/7.gif","hash":"ad4e2ea1864a85f5729a1347c2f8c49fdb3b2def","modified":1674586168826},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/69.gif","hash":"76ac840c5bc5ad44302daa921e7217149576b89e","modified":1674586168826},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/67.gif","hash":"50e2ed8f7773e60ae7d40b612db98554b8277b6e","modified":1674586168826},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/70.gif","hash":"7c2641bef26579d9f90bdc0b740357527dd6e484","modified":1674586168826},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/8.gif","hash":"43baffc48b0fbe649ed920bad713e2ccab9b7344","modified":1674586168826},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/71.gif","hash":"c6323d6d6d262011faed18e758e9e83e7b6812b8","modified":1674586168826},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/9.gif","hash":"8df9fc1055efeffdb72d499c064c05445adaa9be","modified":1674586168826},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/layim.css","hash":"a669bd1141c1df237631738d41f9d0032f4ba0a3","modified":1674586168814},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/laydate/default/laydate.css","hash":"bc0f2f7396ca62c86bc07c2db1b73ca83de3cbdb","modified":1674586168814},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/getmsg.json","hash":"3a83d94b0d8bdb96459e36ea042a72768ea3b348","modified":1674586168866},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/chatlog.html","hash":"64591e08bb5af1d22e976ba3b3175075c7e6cd12","modified":1674586168827},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/find.html","hash":"ed8e6a3564bb52fc7adc8f19c7be34f25fe97222","modified":1674586168827},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/msgbox.html","hash":"521979a7d5b54e6c00dedaa897ae547065da9b2c","modified":1674586168827},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/2.jpg","hash":"ee9e802e6a46b5b698a4d0c36249c0085b192c68","modified":1674586168828},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/mobile/layim.css","hash":"0af51b5e2280a03cefcde3e4cf6662d274cc64c6","modified":1674586168814},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/1.jpg","hash":"f0ba9086fa730c9c80b89f25ff440b740a4b06df","modified":1674586168828},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/3.jpg","hash":"56cd08ca560acd37d377626b1b67cc4947bfe314","modified":1674586168828},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/voice/default.mp3","hash":"18ac4168a61de5cd4a35f814e97365945de94ab0","modified":1674586168944},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/logo.jpg","hash":"3014e3081d5d4164143936fcf61e7080e81faf38","modified":1674586168828},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/5.jpg","hash":"a7c37d5401127afeb1ddd930c9ad9f0e3fab3d31","modified":1674586168828},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/4.jpg","hash":"e018753c3fbd420f8987e53f8a9fc62428ecc18d","modified":1674586168828},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/icon-ext.png","hash":"ddf2a30ad34bac4e9a1250f29c46ac0823d62a12","modified":1674586168948},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/icon.png","hash":"fe47ec617507e9ce5f6ce7ac9b179a3c9231882b","modified":1674586168948},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/layer.css","hash":"ed6fefb1501b3bcd720919f9ce55bb322b5d7ec5","modified":1674586168814},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/41.gif","hash":"c37fb5c43ea499a005d88075a392ed2e09c331df","modified":1674586168824},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-1.gif","hash":"49e54acbf5674212195e581848ec0d490282448f","modified":1674586168826},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-2.gif","hash":"c641615e851254111e268da42d72ae684b3ce967","modified":1674586168827},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-0.gif","hash":"ba81388bbac5bc223f94489b97a95a13f3c78e47","modified":1674586168826},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/36.gif","hash":"55abcc242354c9c1c73538db5d8c7b984de5ca52","modified":1674586168823},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/qrcode_js@1.0.0/jquery.min.js","hash":"a8c8a5caf9765b4ccb90d708045518e219a9af5d","modified":1674586168846},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1674586168958},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1674586168957},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1674586168846},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.slim.min.js","hash":"d1c6704e94efe2d465fc161b6381e127d35acd81","modified":1674586168846},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.slim.min.map","hash":"17a9498757f0b358580ffce586bbc97ae897e8d8","modified":1674586168887},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1674586168844},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1674586168951},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap.min.css","hash":"ed29315e0ffb3f14382431f2724235bf67f44eb3","modified":1674586168811},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/js/bootstrap.js","hash":"542cfd539f0cad650342c8cab8baf1cdbcd5fea6","modified":1674586168829},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/layui.css","hash":"e15327d5c8f4c82909edc97977b277207e01364d","modified":1674586168815},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/jquery.js","hash":"36456de559419079e1096890c7e9a97ae1bbf1be","modified":1674586168845},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1674586168948},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1674586168867},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1674586168953},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1674586168820},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.min.map","hash":"c98b6a5cb27af645c8bfb525fcad3569f3917d5b","modified":1674586168885},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1674586168843},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.Pure.min.js","hash":"227fb19caf17f4330ac24cb952af466eeaae5c43","modified":1674586168865},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1674586168864},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.js","hash":"27f034e5db8c32e268e2959b9a7c1258d36e4510","modified":1674586168844},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/legacy.umd.js","hash":"ced943a8fb34fa3810b910f30733ef7a6d9b563c","modified":1674586168848},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/legacy.umd.js.map","hash":"3f5d438f4128604826d03944bbb158ba19ee2e10","modified":1674586168887},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/component.mjs.map","hash":"a45fac56302df2ee67ff4f074d50a0d84db98868","modified":1674586168869},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.cjs.map","hash":"74229c9c2f85c73ae1082fe49e89bb789845b90b","modified":1674586168915},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.cjs.map","hash":"eff335e17db76d0b1008d534b8e857c90a7a2d03","modified":1674586168938},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.mjs.map","hash":"800a3ce3650dbaeec78783b4c60b4f70d7959b6d","modified":1674586168916},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.cjs","hash":"7e9d8f4500857833f184905bb698eacc9f1d1c64","modified":1674586168810},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.js.map","hash":"94be543349586850de68359ce689e792d012876a","modified":1674586168938},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.mjs","hash":"b709889f62a6df6fd09e423c5999764ea6ef29e8","modified":1674586168944},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap.css","hash":"f2183455571b19311a235bd5aa204e694ade8e94","modified":1674586168811},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.mjs.map","hash":"2e0fdc9d2c9425c645443bc1d2c2f45e41606faa","modified":1674586168938},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.slim.js","hash":"77ec5d7bdb33634ff7d76837e36f0a7240c21e86","modified":1674586168846},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.umd.js","hash":"90de88757741f89ad68c8d3765174437454e2303","modified":1674586168865},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.js","hash":"6919aef34a57cb0a4e1b75149124e17816ae71c5","modified":1674586168865},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/layui.all.js","hash":"4fbff21286558e3cb817072d76ae326db4378c6e","modified":1674586168847},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.browser.js.map","hash":"72dc603fb7be8b623d1a402419b42c36723367bb","modified":1674586168883},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.js","hash":"af32f706407ab08f800c5e697cce92466e735847","modified":1674586168845},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.Pure.min.js.map","hash":"40e15912aae8beff90cbb8ae235cd6fcd36f87dc","modified":1674586168937},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.umd.js.map","hash":"6fe9ac91ca5074bcbc696f887802e8304e31aaea","modified":1674586168937},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.svg","hash":"d484cee6f2461c9194b28878a1d1a677ffdbb78c","modified":1674586168952},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.min.js","hash":"e547de978c573d0e7beda7ad74829ce6fef6b058","modified":1674586168864},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.js.map","hash":"fb6f3071e92d08b0c66808ff9cfd190a0341d93d","modified":1674586168936},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1674586168950},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap.css.map","hash":"2e1d08a9694cd5a694eabca746cfad95fb99653e","modified":1674586168868},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.all.min.js","hash":"31c6669a90a33ee5af66ceaf47996ad8fd8b962e","modified":1674586168863},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1674586168840},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs","hash":"c01a600693e204abd02d0bf056a98a49e8a78d6e","modified":1674586168941},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1674586168860},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.core.js","hash":"7952663a721317158468875349956182465b0701","modified":1674586168849},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.core.js.map","hash":"1d19d75bea55a0c0062661bb0fe5ad4135f68d8a","modified":1674586168891},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.js","hash":"540a80bafeba53826127d556487541332ecd6ed1","modified":1674586168839},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk-component.js","hash":"fe4c44fa48522e9b2675f3a652d83d8aaec11ad8","modified":1674586168833},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk-component.js.map","hash":"6f118aa575a5da5449d0c171f1c85fa5e43f80ff","modified":1674586168871},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.js.map","hash":"b5d129e59c5a1ca46395fbf7466432983178ebba","modified":1674586168875},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs.map","hash":"0ad921fcf8f5f79cf5fdf5deb5b4ffc21e501ff0","modified":1674586168898},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.js.map","hash":"199ed9c41ad0bec69a69514beb6f39f7b3a78ae5","modified":1674586168905},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.min.js.map","hash":"6a9f6d47092f2557b346c0eabbd5907a1b12a9e7","modified":1674586168882},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.min.js.map","hash":"bd1138557833d1ec29ce678d2f994e053f180423","modified":1674586168911},{"_id":"node_modules/hexo-theme-kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.js","hash":"e1f5d58724700b9cd810bb4e295ac93b6724578d","modified":1674586168855},{"_id":"themes/kratos-rebirth/_config.yml","hash":"8feb63e4cceddcb6237a168b736886cc7661b6c2","modified":1682326825713},{"_id":"themes/kratos-rebirth/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1674586168807},{"_id":"themes/kratos-rebirth/ReadMe.md","hash":"226fe826a596132a9a288f19f7df5f6d093de1ac","modified":1674586168939},{"_id":"themes/kratos-rebirth/package.json","hash":"10de53d487f0df3b7c2de2fae1cc78a1ea89ee81","modified":1682389116202},{"_id":"themes/kratos-rebirth/Kratos-Rebirth-Manual.md","hash":"62a1ebc52a2d6f504e70230d076f824bd1c55528","modified":1674588401641},{"_id":"themes/kratos-rebirth/gulpfile.js","hash":"ee5ebfd16459eda0bf9f82f5760b49cdf8cbb41c","modified":1674586168844},{"_id":"themes/kratos-rebirth/languages/zh-CN.yml","hash":"c9f3da54ba61c8732944c9cc24da51dcd4751e79","modified":1674684917907},{"_id":"themes/kratos-rebirth/layout/archive.ejs","hash":"6dec1243c2d76a415d2fa5766ab184652c90c18c","modified":1674586168818},{"_id":"themes/kratos-rebirth/layout/category.ejs","hash":"5677b70953e6a33038a0e03eaa06e45c10ec7d73","modified":1674586168818},{"_id":"themes/kratos-rebirth/layout/layout.ejs","hash":"ea86e5b8f64957145ff52f5e2660e62ff92e0b05","modified":1674586168819},{"_id":"themes/kratos-rebirth/layout/page.ejs","hash":"4593e0a73b36b34dce40e3fbfe4c8056a7c9eb8f","modified":1674685555639},{"_id":"themes/kratos-rebirth/scripts/additional-pages.js","hash":"b99cdd8fa23d0519403abefc595f031ebaace59a","modified":1674586168828},{"_id":"themes/kratos-rebirth/scripts/cdn-optimize-helpers.js","hash":"b0865dc553d3b757757b5a0471d5bcef6fd5be41","modified":1674586168829},{"_id":"themes/kratos-rebirth/layout/index.ejs","hash":"ade7fe1a660c35e0dae8ed412f5ed133341ea76d","modified":1674586168819},{"_id":"themes/kratos-rebirth/scripts/check-update.js","hash":"fcadb1499a85d427d5b80fc6c64eab61ca999925","modified":1674586168829},{"_id":"themes/kratos-rebirth/scripts/friends.js","hash":"4c7dfca9d47c508934d7d27a56f8037a761da7ff","modified":1674586168831},{"_id":"themes/kratos-rebirth/scripts/genconfig.js","hash":"41e8da155a1cc418e05f3f9312568f0b3b9bd128","modified":1674586168831},{"_id":"themes/kratos-rebirth/scripts/search.js","hash":"fb892991e53a272db74ec5f3d3ab26e728c8ee06","modified":1674586168862},{"_id":"themes/kratos-rebirth/scripts/tag-widgets.js","hash":"78d14c05c6205762f73ad3df420d9c6e78b9cd4e","modified":1674586168862},{"_id":"themes/kratos-rebirth/layout/post.ejs","hash":"8970528259caa6435d0e479661d492906c419e9f","modified":1674685561959},{"_id":"themes/kratos-rebirth/layout/tag.ejs","hash":"5677b70953e6a33038a0e03eaa06e45c10ec7d73","modified":1674586168820},{"_id":"themes/kratos-rebirth/layout/_partial/after-footer.ejs","hash":"715a0446c9aa0264d0e627e864ef59d884d48f19","modified":1674586168818},{"_id":"themes/kratos-rebirth/layout/_partial/footer.ejs","hash":"82f721a82474f0dadf514442a1dcd03e079e2e64","modified":1674717917406},{"_id":"themes/kratos-rebirth/layout/_partial/head.ejs","hash":"bb4e80d152284db4ab6225922c56ee078c71b219","modified":1674588401645},{"_id":"themes/kratos-rebirth/layout/_partial/sidebar.ejs","hash":"46b53d4131e1fce463054b5c4399cbd6ddd2f0fd","modified":1674586168819},{"_id":"themes/kratos-rebirth/layout/_partial/header.ejs","hash":"5a0c9e8d4e20bc0cc3cd397843ab4315ed9845c5","modified":1674586168819},{"_id":"themes/kratos-rebirth/layout/_pages/categories.ejs","hash":"39a1c79de03dbc8295c9da59cebec15ae30dd632","modified":1674586168818},{"_id":"themes/kratos-rebirth/layout/_pages/search-page.ejs","hash":"3dc81379363c8ad0bedf8489a3e6200841ff2c79","modified":1674586168819},{"_id":"themes/kratos-rebirth/layout/_comments/disqusjs.ejs","hash":"703b125ce33489c9be62a2c6ccfc913af9d0ca05","modified":1674586168818},{"_id":"themes/kratos-rebirth/layout/_pages/404.ejs","hash":"b29697cfdbbf641c8efdff7d0273a4883e678f42","modified":1674586168818},{"_id":"themes/kratos-rebirth/source/.DS_Store","hash":"d08c593acc661ab1ee3f7c62c5acf6c0899eecf8","modified":1682165760359},{"_id":"themes/kratos-rebirth/layout/_comments/disqus.ejs","hash":"38a80a494e861be233b145675696ad9699aeeba0","modified":1674586168818},{"_id":"themes/kratos-rebirth/layout/_pages/tags.ejs","hash":"70b9ce41a0e149e60788ac6d16864fea5b3311e3","modified":1674586168820},{"_id":"themes/kratos-rebirth/layout/_comments/livere.ejs","hash":"21dc5bc91d73b54b06ac36669eefd5258b07e83e","modified":1674586168819},{"_id":"themes/kratos-rebirth/layout/_comments/valine.ejs","hash":"209c463bc047bac75b9ebe45e8cf87f6255a6368","modified":1674586168820},{"_id":"themes/kratos-rebirth/layout/_comments/waline.ejs","hash":"58223eb81e7a43c565f05c6364dbafb500c9341a","modified":1674586168820},{"_id":"themes/kratos-rebirth/layout/_plugins/mermaid.ejs","hash":"827cdcbfa44205a2a4114b1bdb0644bedc3efade","modified":1674586168819},{"_id":"themes/kratos-rebirth/layout/_comments/twikoo.ejs","hash":"7d0ac9d25737c75ab1236dd54c22d0a8c61f288e","modified":1674586168820},{"_id":"themes/kratos-rebirth/layout/_tools/player.ejs","hash":"1880e2c92e29cc7f305cf1488f19ac1b6fc58aaa","modified":1675825024467},{"_id":"themes/kratos-rebirth/layout/_tools/share.ejs","hash":"3f7369fc6344965f12315e5214aa9eee3fe8b5f1","modified":1674586168819},{"_id":"themes/kratos-rebirth/layout/_widget/tagcloud.ejs","hash":"223730bfe007f26d5279cb66f1da9222c7d64c62","modified":1674586168820},{"_id":"themes/kratos-rebirth/layout/_widget/category.ejs","hash":"1f24ccfd175fabc83c7ea81f3412e78e65b8f3ab","modified":1674586168818},{"_id":"themes/kratos-rebirth/layout/_widget/about.ejs","hash":"25cde6dff270c41ff9bb37242e3e6aa6b85761a4","modified":1674586168818},{"_id":"themes/kratos-rebirth/layout/_comments/gitment.ejs","hash":"7366111beed060f528e6ab6a1e907444d61519f5","modified":1674586168818},{"_id":"themes/kratos-rebirth/layout/_widget/toc.ejs","hash":"a2c8f900369ada4dfa9793ac496a5eafc38502a9","modified":1674586168820},{"_id":"themes/kratos-rebirth/source/js/candy.min.js","hash":"a61e81c3062fce2fd2232d8c9ee4288b7d7ed1f7","modified":1674588401864},{"_id":"themes/kratos-rebirth/source/js/kr-dark.min.js","hash":"8ff673018b5688e47f89fe461e30bf30abb81c6e","modified":1674586168846},{"_id":"themes/kratos-rebirth/source/js/pjax.min.js","hash":"84b037cb01dcb34ebc0a1de1aa2f773fe1c51e7a","modified":1674586168862},{"_id":"themes/kratos-rebirth/source/js/local-search.min.js","hash":"8ed9ec22fa7a835c9f5f6e96b8368ae912e9afd0","modified":1674586168848},{"_id":"themes/kratos-rebirth/source/js/kratosr.min.js","hash":"dc7e0cc592b98dd4a14eead2de7bc7167cbbdf43","modified":1674588401865},{"_id":"themes/kratos-rebirth/source/js/snow.min.js","hash":"6cc50c7bb171b57b9149a3aa9b9e939ab36fd847","modified":1674586168862},{"_id":"themes/kratos-rebirth/source/css/kr-color-dark.min.css","hash":"96b22bc4196025bd6a4b85af2815ede582d5f070","modified":1682222013752},{"_id":"themes/kratos-rebirth/source/css/prismjs.min.css","hash":"6f2def0d76387c908324f38f845516c7f2d559d7","modified":1674586168815},{"_id":"themes/kratos-rebirth/source/css/kratosr.min.css","hash":"4dcf4226a6bf7ce5e552189c7edfe47372f098e4","modified":1682222014320},{"_id":"themes/kratos-rebirth/source/images/alipay.webp","hash":"01fa6151d2122f0470ee6f38ac8e4ced6c81912e","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/images/about.webp","hash":"ca0fb739ab4426e7895742c1d8d52df1e14468e8","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/images/404.webp","hash":"d2e2bd5cc2627a2b04d5e449a67949a2605ae13e","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/images/avatar.webp","hash":"3ed6e4e1e08e9c2700aa149d1f9e068fb02947cd","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/images/banner.webp","hash":"7c5093243bfd581a633ba8a905e2d379cfa78c00","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/images/bg.webp","hash":"f232b442b64eaa90f45a48ff04d8e7d352caf212","modified":1674586168955},{"_id":"themes/kratos-rebirth/source/images/banner_dark.webp","hash":"5589986444825e2b75c369d419ff736d3a396bac","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/images/bg_dark.webp","hash":"f232b442b64eaa90f45a48ff04d8e7d352caf212","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/images/comment.webp","hash":"7756b5a69f2a85a2d1c4251e3055bfa0218aa385","modified":1674586168955},{"_id":"themes/kratos-rebirth/source/images/psr.webp","hash":"bf457bf84bca767bac1bd2b960d91c53ba3fbdee","modified":1674586168955},{"_id":"themes/kratos-rebirth/source/images/comment_dark.webp","hash":"7756b5a69f2a85a2d1c4251e3055bfa0218aa385","modified":1674586168955},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1674586168827},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/README.md","hash":"3880a58a50ef7514317c4f47b5707d4fd0106c9c","modified":1674586168939},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/History.md","hash":"38f837f30c75bed4b8990b36fdf540fe3c63ccd3","modified":1674586168939},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/Notes.md","hash":"e7b5de6240b6918cbdccc708a06e4b20555966c1","modified":1674586168939},{"_id":"themes/kratos-rebirth/source/images/wechat.webp","hash":"06f3997bf554768c04cb588198c7b3d68c21b8e9","modified":1674586168957},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/License.md","hash":"bc3e61d337e51c177534c644c20f190148d7905e","modified":1674586168939},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/package.json","hash":"1f2b1a268fb702727f33f348e043ffd7d0b86ec5","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/bower.json","hash":"55980d38b6f24ec91f44579bcd38c667986368c5","modified":1674586168865},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/Readme.md","hash":"63959b38ef0747eadd6f731b48d7aded7edc227b","modified":1674586168939},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/nprogress.css","hash":"17ca817a091da9dcf5fe0f2f1e1f2eea60a33149","modified":1674586168815},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/component.json","hash":"ecbc4792d8583f73050dd4d918fea8073a7ded60","modified":1674586168865},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/README.md","hash":"1a8e6fb255a22f8233dff9815ab8790bada84b3d","modified":1674586168940},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/package.json","hash":"574122118ffc8d4705e58806a13612553bc41588","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/nprogress.js","hash":"a7e1146d2021c42e68b599dc8bcc69d44fc31df3","modified":1674586168861},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/LICENSE","hash":"7041717dd3a7d35354f94321b666e11977c7610e","modified":1674586168808},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/bower.json","hash":"99449e46555b0ba514eca8246f1621048db97aa5","modified":1674586168865},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/index.html","hash":"7314a123d8a9acbd51321d4f538ba4b36b0673b5","modified":1674586168827},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/index-svg.html","hash":"3c856315a2467efcd00b278c570fbc7897021d98","modified":1674586168827},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/package.json","hash":"b77af52b956e89bd76c6bf75cc33f0eca47c0bf4","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/index.svg","hash":"15730a03273bba608180e8b182453ae393b3c3e0","modified":1675824768341},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/qrcode.js","hash":"8fa3048613aab15c7f7edc3ac74a84e90375126d","modified":1674586168862},{"_id":"themes/kratos-rebirth/source/css/highlight/light.min.css","hash":"0c2ee23e4f7a443f90b65905e72f1fca3a89137d","modified":1674586168815},{"_id":"themes/kratos-rebirth/source/css/highlight/night-blue.min.css","hash":"5f298f7125dcf08fed56d393a65b027c447a4c67","modified":1674586168815},{"_id":"themes/kratos-rebirth/source/css/highlight/night-eighties.min.css","hash":"eafd77c47ada4f8120d683a66cf486426b260205","modified":1674586168815},{"_id":"themes/kratos-rebirth/source/css/highlight/night.min.css","hash":"379e2f99b3b92a710a241f5770ca43237a74238e","modified":1674586168815},{"_id":"themes/kratos-rebirth/source/css/highlight/night-bright.min.css","hash":"a2bbbb95cb63124d0f5bc9c351bcf31455b8ecf8","modified":1674586168815},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/qrcode.min.js","hash":"2d06c1f823f34c19981c6ae0b0eb0f5861c5e14b","modified":1674586168862},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_1.webp","hash":"a818f050112ceb75e3a60dc1673a10783b254595","modified":1674586168955},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_10.webp","hash":"4983eeca7886bbe7c09b0c79f4774302fdfa1315","modified":1674586168955},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_11.webp","hash":"08d8d91e2b01768842abb47cd48a0f07d22d070c","modified":1674586168955},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_12.webp","hash":"b6b8e1281f9146925e45e937cb4d5b28bcabe957","modified":1674586168955},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_13.webp","hash":"c4c9050637f4ffa3cb7d782f59dadc993ac3a6de","modified":1674586168955},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_14.webp","hash":"f9300e2b45c1f061ec8cc21527142dafc558a9e6","modified":1674586168956},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_16.webp","hash":"61714ccffd55d6fa74cf94bcdd5a464da04ce891","modified":1674586168956},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_15.webp","hash":"8629f2a7d3b0192549f809e6b7479159af0222da","modified":1674586168956},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_17.webp","hash":"b5a036ec234a23c820a89d1c640b1f2e8dd3dfa4","modified":1674586168956},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_18.webp","hash":"5bc78b9d6cb0a0cf6daa3a35b93e575777a49ddd","modified":1674586168956},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_19.webp","hash":"15e0cd0cbe5c7166915a4b68680681beccc2afef","modified":1674586168956},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_2.webp","hash":"1bcf7461c2b9408b8a893013fa425eb46701faf6","modified":1674586168956},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_20.webp","hash":"4ab961d94a0d3abbefc7f6d9188a889ec2225e7a","modified":1674586168956},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_3.webp","hash":"3faffd2575e0751526249c5c56a2a5045a21363b","modified":1674586168957},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_4.webp","hash":"1d0f136590632e7ba31f5510d24891ba443f1f33","modified":1674586168957},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_5.webp","hash":"ba384ada1c2a17b67036addd68ffa1f604ab5a41","modified":1674586168957},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_6.webp","hash":"c2d8b68971dacd111566526f64d94932f5c6f076","modified":1674586168957},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_7.webp","hash":"4be8fe8ea1b3563b78924062e3aa013cd5c4e82b","modified":1674586168957},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_8.webp","hash":"9e6d74786d8459440d68c409eb654364dd279f8a","modified":1674586168957},{"_id":"themes/kratos-rebirth/source/images/thumb/thumb_9.webp","hash":"bca69e7d56982b43c52e9ffa17c8d5bb268834d8","modified":1674586168957},{"_id":"themes/kratos-rebirth/source/vendors/disqusjs@1.3.0/dist/disqus.js","hash":"b79249dfb619836cfd1251cb3c3d5c603bc55e61","modified":1674586168830},{"_id":"themes/kratos-rebirth/source/vendors/disqusjs@1.3.0/dist/disqusjs.css","hash":"0d8ae5946142b17f9a75683c7649cf73d6fdbe17","modified":1674586168812},{"_id":"themes/kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.js","hash":"ba1ce03e2728bf87d1a7154e4cc659f01a345ed9","modified":1674733219384},{"_id":"themes/kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1674586168810},{"_id":"themes/kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1674586168867},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1674586168813},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.css.map","hash":"9dda04c29af8da6ac13a507beefea6fce4d7032e","modified":1674586168872},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/constants.js","hash":"08f6c79bf52239cbdd457bc0a94df395f578ee07","modified":1674586168830},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.js","hash":"df37d9fe8c1a0a1fb2883e5bcb93f880bb2bbf2e","modified":1674586168844},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/icons.js","hash":"d303f91799600aa8c7f5f5bb18c652fafac4359d","modified":1674586168844},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/icons.js.map","hash":"5604e4382d787a9a1976359d92bb9827f11c2c2b","modified":1674586168884},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/constants.js.map","hash":"6b7b473ef4bba09ea572b3baaac73c122372439e","modified":1674586168869},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/utils.js","hash":"df76ada59b1cf94a7ea1d44c56a6624d248b4228","modified":1674586168864},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1674586168812},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/utils.js.map","hash":"6f99a8c2269c938d4422f3a244a8086f89800890","modified":1674586168918},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1674586168869},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.js.map","hash":"2cb4d20d09b110268e0ea8c199f72501aa2d66e8","modified":1674586168884},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1674586168812},{"_id":"themes/kratos-rebirth/source/vendors/meting@2.0.1/dist/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1674586168861},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs.LICENSE.txt","hash":"38165332beeccd3551309f85addb2354f2d18676","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.min.js.LICENSE.txt","hash":"38165332beeccd3551309f85addb2354f2d18676","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_animated.scss","hash":"8daf189b2f8a404495b8424b6fd1ba630dd1c2dc","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_bordered-pulled.scss","hash":"164b6a0a2b307cd293f4a914ab0fcdf643950374","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/layui.js","hash":"be7bcdcb4eb932f3e700e63584661f19b4139739","modified":1674586168848},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_core.scss","hash":"55a14a34267edc401b82e5ee41d8bd84fbb5da3f","modified":1674586168949},{"_id":"themes/kratos-rebirth/scripts/lib/cdn.js","hash":"4d408c31df9605ac9d45a3cea53fcd1ab70178df","modified":1674586168829},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_fixed-width.scss","hash":"224417ca266c657849afb2bbcb6dc455894ff387","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_larger.scss","hash":"940e1c5ebc690283bfaee92560cf15fabedbf6a9","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_icons.scss","hash":"830e0183337d16c07b1c63838f7593a33ee87b15","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_list.scss","hash":"4b53ee01513df8b9ce76442b2d8f1851613a435c","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_path.scss","hash":"080158aeb1bf6df59ec98b2bbed44da61d9c9ca3","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_rotated-flipped.scss","hash":"ca08a0af3da63c2f2a7d3c27a8747637744cc785","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_mixins.scss","hash":"4f3881034a4c11cae8cc915f288477b498a357a2","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_screen-reader.scss","hash":"2d8563c488f68e75a28d540dd89301ee4ee08c97","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_variables.scss","hash":"0d6d70535104b42e60d7f44ae6ccf9de023a7b8b","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/font-awesome.scss","hash":"dd83648ea5bc832f87c3c1bf956c54dec065a9bd","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/scss/_stacked.scss","hash":"cf6752ee609af36eb293a7197c88d31ecacbbc74","modified":1674586168949},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/animated.less","hash":"421f2c4e10191f148c13b8a34e5ff3f484d4c393","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/bordered-pulled.less","hash":"a2c292137b17406183ad0fdbf4880fd648b9a5ca","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/core.less","hash":"1a37352286619b789d151a06eb4b7551e4c1aaa2","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/fixed-width.less","hash":"ec0c24b97184dab86177660f486b8d08cd636c42","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/font-awesome.less","hash":"9ffe7422dc235450a21f019f410ed359ed151f4b","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/icons.less","hash":"0285a999eb1adad868366678c2d9365b77186a45","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/larger.less","hash":"e7119e82dc50540dbc3472bba7d74282815a7ecc","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/list.less","hash":"f53bc20884a1410d950b4a36a330c5181a8b55ab","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/mixins.less","hash":"3c5b36b0069372b525ed8bbbcf6b3d4d2bed4e78","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/path.less","hash":"1afb4a849059631f76ed2a519d7fb1bd0af14802","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/screen-reader.less","hash":"71139132f170ebe7712836210f4d2c4905151899","modified":1674586168867},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/stacked.less","hash":"f044077bc8be1a989c245254e81eb084d52d29a7","modified":1674586168867},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/test/component.html","hash":"5965cc7f9bb812ada1ffcd6abec39124c20a4ef8","modified":1674586168827},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/rotated-flipped.less","hash":"95de5de9009714692430b04f9cd4388be8fba8f3","modified":1674586168867},{"_id":"themes/kratos-rebirth/source/vendors/nprogress@0.2.0/test/test.js","hash":"5c795debb89ec7d35ba1ec1e8ccbab0a7a353d78","modified":1674586168862},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/less/variables.less","hash":"8a5c800747705df16117cc598c1b9f512e873bfe","modified":1674586168867},{"_id":"themes/kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.all.min.js.LICENSE.txt","hash":"c00fe261d987618ec25243062c089a6982d4480c","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.min.js.LICENSE.txt","hash":"c00fe261d987618ec25243062c089a6982d4480c","modified":1674586168954},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/detect.min.js","hash":"596d6dcbe379f78a2ec655188d7bfa7182848e03","modified":1674586168830},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/escape.min.js","hash":"4f91bb0e3a71ce6421b303c6c32bb3fb3e751192","modified":1674586168830},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.cjs.map","hash":"555cf9adc857430a799507a250f6ae8cf4454268","modified":1674586168867},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.d.cts","hash":"c1cafa6064ccb6851580d9f11600124c060db78b","modified":1674586168816},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.mjs","hash":"208a0b855cf31a54c2130f0aaa0bc7fb3ff766a4","modified":1674586168940},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.cjs","hash":"2da315666c52a2a0205da342f3fc7808834d0231","modified":1674586168808},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.d.ts","hash":"c1cafa6064ccb6851580d9f11600124c060db78b","modified":1674586168952},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.d.mts","hash":"c1cafa6064ccb6851580d9f11600124c060db78b","modified":1674586168945},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/api.mjs.map","hash":"4a590871076e07d59664a0fda40d037a6d2f2344","modified":1674586168867},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.d.cts","hash":"376c612b7771eec314f855e69e82523d4f7f922f","modified":1674586168817},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.d.mts","hash":"376c612b7771eec314f855e69e82523d4f7f922f","modified":1674586168945},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.cjs","hash":"48777cf6661b69f54cebc970896a4b7528add2ad","modified":1674586168809},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.cjs.map","hash":"1d162b21f3b9b513036b53ed45950f7c35e6e0f5","modified":1674586168868},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.d.ts","hash":"376c612b7771eec314f855e69e82523d4f7f922f","modified":1674586168952},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.mjs","hash":"d6b7d79d2b213888f829e7b44ff312aae3cd2378","modified":1674586168940},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.js.map","hash":"ab28febbf60a2979a8baca97c958a05c2555fbd4","modified":1674586168868},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.js","hash":"a3e6d8ccf4e6ba2251487e83b79b580153d2b515","modified":1674586168830},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/comment.mjs.map","hash":"efdc8c853f806168f32b4433a19bda6f62c3f5bf","modified":1674586168868},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/component.mjs","hash":"395fabdd03cb56bc0757b14a06a70470dbe0259e","modified":1674586168940},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/legacy.umd.d.ts","hash":"b957f75fde95eb046a31ce075d6e311a2d7450d0","modified":1674586168952},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.cjs","hash":"ff6d9246e7b256eae10aa8c0d35f3b201b1ac8b7","modified":1674586168809},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.d.cts","hash":"4b3fad71d77ead2ad05e4dfe9e0906a4e025a233","modified":1674586168817},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.d.mts","hash":"4b3fad71d77ead2ad05e4dfe9e0906a4e025a233","modified":1674586168945},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.cjs.map","hash":"d29ca67cfab54c0ff984438d47060aee70e6fa15","modified":1674586168912},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.d.ts","hash":"4b3fad71d77ead2ad05e4dfe9e0906a4e025a233","modified":1674586168952},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.mjs","hash":"4dc75845f6c827a0c1c8d6a92e7a0602bd03f2a1","modified":1674586168941},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.js.map","hash":"dfa4f18a6ed4dec6232ae770ac66d30158e45b27","modified":1674586168914},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.mjs.map","hash":"67ae874c2c6fdcbe3ba5ad7f3895a52b518f4924","modified":1674586168914},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/pageview.js","hash":"ceea6a5a7b83c99ea92cf338ed05f5803ce9a943","modified":1674586168861},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.d.cts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1674586168817},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.cjs","hash":"1fad1bb7c23bd023d34bafd94c7f3fb937222766","modified":1674586168809},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.d.mts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1674586168945},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline-meta.css","hash":"4c5e417fb615505112fa87eb466eda52e8a90ec0","modified":1674586168815},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.mjs","hash":"0c7689080af2d07976a56ea09ec75f8a360e9663","modified":1674586168943},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline-meta.css.map","hash":"f3796986f06b46a16a17995b9642922c3d029764","modified":1674586168937},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.css","hash":"6722bd03953e1f8c48c3e01b5776a68e5f901928","modified":1674586168816},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.css.map","hash":"14c2e889034c99033dbac74a4bdbba9e53801a3d","modified":1674586168938},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.d.cts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1674586168818},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.d.ts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1674586168952},{"_id":"themes/kratos-rebirth/layout/_widget/posts.ejs","hash":"43461f2e3cb32b9092dcd9a977098ff8be6a3f68","modified":1674586168819},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.d.mts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1674586168948},{"_id":"themes/kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1674586168813},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.css","hash":"a22e254bf086bf442a09344afe0e6cf188f5a1d5","modified":1674586168810},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.css.map","hash":"ccb7ff3435bb5cff1fe9643fc0ac8cdde2dcd177","modified":1674586168868},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.min.css","hash":"fc6b4268fbd57ad95d2b41a1d4d6866f222fbdb2","modified":1674586168811},{"_id":"themes/kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.css","hash":"e43435fb9eaa918f5b8e35c9e110124b8bd13751","modified":1674586168813},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1674586168953},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1674586168957},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1674586168821},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1674586168958},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/js/npm.js","hash":"e2b7590d6ec1fdac66b01fdf66ae0879f53b1262","modified":1674586168861},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/js/bootstrap.min.js","hash":"27947c0c0fa837da9bdfdfc36f649c25f54bd1c0","modified":1674586168829},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/theme/default.js.map","hash":"0b7317800be0ea17fa142c7bb26f7e8158b54447","modified":1674586168869},{"_id":"themes/kratos-rebirth/layout/_comments/gitalk.ejs","hash":"fc320153c67decfba8aea97aa8488a686c757e51","modified":1674586168818},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/layui.mobile.css","hash":"f15da6c149002dd57ea25b8346534c8161c86e3c","modified":1674586168815},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/theme/default.js","hash":"449e59ac4b6b9c66384ee123e1523b5392d684a5","modified":1674586168830},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.woff","hash":"6133b92b4e5c3866675b2656ceae14606fa01eb0","modified":1674586168958},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.woff2","hash":"c9b04ae5b10f88f8bc7c48840164f468ee7b10b0","modified":1674586168958},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/plugins/emojis/light.json","hash":"3ac2cd3cc07efff7c30ece9857b0527c5fc534d3","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.ttf","hash":"5d2b8777c623bb6e96577cee675489d0299ffa1f","modified":1674586168953},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/plugins/emojis/index.js","hash":"452e66f0b900282eab6f98743592793361ccbc65","modified":1674586168844},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.eot","hash":"de1bec30d0ef87af6ab83ab6a269c3c59bc83124","modified":1674586168821},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/code.css","hash":"d7adeb3ada7c3c069aa6d098f953e0a87cfb49ef","modified":1674586168812},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/10.gif","hash":"04fe5b26b7e2c980d12ad7157a4ce908c2a74f14","modified":1674586168821},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/1.gif","hash":"e6da9a45ecb8c766a8f7c2362ccf2976d20d17a9","modified":1674586168821},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/11.gif","hash":"170c2e16dd383e26d9d68406eb217dbf191ea14e","modified":1674586168821},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/0.gif","hash":"87db440c06299666a8a1f407a6008c5bf6d70817","modified":1674586168821},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/12.gif","hash":"f5da3f33448e67537e3df8ff63b010247b06841c","modified":1674586168821},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/13.gif","hash":"0afcb6c47cb53fa4a8467d7d7bf00ec464df2f8e","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/17.gif","hash":"0b88c01b477d4ca98eb99a665c0ab8738551aeec","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/16.gif","hash":"54db2506b93b76c58174177245dcc6ef3fd0591f","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/18.gif","hash":"eeee84a351d6e84d291b0c27e5d70014a3a2748d","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/14.gif","hash":"1af45520e97328498b1a281b6955df5029fc9679","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/15.gif","hash":"a0f216d0aaaeec369109e4b581eacd4e83e5ccb6","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/19.gif","hash":"620b2afa4c36cbfdd09c57807d8a662a5267ea51","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/2.gif","hash":"43b3ca892341431f697e1326aa693c1f252922be","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/20.gif","hash":"7f1cefe1db5c5ee6a9b0eea4d9618cba4b1ac790","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/21.gif","hash":"86d3d5273ffd13841d246698eb648d85e178c4dc","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/23.gif","hash":"43295056d287f3da526dfb77915edc3de7551e3e","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/22.gif","hash":"dcad257d86505e921618f7d85b60bf6ac2ce319d","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/26.gif","hash":"153c5f602881b04bed23d5c7d21a977563075ee2","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/25.gif","hash":"05eeb7a9c42a2cd3876417944143078ce514a8b9","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/28.gif","hash":"5830d72546907c962b6c9003fa923798a67b0406","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/27.gif","hash":"814bad015177103646b0216367fa9707361998d3","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/24.gif","hash":"02a263028625496740eea9a50141a4ad98d826a1","modified":1674586168822},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/29.gif","hash":"ef1d583626e7447f546995a5b296f34eb3364902","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/3.gif","hash":"339482962bc4995e16e99ac9de9fc067636fd79e","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/33.gif","hash":"5f02bc5ec8d6220a872f1ca1fa2abaa92d46c361","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/32.gif","hash":"9af01aea73b614e5820a00bcc890840493f9dd70","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/34.gif","hash":"e0e500feecd8274490a3bdbf64d2555c16a86261","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/30.gif","hash":"886222551781040325cfd3307fbfba2a1d434a9e","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/31.gif","hash":"29043ca9d16adf6574d4d7efde1af7a615689931","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/35.gif","hash":"141ae180796db9800770dc9dbb8c9beda6f170e8","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/36.gif","hash":"55abcc242354c9c1c73538db5d8c7b984de5ca52","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/4.gif","hash":"878c3da67e6aec79c9b8dba6f34368586f4bd097","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/40.gif","hash":"c1b0fef186697125b66c1b4617fa3f9abc4d92eb","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/41.gif","hash":"c37fb5c43ea499a005d88075a392ed2e09c331df","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/37.gif","hash":"850b9425421c3072a4898154d41776c02a4d64f7","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/38.gif","hash":"336cb3cbe0fd6cac96cd7cd5ca847c6a01f95b50","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/42.gif","hash":"86f11fca6a9c42d3678ec8af35c077a9790ce777","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/39.gif","hash":"6380eb13d87fc4242d2c6eec57f482ac8ca1ad1f","modified":1674586168823},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/47.gif","hash":"653e07693ee719cafbce662bb5e410646fe4695a","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/44.gif","hash":"32a9fa973626a3a06646095aeeecb919923f7d16","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/45.gif","hash":"864dfc9b99f5641f6d5a0081dc14d84872c1b3c6","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/48.gif","hash":"8a8483cd4e3b4b6ac0567eab41c5655ace4b3a81","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/5.gif","hash":"cf43cfcf14bbc7f8e430b74a97eb3b260f16b08c","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/49.gif","hash":"dbf616c5537074ace036340bdddf7948c138c3d7","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/50.gif","hash":"94a521d4f9a69c4eb59f5bbe673c8803246bdf5e","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/43.gif","hash":"6a16279bea1179b3fd3a45736ecffd983a42272d","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/46.gif","hash":"b6c74edb2dc383e0f3e28a0859fa87683fea18e2","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/51.gif","hash":"1ef1419f1ba2fd28e7de676ae5c388074646be53","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/52.gif","hash":"b516f6bd28cee1fe34144d897b702989782be4ec","modified":1674586168824},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/54.gif","hash":"75c738c517217f6b09d51ca3036cf54a01891c4d","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/53.gif","hash":"a03f9bbb0202d24d3313286f60ce08b214c013d2","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/57.gif","hash":"b797ac8509a8f8bc328b10153e0026449a6139ec","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/6.gif","hash":"697d8f2262c535cd61808a564b21fc10ea93f0db","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/56.gif","hash":"a71c1ef36706c4ddf7959c68d6c40920db3efe67","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/61.gif","hash":"a5db56b975970ebe7048a5c824604d64559392b9","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/59.gif","hash":"c50da42e6f2ec33112261f46c30e5ea5b4a0f889","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/62.gif","hash":"a839a263600c034bb11411a7f762dfa917155d10","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/64.gif","hash":"38a537e9ac930736e162be81c13c5f708ff948bd","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/58.gif","hash":"5c70cba8adb0b42c0da4d922498c265e5d8034d7","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/60.gif","hash":"bdb24b7ec836fbf6c60c4d7ad97d73f041a154a8","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/65.gif","hash":"93cab4423539955a25d17c83da6aee277a6402aa","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/63.gif","hash":"28e9ec7a3882fec8c63dd731b06a9bbcc179aff7","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/66.gif","hash":"6efe452b1f7a697db1c654130a9c2b872f528654","modified":1674586168826},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/70.gif","hash":"7c2641bef26579d9f90bdc0b740357527dd6e484","modified":1674586168826},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/67.gif","hash":"50e2ed8f7773e60ae7d40b612db98554b8277b6e","modified":1674586168826},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/7.gif","hash":"ad4e2ea1864a85f5729a1347c2f8c49fdb3b2def","modified":1674586168826},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/68.gif","hash":"e779199003a7415a29d50ecf0bbfed04e031f1ab","modified":1674586168826},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/71.gif","hash":"c6323d6d6d262011faed18e758e9e83e7b6812b8","modified":1674586168826},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/8.gif","hash":"43baffc48b0fbe649ed920bad713e2ccab9b7344","modified":1674586168826},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/69.gif","hash":"76ac840c5bc5ad44302daa921e7217149576b89e","modified":1674586168826},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/9.gif","hash":"8df9fc1055efeffdb72d499c064c05445adaa9be","modified":1674586168826},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/carousel.js","hash":"ff770a94f4e7edd26f4449909e3d72644de83149","modified":1674586168829},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/code.js","hash":"31972b8e26aac0f3b1233ad76c45187a39f4d977","modified":1674586168829},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/flow.js","hash":"b6b4ffe415022a6788767906b837e2894057371b","modified":1674586168831},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/colorpicker.js","hash":"0234f7a6eba2238583fe4644c0a247dacd67f73b","modified":1674586168829},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/form.js","hash":"6ed3220f5b8cbee7f287ca851dd5d294790281ee","modified":1674586168831},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/laydate.js","hash":"53e871827a2c0bc04ec239e9461a5eb18a309075","modified":1674586168847},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/element.js","hash":"1900e7f8bca28958e0a495731c7b3957ea0157c6","modified":1674586168830},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/layedit.js","hash":"ce8c049188c64ec3cd3d302f8e72d0094d85c462","modified":1674586168847},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/layer.js","hash":"448f76fa3ccfb66a5d86b02cf785f67adf0d8033","modified":1674586168847},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/layim.js","hash":"c79d7e577901f2ceab86f01f00cc4c26ff1b038e","modified":1674586168847},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/laytpl.js","hash":"b79191723a99f3e52b56e0afbd183d7338b9cfd4","modified":1674586168847},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/laypage.js","hash":"fec79457cffad05f261ab518e9d69bbebab548f0","modified":1674586168847},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/rate.js","hash":"c3a4b2dad9e829afb8cfae69203eef8ede02191b","modified":1674586168862},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/transfer.js","hash":"e85e366ff7ca8a49d195e149ec971cb6893b8409","modified":1674586168862},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/mobile.js","hash":"0f82e8ce6b6deb51afdc307f488fb24c6dd02dbc","modified":1674586168861},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/table.js","hash":"3a18563a832e11ae642bf6c2a8634a18768f2dbb","modified":1674586168862},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/tree.js","hash":"5a0c3d9b31a49d8e30e13ef187894d9d07bec69e","modified":1674586168862},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/slider.js","hash":"c4e37a45ff9ae08f90492f894d86e7bec7542b26","modified":1674586168862},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/util.js","hash":"e5e39048df40763ddfff8ec271a6f8070fcb4f4e","modified":1674586168864},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/upload.js","hash":"8eef1ed175c49a7f09f6ce472a7d12138ed8f8ed","modified":1674586168864},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/layim.css","hash":"a669bd1141c1df237631738d41f9d0032f4ba0a3","modified":1674586168814},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/getmsg.json","hash":"3a83d94b0d8bdb96459e36ea042a72768ea3b348","modified":1674586168866},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/laydate/default/laydate.css","hash":"bc0f2f7396ca62c86bc07c2db1b73ca83de3cbdb","modified":1674586168814},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/chatlog.html","hash":"64591e08bb5af1d22e976ba3b3175075c7e6cd12","modified":1674586168827},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/msgbox.html","hash":"521979a7d5b54e6c00dedaa897ae547065da9b2c","modified":1674586168827},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/html/find.html","hash":"ed8e6a3564bb52fc7adc8f19c7be34f25fe97222","modified":1674586168827},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/mobile/layim.css","hash":"0af51b5e2280a03cefcde3e4cf6662d274cc64c6","modified":1674586168814},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/2.jpg","hash":"ee9e802e6a46b5b698a4d0c36249c0085b192c68","modified":1674586168828},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/1.jpg","hash":"f0ba9086fa730c9c80b89f25ff440b740a4b06df","modified":1674586168828},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/3.jpg","hash":"56cd08ca560acd37d377626b1b67cc4947bfe314","modified":1674586168828},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/5.jpg","hash":"a7c37d5401127afeb1ddd930c9ad9f0e3fab3d31","modified":1674586168828},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/logo.jpg","hash":"3014e3081d5d4164143936fcf61e7080e81faf38","modified":1674586168828},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/voice/default.mp3","hash":"18ac4168a61de5cd4a35f814e97365945de94ab0","modified":1674586168944},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/4.jpg","hash":"e018753c3fbd420f8987e53f8a9fc62428ecc18d","modified":1674586168828},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/icon-ext.png","hash":"ddf2a30ad34bac4e9a1250f29c46ac0823d62a12","modified":1674586168948},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/icon.png","hash":"fe47ec617507e9ce5f6ce7ac9b179a3c9231882b","modified":1674586168948},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/layer.css","hash":"ed6fefb1501b3bcd720919f9ce55bb322b5d7ec5","modified":1674586168814},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/images/face/55.gif","hash":"c446b5eca2cce1faa7f2147a8b646cc774011de1","modified":1674586168825},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-0.gif","hash":"ba81388bbac5bc223f94489b97a95a13f3c78e47","modified":1674586168826},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-1.gif","hash":"49e54acbf5674212195e581848ec0d490282448f","modified":1674586168826},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-2.gif","hash":"c641615e851254111e268da42d72ae684b3ce967","modified":1674586168827},{"_id":"themes/kratos-rebirth/source/vendors/qrcode_js@1.0.0/jquery.min.js","hash":"a8c8a5caf9765b4ccb90d708045518e219a9af5d","modified":1674586168846},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1674586168846},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.slim.min.js","hash":"d1c6704e94efe2d465fc161b6381e127d35acd81","modified":1674586168846},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.slim.min.map","hash":"17a9498757f0b358580ffce586bbc97ae897e8d8","modified":1674586168887},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1674586168958},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1674586168957},{"_id":"themes/kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1674586168844},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap.min.css","hash":"ed29315e0ffb3f14382431f2724235bf67f44eb3","modified":1674586168811},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/js/bootstrap.js","hash":"542cfd539f0cad650342c8cab8baf1cdbcd5fea6","modified":1674586168829},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1674586168951},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/css/layui.css","hash":"e15327d5c8f4c82909edc97977b277207e01364d","modified":1674586168815},{"_id":"themes/kratos-rebirth/source/vendors/aplayer@1.10.1/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1674586168867},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/lay/modules/jquery.js","hash":"36456de559419079e1096890c7e9a97ae1bbf1be","modified":1674586168845},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.min.map","hash":"c98b6a5cb27af645c8bfb525fcad3569f3917d5b","modified":1674586168885},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1674586168820},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1674586168843},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1674586168948},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1674586168953},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1674586168864},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.Pure.min.js","hash":"227fb19caf17f4330ac24cb952af466eeaae5c43","modified":1674586168865},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/legacy.umd.js.map","hash":"3f5d438f4128604826d03944bbb158ba19ee2e10","modified":1674586168887},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/component.mjs.map","hash":"a45fac56302df2ee67ff4f074d50a0d84db98868","modified":1674586168869},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/legacy.umd.js","hash":"ced943a8fb34fa3810b910f30733ef7a6d9b563c","modified":1674586168848},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.cjs.map","hash":"74229c9c2f85c73ae1082fe49e89bb789845b90b","modified":1674586168915},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/shim.mjs.map","hash":"800a3ce3650dbaeec78783b4c60b4f70d7959b6d","modified":1674586168916},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.cjs.map","hash":"eff335e17db76d0b1008d534b8e857c90a7a2d03","modified":1674586168938},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.cjs","hash":"7e9d8f4500857833f184905bb698eacc9f1d1c64","modified":1674586168810},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.js.map","hash":"94be543349586850de68359ce689e792d012876a","modified":1674586168938},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.mjs","hash":"b709889f62a6df6fd09e423c5999764ea6ef29e8","modified":1674586168944},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.mjs.map","hash":"2e0fdc9d2c9425c645443bc1d2c2f45e41606faa","modified":1674586168938},{"_id":"themes/kratos-rebirth/source/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.js","hash":"27f034e5db8c32e268e2959b9a7c1258d36e4510","modified":1674586168844},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap.css","hash":"f2183455571b19311a235bd5aa204e694ade8e94","modified":1674586168811},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.slim.js","hash":"77ec5d7bdb33634ff7d76837e36f0a7240c21e86","modified":1674586168846},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.umd.js","hash":"90de88757741f89ad68c8d3765174437454e2303","modified":1674586168865},{"_id":"themes/kratos-rebirth/source/vendors/@waline/client@2.14.1/dist/waline.js","hash":"6919aef34a57cb0a4e1b75149124e17816ae71c5","modified":1674586168865},{"_id":"themes/kratos-rebirth/source/vendors/jquery@3.6.0/dist/jquery.js","hash":"af32f706407ab08f800c5e697cce92466e735847","modified":1674586168845},{"_id":"themes/kratos-rebirth/source/vendors/gitment@0.0.3/dist/gitment.browser.js.map","hash":"72dc603fb7be8b623d1a402419b42c36723367bb","modified":1674586168883},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/layui.all.js","hash":"4fbff21286558e3cb817072d76ae326db4378c6e","modified":1674586168847},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.Pure.min.js.map","hash":"40e15912aae8beff90cbb8ae235cd6fcd36f87dc","modified":1674586168937},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.umd.js.map","hash":"6fe9ac91ca5074bcbc696f887802e8304e31aaea","modified":1674586168937},{"_id":"themes/kratos-rebirth/source/vendors/layui-src@2.5.5/dist/font/iconfont.svg","hash":"d484cee6f2461c9194b28878a1d1a677ffdbb78c","modified":1674586168952},{"_id":"themes/kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.min.js","hash":"e547de978c573d0e7beda7ad74829ce6fef6b058","modified":1674586168864},{"_id":"themes/kratos-rebirth/source/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1674586168950},{"_id":"themes/kratos-rebirth/source/vendors/valine@1.4.18/dist/Valine.min.js.map","hash":"fb6f3071e92d08b0c66808ff9cfd190a0341d93d","modified":1674586168936},{"_id":"themes/kratos-rebirth/source/vendors/bootstrap@3.3.4/dist/css/bootstrap.css.map","hash":"2e1d08a9694cd5a694eabca746cfad95fb99653e","modified":1674586168868},{"_id":"themes/kratos-rebirth/source/vendors/twikoo@1.5.11/dist/twikoo.all.min.js","hash":"31c6669a90a33ee5af66ceaf47996ad8fd8b962e","modified":1674586168863},{"_id":"themes/kratos-rebirth/package-lock.json","hash":"16b30a8e51dc79d85ccc07db668727e613aa39c6","modified":1674587060378},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1674586168840},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs","hash":"c01a600693e204abd02d0bf056a98a49e8a78d6e","modified":1674586168941},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.core.js","hash":"7952663a721317158468875349956182465b0701","modified":1674586168849},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1674586168860},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.core.js.map","hash":"1d19d75bea55a0c0062661bb0fe5ad4135f68d8a","modified":1674586168891},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk-component.js","hash":"fe4c44fa48522e9b2675f3a652d83d8aaec11ad8","modified":1674586168833},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.js","hash":"540a80bafeba53826127d556487541332ecd6ed1","modified":1674586168839},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk-component.js.map","hash":"6f118aa575a5da5449d0c171f1c85fa5e43f80ff","modified":1674586168871},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.js.map","hash":"b5d129e59c5a1ca46395fbf7466432983178ebba","modified":1674586168875},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs.map","hash":"0ad921fcf8f5f79cf5fdf5deb5b4ffc21e501ff0","modified":1674586168898},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.js.map","hash":"199ed9c41ad0bec69a69514beb6f39f7b3a78ae5","modified":1674586168905},{"_id":"themes/kratos-rebirth/source/vendors/gitalk@1.7.2/dist/gitalk.min.js.map","hash":"6a9f6d47092f2557b346c0eabbd5907a1b12a9e7","modified":1674586168882},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.min.js.map","hash":"bd1138557833d1ec29ce678d2f994e053f180423","modified":1674586168911},{"_id":"themes/kratos-rebirth/source/vendors/mermaid@9.1.1/dist/mermaid.js","hash":"e1f5d58724700b9cd810bb4e295ac93b6724578d","modified":1674586168855},{"_id":"public/config/main.json","hash":"bfe4fdb05b7244e7446733d51087507226be71a6","modified":1681960320512},{"_id":"public/search.json","hash":"969b15d6d6e747e5d01c52bda480080493b61c42","modified":1683527725839},{"_id":"public/404.html","hash":"84e9b05636d88ddc4ffb38f60893081cfa7b8633","modified":1681970174286},{"_id":"public/tags/index.html","hash":"f878ecde6fe11cdf3d406fd9eb68d92b84e7a90d","modified":1683527725839},{"_id":"public/categories/index.html","hash":"89332e3c472aadb893fa703a04aa942305b1ed45","modified":1683527725839},{"_id":"public/friends/index.html","hash":"6c98515f9cc04a682997e58948bbfa9fc37746e3","modified":1683527725839},{"_id":"public/search/index.html","hash":"6aa2743de4504f888a5a06db3a64665933b66171","modified":1683527725839},{"_id":"public/2023/01/25/hello-world/index.html","hash":"c4414a298911562a7c5163c66b5b5e4b6dc29e4a","modified":1674587163361},{"_id":"public/index.html","hash":"3bbdb2825bfb7f4ed38bf9d3cb9052eaafc3ac74","modified":1683527725839},{"_id":"public/archives/index.html","hash":"ee87468cafcf3dec6c4ae7fece2249f9a8ea09f5","modified":1683527725839},{"_id":"public/archives/2023/index.html","hash":"369ac44829177fceb7416df06effcb6b47f750d1","modified":1683527725839},{"_id":"public/archives/2023/01/index.html","hash":"f43bc136700bed8f4c60529e9b1cfd717d63d552","modified":1683527725839},{"_id":"public/images/alipay.webp","hash":"01fa6151d2122f0470ee6f38ac8e4ced6c81912e","modified":1681960320512},{"_id":"public/images/avatar.webp","hash":"3ed6e4e1e08e9c2700aa149d1f9e068fb02947cd","modified":1681960320512},{"_id":"public/images/about.webp","hash":"ca0fb739ab4426e7895742c1d8d52df1e14468e8","modified":1681960320512},{"_id":"public/images/banner.webp","hash":"7c5093243bfd581a633ba8a905e2d379cfa78c00","modified":1681960320512},{"_id":"public/images/banner_dark.webp","hash":"5589986444825e2b75c369d419ff736d3a396bac","modified":1681960320512},{"_id":"public/images/404.webp","hash":"d2e2bd5cc2627a2b04d5e449a67949a2605ae13e","modified":1681960320512},{"_id":"public/images/comment.webp","hash":"7756b5a69f2a85a2d1c4251e3055bfa0218aa385","modified":1681960320512},{"_id":"public/images/bg.webp","hash":"f232b442b64eaa90f45a48ff04d8e7d352caf212","modified":1681960320512},{"_id":"public/images/bg_dark.webp","hash":"f232b442b64eaa90f45a48ff04d8e7d352caf212","modified":1681960320512},{"_id":"public/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1681960320512},{"_id":"public/images/psr.webp","hash":"bf457bf84bca767bac1bd2b960d91c53ba3fbdee","modified":1681960320512},{"_id":"public/images/wechat.webp","hash":"06f3997bf554768c04cb588198c7b3d68c21b8e9","modified":1681960320512},{"_id":"public/images/thumb/thumb_10.webp","hash":"4983eeca7886bbe7c09b0c79f4774302fdfa1315","modified":1674692722228},{"_id":"public/images/thumb/thumb_1.webp","hash":"a818f050112ceb75e3a60dc1673a10783b254595","modified":1674692722228},{"_id":"public/images/comment_dark.webp","hash":"7756b5a69f2a85a2d1c4251e3055bfa0218aa385","modified":1681960320512},{"_id":"public/images/thumb/thumb_11.webp","hash":"08d8d91e2b01768842abb47cd48a0f07d22d070c","modified":1674692722228},{"_id":"public/images/thumb/thumb_14.webp","hash":"f9300e2b45c1f061ec8cc21527142dafc558a9e6","modified":1674692722228},{"_id":"public/images/thumb/thumb_13.webp","hash":"c4c9050637f4ffa3cb7d782f59dadc993ac3a6de","modified":1674692722228},{"_id":"public/images/thumb/thumb_15.webp","hash":"8629f2a7d3b0192549f809e6b7479159af0222da","modified":1674692722228},{"_id":"public/images/thumb/thumb_16.webp","hash":"61714ccffd55d6fa74cf94bcdd5a464da04ce891","modified":1674692722228},{"_id":"public/images/thumb/thumb_12.webp","hash":"b6b8e1281f9146925e45e937cb4d5b28bcabe957","modified":1674692722228},{"_id":"public/images/thumb/thumb_18.webp","hash":"5bc78b9d6cb0a0cf6daa3a35b93e575777a49ddd","modified":1674692722228},{"_id":"public/images/thumb/thumb_19.webp","hash":"15e0cd0cbe5c7166915a4b68680681beccc2afef","modified":1674692722228},{"_id":"public/images/thumb/thumb_2.webp","hash":"1bcf7461c2b9408b8a893013fa425eb46701faf6","modified":1674692722228},{"_id":"public/images/thumb/thumb_20.webp","hash":"4ab961d94a0d3abbefc7f6d9188a889ec2225e7a","modified":1674692722228},{"_id":"public/images/thumb/thumb_4.webp","hash":"1d0f136590632e7ba31f5510d24891ba443f1f33","modified":1674692722228},{"_id":"public/images/thumb/thumb_3.webp","hash":"3faffd2575e0751526249c5c56a2a5045a21363b","modified":1674692722228},{"_id":"public/images/thumb/thumb_6.webp","hash":"c2d8b68971dacd111566526f64d94932f5c6f076","modified":1674692722228},{"_id":"public/images/thumb/thumb_5.webp","hash":"ba384ada1c2a17b67036addd68ffa1f604ab5a41","modified":1674692722228},{"_id":"public/images/thumb/thumb_17.webp","hash":"b5a036ec234a23c820a89d1c640b1f2e8dd3dfa4","modified":1674692722228},{"_id":"public/images/thumb/thumb_9.webp","hash":"bca69e7d56982b43c52e9ffa17c8d5bb268834d8","modified":1674692722228},{"_id":"public/images/thumb/thumb_8.webp","hash":"9e6d74786d8459440d68c409eb654364dd279f8a","modified":1674692722228},{"_id":"public/vendors/font-awesome@4.7.0/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1681960320512},{"_id":"public/images/thumb/thumb_7.webp","hash":"4be8fe8ea1b3563b78924062e3aa013cd5c4e82b","modified":1674692722228},{"_id":"public/vendors/qrcode_js@1.0.0/index.svg","hash":"15730a03273bba608180e8b182453ae393b3c3e0","modified":1681960320512},{"_id":"public/vendors/qrcode_js@1.0.0/LICENSE","hash":"7041717dd3a7d35354f94321b666e11977c7610e","modified":1681960320512},{"_id":"public/vendors/aplayer@1.10.1/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/animated.less","hash":"421f2c4e10191f148c13b8a34e5ff3f484d4c393","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/bordered-pulled.less","hash":"a2c292137b17406183ad0fdbf4880fd648b9a5ca","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/core.less","hash":"1a37352286619b789d151a06eb4b7551e4c1aaa2","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/fixed-width.less","hash":"ec0c24b97184dab86177660f486b8d08cd636c42","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/font-awesome.less","hash":"9ffe7422dc235450a21f019f410ed359ed151f4b","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/larger.less","hash":"e7119e82dc50540dbc3472bba7d74282815a7ecc","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/list.less","hash":"f53bc20884a1410d950b4a36a330c5181a8b55ab","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/mixins.less","hash":"3c5b36b0069372b525ed8bbbcf6b3d4d2bed4e78","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/icons.less","hash":"0285a999eb1adad868366678c2d9365b77186a45","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/path.less","hash":"1afb4a849059631f76ed2a519d7fb1bd0af14802","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/rotated-flipped.less","hash":"95de5de9009714692430b04f9cd4388be8fba8f3","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/screen-reader.less","hash":"71139132f170ebe7712836210f4d2c4905151899","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/stacked.less","hash":"f044077bc8be1a989c245254e81eb084d52d29a7","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/less/variables.less","hash":"8a5c800747705df16117cc598c1b9f512e873bfe","modified":1681960320512},{"_id":"public/vendors/gitalk@1.7.2/dist/gitalk.css.map","hash":"9dda04c29af8da6ac13a507beefea6fce4d7032e","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/scss/font-awesome.scss","hash":"dd83648ea5bc832f87c3c1bf956c54dec065a9bd","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/constants.js.map","hash":"6b7b473ef4bba09ea572b3baaac73c122372439e","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/gitment.js.map","hash":"2cb4d20d09b110268e0ea8c199f72501aa2d66e8","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/utils.js.map","hash":"6f99a8c2269c938d4422f3a244a8086f89800890","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/icons.js.map","hash":"5604e4382d787a9a1976359d92bb9827f11c2c2b","modified":1681960320512},{"_id":"public/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs.LICENSE.txt","hash":"38165332beeccd3551309f85addb2354f2d18676","modified":1681960320512},{"_id":"public/vendors/mermaid@9.1.1/dist/mermaid.min.js.LICENSE.txt","hash":"38165332beeccd3551309f85addb2354f2d18676","modified":1681960320512},{"_id":"public/vendors/twikoo@1.5.11/dist/twikoo.all.min.js.LICENSE.txt","hash":"c00fe261d987618ec25243062c089a6982d4480c","modified":1681960320512},{"_id":"public/vendors/twikoo@1.5.11/dist/twikoo.min.js.LICENSE.txt","hash":"c00fe261d987618ec25243062c089a6982d4480c","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/api.cjs","hash":"2da315666c52a2a0205da342f3fc7808834d0231","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/api.cjs.map","hash":"555cf9adc857430a799507a250f6ae8cf4454268","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/api.d.cts","hash":"c1cafa6064ccb6851580d9f11600124c060db78b","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/api.d.mts","hash":"c1cafa6064ccb6851580d9f11600124c060db78b","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/api.d.ts","hash":"c1cafa6064ccb6851580d9f11600124c060db78b","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/api.mjs","hash":"208a0b855cf31a54c2130f0aaa0bc7fb3ff766a4","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/comment.cjs","hash":"48777cf6661b69f54cebc970896a4b7528add2ad","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/api.mjs.map","hash":"4a590871076e07d59664a0fda40d037a6d2f2344","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/comment.d.cts","hash":"376c612b7771eec314f855e69e82523d4f7f922f","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/comment.cjs.map","hash":"1d162b21f3b9b513036b53ed45950f7c35e6e0f5","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/comment.d.mts","hash":"376c612b7771eec314f855e69e82523d4f7f922f","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/comment.d.ts","hash":"376c612b7771eec314f855e69e82523d4f7f922f","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/comment.js.map","hash":"ab28febbf60a2979a8baca97c958a05c2555fbd4","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/comment.mjs","hash":"d6b7d79d2b213888f829e7b44ff312aae3cd2378","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/comment.mjs.map","hash":"efdc8c853f806168f32b4433a19bda6f62c3f5bf","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/component.mjs","hash":"395fabdd03cb56bc0757b14a06a70470dbe0259e","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/legacy.umd.d.ts","hash":"b957f75fde95eb046a31ce075d6e311a2d7450d0","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/pageview.cjs","hash":"ff6d9246e7b256eae10aa8c0d35f3b201b1ac8b7","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/pageview.cjs.map","hash":"d29ca67cfab54c0ff984438d47060aee70e6fa15","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/pageview.d.ts","hash":"4b3fad71d77ead2ad05e4dfe9e0906a4e025a233","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/pageview.d.mts","hash":"4b3fad71d77ead2ad05e4dfe9e0906a4e025a233","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/pageview.d.cts","hash":"4b3fad71d77ead2ad05e4dfe9e0906a4e025a233","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/pageview.mjs","hash":"4dc75845f6c827a0c1c8d6a92e7a0602bd03f2a1","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/pageview.js.map","hash":"dfa4f18a6ed4dec6232ae770ac66d30158e45b27","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/pageview.mjs.map","hash":"67ae874c2c6fdcbe3ba5ad7f3895a52b518f4924","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/shim.cjs","hash":"1fad1bb7c23bd023d34bafd94c7f3fb937222766","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/shim.d.mts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/shim.d.cts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline-meta.css.map","hash":"f3796986f06b46a16a17995b9642922c3d029764","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/shim.mjs","hash":"0c7689080af2d07976a56ea09ec75f8a360e9663","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline.css.map","hash":"14c2e889034c99033dbac74a4bdbba9e53801a3d","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline.d.cts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline.d.ts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline.d.mts","hash":"92c855188103bc5d5bbbaaf5346a57346e241e5c","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.css.map","hash":"ccb7ff3435bb5cff1fe9643fc0ac8cdde2dcd177","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/font/iconfont.eot","hash":"de1bec30d0ef87af6ab83ab6a269c3c59bc83124","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/font/iconfont.ttf","hash":"5d2b8777c623bb6e96577cee675489d0299ffa1f","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/font/iconfont.woff","hash":"6133b92b4e5c3866675b2656ceae14606fa01eb0","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/font/iconfont.woff2","hash":"c9b04ae5b10f88f8bc7c48840164f468ee7b10b0","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/theme/default.js.map","hash":"0b7317800be0ea17fa142c7bb26f7e8158b54447","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/0.gif","hash":"87db440c06299666a8a1f407a6008c5bf6d70817","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/1.gif","hash":"e6da9a45ecb8c766a8f7c2362ccf2976d20d17a9","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/10.gif","hash":"04fe5b26b7e2c980d12ad7157a4ce908c2a74f14","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/11.gif","hash":"170c2e16dd383e26d9d68406eb217dbf191ea14e","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/13.gif","hash":"0afcb6c47cb53fa4a8467d7d7bf00ec464df2f8e","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/14.gif","hash":"1af45520e97328498b1a281b6955df5029fc9679","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/16.gif","hash":"54db2506b93b76c58174177245dcc6ef3fd0591f","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/15.gif","hash":"a0f216d0aaaeec369109e4b581eacd4e83e5ccb6","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/18.gif","hash":"eeee84a351d6e84d291b0c27e5d70014a3a2748d","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/12.gif","hash":"f5da3f33448e67537e3df8ff63b010247b06841c","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/17.gif","hash":"0b88c01b477d4ca98eb99a665c0ab8738551aeec","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/19.gif","hash":"620b2afa4c36cbfdd09c57807d8a662a5267ea51","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/2.gif","hash":"43b3ca892341431f697e1326aa693c1f252922be","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/20.gif","hash":"7f1cefe1db5c5ee6a9b0eea4d9618cba4b1ac790","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/21.gif","hash":"86d3d5273ffd13841d246698eb648d85e178c4dc","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/22.gif","hash":"dcad257d86505e921618f7d85b60bf6ac2ce319d","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/23.gif","hash":"43295056d287f3da526dfb77915edc3de7551e3e","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/25.gif","hash":"05eeb7a9c42a2cd3876417944143078ce514a8b9","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/24.gif","hash":"02a263028625496740eea9a50141a4ad98d826a1","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/26.gif","hash":"153c5f602881b04bed23d5c7d21a977563075ee2","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/27.gif","hash":"814bad015177103646b0216367fa9707361998d3","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/28.gif","hash":"5830d72546907c962b6c9003fa923798a67b0406","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/29.gif","hash":"ef1d583626e7447f546995a5b296f34eb3364902","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/3.gif","hash":"339482962bc4995e16e99ac9de9fc067636fd79e","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/30.gif","hash":"886222551781040325cfd3307fbfba2a1d434a9e","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/31.gif","hash":"29043ca9d16adf6574d4d7efde1af7a615689931","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/32.gif","hash":"9af01aea73b614e5820a00bcc890840493f9dd70","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/34.gif","hash":"e0e500feecd8274490a3bdbf64d2555c16a86261","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/36.gif","hash":"55abcc242354c9c1c73538db5d8c7b984de5ca52","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/35.gif","hash":"141ae180796db9800770dc9dbb8c9beda6f170e8","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/37.gif","hash":"850b9425421c3072a4898154d41776c02a4d64f7","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/38.gif","hash":"336cb3cbe0fd6cac96cd7cd5ca847c6a01f95b50","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/4.gif","hash":"878c3da67e6aec79c9b8dba6f34368586f4bd097","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/40.gif","hash":"c1b0fef186697125b66c1b4617fa3f9abc4d92eb","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/33.gif","hash":"5f02bc5ec8d6220a872f1ca1fa2abaa92d46c361","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/41.gif","hash":"c37fb5c43ea499a005d88075a392ed2e09c331df","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/42.gif","hash":"86f11fca6a9c42d3678ec8af35c077a9790ce777","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/43.gif","hash":"6a16279bea1179b3fd3a45736ecffd983a42272d","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/44.gif","hash":"32a9fa973626a3a06646095aeeecb919923f7d16","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/45.gif","hash":"864dfc9b99f5641f6d5a0081dc14d84872c1b3c6","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/46.gif","hash":"b6c74edb2dc383e0f3e28a0859fa87683fea18e2","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/47.gif","hash":"653e07693ee719cafbce662bb5e410646fe4695a","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/39.gif","hash":"6380eb13d87fc4242d2c6eec57f482ac8ca1ad1f","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/48.gif","hash":"8a8483cd4e3b4b6ac0567eab41c5655ace4b3a81","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/49.gif","hash":"dbf616c5537074ace036340bdddf7948c138c3d7","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/50.gif","hash":"94a521d4f9a69c4eb59f5bbe673c8803246bdf5e","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/5.gif","hash":"cf43cfcf14bbc7f8e430b74a97eb3b260f16b08c","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/53.gif","hash":"a03f9bbb0202d24d3313286f60ce08b214c013d2","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/54.gif","hash":"75c738c517217f6b09d51ca3036cf54a01891c4d","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/51.gif","hash":"1ef1419f1ba2fd28e7de676ae5c388074646be53","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/55.gif","hash":"c446b5eca2cce1faa7f2147a8b646cc774011de1","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/57.gif","hash":"b797ac8509a8f8bc328b10153e0026449a6139ec","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/58.gif","hash":"5c70cba8adb0b42c0da4d922498c265e5d8034d7","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/56.gif","hash":"a71c1ef36706c4ddf7959c68d6c40920db3efe67","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/52.gif","hash":"b516f6bd28cee1fe34144d897b702989782be4ec","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/59.gif","hash":"c50da42e6f2ec33112261f46c30e5ea5b4a0f889","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/6.gif","hash":"697d8f2262c535cd61808a564b21fc10ea93f0db","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/60.gif","hash":"bdb24b7ec836fbf6c60c4d7ad97d73f041a154a8","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/61.gif","hash":"a5db56b975970ebe7048a5c824604d64559392b9","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/62.gif","hash":"a839a263600c034bb11411a7f762dfa917155d10","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/63.gif","hash":"28e9ec7a3882fec8c63dd731b06a9bbcc179aff7","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/64.gif","hash":"38a537e9ac930736e162be81c13c5f708ff948bd","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/65.gif","hash":"93cab4423539955a25d17c83da6aee277a6402aa","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/68.gif","hash":"e779199003a7415a29d50ecf0bbfed04e031f1ab","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/66.gif","hash":"6efe452b1f7a697db1c654130a9c2b872f528654","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/69.gif","hash":"76ac840c5bc5ad44302daa921e7217149576b89e","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/67.gif","hash":"50e2ed8f7773e60ae7d40b612db98554b8277b6e","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/7.gif","hash":"ad4e2ea1864a85f5729a1347c2f8c49fdb3b2def","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/70.gif","hash":"7c2641bef26579d9f90bdc0b740357527dd6e484","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/8.gif","hash":"43baffc48b0fbe649ed920bad713e2ccab9b7344","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/71.gif","hash":"c6323d6d6d262011faed18e758e9e83e7b6812b8","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/images/face/9.gif","hash":"8df9fc1055efeffdb72d499c064c05445adaa9be","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/1.jpg","hash":"f0ba9086fa730c9c80b89f25ff440b740a4b06df","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/2.jpg","hash":"ee9e802e6a46b5b698a4d0c36249c0085b192c68","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/3.jpg","hash":"56cd08ca560acd37d377626b1b67cc4947bfe314","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/logo.jpg","hash":"3014e3081d5d4164143936fcf61e7080e81faf38","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/5.jpg","hash":"a7c37d5401127afeb1ddd930c9ad9f0e3fab3d31","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/voice/default.mp3","hash":"18ac4168a61de5cd4a35f814e97365945de94ab0","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layer/default/icon-ext.png","hash":"ddf2a30ad34bac4e9a1250f29c46ac0823d62a12","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/skin/4.jpg","hash":"e018753c3fbd420f8987e53f8a9fc62428ecc18d","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layer/default/icon.png","hash":"fe47ec617507e9ce5f6ce7ac9b179a3c9231882b","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-1.gif","hash":"49e54acbf5674212195e581848ec0d490282448f","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-0.gif","hash":"ba81388bbac5bc223f94489b97a95a13f3c78e47","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layer/default/loading-2.gif","hash":"c641615e851254111e268da42d72ae684b3ce967","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1681960320512},{"_id":"public/vendors/jquery@3.6.0/dist/jquery.slim.min.map","hash":"17a9498757f0b358580ffce586bbc97ae897e8d8","modified":1681960320512},{"_id":"public/js/candy.min.js","hash":"a61e81c3062fce2fd2232d8c9ee4288b7d7ed1f7","modified":1681960320512},{"_id":"public/js/kr-dark.min.js","hash":"8ff673018b5688e47f89fe461e30bf30abb81c6e","modified":1681960320512},{"_id":"public/js/local-search.min.js","hash":"8ed9ec22fa7a835c9f5f6e96b8368ae912e9afd0","modified":1681960320512},{"_id":"public/js/pjax.min.js","hash":"84b037cb01dcb34ebc0a1de1aa2f773fe1c51e7a","modified":1681960320512},{"_id":"public/js/snow.min.js","hash":"6cc50c7bb171b57b9149a3aa9b9e939ab36fd847","modified":1681960320512},{"_id":"public/css/kr-color-dark.min.css","hash":"96b22bc4196025bd6a4b85af2815ede582d5f070","modified":1682222022600},{"_id":"public/css/prismjs.min.css","hash":"6f2def0d76387c908324f38f845516c7f2d559d7","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/README.html","hash":"6909e275b02f1088865f43eba884de81a4f062ae","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/package.json","hash":"166a52895a194d9bacec7fbca5140c0fea5ce9d6","modified":1681960320512},{"_id":"public/vendors/nprogress@0.2.0/License.html","hash":"58f0bc8259f96c992a1a14771a19703641e6859f","modified":1681960320512},{"_id":"public/vendors/nprogress@0.2.0/History.html","hash":"576033eb7d1287eeaf5490b6eb3b67bf10a5c660","modified":1681960320512},{"_id":"public/vendors/nprogress@0.2.0/Notes.html","hash":"b9e3e7915863568cff48a5c4dc9dbddfc88d692d","modified":1681960320512},{"_id":"public/vendors/nprogress@0.2.0/Readme.html","hash":"d7612b117f020a90c9951e9c0503c7d685fb8a15","modified":1681960320512},{"_id":"public/vendors/nprogress@0.2.0/bower.json","hash":"1877b30670d27ff643245d681b3d9abf6651ddb2","modified":1681960320512},{"_id":"public/vendors/nprogress@0.2.0/component.json","hash":"d4264f50a37fedfe55d6d2aef7c99ab08614be80","modified":1681960320512},{"_id":"public/vendors/nprogress@0.2.0/nprogress.css","hash":"17ca817a091da9dcf5fe0f2f1e1f2eea60a33149","modified":1681960320512},{"_id":"public/vendors/nprogress@0.2.0/nprogress.js","hash":"a7e1146d2021c42e68b599dc8bcc69d44fc31df3","modified":1681960320512},{"_id":"public/vendors/nprogress@0.2.0/package.json","hash":"3818c6a9823f00b3f62c365077764b2567bc9be0","modified":1681960320512},{"_id":"public/vendors/qrcode_js@1.0.0/README.html","hash":"067c801ff5318365b2caddcf66b7afa873e504eb","modified":1681960320512},{"_id":"public/vendors/qrcode_js@1.0.0/bower.json","hash":"bfceae0aa93856efb11b7b42982f6eb47827cbc5","modified":1681960320512},{"_id":"public/vendors/qrcode_js@1.0.0/index-svg.html","hash":"3c856315a2467efcd00b278c570fbc7897021d98","modified":1681960320512},{"_id":"public/vendors/qrcode_js@1.0.0/index.html","hash":"7314a123d8a9acbd51321d4f538ba4b36b0673b5","modified":1681960320512},{"_id":"public/vendors/qrcode_js@1.0.0/package.json","hash":"6acacb64a9f64d33725a45caedccd5ebbc09204b","modified":1681960320512},{"_id":"public/css/highlight/night-blue.min.css","hash":"5f298f7125dcf08fed56d393a65b027c447a4c67","modified":1681960320512},{"_id":"public/css/highlight/light.min.css","hash":"0c2ee23e4f7a443f90b65905e72f1fca3a89137d","modified":1681960320512},{"_id":"public/css/highlight/night-bright.min.css","hash":"a2bbbb95cb63124d0f5bc9c351bcf31455b8ecf8","modified":1681960320512},{"_id":"public/css/highlight/night-eighties.min.css","hash":"eafd77c47ada4f8120d683a66cf486426b260205","modified":1681960320512},{"_id":"public/css/highlight/night.min.css","hash":"379e2f99b3b92a710a241f5770ca43237a74238e","modified":1681960320512},{"_id":"public/vendors/aplayer@1.10.1/dist/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1681960320512},{"_id":"public/vendors/disqusjs@1.3.0/dist/disqus.js","hash":"b79249dfb619836cfd1251cb3c3d5c603bc55e61","modified":1681960320512},{"_id":"public/vendors/disqusjs@1.3.0/dist/disqusjs.css","hash":"0d8ae5946142b17f9a75683c7649cf73d6fdbe17","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/layui.js","hash":"be7bcdcb4eb932f3e700e63584661f19b4139739","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/constants.js","hash":"08f6c79bf52239cbdd457bc0a94df395f578ee07","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/gitment.js","hash":"df37d9fe8c1a0a1fb2883e5bcb93f880bb2bbf2e","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/utils.js","hash":"df76ada59b1cf94a7ea1d44c56a6624d248b4228","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/icons.js","hash":"d303f91799600aa8c7f5f5bb18c652fafac4359d","modified":1681960320512},{"_id":"public/vendors/meting@2.0.1/dist/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1681960320512},{"_id":"public/vendors/nprogress@0.2.0/test/component.html","hash":"5965cc7f9bb812ada1ffcd6abec39124c20a4ef8","modified":1681960320512},{"_id":"public/vendors/nprogress@0.2.0/test/test.js","hash":"5c795debb89ec7d35ba1ec1e8ccbab0a7a353d78","modified":1681960320512},{"_id":"public/vendors/valine@1.4.18/dist/detect.min.js","hash":"596d6dcbe379f78a2ec655188d7bfa7182848e03","modified":1681960320512},{"_id":"public/vendors/valine@1.4.18/dist/escape.min.js","hash":"4f91bb0e3a71ce6421b303c6c32bb3fb3e751192","modified":1681960320512},{"_id":"public/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/comment.js","hash":"a3e6d8ccf4e6ba2251487e83b79b580153d2b515","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/pageview.js","hash":"ceea6a5a7b83c99ea92cf338ed05f5803ce9a943","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline-meta.css","hash":"4c5e417fb615505112fa87eb466eda52e8a90ec0","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/js/npm.js","hash":"e2b7590d6ec1fdac66b01fdf66ae0879f53b1262","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/layui.mobile.css","hash":"f15da6c149002dd57ea25b8346534c8161c86e3c","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/theme/default.js","hash":"449e59ac4b6b9c66384ee123e1523b5392d684a5","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/code.css","hash":"d7adeb3ada7c3c069aa6d098f953e0a87cfb49ef","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/code.js","hash":"31972b8e26aac0f3b1233ad76c45187a39f4d977","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/colorpicker.js","hash":"0234f7a6eba2238583fe4644c0a247dacd67f73b","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/element.js","hash":"1900e7f8bca28958e0a495731c7b3957ea0157c6","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/flow.js","hash":"b6b4ffe415022a6788767906b837e2894057371b","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/form.js","hash":"6ed3220f5b8cbee7f287ca851dd5d294790281ee","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/layedit.js","hash":"ce8c049188c64ec3cd3d302f8e72d0094d85c462","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/carousel.js","hash":"ff770a94f4e7edd26f4449909e3d72644de83149","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/laypage.js","hash":"fec79457cffad05f261ab518e9d69bbebab548f0","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/laytpl.js","hash":"b79191723a99f3e52b56e0afbd183d7338b9cfd4","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/rate.js","hash":"c3a4b2dad9e829afb8cfae69203eef8ede02191b","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/slider.js","hash":"c4e37a45ff9ae08f90492f894d86e7bec7542b26","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/transfer.js","hash":"e85e366ff7ca8a49d195e149ec971cb6893b8409","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/tree.js","hash":"5a0c3d9b31a49d8e30e13ef187894d9d07bec69e","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/upload.js","hash":"8eef1ed175c49a7f09f6ce472a7d12138ed8f8ed","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/util.js","hash":"e5e39048df40763ddfff8ec271a6f8070fcb4f4e","modified":1681960320512},{"_id":"public/vendors/valine@1.4.18/dist/plugins/emojis/index.js","hash":"452e66f0b900282eab6f98743592793361ccbc65","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/layim.css","hash":"a669bd1141c1df237631738d41f9d0032f4ba0a3","modified":1681960320512},{"_id":"public/vendors/valine@1.4.18/dist/plugins/emojis/light.json","hash":"6d6234de38a90d00582d3413239954bb6609e01e","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/laydate/default/laydate.css","hash":"bc0f2f7396ca62c86bc07c2db1b73ca83de3cbdb","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/html/chatlog.html","hash":"64591e08bb5af1d22e976ba3b3175075c7e6cd12","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/html/find.html","hash":"ed8e6a3564bb52fc7adc8f19c7be34f25fe97222","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/html/getmsg.json","hash":"15f2e7c561b0de87b8e2ea84682d3bf10f41b6f2","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/html/msgbox.html","hash":"521979a7d5b54e6c00dedaa897ae547065da9b2c","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layim/mobile/layim.css","hash":"0af51b5e2280a03cefcde3e4cf6662d274cc64c6","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/modules/layer/default/layer.css","hash":"ed6fefb1501b3bcd720919f9ce55bb322b5d7ec5","modified":1681960320512},{"_id":"public/js/kratosr.min.js","hash":"dc7e0cc592b98dd4a14eead2de7bc7167cbbdf43","modified":1681960320512},{"_id":"public/css/kratosr.min.css","hash":"4dcf4226a6bf7ce5e552189c7edfe47372f098e4","modified":1682222022600},{"_id":"public/vendors/qrcode_js@1.0.0/qrcode.js","hash":"8fa3048613aab15c7f7edc3ac74a84e90375126d","modified":1681960320512},{"_id":"public/vendors/qrcode_js@1.0.0/jquery.min.js","hash":"a8c8a5caf9765b4ccb90d708045518e219a9af5d","modified":1681960320512},{"_id":"public/vendors/qrcode_js@1.0.0/qrcode.min.js","hash":"2d06c1f823f34c19981c6ae0b0eb0f5861c5e14b","modified":1681960320512},{"_id":"public/vendors/aplayer@1.10.1/dist/APlayer.min.js","hash":"ba1ce03e2728bf87d1a7154e4cc659f01a345ed9","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1681960320512},{"_id":"public/vendors/gitalk@1.7.2/dist/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/layui.all.js","hash":"4fbff21286558e3cb817072d76ae326db4378c6e","modified":1681960320512},{"_id":"public/vendors/jquery@3.6.0/dist/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1681960320512},{"_id":"public/vendors/jquery@3.6.0/dist/jquery.slim.min.js","hash":"d1c6704e94efe2d465fc161b6381e127d35acd81","modified":1681960320512},{"_id":"public/vendors/jquery@3.6.0/dist/jquery.js","hash":"af32f706407ab08f800c5e697cce92466e735847","modified":1681960320512},{"_id":"public/vendors/jquery@3.6.0/dist/jquery.slim.js","hash":"77ec5d7bdb33634ff7d76837e36f0a7240c21e86","modified":1681960320512},{"_id":"public/vendors/valine@1.4.18/dist/Valine.Pure.min.js","hash":"227fb19caf17f4330ac24cb952af466eeaae5c43","modified":1681960320512},{"_id":"public/vendors/twikoo@1.5.11/dist/twikoo.min.js","hash":"e547de978c573d0e7beda7ad74829ce6fef6b058","modified":1681960320512},{"_id":"public/vendors/valine@1.4.18/dist/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1681960320512},{"_id":"public/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.css","hash":"e43435fb9eaa918f5b8e35c9e110124b8bd13751","modified":1681960320512},{"_id":"public/vendors/valine@1.4.18/dist/Valine.min.umd.js","hash":"90de88757741f89ad68c8d3765174437454e2303","modified":1681960320512},{"_id":"public/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.js","hash":"27f034e5db8c32e268e2959b9a7c1258d36e4510","modified":1681960320512},{"_id":"public/vendors/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/legacy.umd.js","hash":"ced943a8fb34fa3810b910f30733ef7a6d9b563c","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline.css","hash":"6722bd03953e1f8c48c3e01b5776a68e5f901928","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline.js","hash":"6919aef34a57cb0a4e1b75149124e17816ae71c5","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.min.css","hash":"fc6b4268fbd57ad95d2b41a1d4d6866f222fbdb2","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/css/bootstrap-theme.css","hash":"a22e254bf086bf442a09344afe0e6cf188f5a1d5","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/css/bootstrap.css","hash":"f2183455571b19311a235bd5aa204e694ade8e94","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/css/bootstrap.min.css","hash":"ed29315e0ffb3f14382431f2724235bf67f44eb3","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/js/bootstrap.min.js","hash":"27947c0c0fa837da9bdfdfc36f649c25f54bd1c0","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/js/bootstrap.js","hash":"542cfd539f0cad650342c8cab8baf1cdbcd5fea6","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/css/layui.css","hash":"e15327d5c8f4c82909edc97977b277207e01364d","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/laydate.js","hash":"53e871827a2c0bc04ec239e9461a5eb18a309075","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/layer.js","hash":"448f76fa3ccfb66a5d86b02cf785f67adf0d8033","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/jquery.js","hash":"36456de559419079e1096890c7e9a97ae1bbf1be","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/layim.js","hash":"c79d7e577901f2ceab86f01f00cc4c26ff1b038e","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/mobile.js","hash":"0f82e8ce6b6deb51afdc307f488fb24c6dd02dbc","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/lay/modules/table.js","hash":"3a18563a832e11ae642bf6c2a8634a18768f2dbb","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1681960320512},{"_id":"public/vendors/aplayer@1.10.1/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1681960320512},{"_id":"public/vendors/jquery@3.6.0/dist/jquery.min.map","hash":"c98b6a5cb27af645c8bfb525fcad3569f3917d5b","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/component.mjs.map","hash":"a45fac56302df2ee67ff4f074d50a0d84db98868","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/legacy.umd.js.map","hash":"3f5d438f4128604826d03944bbb158ba19ee2e10","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/shim.cjs.map","hash":"74229c9c2f85c73ae1082fe49e89bb789845b90b","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/shim.mjs.map","hash":"800a3ce3650dbaeec78783b4c60b4f70d7959b6d","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline.cjs","hash":"7e9d8f4500857833f184905bb698eacc9f1d1c64","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline.cjs.map","hash":"eff335e17db76d0b1008d534b8e857c90a7a2d03","modified":1681960320512},{"_id":"public/vendors/gitalk@1.7.2/dist/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1681960320512},{"_id":"public/vendors/twikoo@1.5.11/dist/twikoo.all.min.js","hash":"31c6669a90a33ee5af66ceaf47996ad8fd8b962e","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline.js.map","hash":"94be543349586850de68359ce689e792d012876a","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline.mjs","hash":"b709889f62a6df6fd09e423c5999764ea6ef29e8","modified":1681960320512},{"_id":"public/vendors/@waline/client@2.14.1/dist/waline.mjs.map","hash":"2e0fdc9d2c9425c645443bc1d2c2f45e41606faa","modified":1681960320512},{"_id":"public/vendors/mermaid@9.1.1/dist/mermaid.core.js","hash":"7952663a721317158468875349956182465b0701","modified":1681960320512},{"_id":"public/vendors/mermaid@9.1.1/dist/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1681960320512},{"_id":"public/vendors/gitment@0.0.3/dist/gitment.browser.js.map","hash":"72dc603fb7be8b623d1a402419b42c36723367bb","modified":1681960320512},{"_id":"public/vendors/valine@1.4.18/dist/Valine.Pure.min.js.map","hash":"40e15912aae8beff90cbb8ae235cd6fcd36f87dc","modified":1681960320512},{"_id":"public/vendors/valine@1.4.18/dist/Valine.min.umd.js.map","hash":"6fe9ac91ca5074bcbc696f887802e8304e31aaea","modified":1681960320512},{"_id":"public/vendors/gitalk@1.7.2/dist/gitalk-component.js","hash":"fe4c44fa48522e9b2675f3a652d83d8aaec11ad8","modified":1681960320512},{"_id":"public/vendors/layui-src@2.5.5/dist/font/iconfont.svg","hash":"d484cee6f2461c9194b28878a1d1a677ffdbb78c","modified":1681960320512},{"_id":"public/vendors/valine@1.4.18/dist/Valine.min.js.map","hash":"fb6f3071e92d08b0c66808ff9cfd190a0341d93d","modified":1681960320512},{"_id":"public/vendors/gitalk@1.7.2/dist/gitalk.js","hash":"540a80bafeba53826127d556487541332ecd6ed1","modified":1681960320512},{"_id":"public/vendors/bootstrap@3.3.4/dist/css/bootstrap.css.map","hash":"2e1d08a9694cd5a694eabca746cfad95fb99653e","modified":1681960320512},{"_id":"public/vendors/font-awesome@4.7.0/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1681960320512},{"_id":"public/vendors/mermaid@9.1.1/dist/mermaid.js","hash":"e1f5d58724700b9cd810bb4e295ac93b6724578d","modified":1681960320512},{"_id":"public/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs","hash":"c01a600693e204abd02d0bf056a98a49e8a78d6e","modified":1681960320512},{"_id":"public/vendors/mermaid@9.1.1/dist/mermaid.core.js.map","hash":"1d19d75bea55a0c0062661bb0fe5ad4135f68d8a","modified":1681960320512},{"_id":"public/vendors/gitalk@1.7.2/dist/gitalk-component.js.map","hash":"6f118aa575a5da5449d0c171f1c85fa5e43f80ff","modified":1681960320512},{"_id":"public/vendors/gitalk@1.7.2/dist/gitalk.js.map","hash":"b5d129e59c5a1ca46395fbf7466432983178ebba","modified":1681960320512},{"_id":"public/vendors/mermaid@9.1.1/dist/mermaid.min.js.map","hash":"bd1138557833d1ec29ce678d2f994e053f180423","modified":1681960320512},{"_id":"public/vendors/mermaid@9.1.1/dist/mermaid.esm.min.mjs.map","hash":"0ad921fcf8f5f79cf5fdf5deb5b4ffc21e501ff0","modified":1681960320512},{"_id":"public/vendors/mermaid@9.1.1/dist/mermaid.js.map","hash":"199ed9c41ad0bec69a69514beb6f39f7b3a78ae5","modified":1681960320512},{"_id":"public/vendors/gitalk@1.7.2/dist/gitalk.min.js.map","hash":"6a9f6d47092f2557b346c0eabbd5907a1b12a9e7","modified":1681960320512},{"_id":"source/.DS_Store","hash":"49b427b83b59ca02f8cf5d36e745ef21f63a2cc1","modified":1682480669876},{"_id":"source/_posts/ttttt.md","hash":"ebb1b72ec57950b1d782c240e035312f81ed9369","modified":1674587637012},{"_id":"themes/kratos-rebirth/.DS_Store","hash":"438bd31a15552c962dd71d52ee8692fa93dec0d5","modified":1681377527090},{"_id":"source/_posts/.DS_Store","hash":"950ea2802e54478a9e522f5b3d757d6fe3684911","modified":1682236363213},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1674587802868},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1674587802868},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1674587802868},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1674587802868},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1674587802868},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1674587802873},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1674587802873},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1674587802873},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1674587802873},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1674587802873},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1674587802874},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1674587802873},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1674587802874},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1674587802869},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1674587802869},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1674587802869},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1674587802869},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1674587802870},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1674587802869},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1674587802869},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1674587802870},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1674587802874},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1674587802870},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1674587802870},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1674587802870},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1674587802870},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1674587802870},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1674587802870},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1674587802871},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1674587802871},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1674587802871},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1674587802871},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1674587802871},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1674587802872},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1674587802872},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1674587802872},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1674587802870},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1674587802873},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1674587802871},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1674587802869},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1674587802873},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1674587802876},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1674587802872},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1674587802886},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1674587802889},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1674587802886},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1674587802887},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1674587802886},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1674587802874},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1674587802887},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1674587802888},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1674587802887},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1674587802871},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1674587802871},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1674587802887},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1674587802872},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1674587802872},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1674587802872},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1674587802872},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1674587802876},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1674587802876},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1674587802875},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1674587802874},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1674587802889},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1674587802875},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1674587802875},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1674587802875},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1674587802875},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1674587802876},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1674587802876},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1674587802876},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1674587802888},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1674587802877},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1674587802878},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1674587802887},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1674587802884},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1674587802888},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1674587802888},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1674587802888},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1674587802887},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1674587802875},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1674587802888},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1674587802884},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1674587802883},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1674587802886},{"_id":"themes/kratos-rebirth/.npmignore","hash":"c33752bc1711668ead4e649355c51d6410dff608","modified":1674588401641},{"_id":"themes/kratos-rebirth/.demo/_config.kratos-rebirth.yml","hash":"42d1339dc7553285793834d5f098c2014375a8a9","modified":1674588401639},{"_id":"themes/kratos-rebirth/.gitignore","hash":"42d134511aca5e3712b57229770e1005a8b68a31","modified":1674588401641},{"_id":"themes/kratos-rebirth/.github/dependabot.yml","hash":"89c16d0b45677ff20b86b655e3bfc7f1e675b2d4","modified":1674588401640},{"_id":"themes/kratos-rebirth/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"7200fed1dfaaaa4d54f9c61fe1239f0ee040a6c0","modified":1674588401640},{"_id":"themes/kratos-rebirth/.github/workflows/auto-release.yml","hash":"bb8f12db86ed191d831ef4036afeb047a41dce85","modified":1674588401640},{"_id":"themes/kratos-rebirth/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"b07412f7926bd6bc9a2d327ce9c7ae67e548ba66","modified":1674588401640},{"_id":"themes/kratos-rebirth/.github/workflows/build-demo.yml","hash":"a9db5770d0840e4d3072c1de70505be07339b7f5","modified":1674588401640},{"_id":"themes/kratos-rebirth/.github/workflows/build-test.yml","hash":"47e843a2c76a84720e059665cce259a8d40453f0","modified":1674588401640},{"_id":"themes/kratos-rebirth/source/maps/candy.min.js.map","hash":"b6500774eb8428cbda894ac03fae6febefa01418","modified":1674588749747},{"_id":"themes/kratos-rebirth/source/maps/kr-dark.min.js.map","hash":"f4fb143d02c2ede396673a6fbd84b36c134aa818","modified":1674588750059},{"_id":"themes/kratos-rebirth/source/maps/kr-color-dark.min.css.map","hash":"55c7b47dbbdccec1ad2e584a4cb85fb7df5d7f4b","modified":1682222014110},{"_id":"themes/kratos-rebirth/source/maps/light.min.css.map","hash":"525abe619bc422b08fde586dbba5c835aa084c59","modified":1674588749746},{"_id":"themes/kratos-rebirth/source/maps/kratosr.min.js.map","hash":"d193d6d40315dc4a1625dbbd3bfea1c32c0a6e73","modified":1674588750102},{"_id":"themes/kratos-rebirth/source/maps/local-search.min.js.map","hash":"b982889304a495d435e2da32ebfe33846e986bf9","modified":1674588750103},{"_id":"themes/kratos-rebirth/source/maps/night-blue.min.css.map","hash":"ec0859ab631cb8a9afdfeef883daf3420606afcc","modified":1674588750059},{"_id":"themes/kratos-rebirth/source/maps/night-bright.min.css.map","hash":"2e06a59b8ec11b0c4a4806d23e0dae9802c41c12","modified":1674588750102},{"_id":"themes/kratos-rebirth/source/maps/night.min.css.map","hash":"20c8105676d6fb8a82a61ca87c7f9e9881ca9d38","modified":1674588750103},{"_id":"themes/kratos-rebirth/source/maps/night-eighties.min.css.map","hash":"55c13f2e4cd0e7e3d2b9b91133d4c49e77942a43","modified":1674588750103},{"_id":"themes/kratos-rebirth/source/maps/pjax.min.js.map","hash":"470e4093a5ffcbde52aab662cf3d64dcc29abf22","modified":1674588750103},{"_id":"themes/kratos-rebirth/source/maps/prismjs.min.css.map","hash":"3c7bf5a131ccfa521c4d277fdbcdeb88258ccc87","modified":1674588401662},{"_id":"themes/kratos-rebirth/source/maps/snow.min.js.map","hash":"45a60b2cca636b8de0825eb87530f6433f77a847","modified":1674588750104},{"_id":"themes/kratos-rebirth/src/scss/kratosr.scss","hash":"d14840ac56a0454235a9608b83e3f5f6315d80e2","modified":1682230873698},{"_id":"themes/kratos-rebirth/src/js/local-search.js","hash":"fe79206f66b0f1bd5279e7356127bdbe31f3540a","modified":1674588401865},{"_id":"themes/kratos-rebirth/src/js/candy.js","hash":"95b61e65d186b3a8571198557b150420c337be4b","modified":1674588401864},{"_id":"themes/kratos-rebirth/src/js/kr-dark.js","hash":"ae92359b7c023f78707c8065e337f478fa8f7c9a","modified":1674588401864},{"_id":"themes/kratos-rebirth/src/js/pjax.js","hash":"c7697968054b8b91492ac345e7013f4dca342d30","modified":1674588401865},{"_id":"themes/kratos-rebirth/src/scss/kr-color/base.scss","hash":"493cba80394b35a5f278b307dd82e29b7fa351df","modified":1682217049369},{"_id":"themes/kratos-rebirth/src/js/kratosr.js","hash":"3599d62423959cd49bad3b054ed8c47cf780ef4a","modified":1674588401865},{"_id":"themes/kratos-rebirth/src/scss/kr-color/default.scss","hash":"1c9d5bc8c8a5578937c9c28a4e9c16e0964cf159","modified":1682220595405},{"_id":"themes/kratos-rebirth/src/scss/highlight/style.scss","hash":"aca64b080abf33dceb24920bca56cca2dc42949e","modified":1674588401865},{"_id":"themes/kratos-rebirth/src/js/snow.js","hash":"293a7690f41f83ac367ec019c728efdb1330e598","modified":1674588401865},{"_id":"themes/kratos-rebirth/src/scss/highlight/theme/light.scss","hash":"d7262b8d0d66734102e4276811dcc10b2c0ae02a","modified":1674588401865},{"_id":"themes/kratos-rebirth/src/scss/highlight/theme/night-blue.scss","hash":"e174fc14362d931c12032d41eecc39e8ab7eb452","modified":1674588401865},{"_id":"themes/kratos-rebirth/src/scss/highlight/theme/night-bright.scss","hash":"22b764e26356b43dc5e04dac923f62349f7ac0b5","modified":1674588401865},{"_id":"themes/kratos-rebirth/src/scss/highlight/theme/night-eighties.scss","hash":"891f792df1e7a82cd60a2436cc65e7030e9492e8","modified":1674588401865},{"_id":"themes/kratos-rebirth/src/scss/kr-color-dark.scss","hash":"cc9cd0afa5e45df9d2de5466a7c43f1b2c3d42a1","modified":1682220592441},{"_id":"themes/kratos-rebirth/source/vendors/aplayer@1.10.1/dist/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1674588401681},{"_id":"themes/kratos-rebirth/src/scss/highlight/theme/night.scss","hash":"dbbd50f45908214efc2bfb820b92756e07838a50","modified":1674588401865},{"_id":"themes/kratos-rebirth/source/maps/kratosr.min.css.map","hash":"7718f31aa23d5319c6d5eedf4498b202e8a67c9d","modified":1682222014936},{"_id":"themes/kratos-rebirth/images/banner_dark.jpeg","hash":"212dde0004c46785e19d68597a19393a60061125","modified":1674599051133},{"_id":"themes/kratos-rebirth/src/images/banner_dark.jpeg","hash":"28429e11c7f4381cafe37d93e41b937becf4ddc5","modified":1674589578058},{"_id":"themes/kratos-rebirth/images/.DS_Store","hash":"aa7feaadf802c0c69d82105b913f2318caa3d723","modified":1674600645067},{"_id":"source/_posts/[2023-01-18].md","hash":"ddcd923a323727fd1d6edc0b3bf124a58c24ee6a","modified":1674595360762},{"_id":"source/_posts/ttttt copy.md","hash":"3163696e780cac41f1e7ee83449906e697e02038","modified":1674594109287},{"_id":"source/_posts/[2023-01-19] copy 2.md","hash":"62a83cd7f5fe83b93b79fdc980bb3b586f8e8064","modified":1674595360763},{"_id":"source/_posts/[2023-01-19] copy 4.md","hash":"c525b0d09d7e5c2ca6b9018cc8917406545856fa","modified":1674595360763},{"_id":"source/_posts/[2023-01-19] copy 5.md","hash":"3d41eac2e15ceddad56b3a08592c04038cdbd3c5","modified":1674595360763},{"_id":"source/_posts/[2023-01-19] copy 3.md","hash":"5211d7dcba311ae8816bf011d61125c6d501102a","modified":1674595360763},{"_id":"source/_posts/[2023-01-19].md","hash":"8977edee2f7e214f7518530950b93cd4914aa032","modified":1674595360764},{"_id":"source/_posts/[2023-01-19] copy.md","hash":"d2afef5d7bc8ec0e93df8897b7e2cbe5f6eba282","modified":1674595360764},{"_id":"public/2022/11/05/[2023-01-19] copy 3/index.html","hash":"b3bba5fb720e16adcf024c6e97f6a6356facf80c","modified":1674601205356},{"_id":"public/2022/11/04/[2023-01-19] copy 2/index.html","hash":"155aeafdc2ecea86daf117a5b6f2a071fd6cee36","modified":1674601205356},{"_id":"public/2022/11/06/[2023-01-19] copy 4/index.html","hash":"28ec4f0ada840d5f564408d88240f1ce2dfc172c","modified":1674601205356},{"_id":"public/2022/11/03/[2023-01-19] copy/index.html","hash":"5fe914a4b15d84fdb3905f18f91eff7c573c4b92","modified":1674600038462},{"_id":"public/2022/11/02/[2023-01-19]/index.html","hash":"20fc76118595eb760dd1bf21c37d513372607a36","modified":1674600038462},{"_id":"public/2022/11/01/[2023-01-18]/index.html","hash":"b6f0791436f672178e037abb36c1be68f59c7290","modified":1674601205356},{"_id":"public/2022/01/23/hello-world/index.html","hash":"9377ac180470d267e1f5c368a6acae68bb7b32b6","modified":1674600038462},{"_id":"public/2022/11/07/[2023-01-19] copy 5/index.html","hash":"c64644f5afd3c38b9c278c76a7e0870edaa147e6","modified":1674600038462},{"_id":"public/archives/2022/index.html","hash":"32419547e76bf28968877ef464c5dcd34cac70d5","modified":1683527725839},{"_id":"public/archives/2022/01/index.html","hash":"a79fb525efc75e21824dbbf7d165c0d21e181939","modified":1683527725839},{"_id":"public/archives/2022/11/index.html","hash":"df57e69b5cf6ec4eb02264e6304771b7c067e04f","modified":1683527725839},{"_id":"public/categories/绘画/index.html","hash":"aaa71c40e85d3892a8342adf8328e08cbae783a8","modified":1683527725839},{"_id":"public/categories/日记/index.html","hash":"995ae01dec7633f588295ab63de4ea3161197d54","modified":1683527725839},{"_id":"public/maps/candy.min.js.map","hash":"b6500774eb8428cbda894ac03fae6febefa01418","modified":1681960320512},{"_id":"public/maps/kratosr.min.js.map","hash":"d193d6d40315dc4a1625dbbd3bfea1c32c0a6e73","modified":1681960320512},{"_id":"public/maps/kr-dark.min.js.map","hash":"f4fb143d02c2ede396673a6fbd84b36c134aa818","modified":1681960320512},{"_id":"public/maps/kr-color-dark.min.css.map","hash":"55c7b47dbbdccec1ad2e584a4cb85fb7df5d7f4b","modified":1682222022600},{"_id":"public/maps/light.min.css.map","hash":"525abe619bc422b08fde586dbba5c835aa084c59","modified":1681960320512},{"_id":"public/maps/night-eighties.min.css.map","hash":"55c13f2e4cd0e7e3d2b9b91133d4c49e77942a43","modified":1681960320512},{"_id":"public/maps/night-bright.min.css.map","hash":"2e06a59b8ec11b0c4a4806d23e0dae9802c41c12","modified":1681960320512},{"_id":"public/maps/night-blue.min.css.map","hash":"ec0859ab631cb8a9afdfeef883daf3420606afcc","modified":1681960320512},{"_id":"public/maps/local-search.min.js.map","hash":"b982889304a495d435e2da32ebfe33846e986bf9","modified":1681960320512},{"_id":"public/maps/night.min.css.map","hash":"20c8105676d6fb8a82a61ca87c7f9e9881ca9d38","modified":1681960320512},{"_id":"public/maps/snow.min.js.map","hash":"45a60b2cca636b8de0825eb87530f6433f77a847","modified":1681960320512},{"_id":"public/maps/prismjs.min.css.map","hash":"3c7bf5a131ccfa521c4d277fdbcdeb88258ccc87","modified":1681960320512},{"_id":"public/maps/pjax.min.js.map","hash":"470e4093a5ffcbde52aab662cf3d64dcc29abf22","modified":1681960320512},{"_id":"public/maps/kratosr.min.css.map","hash":"7718f31aa23d5319c6d5eedf4498b202e8a67c9d","modified":1682222022600},{"_id":"source/_posts/[babel]babel配置.md","hash":"3db2503045672c39dd1eb664b698217d66a0bb54","modified":1674599322125},{"_id":"public/2021/10/25/[babel]babel配置/index.html","hash":"e387d4e1fc65817b5ff81f9d8c325ebe1f33a0f3","modified":1674641506242},{"_id":"public/archives/2021/index.html","hash":"d06e0e3c5dadddd4406bfc521870726941c24877","modified":1683527725839},{"_id":"public/archives/2021/10/index.html","hash":"439ab383c88403b335cedd0e4424222946cc46a9","modified":1683527725839},{"_id":"public/categories/程序员的自我修养/index.html","hash":"814062d90d777dd892a405a5334ca5ab14ad7d5f","modified":1683527725839},{"_id":"public/tags/babel/index.html","hash":"80b0763285691150bf35ee48e6cb726dad556271","modified":1683527725839},{"_id":"source/_posts/20220123.md","hash":"87dcffd2763a57d16d1b93b83a2661ec1f61245f","modified":1674600143808},{"_id":"source/_posts/202201231.md","hash":"8977edee2f7e214f7518530950b93cd4914aa032","modified":1674600155910},{"_id":"source/_posts/20221107.md","hash":"3d41eac2e15ceddad56b3a08592c04038cdbd3c5","modified":1674600180014},{"_id":"source/_posts/20221103.md","hash":"d2afef5d7bc8ec0e93df8897b7e2cbe5f6eba282","modified":1674600169459},{"_id":"themes/kratos-rebirth/images/alipay.webp","hash":"01fa6151d2122f0470ee6f38ac8e4ced6c81912e","modified":1674600537335},{"_id":"themes/kratos-rebirth/images/404.webp","hash":"d2e2bd5cc2627a2b04d5e449a67949a2605ae13e","modified":1674600537334},{"_id":"themes/kratos-rebirth/images/avatar.webp","hash":"3ed6e4e1e08e9c2700aa149d1f9e068fb02947cd","modified":1674600537335},{"_id":"themes/kratos-rebirth/images/about.webp","hash":"ca0fb739ab4426e7895742c1d8d52df1e14468e8","modified":1674600537335},{"_id":"themes/kratos-rebirth/images/banner_dark.webp","hash":"5589986444825e2b75c369d419ff736d3a396bac","modified":1674600537336},{"_id":"themes/kratos-rebirth/images/banner.webp","hash":"7c5093243bfd581a633ba8a905e2d379cfa78c00","modified":1674600537335},{"_id":"themes/kratos-rebirth/images/bg.webp","hash":"f232b442b64eaa90f45a48ff04d8e7d352caf212","modified":1674600537336},{"_id":"themes/kratos-rebirth/images/comment.webp","hash":"7756b5a69f2a85a2d1c4251e3055bfa0218aa385","modified":1674600537338},{"_id":"themes/kratos-rebirth/images/bg_dark.webp","hash":"f232b442b64eaa90f45a48ff04d8e7d352caf212","modified":1674600537336},{"_id":"themes/kratos-rebirth/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1674600537338},{"_id":"themes/kratos-rebirth/images/comment_dark.webp","hash":"7756b5a69f2a85a2d1c4251e3055bfa0218aa385","modified":1674600537338},{"_id":"themes/kratos-rebirth/images/wechat.webp","hash":"06f3997bf554768c04cb588198c7b3d68c21b8e9","modified":1674600537344},{"_id":"themes/kratos-rebirth/images/psr.webp","hash":"bf457bf84bca767bac1bd2b960d91c53ba3fbdee","modified":1674600537339},{"_id":"themes/kratos-rebirth/images/thumb/thumb_10.webp","hash":"4983eeca7886bbe7c09b0c79f4774302fdfa1315","modified":1674600537340},{"_id":"themes/kratos-rebirth/images/thumb/thumb_1.webp","hash":"a818f050112ceb75e3a60dc1673a10783b254595","modified":1674600537339},{"_id":"themes/kratos-rebirth/images/thumb/thumb_11.webp","hash":"08d8d91e2b01768842abb47cd48a0f07d22d070c","modified":1674600537341},{"_id":"themes/kratos-rebirth/images/thumb/thumb_13.webp","hash":"c4c9050637f4ffa3cb7d782f59dadc993ac3a6de","modified":1674600537341},{"_id":"themes/kratos-rebirth/images/thumb/thumb_12.webp","hash":"b6b8e1281f9146925e45e937cb4d5b28bcabe957","modified":1674600537341},{"_id":"themes/kratos-rebirth/images/thumb/thumb_14.webp","hash":"f9300e2b45c1f061ec8cc21527142dafc558a9e6","modified":1674600537341},{"_id":"themes/kratos-rebirth/images/thumb/thumb_15.webp","hash":"8629f2a7d3b0192549f809e6b7479159af0222da","modified":1674600537341},{"_id":"themes/kratos-rebirth/images/thumb/thumb_16.webp","hash":"61714ccffd55d6fa74cf94bcdd5a464da04ce891","modified":1674600537341},{"_id":"themes/kratos-rebirth/images/thumb/thumb_17.webp","hash":"b5a036ec234a23c820a89d1c640b1f2e8dd3dfa4","modified":1674600537342},{"_id":"themes/kratos-rebirth/images/thumb/thumb_18.webp","hash":"5bc78b9d6cb0a0cf6daa3a35b93e575777a49ddd","modified":1674600537342},{"_id":"themes/kratos-rebirth/images/thumb/thumb_19.webp","hash":"15e0cd0cbe5c7166915a4b68680681beccc2afef","modified":1674600537342},{"_id":"themes/kratos-rebirth/images/thumb/thumb_2.webp","hash":"1bcf7461c2b9408b8a893013fa425eb46701faf6","modified":1674600537342},{"_id":"themes/kratos-rebirth/images/thumb/thumb_20.webp","hash":"4ab961d94a0d3abbefc7f6d9188a889ec2225e7a","modified":1674600537342},{"_id":"themes/kratos-rebirth/images/thumb/thumb_3.webp","hash":"3faffd2575e0751526249c5c56a2a5045a21363b","modified":1674600537342},{"_id":"themes/kratos-rebirth/images/thumb/thumb_4.webp","hash":"1d0f136590632e7ba31f5510d24891ba443f1f33","modified":1674600537343},{"_id":"themes/kratos-rebirth/images/thumb/thumb_5.webp","hash":"ba384ada1c2a17b67036addd68ffa1f604ab5a41","modified":1674600537343},{"_id":"themes/kratos-rebirth/images/thumb/thumb_6.webp","hash":"c2d8b68971dacd111566526f64d94932f5c6f076","modified":1674600537343},{"_id":"themes/kratos-rebirth/images/thumb/thumb_7.webp","hash":"4be8fe8ea1b3563b78924062e3aa013cd5c4e82b","modified":1674600537343},{"_id":"themes/kratos-rebirth/images/thumb/thumb_8.webp","hash":"9e6d74786d8459440d68c409eb654364dd279f8a","modified":1674600537344},{"_id":"themes/kratos-rebirth/images/thumb/thumb_9.webp","hash":"bca69e7d56982b43c52e9ffa17c8d5bb268834d8","modified":1674600537344},{"_id":"themes/kratos-rebirth/images/avatar.jpg","hash":"71fb85947c1d17e5b3382c3b2156faad04e6f422","modified":1674596348955},{"_id":"themes/kratos-rebirth/images/banner.jpeg","hash":"28429e11c7f4381cafe37d93e41b937becf4ddc5","modified":1674595360591},{"_id":"public/2022/11/07/20221107/index.html","hash":"bf77c754098826306373f90189f2d30f3cf71458","modified":1674601205356},{"_id":"public/2022/11/03/20221103/index.html","hash":"e8b0812ca88c873ccc18d5ffd6c6d3357aefe167","modified":1674601205356},{"_id":"public/2022/01/23/20220123/index.html","hash":"a8a831388173d48b94267f59c0969b0787b3f8c1","modified":1674601205356},{"_id":"public/2022/11/02/202201231/index.html","hash":"f4213b44616531525b5bdabb49b1e2a6a4b6a76a","modified":1674601205356},{"_id":"source/_posts/20221104.md","hash":"55c70e08c3897fdb4856db4fab5d1c176df0d726","modified":1674600984628},{"_id":"public/2021/01/12/20221104/index.html","hash":"d4c4c275483929aa31cc292dee824309a8b3fb34","modified":1674601205356},{"_id":"public/archives/2021/01/index.html","hash":"84fce8485bdcba6cbcbf09b973a962458187672f","modified":1674601205356},{"_id":"public/tags/模块化/index.html","hash":"5c4a0db7578437cc89bc5df6335454fa95d9b3ae","modified":1674649639385},{"_id":"source/_posts/.md","hash":"45539fc4e24fff6ece0613e8a1151eb2d95385a4","modified":1674632729327},{"_id":"source/_posts/bl-caoping.md","hash":"c20c99fa30c9a98d17d85a0247044c50c8a58125","modified":1674633790464},{"_id":"source/_posts/bl-guangyuan.md","hash":"f8f06bf0948c5f04b3fbca35a083c13176a3bee3","modified":1674632427944},{"_id":"source/_posts/bl-vroid.md","hash":"8e847112bd4b6314017708e6d319e593bf5ca69a","modified":1674639921848},{"_id":"source/_posts/diary-sxh2.md","hash":"db4be2e261f56ef28572a7d39385432f6f0d5571","modified":1674632756200},{"_id":"source/_posts/diary-sxh3.md","hash":"957e9f427867d853c7ca230d941b43a21c85bc21","modified":1674632753810},{"_id":"source/_posts/diary-sxh4.md","hash":"df0b012b221fd44209c9b436740b830f5e40c536","modified":1674632751084},{"_id":"source/_posts/diary-sxh.md","hash":"ddcbeee93a87e8e3f12b0334c7b0d15fd78623ca","modified":1674632759224},{"_id":"source/_posts/bl-zhuoseqi.md","hash":"87be65e9fcf8c013b3e0b8cc167cf559e36ff4b8","modified":1674634056348},{"_id":"source/_posts/diary-sxh5.md","hash":"e40e09cbdaedb94f611283bb1fb7d53cf6e25f01","modified":1674632748192},{"_id":"source/_posts/bl-zaqizaba.md","hash":"c4442921c21ea5b0282478436c71feef182aa271","modified":1674633973709},{"_id":"source/_posts/diary-sxh6.md","hash":"7b98b8e6fb3e24d227bb30b7553eaf9c3739bcee","modified":1674632744864},{"_id":"source/_posts/js-amd.md","hash":"0e39e72d152d2ff326d599f8b33c9510030a8126","modified":1674632688894},{"_id":"source/_posts/other-yueping.md","hash":"432e8da3777230149790a31ae6bd184c7a130e21","modified":1674630288546},{"_id":"source/_posts/paint-color copy 2.md","hash":"1f8f729520b8e54c4cb427d12de4cf9b72bc3910","modified":1674639879750},{"_id":"source/_posts/other-yuewenzi.md","hash":"b57ac40034212ce38c245459b8d89adecc87ac99","modified":1674630813998},{"_id":"source/_posts/paint-color.md","hash":"073fb9aac3f03469a29d46dea08fa81c4b12d31e","modified":1674632705213},{"_id":"source/_posts/paint-color copy.md","hash":"1b1b4fb618d44bb4db626e38dd4849569c163670","modified":1674634205360},{"_id":"source/_posts/paint-picture2.md","hash":"7079540295e333583c26267e29390f5688ec9302","modified":1674638124874},{"_id":"source/_posts/paint-picture1.md","hash":"020594f60d6581b564d3303b7f1d592a4d992426","modified":1674639070956},{"_id":"source/_posts/paint-picture2 copy 2.md","hash":"bb877af8c9bad62eb25ed49e8e6245140df29fe9","modified":1674639643444},{"_id":"source/_posts/paint-picture3.md","hash":"3cb7b54f316cf48229c72fc507e01fc1a9059c68","modified":1674639303122},{"_id":"source/_posts/zb-quxianwanzhe.md","hash":"a28178f18c53860b86705b8ae65070b6fe5af291","modified":1674639034908},{"_id":"source/_posts/paint-picture2 copy.md","hash":"7fe5c9ac5cd18ee8552c4a02b1d7b14e5620d275","modified":1674638323303},{"_id":"source/_posts/node-path.md","hash":"00aff9694ffa2ad41c4e538a5eb3e274cc6c5947","modified":1674640091014},{"_id":"source/_posts/paint-pictureall.md","hash":"fbccb0fc936d1f26bb2fc5ab74afc6545a63560f","modified":1674639423656},{"_id":"source/_posts/zb-gob.md","hash":"a52859452d700edcae3ff5a0de102b36c3e627b1","modified":1674638935624},{"_id":"public/2022/10/15/zb-quxianwanzhe/index.html","hash":"28975d0ea5a0fc413f1c5a752fc631b33c900485","modified":1674641506242},{"_id":"public/2022/11/11/bl-zhuoseqi/index.html","hash":"64f2c62031b8b27e91e88774af8513dc356579e9","modified":1674641506242},{"_id":"public/2022/10/05/zb-gob/index.html","hash":"0fd70b38c131d2243125e86ff9946f33e6fd62f6","modified":1674641506242},{"_id":"public/2022/10/11/paint-pictureall/index.html","hash":"07ba91608200ae196fec2403f3bc56a2d6b8c73f","modified":1674641506242},{"_id":"public/2022/10/03/paint-picture2 copy/index.html","hash":"0852fda438dd8db2c472c2cd6aa5a5dc9022eaf1","modified":1674641506242},{"_id":"public/2022/11/24/paint-picture1/index.html","hash":"e93cfda53195ec0c911d86d198c805b01e32661b","modified":1674641506242},{"_id":"public/2022/09/15/bl-zaqizaba/index.html","hash":"2b9a3abd7296747ecfad91302430bbae544238bc","modified":1674641506242},{"_id":"public/2022/09/19/paint-picture2/index.html","hash":"838c92bcde818a391742275431130ad861a86a77","modified":1674641506242},{"_id":"public/2022/07/25/bl-guangyuan/index.html","hash":"3f9f39cf4749fa0f7c88bfcea3d0bacd2a76dace","modified":1674641506242},{"_id":"public/2022/08/01/bl-caoping/index.html","hash":"d30fb32f73def0d1be21a3772aea1317429439e5","modified":1674641506242},{"_id":"public/2022/07/23/paint-color copy 2/index.html","hash":"6cd25b1318505d9d4480a813e0665b443a5f70c7","modified":1674641506242},{"_id":"public/2022/07/02/paint-color copy/index.html","hash":"ae19fe7ce96b2b175ed90004d2a6a710c26b1db7","modified":1674641506242},{"_id":"public/2022/08/31/bl-vroid/index.html","hash":"25c7204c761a9305cc0ab56fc97edd1ece5ba2da","modified":1674641506242},{"_id":"public/2022/06/23/paint-color/index.html","hash":"6a2c52560d2ab5527a1baa9c0e5fe4371e815fa6","modified":1674641506242},{"_id":"public/2021/09/27/other-yuewenzi/index.html","hash":"4ae0a2f59c84ef78d942540ab3849cb13ed23c7e","modified":1683527725839},{"_id":"public/2021/08/03/paint-picture2 copy 2/index.html","hash":"db5ba70c1a5154b1e307a47defa1a963acd18d99","modified":1674641506242},{"_id":"public/2021/09/25/other-yueping/index.html","hash":"7d9889c3e62594859ef65b66e1fe8484163db7f7","modified":1683527725839},{"_id":"public/2021/05/11/node-path/index.html","hash":"dadccd7242af62813769a8b4acad49af9127cadd","modified":1674641506242},{"_id":"public/2021/04/12/js-amd/index.html","hash":"2d8c15d641d2fcee4888af8c6a0a69045b630c28","modified":1674641506242},{"_id":"public/2021/04/06/diary-sxh4/index.html","hash":"db546593c82547306259e7340fe5da52d2e59a9c","modified":1674641506242},{"_id":"public/2021/04/07/diary-sxh2/index.html","hash":"e167b443d6bbbdf8d946727428a4718253a67d44","modified":1674641506242},{"_id":"public/2021/04/05/diary-sxh5/index.html","hash":"d03dd116333d048732871bcdc28d0260680c08b8","modified":1674641506242},{"_id":"public/2021/04/03/diary-sxh3/index.html","hash":"c69163a24c5f91f97028268251119ede6a88c6d1","modified":1674641506242},{"_id":"public/2021/04/02/diary-sxh/index.html","hash":"620e47ca3b7f45f215ad06a12365263ab63409ab","modified":1674641506242},{"_id":"public/2021/04/01/diary-sxh6/index.html","hash":"b3fa926242d9423eca975379829ed74ed54f0290","modified":1674641506242},{"_id":"public/page/2/index.html","hash":"32c9182d7e7b048788afbbfe4538df7241a51b6b","modified":1683527725839},{"_id":"public/page/3/index.html","hash":"8b9eb68212a3b26ee00a9d2aeb3cc49bb4d2c0fa","modified":1683527725839},{"_id":"public/2020/05/24/paint-picture3/index.html","hash":"d4a303309a4cd12570b5437f13b425f6b51e26c7","modified":1674641506242},{"_id":"public/categories/建模/index.html","hash":"f08c44c5e12ff1c91e3c1f8a7125e411f8befa5d","modified":1683527725839},{"_id":"public/categories/水仙花观察日记/index.html","hash":"3b7f0e899dfa73f916a2be81b7e0ff4f600db586","modified":1683527725839},{"_id":"public/categories/奇奇怪怪的积累/index.html","hash":"4c6e15c94227305fa12cd1ceb375effed60b39c4","modified":1683527725839},{"_id":"public/categories/生活/index.html","hash":"5d784dac85a683bffa3b107d64440a8f1c641129","modified":1683527725839},{"_id":"public/categories/练字-绘画/index.html","hash":"0069d2683c9585b877661ca895ca14ae153f043a","modified":1674649639385},{"_id":"public/categories/练字/index.html","hash":"79a4faad84fdd587b110f21f1666b769374ab13c","modified":1683527725839},{"_id":"public/archives/page/2/index.html","hash":"b6d91d087d2524654d120a89caa2b1c4efc27363","modified":1683527725839},{"_id":"public/archives/2020/index.html","hash":"6c578cf5df1564c15e5be6584871bab7e960570c","modified":1683527725839},{"_id":"public/archives/page/3/index.html","hash":"f56117212fc61fc0f0a9b44faf4d486db58b8cd3","modified":1683527725839},{"_id":"public/archives/2020/05/index.html","hash":"685f5700ab8823e53538ead4062e64b78071ec2f","modified":1683527725839},{"_id":"public/archives/2021/page/2/index.html","hash":"ab05758918de7d9b8b958a02a697176a7da2aa63","modified":1683527725839},{"_id":"public/archives/2021/04/index.html","hash":"4e1c925d220c5d5b9201b8065d0352be67181978","modified":1683527725839},{"_id":"public/archives/2021/05/index.html","hash":"1229b1291b0ffe370953f4c13732ea0da065d93f","modified":1683527725839},{"_id":"public/archives/2021/08/index.html","hash":"5e510d8f328973df0f1b8730706790bc1aaac27b","modified":1683527725839},{"_id":"public/archives/2021/09/index.html","hash":"219057c344fb4ba6350559fcbdfc24a38e471381","modified":1683527725839},{"_id":"public/archives/2022/page/2/index.html","hash":"391dd76161e6ba190ae36b752316cf8601eb43fe","modified":1683527725839},{"_id":"public/archives/2022/07/index.html","hash":"ca9503cb179c9c8822983bf45791f2876f743c02","modified":1683527725839},{"_id":"public/archives/2022/06/index.html","hash":"8ca62e187cd4a124b73c47d82baf1bc92e025b54","modified":1683527725839},{"_id":"public/archives/2022/08/index.html","hash":"595cfbf6bdc92505098dd94b2770ffea6b2aeb93","modified":1683527725839},{"_id":"public/archives/2022/09/index.html","hash":"b92e88d89ea27a91728480d4c3b32ef94a4ee018","modified":1683527725839},{"_id":"public/archives/2022/10/index.html","hash":"1ea7546f874ae438108fdd432a464e4f9c904697","modified":1683527725839},{"_id":"public/tags/blender/index.html","hash":"29913b91d7d0110b137d36e14b157b4978d59acd","modified":1683527725839},{"_id":"public/tags/粤拼/index.html","hash":"91f83b66a703c2112d552887545ebd0624e974bc","modified":1683527725839},{"_id":"public/tags/菜谱/index.html","hash":"30f77867083f123c718d0a9ce1ccdfabf07d459d","modified":1683527725839},{"_id":"public/tags/node/index.html","hash":"7965a31259b9e98f145c96011b605c71fd7fc5d7","modified":1683527725839},{"_id":"public/tags/练习/index.html","hash":"28c2612179461cd8e8f16ca411d4a99dc5ec5970","modified":1674649639385},{"_id":"public/tags/ai绘画/index.html","hash":"79becd684fb46a19c4b3f1a646feb225f144b87d","modified":1683527725839},{"_id":"public/tags/Midjourney/index.html","hash":"c07519902b251805b8d170e6fde7110e58838dbd","modified":1683527725839},{"_id":"public/tags/练字/index.html","hash":"7f7fe63f1ade6528d06527a76a0b206dd3778936","modified":1683527725839},{"_id":"public/tags/写写写/index.html","hash":"0a8ec011ce9348718bf135ed36bd8bd6b2c68174","modified":1674649639385},{"_id":"public/tags/粤语/index.html","hash":"3da0f912337b79dfaaa96a2eddad1623ac88e8ff","modified":1683527725839},{"_id":"public/tags/zbrush/index.html","hash":"0119c72e8b55fe8bf4547bf3e1c740cbce3939c1","modified":1683527725839},{"_id":"themes/kratos-rebirth/source/images/.DS_Store","hash":"7546b5d7340aec33211d41871be2ce54b305aec5","modified":1675742032197},{"_id":"themes/kratos-rebirth/source/images/avatar.jpg","hash":"71fb85947c1d17e5b3382c3b2156faad04e6f422","modified":1674596348955},{"_id":"themes/kratos-rebirth/source/images/banner.jpeg","hash":"fb9cbd029edb3927aaa0357f4623413178edd272","modified":1681796801153},{"_id":"themes/kratos-rebirth/source/images/banner_dark.jpeg","hash":"212dde0004c46785e19d68597a19393a60061125","modified":1674599051133},{"_id":"source/_posts/git-my-json-server.md","hash":"a74e090d5bb39a688603e681baf341af543bbfac","modified":1674645439349},{"_id":"source/_posts/npm-dependencies.md","hash":"38a85813f59c0d246790ed7bab5016c101469fcf","modified":1674645580022},{"_id":"source/_posts/cxy/.DS_Store","hash":"1d829fa1020a1029ea8255149d83d9a0b2013ed2","modified":1674660190933},{"_id":"source/_posts/cxy/git-my-json-server.md","hash":"a74e090d5bb39a688603e681baf341af543bbfac","modified":1674646030978},{"_id":"source/_posts/cxy/chrome-ajax.md","hash":"e91164c25c9aa5d46084621d8f4876cd01bac7d4","modified":1674646219254},{"_id":"source/_posts/cxy/github-siyoucangku.md","hash":"06028508812ed6de4218d16571e96a6077895e48","modified":1674646023454},{"_id":"source/_posts/cxy/js-exportimort.md","hash":"cef82a8c8ae5a5d34ea1260b15f9d429e7cf4565","modified":1674647496838},{"_id":"source/_posts/cxy/node-path.md","hash":"00aff9694ffa2ad41c4e538a5eb3e274cc6c5947","modified":1674644174831},{"_id":"source/_posts/cxy/github-siyoucangku copy.md","hash":"897c853c546113fab28df095ff16f771413b73e6","modified":1674647532922},{"_id":"source/_posts/vscode-prettier.md","hash":"6a2733d9e9c2c29d28040482454ad80d11fcd98e","modified":1682480917525},{"_id":"source/_posts/cxy/npm-dependencies.md","hash":"e2711d63437225770c6e6f74571341c39a9052b2","modified":1674664774476},{"_id":"source/_posts/jianmo/.DS_Store","hash":"7c539e066862371d4e6a755fcfb97408441464ed","modified":1674647278569},{"_id":"source/_posts/cxy/chrome-tiaoshi.md","hash":"3e30f4ea28664f7c15ad800783ae3fa135bca733","modified":1674646377078},{"_id":"source/_posts/cxy/js-amd.md","hash":"258b4fe7a644f18a5221f9f6052453661309c1d8","modified":1674647527324},{"_id":"source/_posts/jianmo/bl-caoping.md","hash":"c20c99fa30c9a98d17d85a0247044c50c8a58125","modified":1674644174830},{"_id":"source/_posts/jianmo/bl-guangyuan.md","hash":"f8f06bf0948c5f04b3fbca35a083c13176a3bee3","modified":1674644174830},{"_id":"source/_posts/jianmo/bl-vroid.md","hash":"8e847112bd4b6314017708e6d319e593bf5ca69a","modified":1674644174830},{"_id":"source/_posts/jianmo/bl-zaqizaba.md","hash":"c4442921c21ea5b0282478436c71feef182aa271","modified":1674644174830},{"_id":"source/_posts/jianmo/zb-gob.md","hash":"a52859452d700edcae3ff5a0de102b36c3e627b1","modified":1674644174832},{"_id":"source/_posts/jianmo/bl-zhuoseqi.md","hash":"87be65e9fcf8c013b3e0b8cc167cf559e36ff4b8","modified":1674644174830},{"_id":"source/_posts/diary/.DS_Store","hash":"fb76cc5ed7af9ed54dd754bcb3a76233e2d8588b","modified":1674652185905},{"_id":"source/_posts/diary/diary-sxh.md","hash":"ddcbeee93a87e8e3f12b0334c7b0d15fd78623ca","modified":1674644174830},{"_id":"source/_posts/diary/diary-sxh2.md","hash":"db4be2e261f56ef28572a7d39385432f6f0d5571","modified":1674644174830},{"_id":"source/_posts/diary/diary-sxh4.md","hash":"df0b012b221fd44209c9b436740b830f5e40c536","modified":1674644174830},{"_id":"source/_posts/jianmo/zb-quxianwanzhe.md","hash":"a28178f18c53860b86705b8ae65070b6fe5af291","modified":1674644174832},{"_id":"source/_posts/diary/diary-sxh5.md","hash":"e40e09cbdaedb94f611283bb1fb7d53cf6e25f01","modified":1674644174830},{"_id":"source/_posts/diary/diary-sxh6.md","hash":"7b98b8e6fb3e24d227bb30b7553eaf9c3739bcee","modified":1674644174830},{"_id":"source/_posts/paint/paint-color copy 2.md","hash":"33cdd282034f5a8c43ab5cc761b38d1593221007","modified":1674651864196},{"_id":"source/_posts/diary/diary-sxh3.md","hash":"957e9f427867d853c7ca230d941b43a21c85bc21","modified":1674644174830},{"_id":"source/_posts/paint/.DS_Store","hash":"3ab1893d9fcaef55ff259d35dffe875d8f5e935b","modified":1674654805167},{"_id":"source/_posts/paint/paint-color.md","hash":"8496b02a305e72a509d78e3bb7940ea158a220c6","modified":1674651918435},{"_id":"source/_posts/paint/paint-color copy.md","hash":"61045cda3a2a3e7012535d0ee7047bb275633fcf","modified":1674651913430},{"_id":"source/_posts/paint/paint-picture2 copy 2.md","hash":"bb877af8c9bad62eb25ed49e8e6245140df29fe9","modified":1674644174832},{"_id":"source/_posts/paint/paint-picture1.md","hash":"05a7f5f4ca5f18b9e4dbad52f6064ffb27c17308","modified":1674651924169},{"_id":"source/_posts/paint/paint-picture2.md","hash":"93529680794abbd956fbbc2fe672a240b6b8b106","modified":1674651933990},{"_id":"source/_posts/paint/paint-picture3.md","hash":"540a77b766a32f698d5226c762d86e74f8846790","modified":1674652082723},{"_id":"source/_posts/paint/paint-pictureall.md","hash":"a60948acba25374b05205d1fc7dac9e813cb2a21","modified":1674652020453},{"_id":"source/_posts/paint/paint-picture2 copy.md","hash":"75988d71fae8a76e2e9ad61ce56e3c792bd30a82","modified":1674651931308},{"_id":"source/_posts/cxy/framework/babel.md","hash":"00239492a19dd85e7c65880ae64f061a654af9b0","modified":1674648646340},{"_id":"source/_posts/cxy/framework/react.md","hash":"4fd4662d07db7c19f57f2553d931cc9ed62836cd","modified":1675577622295},{"_id":"source/_posts/cxy/other/chrome-tiaoshi.md","hash":"10cc5674fee4b5946e6f25fc73ebce25c206d95a","modified":1674676662649},{"_id":"source/_posts/cxy/other/git-my-json-server.md","hash":"5c3dc421e7bfc1768b1476fe582bd4dd2c44e999","modified":1675250381197},{"_id":"source/_posts/cxy/other/chrome-ajax.md","hash":"e91164c25c9aa5d46084621d8f4876cd01bac7d4","modified":1674649412517},{"_id":"source/_posts/cxy/other/github-siyoucangku.md","hash":"6c990340e5647fdb6b4fa6850597f0005d49ed85","modified":1675250381199},{"_id":"public/2022/12/25/cxy/other/github-siyoucangku/index.html","hash":"6b3ed9219c4c17592db119cbefa222fe1c0b0ea0","modified":1674806208988},{"_id":"public/2022/11/24/paint/paint-picture1/index.html","hash":"e59eeff6f6d8edee941b34e056cb29c8ff84df78","modified":1683527725839},{"_id":"public/2022/11/21/vscode-prettier/index.html","hash":"107460562ce7e35d95a30309b69c3fe3c0565029","modified":1683527725839},{"_id":"public/2022/11/11/jianmo/bl-zhuoseqi/index.html","hash":"7d65dd895f37dbb60c76c1c2ccdc58c76f958606","modified":1683527725839},{"_id":"public/2022/10/11/paint/paint-pictureall/index.html","hash":"073c837cca95a65a310a356205a60ab3d27f72d5","modified":1683527725839},{"_id":"public/2022/10/05/jianmo/zb-gob/index.html","hash":"eda2eb1fd7e8ede6689d7a5fc65c2d4ee9460450","modified":1674649639385},{"_id":"public/2022/09/19/paint/paint-picture2/index.html","hash":"9a4ceca22c9d0f73602d27324216d91eed92cf35","modified":1683527725839},{"_id":"public/2022/09/15/jianmo/bl-zaqizaba/index.html","hash":"c773c0c1dd15cc4d49110da44e34fcc01a4257fa","modified":1683527725839},{"_id":"public/2022/10/03/paint/paint-picture2 copy/index.html","hash":"0a6fa74d5175a2df86a94394ff3180097e7c5c23","modified":1683527725839},{"_id":"public/2022/08/31/jianmo/bl-vroid/index.html","hash":"719e9c0fa622ad92ef5b1f91053d91785fe7f206","modified":1683527725839},{"_id":"public/2022/10/15/jianmo/zb-quxianwanzhe/index.html","hash":"17ea8874db471924b779783dc341a02b5e99d070","modified":1683527725839},{"_id":"public/2022/07/25/jianmo/bl-guangyuan/index.html","hash":"0f65067b8ba82964451d3081516317d13f1f4580","modified":1683527725839},{"_id":"public/2022/08/01/jianmo/bl-caoping/index.html","hash":"afc01020dff01bb2b1ce8e1b09c293c8bf49b543","modified":1683527725839},{"_id":"public/2022/07/02/paint/paint-color copy/index.html","hash":"c58a75114c0900c9469d9df7010c46dd6fccccb3","modified":1683527725839},{"_id":"public/2022/07/23/paint/paint-color copy 2/index.html","hash":"3d21c4d582d10e8f96e6121f6ea5068cae941db1","modified":1674649639385},{"_id":"public/2022/06/23/paint/paint-color/index.html","hash":"0947f5993e445468cebfd8be2bf7640e76b698f1","modified":1683527725839},{"_id":"public/2022/03/12/cxy/other/chrome-tiaoshi/index.html","hash":"1aa432810bb0d7b8fbe41d820d9d9efc27a99b63","modified":1683527725839},{"_id":"public/2021/10/25/cxy/framework/babel/index.html","hash":"eed7f08b6503d1cdaef6deb73e47bc7d9fb830f5","modified":1683527725839},{"_id":"public/2021/08/03/paint/paint-picture2 copy 2/index.html","hash":"3d088e1639ddd9ff94f05d74c2165d5eb07ae9e9","modified":1683527725839},{"_id":"public/2021/05/11/cxy/node-path/index.html","hash":"45d4d9b9014aad7f2c6d275f01e6dff85933b5fa","modified":1683527725839},{"_id":"public/2021/04/13/cxy/js-exportimort/index.html","hash":"bb0c6199322fccbaccc7e10669a799b853dac7a0","modified":1674649639385},{"_id":"public/2021/04/12/cxy/js-amd/index.html","hash":"c301e424021a3a0ebb8872833e486b271f04b0fe","modified":1674649639385},{"_id":"public/2021/04/07/diary/diary-sxh2/index.html","hash":"6657f543e14cebee2291d1d6fc39bcfd77ffa43b","modified":1674649639385},{"_id":"public/2021/04/06/diary/diary-sxh4/index.html","hash":"c7f5828b2b701d4d0e20d7d3e12d61ae284b74d9","modified":1674649639385},{"_id":"public/2021/04/05/diary/diary-sxh5/index.html","hash":"bceea20f77c23b0dbe5f38061c6e3ed435f3f722","modified":1674649639385},{"_id":"public/2021/04/03/diary/diary-sxh3/index.html","hash":"8549b1c4ac4c030fb39f20bf593f2da1d6cf4781","modified":1674649639385},{"_id":"public/2021/04/03/cxy/other/chrome-ajax/index.html","hash":"b8b4472989f44b51e02b933434a9d910ccf55ff7","modified":1683527725839},{"_id":"public/2021/04/02/diary/diary-sxh/index.html","hash":"c2616c64ad0071e29a4d703f1fa43b60398d183a","modified":1674649639385},{"_id":"public/2021/04/01/diary/diary-sxh6/index.html","hash":"a037d8f0ba53ec2901e8eec7854c29d4fa62681f","modified":1674649639385},{"_id":"public/2021/07/17/cxy/npm-dependencies/index.html","hash":"e5a0b2a1b1fcf1723c46f63ff4b3dc04cb5220ad","modified":1683527725839},{"_id":"public/2021/11/27/cxy/other/git-my-json-server/index.html","hash":"c38a948680cef7ed6cd3ff866db1f726d5b184a2","modified":1683527725839},{"_id":"public/2021/03/25/cxy/framework/react/index.html","hash":"97c6679ceb7f895c780a15ae3310d9e805f098dd","modified":1678199109030},{"_id":"public/2020/05/24/paint/paint-picture3/index.html","hash":"89a89248cfa9698c1b01dbcb0e9941cf36dd4d47","modified":1683527725839},{"_id":"public/archives/page/4/index.html","hash":"0a245566461a84cf8c773b1b94a466ea76afd779","modified":1683527725839},{"_id":"public/archives/2021/03/index.html","hash":"e5db8387e30701f513a5ddbf2a792d88e4168dd2","modified":1683527725839},{"_id":"public/archives/2021/07/index.html","hash":"3356ab44c6350cbcccc97da5a3440c0ca6f602cb","modified":1683527725839},{"_id":"public/archives/2021/11/index.html","hash":"6ae72c9f8bd33a21144a6b6db80c6da5a5b1e05f","modified":1683527725839},{"_id":"public/archives/2022/03/index.html","hash":"7679b93b71c33932f78f0a4a088f3d7b34b4cb59","modified":1683527725839},{"_id":"public/archives/2022/12/index.html","hash":"c0bc2a895733b63b0515ba52ce6ed1f58c6ffb6c","modified":1683527725839},{"_id":"public/page/4/index.html","hash":"5ea5f891b5adc3a7ed7d91cffc53dc611f453635","modified":1683527725839},{"_id":"public/categories/程序员的自我修养/page/2/index.html","hash":"ece4d6365f7b56b9ac2c734513b76251fd8663c1","modified":1683527725839},{"_id":"public/tags/api/index.html","hash":"bf4c10997ab02e2ae05285d8c71e0ecae8f24adf","modified":1683527725839},{"_id":"public/tags/开发效率/index.html","hash":"91627e831ca1c6f4d68f13aa73fd1faa2154e1b2","modified":1683527725839},{"_id":"public/tags/react/index.html","hash":"af37f304d5af5c4fa9ab689bdc65e7090eb751af","modified":1683527725839},{"_id":"source/_posts/jianmo/zb-bl-gob.md","hash":"a52859452d700edcae3ff5a0de102b36c3e627b1","modified":1674649844586},{"_id":"public/2022/10/05/jianmo/zb-bl-gob/index.html","hash":"adefa330d187dc8fad04a8606b27e7402c6f6f2c","modified":1683527725839},{"_id":"source/_posts/diary/diary-sxh copy.md","hash":"a78adbe9024bedbae9e499971735131950c7d030","modified":1674676072599},{"_id":"source/_posts/diary/diary-sxh/diary-sxh.md","hash":"ddcbeee93a87e8e3f12b0334c7b0d15fd78623ca","modified":1674644174830},{"_id":"source/_posts/diary/diary-sxh/.DS_Store","hash":"a1b91e9edab20cbbb642ab9a49784fe297fe783c","modified":1674652185904},{"_id":"source/_posts/caipu.md","hash":"1f8f729520b8e54c4cb427d12de4cf9b72bc3910","modified":1674651748329},{"_id":"source/_posts/diary/diary-sxh/diary-sxh4.md","hash":"df0b012b221fd44209c9b436740b830f5e40c536","modified":1674644174830},{"_id":"source/_posts/diary/diary-sxh/diary-sxh5.md","hash":"e40e09cbdaedb94f611283bb1fb7d53cf6e25f01","modified":1674644174830},{"_id":"source/_posts/diary/diary-sxh/diary-sxh3.md","hash":"957e9f427867d853c7ca230d941b43a21c85bc21","modified":1674644174830},{"_id":"source/_posts/diary/diary-sxh/diary-sxh2.md","hash":"db4be2e261f56ef28572a7d39385432f6f0d5571","modified":1674644174830},{"_id":"source/_posts/diary/diary-sxh/diary-sxh6.md","hash":"7b98b8e6fb3e24d227bb30b7553eaf9c3739bcee","modified":1674644174830},{"_id":"source/_posts/cxy/js/js-mkh.md","hash":"a1d13e3463428fd950d9ad4d978fcacee4ba4a27","modified":1674655286713},{"_id":"source/_posts/cxy/js/js-amd.md","hash":"e0baaeb06008be31f83efac2b45c0fff9fd489cf","modified":1674655071892},{"_id":"source/_posts/cxy/js/js-class.md","hash":"50869c4d601826c5604ecbbdc98575ce7a270337","modified":1674656074454},{"_id":"source/_posts/diary/diary-1009.md","hash":"33cdd282034f5a8c43ab5cc761b38d1593221007","modified":1674652622787},{"_id":"source/_posts/cxy/js/js-proxy.md","hash":"efb61ff53701fe3c3285eeaea81cc9fe1fc39145","modified":1674655719641},{"_id":"source/_posts/cxy/other/vscode-vetur.md","hash":"d88719015ce7727077bb1b05cbbcea119b4cff40","modified":1674653558333},{"_id":"source/_posts/cxy/vue/js-class copy.md","hash":"d4022c8e0e5eec266519f557e394bd82abce0ffb","modified":1674658019651},{"_id":"source/_posts/cxy/other/axios.md","hash":"f2e0fbf6f441469d514024c7789bf0125f204d6e","modified":1674660557954},{"_id":"source/_posts/cxy/other/chrome-ajax copy.md","hash":"5f851648e5a131b50c096629f909b7d99fa25d3f","modified":1674659914662},{"_id":"public/2022/12/30/cxy/other/vscode-vetur/index.html","hash":"76bb3ffcea9b98cab647f04521aed5104933379f","modified":1683527725839},{"_id":"public/2021/04/13/cxy/js/js-amd/index.html","hash":"db4fb93b050424347ba4ab077714e57a9b4af497","modified":1683527725839},{"_id":"public/2021/04/12/cxy/js/js-mkh/index.html","hash":"498e3615b07c0675693cb04bf4424084dce95c81","modified":1683527725839},{"_id":"public/2022/07/23/caipu/index.html","hash":"f629f4774cbf9852ac029f8a8683c33aa398c8c7","modified":1683527725839},{"_id":"public/2022/07/02/diary/diary-1009/index.html","hash":"519986758a098abee746bddac31fb78addba55f7","modified":1683527725839},{"_id":"public/2021/04/05/diary/diary-sxh/diary-sxh5/index.html","hash":"9928ae1fa2298ed159d388f79d25bb182bbdfcf0","modified":1683527725839},{"_id":"public/2021/04/06/diary/diary-sxh/diary-sxh4/index.html","hash":"2adecc01d7e8d07f70b0c074e6e928df88787c10","modified":1683527725839},{"_id":"public/2021/04/03/diary/diary-sxh/diary-sxh3/index.html","hash":"d73b8cb9de7a8a65ba465f3575019fdcd5cee5b0","modified":1683527725839},{"_id":"public/2021/04/07/diary/diary-sxh/diary-sxh2/index.html","hash":"24c75f3f8a402f93b5f673ad3661ca7b00240ad7","modified":1683527725839},{"_id":"public/2021/04/02/diary/diary-sxh/diary-sxh/index.html","hash":"a387fdf4d3b8aea66a58d1b73d60d91897015383","modified":1683527725839},{"_id":"public/2021/04/01/diary/diary-sxh/diary-sxh6/index.html","hash":"6047ab215cbc24577449116e4842da8a595f4889","modified":1683527725839},{"_id":"public/2019/11/12/cxy/other/axios/index.html","hash":"d2be5b4420d7503eb2baa492f2ab111416e9d490","modified":1683527725839},{"_id":"public/2019/06/03/cxy/other/chrome-ajax copy/index.html","hash":"4a26d1aa7375afff5e36ffad824d63fc654a1c89","modified":1674674806709},{"_id":"public/2021/05/21/cxy/js/js-proxy/index.html","hash":"8fdea5a2e6c6b4aefc7510e0b13d1536cd03f2bc","modified":1683527725839},{"_id":"public/2020/07/21/cxy/js/js-class/index.html","hash":"e48d17a0e336db95b4de707d61274186624441f7","modified":1683527725839},{"_id":"public/2020/08/21/cxy/vue/js-class copy/index.html","hash":"dab15000c20e72a3fc6b4e608c58bc011a4eb183","modified":1674660721127},{"_id":"public/archives/2019/06/index.html","hash":"f049c51ef730d9aac732c7a79e869ceadc0236ea","modified":1683527725839},{"_id":"public/archives/2019/index.html","hash":"82df8e52074677c158e8942ce38c49bcc556a00c","modified":1683527725839},{"_id":"public/archives/2019/11/index.html","hash":"a5d3ab3fa898bcf64a1a276c212432e5d739eba3","modified":1683527725839},{"_id":"public/archives/2020/07/index.html","hash":"47110950f020ff309e17569f60f9dcd5dca950b1","modified":1683527725839},{"_id":"public/archives/page/5/index.html","hash":"505843bfaafdc258f48bf484fb0bb364c3ac4de6","modified":1683527725839},{"_id":"public/archives/2020/08/index.html","hash":"3270330f5fed74eb169fad87cbadec1f8a55732d","modified":1683527725839},{"_id":"public/tags/构成/index.html","hash":"ab835cf452f557df7ff124f37baf4227962b1978","modified":1683527725839},{"_id":"public/tags/js/index.html","hash":"59f2c542c96ff0e3255701e9afbae758740f5ae2","modified":1683527725839},{"_id":"public/tags/生活/index.html","hash":"b1375776e1a65c753e71ec836232918f7fc322b4","modified":1683527725839},{"_id":"public/tags/绘画/index.html","hash":"6709f44e0e12c1f82f0c29d82fa474d7634eef16","modified":1683527725839},{"_id":"public/tags/axios/index.html","hash":"908761d69a3d2928fd78852b49027622c9fc4a14","modified":1683527725839},{"_id":"public/tags/npm/index.html","hash":"bc279a5f7b7b861261631d717199f9a4b822f95e","modified":1683527725839},{"_id":"public/page/5/index.html","hash":"e9bbb21b5019838b8437e567f70dabdd98551f3b","modified":1683527725839},{"_id":"source/_posts/cxy/webpack/webpack1.md","hash":"f13c5f5b2e1c5b55b027f605624db9fbb40d982e","modified":1674662897059},{"_id":"source/_posts/cxy/other/typescript.md","hash":"09331ac890e6e4157da7db26466da18e33a5b618","modified":1674663584872},{"_id":"source/_posts/cxy/webpack/webpack2.md","hash":"0b56c191a675f1102e6d693c8c03da9ebbd233fd","modified":1674663082580},{"_id":"source/_posts/cxy/review/wechat.md","hash":"35d0c9beaadb7eec2ab27973b67e140c68fa274a","modified":1678245796847},{"_id":"source/_posts/cxy/other/restfulApi.md","hash":"d6b7e33299d588e61675b9358138be886217934b","modified":1674663170712},{"_id":"source/_posts/cxy/vue/vue-defineProperty.md","hash":"1d3d3f6c299135f9cabd4a24faa178613f884ff5","modified":1674663722349},{"_id":"source/_posts/cxy/vue/vue-defineProperty copy.md","hash":"2016618cb5464d2df1243b26371c41ce48df9857","modified":1677471436403},{"_id":"public/2021/05/25/cxy/webpack/webpack1/index.html","hash":"3e1262eabffc03cba5c42d0d9559af0af78d4d61","modified":1683527725839},{"_id":"public/2021/05/31/cxy/webpack/webpack2/index.html","hash":"8b75bb1aebbd27c98fa02d5e4a97ad4ebe5d3758","modified":1683527725839},{"_id":"public/2020/09/10/cxy/other/typescript/index.html","hash":"1dcc067530713de07b5ecf780e401f41baa4826a","modified":1674814716252},{"_id":"public/2020/08/21/cxy/vue/vue-defineProperty copy/index.html","hash":"9a890aeaa420fc508f62eb25dc14ad2df0747623","modified":1675851643804},{"_id":"public/2020/08/21/cxy/vue/vue-defineProperty/index.html","hash":"8aea1d9fd418e0c0f717de3647c80d8592884712","modified":1678199109030},{"_id":"public/2019/07/21/cxy/review/wechat/index.html","hash":"79c3d867fef911a84677fd40024577b90bd8d356","modified":1683527725839},{"_id":"public/2019/07/10/cxy/other/restfulApi/index.html","hash":"75e4ab0622f8c2a639d4385e6eb9ba68b531d700","modified":1683527725839},{"_id":"public/categories/程序员的自我修养/page/3/index.html","hash":"479431ebb4fe55d0d3ec7799a32501cf3f1278d6","modified":1683527725839},{"_id":"public/archives/2020/09/index.html","hash":"1dee8f841373d2021f0fac52f7c3145f7cdab031","modified":1683527725839},{"_id":"public/archives/2019/07/index.html","hash":"bb02c430fe674d8297128ed131ba904fd9cb91b4","modified":1683527725839},{"_id":"public/tags/typescript/index.html","hash":"85b3255e26d3e33b8222716b941166c5638ef3da","modified":1683527725839},{"_id":"public/tags/vue/index.html","hash":"bc2bd0b869cf1ff6c42468f0b082eee7c71e0411","modified":1683527725839},{"_id":"public/tags/微信小程序/index.html","hash":"5f107a9960b9e9fcb14d4bcd4fa982612af80280","modified":1683527725839},{"_id":"public/tags/webpack/index.html","hash":"1ca48a116a69588c86628ebffa13e3d1ad44af66","modified":1683527725839},{"_id":"source/_posts/jianmo/bl-cycles.md","hash":"2ff05147949f4febf9f7a703989c40905596ab56","modified":1674667501878},{"_id":"public/2022/07/01/jianmo/bl-cycles/index.html","hash":"74b859db81f4ce53253f96d238307c1303b8e383","modified":1683527725839},{"_id":"source/_posts/cxy/other/dns.md","hash":"012cf0af956fea85e7635bf3a568f10368e4352a","modified":1675250381196},{"_id":"public/2023/01/26/cxy/other/dns/index.html","hash":"6783ec96cc00a672e2ff24e1607f8fbf12eabcef","modified":1674806208988},{"_id":"source/_posts/cxy/js/js-let","hash":"2bec33161afcda107f00a69cb81622b0ad9e5967","modified":1674676026379},{"_id":"source/_posts/diary/diary-sxh/diary-sxh7.md","hash":"6a6d9b35be3a4d58f3d6dddfec951c78bd12d775","modified":1674676702161},{"_id":"source/_posts/cxy/other/node-n.md","hash":"5f851648e5a131b50c096629f909b7d99fa25d3f","modified":1674676653919},{"_id":"source/_posts/cxy/js/js-await.md","hash":"2306608fa3f6279edbc1ad4d301047f32b48f3af","modified":1674678656864},{"_id":"source/_posts/cxy/js/js-ajax.md","hash":"aca4a0b0556a621431c4b56cbf2b078f4d934bcb","modified":1674679024779},{"_id":"source/_posts/cxy/js/js-context.md","hash":"bea4e3cce49f5c3aeae7179ac8af3a282ddf691b","modified":1674678360960},{"_id":"source/_posts/cxy/js/js-enviro.md","hash":"71be8ce410abc9a4b87b863bf2cd37e9c84820f1","modified":1675848359595},{"_id":"source/_posts/cxy/js/js-http22.md","hash":"c700fbc05582b3d1bbefa17ff2d786d6573d583b","modified":1674679587192},{"_id":"source/_posts/cxy/js/js-event.md","hash":"541706fbf601a9ad5997f6c68432508b2a3256a5","modified":1675848022671},{"_id":"source/_posts/cxy/js/js-explore.md","hash":"b2a138a30ee21544661be81dc2d188c7ed61a4a3","modified":1674678741346},{"_id":"source/_posts/cxy/js/js-progre.md","hash":"b58d7c0b22f7e243f567ac7becaba38c9c205eff","modified":1674678373461},{"_id":"source/_posts/cxy/js/js-http11.md","hash":"b70562614179c30f6f59fb9984c07b733e0c9bb7","modified":1674679593570},{"_id":"source/_posts/cxy/js/js-http.md","hash":"58aa4130445c7c098fa499bf89a94b14b55c1595","modified":1674679384620},{"_id":"source/_posts/cxy/js/js-let.md","hash":"ea9a16da0c8123733288a54b17e331bbef0ab60a","modified":1674678308331},{"_id":"source/_posts/cxy/js/js-prototype.md","hash":"6c1bb3c5bb8a557e2be5dd9b5a2b489af7247f57","modified":1674678317514},{"_id":"source/_posts/cxy/js/js-promise.md","hash":"ab9506cf7d39485f795098139a98cf5f9cfb0e6b","modified":1674678519936},{"_id":"source/_posts/cxy/js/js-this.md","hash":"d916f0ca16369743627b432f59ecdea3259b1f4e","modified":1674678331108},{"_id":"source/_posts/cxy/js/js-storage.md","hash":"c0ba9c41edc7bd951d3c3a9b045bd4af39d5b180","modified":1674679126464},{"_id":"public/2019/06/03/cxy/other/node-n/index.html","hash":"1509fea194609ed7aaeaa6676309277f76f51070","modified":1683527725839},{"_id":"public/2019/04/16/cxy/js/js-enviro/index.html","hash":"0b123f573bb239b55cb3d115c945836a670b924b","modified":1683527725839},{"_id":"public/2019/04/14/cxy/js/js-http11/index.html","hash":"f857844f94d14457cbb822f2dd19c2cd2bbd55b3","modified":1683527725839},{"_id":"public/2019/04/14/cxy/js/js-http22/index.html","hash":"fe24851403395d55709def609a99ff4b678ce249","modified":1683527725839},{"_id":"public/2019/04/12/cxy/js/js-http/index.html","hash":"5208d0a1a0586f869c7a1117f28f5ec14e358a96","modified":1683527725839},{"_id":"public/2019/04/12/cxy/js/js-storage/index.html","hash":"c9ff3692dda477502c08f2ee53f03d868d0a2fa1","modified":1683527725839},{"_id":"public/2019/04/11/cxy/js/js-ajax/index.html","hash":"849545c3a6e62928aad36472e2ab6becacde9bc0","modified":1683527725839},{"_id":"public/2019/04/10/cxy/js/js-event/index.html","hash":"e2728c3e73781ceb1ea6950c64889ff79d14d5b8","modified":1683527725839},{"_id":"public/2019/04/06/cxy/js/js-await/index.html","hash":"d9f189e18c39e34d90d5bb3a5094962ddecb0d90","modified":1683527725839},{"_id":"public/2019/04/06/cxy/js/js-progre/index.html","hash":"81dd3293d8238a355d185994a2d012114dc93199","modified":1683527725839},{"_id":"public/2019/04/05/cxy/js/js-promise/index.html","hash":"92c1475a694c551a8c641cff940ef309d8a869f9","modified":1683527725839},{"_id":"public/2019/04/05/cxy/js/js-context/index.html","hash":"8f83d1f62eb649b4a79427c09d66717140c8d16c","modified":1683527725839},{"_id":"public/2019/04/05/cxy/js/js-this/index.html","hash":"90703d61b8e33155c03e01f212e25ccf3d1c0f42","modified":1683527725839},{"_id":"public/2019/04/04/cxy/js/js-prototype/index.html","hash":"47f16be1e35697bb2d7051e419cd95509f954287","modified":1683527725839},{"_id":"public/2019/04/03/cxy/js/js-explore/index.html","hash":"d0d3a8cd168357ede5f414cfb55cacb3f77658b7","modified":1683527725839},{"_id":"public/2019/04/03/cxy/js/js-let/index.html","hash":"e68b2258780cc37cacc2f68f7ba94761455dd9e8","modified":1683527725839},{"_id":"public/2021/09/23/diary/diary-sxh copy/index.html","hash":"ad96d59403ef25654e991c915dd7077e34be48ab","modified":1683527725839},{"_id":"public/archives/page/6/index.html","hash":"645be0d158acb04cdc2bb253d51262a962dd37d5","modified":1683527725839},{"_id":"public/archives/page/7/index.html","hash":"e7f9fac3a02beba2af9a13b7e19c57911027700e","modified":1683527725839},{"_id":"public/2021/04/04/diary/diary-sxh/diary-sxh7/index.html","hash":"8b4e72c7138cee7f215e53ffe1ce88afa7f03236","modified":1683527725839},{"_id":"public/archives/2019/page/2/index.html","hash":"398dbb0c77e206cc15f6d2c1d3441abf462e6736","modified":1683527725839},{"_id":"public/archives/2019/04/index.html","hash":"b090956092b46bdfd0d77367cffc32bd1f5ae576","modified":1683527725839},{"_id":"public/archives/2021/page/3/index.html","hash":"da03e41d866e2b0febd4842c5c4feb620a306714","modified":1683527725839},{"_id":"public/archives/2019/04/page/2/index.html","hash":"c9cabf6c096044481710c9b755b1df5033d97584","modified":1683527725839},{"_id":"public/categories/程序员的自我修养/page/4/index.html","hash":"8e49ab8e26bbb288b2fc79f27af9dd37b5f127be","modified":1683527725839},{"_id":"public/tags/js/page/2/index.html","hash":"3f8056dfa3080c9dc61ab7b2e0669242affb20ce","modified":1683527725839},{"_id":"public/page/7/index.html","hash":"17b0a24e1eda2b9d821ee5163a52a260208688d7","modified":1683527725839},{"_id":"public/page/6/index.html","hash":"62606ef3253e989e62bc621860dd61ef922b1b6b","modified":1683527725839},{"_id":"source/CNAME","hash":"3cb29a3903d5557b3981ae9f69ca56d5f2062bbe","modified":1674680001151},{"_id":"public/CNAME","hash":"3cb29a3903d5557b3981ae9f69ca56d5f2062bbe","modified":1681960320512},{"_id":"themes/kratos-rebirth/source/images/alipay_qr.jpg","hash":"ab5cbe9e9b5d7fc14a8a47abe76c7941dcbe3e16","modified":1675742017007},{"_id":"themes/kratos-rebirth/source/images/wechat_qr.png","hash":"39fc147c5634b8aa0ef70d5d01447e05f7b21804","modified":1674680519079},{"_id":"public/images/alipay_qr.jpg","hash":"ab5cbe9e9b5d7fc14a8a47abe76c7941dcbe3e16","modified":1681960320512},{"_id":"public/images/wechat_qr.png","hash":"39fc147c5634b8aa0ef70d5d01447e05f7b21804","modified":1674680825706},{"_id":"themes/kratos-rebirth/source/images/wechat_qr.jpg","hash":"7f94acff4797a13fe1c8ea62c7018ed45f20e37e","modified":1675742016308},{"_id":"public/images/wechat_qr.jpg","hash":"7f94acff4797a13fe1c8ea62c7018ed45f20e37e","modified":1681960320512},{"_id":"source/_posts/jianmo/bl-qxty.md","hash":"abb8cde758a45b2b4a9b6922940aa278e03d630a","modified":1674689650327},{"_id":"source/_posts/jianmo/bl-grease.md","hash":"e6f77a3b2ded4143cfd0d29f6c80eafaf5411ee9","modified":1674722311056},{"_id":"source/_posts/paint/paint-picture5.md","hash":"5687c49b3e5714c9afebd3c56568f26252127b0a","modified":1674692067682},{"_id":"source/_posts/jianmo/bl-practice1.md","hash":"09ce6fcac85bf47a33195479109df42f7f4a5c49","modified":1674691449577},{"_id":"source/_posts/jianmo/bl-sanxuaner.md","hash":"52965b075010358b60909b4dd509707671a6d54f","modified":1674722309773},{"_id":"source/_posts/jianmo/bl-practice2.md","hash":"36320ed205dcdf6e71e7917485463a869618a744","modified":1674691709814},{"_id":"source/_posts/diary/diary-0612.md","hash":"d6d4c25376de9316b278c7e195834ee825ccf0eb","modified":1674690755125},{"_id":"source/_posts/diary/diary-0612 copy.md","hash":"d6b408e202f7e9c7f3efcff93d69ae578980fd66","modified":1674691123735},{"_id":"public/2022/12/25/jianmo/bl-qxty/index.html","hash":"168cef32cc72ac360d1548ea876308582e9438bc","modified":1683527725839},{"_id":"public/2022/11/26/paint/paint-picture5/index.html","hash":"72f855e1fbeebac79f512edeade2601593890166","modified":1683527725839},{"_id":"public/2022/10/26/jianmo/bl-sanxuaner/index.html","hash":"db7df817d5db991b976e21d9896d67d74422bdd6","modified":1683527725839},{"_id":"public/2022/06/23/jianmo/bl-grease/index.html","hash":"7ff3a904402df945877a560e26d9069c833a03e1","modified":1683527725839},{"_id":"public/2022/06/12/diary/diary-0612/index.html","hash":"5d6f78ba950b5a3851683bd0968e17f2e65380ab","modified":1683527725839},{"_id":"public/2020/11/27/diary/diary-0612 copy/index.html","hash":"fcff58bd3e44ee5b4bdd830bf1d5c6d1faa16ad9","modified":1683527725839},{"_id":"public/2020/04/19/jianmo/bl-practice2/index.html","hash":"ad5fc814b1ebd01277f50484fb84efe112413b4f","modified":1683527725839},{"_id":"public/2020/04/03/jianmo/bl-practice1/index.html","hash":"1a232b87bfa53bf55465948b3cd4ca8648c64752","modified":1683527725839},{"_id":"public/archives/page/8/index.html","hash":"eeab8f69542aac23ec9b5b0b68ed78b4d20581ef","modified":1683527725839},{"_id":"public/archives/2020/11/index.html","hash":"1a27009ccd8bd0253fa328a14cf3c9640638a84a","modified":1683527725839},{"_id":"public/archives/2020/04/index.html","hash":"c0bcf61da17f90bf5e1ea01549abc8032c0a3b68","modified":1683527725839},{"_id":"public/archives/2022/page/3/index.html","hash":"0b805acc4d325e2dfe64ed010c02f58571af5ea6","modified":1683527725839},{"_id":"public/categories/建模/page/2/index.html","hash":"e4e619777a113e63a6c043ab6f8cd05416bb224d","modified":1683527725839},{"_id":"public/page/8/index.html","hash":"b890287187c25255f275008cf50edc96c754c288","modified":1683527725839},{"_id":"public/tags/pr/index.html","hash":"89b69e247a20bd4441ee8ee1eac59a7f7b3aaccf","modified":1683527725839},{"_id":"public/tags/表情包/index.html","hash":"9c8cdd7ee1282173e4384a1b18ec3a53333a553b","modified":1683527725839},{"_id":"public/tags/blender/page/2/index.html","hash":"144cf0c1d76fb78bbe254476f8297fc5edc4356f","modified":1683527725839},{"_id":"themes/kratos-rebirth/source/images/logo.png","hash":"b7abb818e6ad5e3c887614c0bca5ca790cde6373","modified":1674729326727},{"_id":"public/images/logo.png","hash":"b7abb818e6ad5e3c887614c0bca5ca790cde6373","modified":1674729558389},{"_id":"themes/kratos-rebirth/source/music/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1674797759758},{"_id":"themes/kratos-rebirth/source/music/prayerX.mp3","hash":"35c4e0adc6c3f3ea5c6c842364af233145ff6f1e","modified":1668425355744},{"_id":"themes/kratos-rebirth/source/music/laxh.lrc","hash":"ae6620c58c61ea9312906867bf294c79ffc7e74c","modified":1674744824859},{"_id":"themes/kratos-rebirth/source/images/laxh.jpeg","hash":"6ece47cc09a342c3a568385c38727afb375f4fc3","modified":1681376754778},{"_id":"themes/kratos-rebirth/source/music/laxh.mp3","hash":"e07b75eebd2642010b8164cd54161415eee9301f","modified":1674744638233},{"_id":"public/images/laxh.jpeg","hash":"6ece47cc09a342c3a568385c38727afb375f4fc3","modified":1681960320512},{"_id":"public/music/laxh.lrc","hash":"ae6620c58c61ea9312906867bf294c79ffc7e74c","modified":1681960320512},{"_id":"public/music/laxh.mp3","hash":"e07b75eebd2642010b8164cd54161415eee9301f","modified":1681960320512},{"_id":"source/_posts/cxy/other/.md","hash":"3bcdae2267d37bdc7cd648938f32b66460f41866","modified":1674749849113},{"_id":"source/_posts/cxy/other/jsdelivr.md","hash":"b119b45f6836205b81f285d252953a7bdbaa396b","modified":1674765235829},{"_id":"source/_posts/cxy/other/aplayer.md","hash":"f36d95d4df59ddef2de05fa842b8ee788ef3b73a","modified":1675250381193},{"_id":"public/2020/01/11/cxy/other/jsdelivr/index.html","hash":"3971db16e58e8d531279ae50107f757a71e17e08","modified":1683527725839},{"_id":"public/2019/05/11/cxy/other/aplayer/index.html","hash":"c1e2bbd2590e75805dcf8c580287e23d2812c1d8","modified":1674750751686},{"_id":"public/archives/2019/05/index.html","hash":"6b8a8d0ab2c662ad170727c925ac2b44e30825ae","modified":1674750751686},{"_id":"public/archives/2020/01/index.html","hash":"d397563db45823af5e59962591d958f09b6e4745","modified":1683527725839},{"_id":"public/categories/程序员的自我修养/page/5/index.html","hash":"16fc65c19a1493d3e03faf334f516c6fad4963f2","modified":1683527725839},{"_id":"public/tags/jsdelivr/index.html","hash":"9449322c408845e9ded803c3297db9b6d245eb4b","modified":1683527725839},{"_id":"source/_posts/cxy/other/chatgpt.md","hash":"1fd7d5d0f6ce612abffe5ba56fa9d5a1d58457db","modified":1675250381194},{"_id":"source/_posts/cxy/other/gitalk.md","hash":"d0881dbe9d6a1638cdf887fdbc67b73e51a7d2e2","modified":1675250381198},{"_id":"source/_posts/cxy/other/chatgpt/image-20230127142635615.png","hash":"9f7f0607ca5b0e95d058e433c2b9fd724985af27","modified":1674800795616},{"_id":"source/_posts/cxy/other/chatgpt/image-20230127142951839.png","hash":"f7c0fac41e7b59fc7ba7066aeab3a3ccfb40f8b8","modified":1674800991840},{"_id":"source/_posts/cxy/other/chatgpt/image-20230127142827390.png","hash":"1420b684a46035763136a177b4459d7d6aa0470f","modified":1674800907390},{"_id":"source/_posts/cxy/other/chatgpt/image-20230127141458417.png","hash":"618509853687e212fba9556ad3010cbdbce66114","modified":1674800098417},{"_id":"source/_posts/cxy/other/chatgpt/image-20230127143618211.png","hash":"50f37e9cb35d88457453b3d3143b972c0aa2a2a6","modified":1674801378231},{"_id":"source/_posts/cxy/other/chatgpt/image-20230127143518514.png","hash":"49fa92ffa90ab5df790e725167e31b8d20a53a6c","modified":1674801318516},{"_id":"public/2023/01/27/cxy/other/chatgpt/index.html","hash":"97075a49cdaf1f67ad55aa135ececc3478e473d1","modified":1683527725839},{"_id":"public/2019/12/11/cxy/other/gitalk/index.html","hash":"4e6d1f03eb022fa8c3b4f9e1b851846ad8721773","modified":1683527725839},{"_id":"public/2019/09/11/cxy/other/aplayer/index.html","hash":"1bb5fcabacb22c0d55aa0e849f139ebef75b1ff7","modified":1674806208988},{"_id":"public/archives/2019/page/3/index.html","hash":"2b89027c2f1adcc9b53e7bfb33f598c76268d5ac","modified":1683527725839},{"_id":"public/archives/2019/09/index.html","hash":"19132a7768587f3be70013b55185d6ded0f672f4","modified":1674806208988},{"_id":"public/archives/2019/12/index.html","hash":"dd34283db7ebf6540a6c2e4620d6c85e60fcf302","modified":1683527725839},{"_id":"public/tags/gitalk/index.html","hash":"b7b4207301e04c51b369016f08958b4e57d90d46","modified":1674806208988},{"_id":"public/tags/ChatGPT/index.html","hash":"d758915fbea01c91947f74f5780241afd2f61ba9","modified":1674814716252},{"_id":"public/2022/01/26/cxy/other/dns/index.html","hash":"fb7a4cd92e21733aa36080869db2de2d2e800fbb","modified":1683527725839},{"_id":"public/2021/09/11/cxy/other/aplayer/index.html","hash":"79d7a18245c970d82df796408ba80abdedac7b80","modified":1683527725839},{"_id":"public/2021/05/15/cxy/other/github-siyoucangku/index.html","hash":"bca8d9213e7e662016fc53d2879c3a0994857b59","modified":1683527725839},{"_id":"public/tags/实用小插件/index.html","hash":"e6100c1019271f1ed80eefdc5159c8ba722b7438","modified":1674814716252},{"_id":"source/_posts/cxy/other/aplayer copy.md","hash":"bbad5f605660b62fd3fba9a3db5bcd91d471b515","modified":1675250591982},{"_id":"source/_posts/cxy/js/typescript.md","hash":"226c9c301392c69b0a7e043dec76149dcb627612","modified":1675768541393},{"_id":"source/_posts/cxy/other/bodymovin.md","hash":"b76888960722f86ef98924c32a8f433dd0370e5b","modified":1675618254286},{"_id":"public/2023/08/11/cxy/other/bodymovin/index.html","hash":"7cf988ab2f8330aa15d7cc023229dbc75b589097","modified":1675618227776},{"_id":"public/2020/09/10/cxy/js/typescript/index.html","hash":"e9f2b8e68ac59454d0375e1de003054a5f2dfc1c","modified":1683527725839},{"_id":"public/archives/2023/08/index.html","hash":"a53d5d0d2cc4db07f9dc135d69b7071c70b5ffb0","modified":1675618227776},{"_id":"public/tags/实用开源代码or工具/index.html","hash":"0d1da03ad291c12cc0878e3208fa6d04300e92ef","modified":1683527725839},{"_id":"public/tags/实用开源代码/index.html","hash":"3d83ac5f2766b8183a7254d572c27738cfaa8ee3","modified":1683527725839},{"_id":"public/tags/github/index.html","hash":"6b3da0cf76568ca8a87efd37f4bf4cedcf74f83a","modified":1683527725839},{"_id":"source/_posts/sass.md","hash":"03497ef8bfb053eb83d8f2e277859a97f66d2cf5","modified":1675829836096},{"_id":"public/2023/02/06/sass/index.html","hash":"69a48ae08fceddb91ec77a5238f85a7d5200edbb","modified":1678199109030},{"_id":"public/archives/page/9/index.html","hash":"06c5ba3c5d2e76d66cb104c089878f0ef10e9993","modified":1683527725839},{"_id":"public/archives/2023/02/index.html","hash":"c377ab03bf9d9a4e192a5e23cd1ae187789869ca","modified":1683527725839},{"_id":"public/page/9/index.html","hash":"5aab3a82d660bfa57903d5ac50f8a6349646ec76","modified":1683527725839},{"_id":"public/2021/08/11/cxy/other/bodymovin/index.html","hash":"1f81b375634227c1b53691f83443215e4173215d","modified":1683527725839},{"_id":"source/_posts/vue-smcq.md","hash":"832801913c9983ba9a571ad6785078c2f2143237","modified":1675740777901},{"_id":"public/2023/02/07/vue-smcq/index.html","hash":"677702e36235497dc0038d7de4ae00f6c0270f9a","modified":1683527725839},{"_id":"source/_posts/cxy/js/js-bibao-debounce&throttle.md","hash":"ea32a06a3162e2cce7fcbea0e560e2aafdc0f42c","modified":1675851558176},{"_id":"public/2019/03/17/cxy/js/js-bibao-debounce&throttle/index.html","hash":"713589ab1d0103e192bf2c47176591c218f42243","modified":1683527725839},{"_id":"public/archives/2019/03/index.html","hash":"9e755472cd9ab82889246159bd5c43e4f77701d7","modified":1683527725839},{"_id":"public/2023/02/27/cxy/vue/vue-defineProperty copy/index.html","hash":"217dd0828a0f6e45367b9b06bd5ab31638037590","modified":1677471481910},{"_id":"source/_posts/cxy/vue/vue3.md","hash":"c08e235c34e2a5396094c997c43085794bfaed41","modified":1678274016533},{"_id":"public/2023/02/27/cxy/vue/vue3/index.html","hash":"6fa338959d4b15451e8845081bee2ce29af98a9a","modified":1678274262811},{"_id":"source/_posts/cxy/js/typescript2.md","hash":"7589353eefd878813e65674f12700d354b7e9aa5","modified":1678275657126},{"_id":"source/_posts/cxy/framework/react/react-hooks.md","hash":"e0f3a352688eb20825cd261e3619353908d59206","modified":1680160470437},{"_id":"source/_posts/cxy/framework/vue/vue3.md","hash":"c08e235c34e2a5396094c997c43085794bfaed41","modified":1678274016533},{"_id":"source/_posts/cxy/framework/react/react.md","hash":"64c55be06d75b31d191b821b326a907ed2ee0cee","modified":1678786455339},{"_id":"source/_posts/cxy/framework/vue/vue-defineProperty.md","hash":"1d3d3f6c299135f9cabd4a24faa178613f884ff5","modified":1675562858723},{"_id":"source/_posts/cxy/css/flex.md","hash":"a395ce7b10829884be6701ef3bbfd81dd7a4fdc0","modified":1678874809126},{"_id":"source/_posts/cxy/css/.DS_Store","hash":"11be4ba8bd15494d3adc6c0545c3b705de1113fb","modified":1678934666297},{"_id":"source/_posts/cxy/css/sass.md","hash":"d311f99c34293c4f56063f2d59f39f89d5ccb16b","modified":1678874778615},{"_id":"source/_posts/cxy/css/grid.md","hash":"34ec20af8b384d9ef3ff7734c5ac778261c1b023","modified":1681105904443},{"_id":"public/2023/03/15/cxy/css/grid/index.html","hash":"7a7850a6ea23dd5e0f41a0ae3c016edc62872877","modified":1683527725839},{"_id":"public/2023/03/15/cxy/css/flex/index.html","hash":"fe771baa24e1f090f7158fced3afb4c2bbc9f68f","modified":1683527725839},{"_id":"public/2023/03/14/cxy/framework/react/react-hooks/index.html","hash":"84cddc683fc5970002f963920bab6f1380de8a99","modified":1683527725839},{"_id":"public/2023/03/08/cxy/js/typescript2/index.html","hash":"f57321dccad05885a3a31d624d5c34d17b4da982","modified":1683527725839},{"_id":"public/2023/02/27/cxy/framework/vue/vue3/index.html","hash":"33a35717cf36b933ee90afb72705a2242f8e2e6a","modified":1683527725839},{"_id":"public/2023/02/06/cxy/css/sass/index.html","hash":"4db78b539a82a99749b51fae5df2b1251cd35e99","modified":1683527725839},{"_id":"public/2021/03/25/cxy/framework/react/react/index.html","hash":"7cbcd496918fdea6514cb754542a37b408c1bc7b","modified":1683527725839},{"_id":"public/2020/08/21/cxy/framework/vue/vue-defineProperty/index.html","hash":"a61ac81151ddf94654ad01ba265672b199e2916d","modified":1683527725839},{"_id":"public/categories/css/index.html","hash":"539c8992a223c0f80df1b3e2efbdff3453900d52","modified":1683527725839},{"_id":"public/archives/2023/03/index.html","hash":"6c9466d5a30c8b040ac2c975a70e7a9e23d21697","modified":1683527725839},{"_id":"source/_posts/移动端自适应方案.md","hash":"6eb7645792596e94e9125bc2402dfa13967ea3f4","modified":1682389565096},{"_id":"public/2023/03/20/移动端自适应方案/index.html","hash":"f9c99b17578b6a678e4f7061172ea2f685bb1508","modified":1683527725839},{"_id":"public/tags/程序员的自我修养/index.html","hash":"1b498756b1e030727d866967a845c25672b6a2fa","modified":1681180213720},{"_id":"source/_posts/面试题整理.md","hash":"118a5f4cd53be2b4194e8a7ca9053611954c051f","modified":1682389559006},{"_id":"public/2021/03/20/面试题整理/index.html","hash":"0ea59911d1b045247c8ca70c136e5a00163b3c3a","modified":1683527725839},{"_id":"source/_posts/mac连接远程服务器.md","hash":"a23e2b2aec291fc1d85fd8214ff019f32da45bc7","modified":1679455377793},{"_id":"source/_posts/docker的使用和简介.md","hash":"54c0d5142ddb49f6a17a4d9a8f028a3fa19f40c4","modified":1681356022034},{"_id":"source/_posts/从零开始搭建web部署系统.md","hash":"54e2772e45a7bd6289ec6ea8ebcfa1a8d9fec837","modified":1682389541577},{"_id":"source/images/image-20230321113354768.png","hash":"c30612e167a123bea2e192d680ca0543c7dfab52","modified":1679371887437},{"_id":"source/images/image-20230321120507192.png","hash":"19dac4b29f166e7201eb099d4015e55f3f2a8956","modified":1679371887484},{"_id":"source/images/image-20230321120517471.png","hash":"19dac4b29f166e7201eb099d4015e55f3f2a8956","modified":1679371887493},{"_id":"source/_posts/mac连接远程服务器/image-20230321113354768.png","hash":"c30612e167a123bea2e192d680ca0543c7dfab52","modified":1679369634768},{"_id":"source/_posts/mac连接远程服务器/image-20230321120507192.png","hash":"19dac4b29f166e7201eb099d4015e55f3f2a8956","modified":1679371507194},{"_id":"source/_posts/mac连接远程服务器/image-20230321120517471.png","hash":"19dac4b29f166e7201eb099d4015e55f3f2a8956","modified":1679371517472},{"_id":"source/images/image-20230321115534751.png","hash":"fe20d6fe5d6f17d7f8495385c59b2d216a1631d0","modified":1679371887476},{"_id":"source/_posts/mac连接远程服务器/image-20230321111922096.png","hash":"0d78d22f25f1e06a1932c926ce3251d83ab3f89e","modified":1679371924536},{"_id":"source/_posts/从零开始搭建web部署系统/image-20230321111922096.png","hash":"0d78d22f25f1e06a1932c926ce3251d83ab3f89e","modified":1679368762096},{"_id":"source/_posts/mac连接远程服务器/image-20230321115534751.png","hash":"fe20d6fe5d6f17d7f8495385c59b2d216a1631d0","modified":1679370934752},{"_id":"source/images/image-20230321115405188.png","hash":"0e7dea50c8426e1c7076785269fbcf39fa616ecd","modified":1679371887463},{"_id":"source/_posts/mac连接远程服务器/image-20230321115405188.png","hash":"0e7dea50c8426e1c7076785269fbcf39fa616ecd","modified":1679370845188},{"_id":"source/images/image-20230321113702555.png","hash":"78ed434f6a59c40b93d3d9dae762bbdca39f1c87","modified":1679371887453},{"_id":"source/_posts/mac连接远程服务器/image-20230321113702555.png","hash":"78ed434f6a59c40b93d3d9dae762bbdca39f1c87","modified":1679369822555},{"_id":"source/images/image-20230321123326293.png","hash":"fd848209f876a4e7586f9c04a2524c1b3c03b6ec","modified":1679373206294},{"_id":"source/_posts/重排与重绘.md","hash":"6242d3f0db083d42011c38b34b14813c3d5f9ceb","modified":1682389577450},{"_id":"source/_posts/docker安装jenkins教程.md","hash":"f141c7c4f3c576dbe64d2f5062c50b2d34a67776","modified":1680852825437},{"_id":"source/images/image-20230321142801734.png","hash":"d4074015313f0c02a730b3158baa0bde5e5c15ff","modified":1679380081735},{"_id":"source/images/image-20230322113633072.png","hash":"0fb8ba297e88655f5219889057dca5142e21925a","modified":1679456193083},{"_id":"source/images/image-20230321142649225.png","hash":"7a34970fc630532003ef9a128f09dc1f09f5816c","modified":1679380009228},{"_id":"source/images/image-20230322113719542.png","hash":"a21be38c2b9febbededc2b70062c6770ccc9c7c7","modified":1679456239543},{"_id":"source/images/image-20230321142727515.png","hash":"00522be3c2053c02a6747c5b0633f09d35bb3e27","modified":1679380047516},{"_id":"source/images/image-20230321111922096.png","hash":"0d78d22f25f1e06a1932c926ce3251d83ab3f89e","modified":1679373095030},{"_id":"source/images/image-20230322112531068.png","hash":"7d409c2698f03aa11c6f1de38a22e2e1e0a6199d","modified":1679455531069},{"_id":"source/_posts/mitmproxy.md","hash":"ae3bc5baeb73c89f403f1c59a320a80a9fea5b9e","modified":1681179306328},{"_id":"source/images/image-20230322114641394.png","hash":"a394c2f69e66222669e998f57d97fc21cb866256","modified":1679629747293},{"_id":"public/2023/03/24/mitmproxy/index.html","hash":"3341e9d148122f43572aa2297712284a26ef3d0a","modified":1683527725839},{"_id":"public/2023/03/21/mac连接远程服务器/index.html","hash":"2409c140ebf930463f44dc35ab5c38ada8691fc5","modified":1683527725839},{"_id":"public/2023/03/21/docker的使用和简介/index.html","hash":"27cd6670643c326697d05e89508572161786c823","modified":1683527725839},{"_id":"public/2023/03/22/重排与重绘/index.html","hash":"f09d9f2ed09d84fc00acede06c2a868d6bd2e627","modified":1683527725839},{"_id":"public/2023/03/21/从零开始搭建web部署系统/index.html","hash":"f86a7ad26d4e787842b7f561d999537d42a2e84e","modified":1680496239056},{"_id":"public/2022/03/21/docker安装jenkins教程/index.html","hash":"31f52fba6d79981782acf5c647c41a866fdc52b8","modified":1683527725839},{"_id":"public/archives/page/10/index.html","hash":"90f308990a829490135a54ebe07e3a0507e2bb27","modified":1683527725839},{"_id":"public/archives/2023/page/2/index.html","hash":"70f587d452b9d51e5e1dabd90aa10363a1586317","modified":1683527725839},{"_id":"public/categories/程序员的自我修养/page/6/index.html","hash":"a52d2fdf0b481c5b2a20b85818b91e109eec0c46","modified":1683527725839},{"_id":"public/page/10/index.html","hash":"edf961e43d98d433159e46ee77e7e29717cd8cda","modified":1683527725839},{"_id":"public/tags/css/index.html","hash":"b8a7feabc5b664be15830218fe727443b2df156b","modified":1683527725839},{"_id":"public/images/image-20230321123326293.png","hash":"fd848209f876a4e7586f9c04a2524c1b3c03b6ec","modified":1681960320512},{"_id":"public/images/image-20230321113354768.png","hash":"c30612e167a123bea2e192d680ca0543c7dfab52","modified":1681960320512},{"_id":"public/images/image-20230321120507192.png","hash":"19dac4b29f166e7201eb099d4015e55f3f2a8956","modified":1681960320512},{"_id":"public/images/image-20230321120517471.png","hash":"19dac4b29f166e7201eb099d4015e55f3f2a8956","modified":1681960320512},{"_id":"public/images/image-20230321142649225.png","hash":"7a34970fc630532003ef9a128f09dc1f09f5816c","modified":1681960320512},{"_id":"public/images/image-20230321142801734.png","hash":"d4074015313f0c02a730b3158baa0bde5e5c15ff","modified":1681960320512},{"_id":"public/images/image-20230322113633072.png","hash":"0fb8ba297e88655f5219889057dca5142e21925a","modified":1681960320512},{"_id":"public/images/image-20230322113719542.png","hash":"a21be38c2b9febbededc2b70062c6770ccc9c7c7","modified":1681960320512},{"_id":"public/images/image-20230321142727515.png","hash":"00522be3c2053c02a6747c5b0633f09d35bb3e27","modified":1681960320512},{"_id":"public/images/image-20230322114641394.png","hash":"a394c2f69e66222669e998f57d97fc21cb866256","modified":1681960320512},{"_id":"public/images/image-20230321111922096.png","hash":"0d78d22f25f1e06a1932c926ce3251d83ab3f89e","modified":1681960320512},{"_id":"public/images/image-20230321115534751.png","hash":"fe20d6fe5d6f17d7f8495385c59b2d216a1631d0","modified":1681960320512},{"_id":"public/images/image-20230322112531068.png","hash":"7d409c2698f03aa11c6f1de38a22e2e1e0a6199d","modified":1681960320512},{"_id":"public/2023/03/21/从零开始搭建web部署系统/image-20230321111922096.png","hash":"0d78d22f25f1e06a1932c926ce3251d83ab3f89e","modified":1679766439263},{"_id":"public/images/image-20230321115405188.png","hash":"0e7dea50c8426e1c7076785269fbcf39fa616ecd","modified":1681960320512},{"_id":"public/images/image-20230321113702555.png","hash":"78ed434f6a59c40b93d3d9dae762bbdca39f1c87","modified":1681960320512},{"_id":"source/_posts/npm发布.md","hash":"47653c1484c46ba6c6a7ba652cb52bff6839a756","modified":1680249941003},{"_id":"source/_posts/cxy/framework/.DS_Store","hash":"b3c14b1a78bf83da98c9196c955c17d6bc95c7d3","modified":1680233714410},{"_id":"source/images/image-20230330145149288.png","hash":"81605961c72cbe243a5513a2f2eedbfdd76a1dcf","modified":1680159109289},{"_id":"source/_posts/cxy/framework/images/image-20230330145149288.png","hash":"81605961c72cbe243a5513a2f2eedbfdd76a1dcf","modified":1680159109289},{"_id":"source/_posts/组件库相关.md","hash":"5f5305114d5435597465ec78cea651d8e6d48b48","modified":1682389585158},{"_id":"public/2023/03/30/组件库相关/index.html","hash":"d1bd8605eb0544da9d88d855877e3eabf44184ec","modified":1683527725839},{"_id":"public/2023/03/28/npm发布/index.html","hash":"431d0565ce30014109007c65d7dc04fb502e36c5","modified":1683527725839},{"_id":"public/archives/2023/03/page/2/index.html","hash":"bc8348af4e5dc5b7c684f0b13938812f35cbcfb9","modified":1683527725839},{"_id":"public/images/image-20230330145149288.png","hash":"81605961c72cbe243a5513a2f2eedbfdd76a1dcf","modified":1681960320512},{"_id":"source/_posts/Webpack-Bundle-Analyzer.md","hash":"baf4f05353268b9d5155f16efa87fe328d328874","modified":1680491558179},{"_id":"source/_posts/npm发布 copy.md","hash":"c2a83fd97ec934c6b17c03c50b51dcd1a7d0db39","modified":1680496119848},{"_id":"public/2023/04/03/Webpack-Bundle-Analyzer/index.html","hash":"52ed2876adc5de512115fc9a3cd59931a252027e","modified":1683527725839},{"_id":"public/2023/03/28/npm发布 copy/index.html","hash":"583598c22644a47d2f4a37e99d38c1072f4622d0","modified":1680492297290},{"_id":"public/archives/2023/04/index.html","hash":"9132ed781c8e70958a55a65ed69b232aaac547fa","modified":1683527725839},{"_id":"public/tags/性能优化/index.html","hash":"30b447de62873f04bcc8fe4a5a1e29f2cbcc929c","modified":1683527725839},{"_id":"source/_posts/BFC.md","hash":"eaf3bf3fd88991d2c3779df484f79b4ec7579258","modified":1682389590011},{"_id":"public/2023/04/03/BFC/index.html","hash":"26255f78ddd706d036e1f0a781f28a606c385abf","modified":1683527725839},{"_id":"source/_posts/midjourney详解.md","hash":"2f18837f0d6e4183ccbd793bd50b19b384c98d24","modified":1680495975891},{"_id":"source/images/image-20230403121533718.png","hash":"1eae65f43222f7f97bd4fe3dd1f43117c7727b19","modified":1680495333720},{"_id":"source/images/image-20230403122133776.png","hash":"139b4ea51ff4a4739ea5ed92ef4309176f11a387","modified":1680495693778},{"_id":"source/images/image-20230403115710176.png","hash":"e8f3661ce8f049cc0bbcd24f76d2e2bc7222ce17","modified":1680494230178},{"_id":"source/images/image-20230403120334073.png","hash":"c4553f3802b7b411fadf9dc685237cff25e3223b","modified":1680494614074},{"_id":"source/images/image-20230403122249556.png","hash":"fda517186654f58e42457c6c26a665da09a30492","modified":1680495769557},{"_id":"source/images/image-20230403122304271.png","hash":"7f8bec9ce8b184969c130bc9db0b674541cad645","modified":1680495784272},{"_id":"source/images/image-20230403122315091.png","hash":"5f213e48e01ba3afc30de3b85b56c54d1e274021","modified":1680495795092},{"_id":"source/images/image-20230403121603281.png","hash":"8d9f456a1d0a99602bd46222ed821a536470e917","modified":1680495363282},{"_id":"source/images/image-20230403120853420.png","hash":"590abdbc9fb55ddb95b3d2b94962f1c064a4cdaa","modified":1680494933421},{"_id":"source/images/image-20230403121020222.png","hash":"fb50b129a9908c5f72b659bb3cc71435a81fab2c","modified":1680495020224},{"_id":"source/images/image-20230403120827889.png","hash":"6b53b7869d8d7d0422c4cdedfcc1b1dad7db47e8","modified":1680494907890},{"_id":"source/images/image-20230403122348895.png","hash":"2a64afc8058cf9fe9260e91d66becc7cc0395ded","modified":1680495828896},{"_id":"source/images/image-20230403114938818.png","hash":"5051767987bb1e005b3567b0d7dea510d7f51ab4","modified":1680493778821},{"_id":"public/2023/04/03/midjourney详解/index.html","hash":"34a0e25568f9795e0b9e84c861f048f0016d947c","modified":1680496127336},{"_id":"public/2018/03/28/npm发布 copy/index.html","hash":"3ce0c100738695e75f9f65c9497bd6591977a4f1","modified":1683527725839},{"_id":"public/archives/page/11/index.html","hash":"ff6644d0808704903567d80e5da4c858809de05d","modified":1683527725839},{"_id":"public/archives/2018/index.html","hash":"f37b89989b9d6575753080b1d8f8a43177313940","modified":1683527725839},{"_id":"public/archives/2018/03/index.html","hash":"66aafe08133ef2b4c50795b0989e7dbdbffda538","modified":1683527725839},{"_id":"public/categories/乱七八糟/index.html","hash":"fc17c9ff0c041a01e2f0e9ae3d4c82fe77e651d7","modified":1683527725839},{"_id":"public/page/11/index.html","hash":"c3560327e5830c2ba446ea8690dabbc92c1d98c9","modified":1683527725839},{"_id":"public/tags/乱七八糟/index.html","hash":"91cd29d8e6f96d829640f004dd68585dfabb87f9","modified":1683527725839},{"_id":"public/tags/midjourney/index.html","hash":"3ae066d8ba2ac2669a8a1af111dc6074028e337a","modified":1681180213720},{"_id":"public/images/image-20230403122133776.png","hash":"139b4ea51ff4a4739ea5ed92ef4309176f11a387","modified":1681960320512},{"_id":"public/images/image-20230403121533718.png","hash":"1eae65f43222f7f97bd4fe3dd1f43117c7727b19","modified":1681960320512},{"_id":"public/images/image-20230403115710176.png","hash":"e8f3661ce8f049cc0bbcd24f76d2e2bc7222ce17","modified":1681960320512},{"_id":"public/images/image-20230403120334073.png","hash":"c4553f3802b7b411fadf9dc685237cff25e3223b","modified":1681960320512},{"_id":"public/images/image-20230403122249556.png","hash":"fda517186654f58e42457c6c26a665da09a30492","modified":1681960320512},{"_id":"public/images/image-20230403122304271.png","hash":"7f8bec9ce8b184969c130bc9db0b674541cad645","modified":1681960320512},{"_id":"public/images/image-20230403122315091.png","hash":"5f213e48e01ba3afc30de3b85b56c54d1e274021","modified":1681960320512},{"_id":"public/images/image-20230403121603281.png","hash":"8d9f456a1d0a99602bd46222ed821a536470e917","modified":1681960320512},{"_id":"public/images/image-20230403120827889.png","hash":"6b53b7869d8d7d0422c4cdedfcc1b1dad7db47e8","modified":1681960320512},{"_id":"public/images/image-20230403120853420.png","hash":"590abdbc9fb55ddb95b3d2b94962f1c064a4cdaa","modified":1681960320512},{"_id":"public/images/image-20230403121020222.png","hash":"fb50b129a9908c5f72b659bb3cc71435a81fab2c","modified":1681960320512},{"_id":"public/images/image-20230403122348895.png","hash":"2a64afc8058cf9fe9260e91d66becc7cc0395ded","modified":1681960320512},{"_id":"public/images/image-20230403114938818.png","hash":"5051767987bb1e005b3567b0d7dea510d7f51ab4","modified":1681960320512},{"_id":"source/_posts/midjourney1.md","hash":"977005534f66d1a69a1c542c635114d0e6ecb047","modified":1681298614073},{"_id":"public/2023/04/03/midjourney1/index.html","hash":"b9471b5acfe50cdecf96681a865c07ef8818574e","modified":1683527725839},{"_id":"source/_posts/midjourney进阶.md","hash":"9f1bc40b2e5ac94afbed55fe2283ba3fdcab8728","modified":1681124727657},{"_id":"source/images/image-20230404120022600.png","hash":"2b24ede772782dbf4f3a88f1120df74dd1399c70","modified":1680580822602},{"_id":"source/images/image-20230404162215643.png","hash":"f1e3e0d4d70ad80fc30f73c7af6fad306659b512","modified":1680596535644},{"_id":"source/images/image-20230404162238094.png","hash":"0dd7f0fed6c0ba444bfc67a245166d85c23e4771","modified":1680596558094},{"_id":"source/images/image-20230404122021297.png","hash":"893388bc14678f0a53219e125ef69aa21bb8305c","modified":1680582021301},{"_id":"source/images/image-20230404164215600.png","hash":"a354cfd46c013293d2ee67190327cd702285f55c","modified":1680597735602},{"_id":"source/_posts/uni-app基础.md","hash":"9a9ed2e2ed7b2c22dbdfb9ad7067c362b45b59b5","modified":1681129627813},{"_id":"source/images/image-20230409164759496.png","hash":"588cd1c4cff19bcf9ef0926979613674734dcb64","modified":1681105664927},{"_id":"source/images/image-20230409164532726.png","hash":"f0ff9bc07c59332b33f314b464774c11a9707b6a","modified":1681105664924},{"_id":"source/images/image-20230409164610512.png","hash":"5514893d4711aad177f185a271a89445682f1c70","modified":1681105664925},{"_id":"source/images/image-20230409165247195.png","hash":"107df9550fd857717df6cf0ef16de3d7cdbffd36","modified":1681105664931},{"_id":"public/2023/04/09/uni-app基础/index.html","hash":"f02e547fa98b1c2c53f0258ad28aa55fd2ba5487","modified":1681122829025},{"_id":"public/2023/04/04/midjourney进阶/index.html","hash":"fc389a012eedcedab8f5cbeb20848724e4011c86","modified":1681124734208},{"_id":"public/2022/03/21/从零开始搭建web部署系统/index.html","hash":"b0c8c8610a93f07f09b5134b9f742093d36ca125","modified":1683527725839},{"_id":"public/categories/绘画/page/2/index.html","hash":"97e57cca7661f601ff86e14cb6f8373d98ae32c9","modified":1683527725839},{"_id":"public/tags/iv/index.html","hash":"fadd2299f96cf24755c0cd3684e730950993e8f8","modified":1682222022600},{"_id":"public/tags/uni-app/index.html","hash":"9095d6d19df911022a655a3bc2538cca2b66e8c4","modified":1683527725839},{"_id":"public/images/image-20230404120022600.png","hash":"2b24ede772782dbf4f3a88f1120df74dd1399c70","modified":1681960320512},{"_id":"public/images/image-20230404162215643.png","hash":"f1e3e0d4d70ad80fc30f73c7af6fad306659b512","modified":1681960320512},{"_id":"public/images/image-20230409164759496.png","hash":"588cd1c4cff19bcf9ef0926979613674734dcb64","modified":1681960320512},{"_id":"public/images/image-20230409164532726.png","hash":"f0ff9bc07c59332b33f314b464774c11a9707b6a","modified":1681960320512},{"_id":"public/images/image-20230409164610512.png","hash":"5514893d4711aad177f185a271a89445682f1c70","modified":1681960320512},{"_id":"public/images/image-20230409165247195.png","hash":"107df9550fd857717df6cf0ef16de3d7cdbffd36","modified":1681960320512},{"_id":"public/images/image-20230404162238094.png","hash":"0dd7f0fed6c0ba444bfc67a245166d85c23e4771","modified":1681960320512},{"_id":"public/images/image-20230404122021297.png","hash":"893388bc14678f0a53219e125ef69aa21bb8305c","modified":1681960320512},{"_id":"public/images/image-20230404164215600.png","hash":"a354cfd46c013293d2ee67190327cd702285f55c","modified":1681960320512},{"_id":"source/images/image-20230410190100608.png","hash":"4b9010641c13c593258cf33ae5dd0b4de33995b2","modified":1681124460609},{"_id":"source/images/image-20230410190226854.png","hash":"7295e5502327fa5e19b3f2162b82be15e920db43","modified":1681124546854},{"_id":"source/images/image-20230410190355527.png","hash":"ef773e1c82b3f4e7f1442c0d854430de69657959","modified":1681124635527},{"_id":"public/images/image-20230410190100608.png","hash":"4b9010641c13c593258cf33ae5dd0b4de33995b2","modified":1681960320512},{"_id":"public/images/image-20230410190226854.png","hash":"7295e5502327fa5e19b3f2162b82be15e920db43","modified":1681960320512},{"_id":"public/images/image-20230410190355527.png","hash":"ef773e1c82b3f4e7f1442c0d854430de69657959","modified":1681960320512},{"_id":"source/_posts/midjourney2.md","hash":"16567f064bf0264a42e1766bd06a0bef4c1a47d6","modified":1681298610605},{"_id":"source/_posts/midjourney5.md","hash":"6e073d0b9b63e829bb3c7733dc89c69ea50f153e","modified":1681788663863},{"_id":"source/_posts/midjourney4.md","hash":"32c01ce611338dfeccb5fdad60f118c47fa3715f","modified":1682319577561},{"_id":"source/_posts/midjourney3.md","hash":"887ba7930efd66cb3f5b695aed207efdcd99083e","modified":1682243246683},{"_id":"source/images/image-20230410191532067.png","hash":"ea40d996f39ad129ab71bb209f47f1054a752cc8","modified":1681125332068},{"_id":"source/images/image-20230410191407587.png","hash":"499a0a011007149f903a98f150fb6dbb3febd8ec","modified":1681125247587},{"_id":"source/images/image-20230410191419500.png","hash":"499a0a011007149f903a98f150fb6dbb3febd8ec","modified":1681125259501},{"_id":"source/images/image-20230410191913256.png","hash":"6674f8f62e8f2bce24b70a6563538d1bc3d11c19","modified":1681125553257},{"_id":"source/images/image-20230410192246017.png","hash":"52c21e40bb800f4a3e9b923de27017f59d3b67da","modified":1681125766017},{"_id":"source/images/image-20230410192315900.png","hash":"ee5081d573dd781bc01b6b03d2f9dd41bef1386e","modified":1681125795900},{"_id":"source/images/image-20230410192301872.png","hash":"69c427386cbee2f983141f98e7c609c754520484","modified":1681125781873},{"_id":"source/images/image-20230410192335421.png","hash":"f7394586a7ed781206aab6da85e41ec1967b1ce7","modified":1681125815422},{"_id":"source/images/image-20230410192127714.png","hash":"75a1b61751aa786d93cd4e933caf04105dec6a46","modified":1681125687715},{"_id":"source/images/image-20230410193749845.png","hash":"2d95d1c8037921db08c63252957c94b214944d0a","modified":1681126669846},{"_id":"source/images/image-20230410195242067.png","hash":"c9cc028fce941ccb59af04cef4ace51ab97cff1c","modified":1681127562068},{"_id":"source/images/image-20230410193810333.png","hash":"81cbcf1b3cfa7566676e1d31b8184b9458972c87","modified":1681126690333},{"_id":"source/images/image-20230410192201415.png","hash":"096caf0b8baa0d1327ee84dd28d1a7d80b5c3b5d","modified":1681125721415},{"_id":"source/images/image-20230410192145432.png","hash":"bb8db6596813ede1b7907b12849e68163bf19fb1","modified":1681125705432},{"_id":"source/images/image-20230410192219884.png","hash":"ff841bc140b928e09b773387c9aca0fadf07d0f2","modified":1681125739885},{"_id":"source/images/image-20230410192107578.png","hash":"a9c83d6c646ac4e73b7e4b3fa103bfe09857b463","modified":1681125667578},{"_id":"source/images/image-20230410193945910.png","hash":"842b64ab99d450d4e21858ffaa84e4f2ae73d42b","modified":1681126785911},{"_id":"source/images/image-20230410193935550.png","hash":"842b64ab99d450d4e21858ffaa84e4f2ae73d42b","modified":1681126775552},{"_id":"source/images/image-20230410202054882.png","hash":"318e65c2b34de3806a0278092e5a11153a51e11e","modified":1681129254885},{"_id":"source/images/image-20230410192047065.png","hash":"9ba322c81c070ede2d76285d53d1e5568ecce408","modified":1681125647065},{"_id":"source/images/image-20230410194339460.png","hash":"be4515781b866db1cf3787f96eac73039c282df9","modified":1681127019461},{"_id":"source/images/image-20230410195212944.png","hash":"61f6c1bb166a22b792c173ba2297cca86d7f7aa1","modified":1681127532945},{"_id":"source/images/image-20230410192742420.png","hash":"556cd7b143521b46e8cd7a4434a420ecf5446eed","modified":1681126062421},{"_id":"public/2023/04/10/midjourney5/index.html","hash":"efea846370618f789ee6a40d204a3f28a0ac90f7","modified":1683527725839},{"_id":"public/2023/04/10/midjourney3/index.html","hash":"d1878c59769bbc9f121891966ca9f555aba7ce5a","modified":1683527725839},{"_id":"public/2023/04/10/midjourney4/index.html","hash":"8580036f6ccc156d619d0c2c4b40996539d69e26","modified":1683527725839},{"_id":"public/2023/04/09/midjourney2/index.html","hash":"9dcd7ca94f0aecb398e996f7217acbe29d53d9ef","modified":1683527725839},{"_id":"public/2023/04/06/uni-app基础/index.html","hash":"beb102159e799d2dff25080e1620df381c7cca27","modified":1683527725839},{"_id":"public/archives/2023/page/3/index.html","hash":"8c15b06634630d3d2f64c91a9ee8c7a0af196e17","modified":1683527725839},{"_id":"public/images/image-20230410191532067.png","hash":"ea40d996f39ad129ab71bb209f47f1054a752cc8","modified":1681960320512},{"_id":"public/images/image-20230410191407587.png","hash":"499a0a011007149f903a98f150fb6dbb3febd8ec","modified":1681960320512},{"_id":"public/images/image-20230410191419500.png","hash":"499a0a011007149f903a98f150fb6dbb3febd8ec","modified":1681960320512},{"_id":"public/images/image-20230410191913256.png","hash":"6674f8f62e8f2bce24b70a6563538d1bc3d11c19","modified":1681960320512},{"_id":"public/images/image-20230410192246017.png","hash":"52c21e40bb800f4a3e9b923de27017f59d3b67da","modified":1681960320512},{"_id":"public/images/image-20230410192301872.png","hash":"69c427386cbee2f983141f98e7c609c754520484","modified":1681960320512},{"_id":"public/images/image-20230410192315900.png","hash":"ee5081d573dd781bc01b6b03d2f9dd41bef1386e","modified":1681960320512},{"_id":"public/images/image-20230410192335421.png","hash":"f7394586a7ed781206aab6da85e41ec1967b1ce7","modified":1681960320512},{"_id":"public/images/image-20230410192127714.png","hash":"75a1b61751aa786d93cd4e933caf04105dec6a46","modified":1681960320512},{"_id":"public/images/image-20230410195242067.png","hash":"c9cc028fce941ccb59af04cef4ace51ab97cff1c","modified":1681960320512},{"_id":"public/images/image-20230410193810333.png","hash":"81cbcf1b3cfa7566676e1d31b8184b9458972c87","modified":1681960320512},{"_id":"public/images/image-20230410192145432.png","hash":"bb8db6596813ede1b7907b12849e68163bf19fb1","modified":1681960320512},{"_id":"public/images/image-20230410192047065.png","hash":"9ba322c81c070ede2d76285d53d1e5568ecce408","modified":1681960320512},{"_id":"public/images/image-20230410192201415.png","hash":"096caf0b8baa0d1327ee84dd28d1a7d80b5c3b5d","modified":1681960320512},{"_id":"public/images/image-20230410193749845.png","hash":"2d95d1c8037921db08c63252957c94b214944d0a","modified":1681960320512},{"_id":"public/images/image-20230410194339460.png","hash":"be4515781b866db1cf3787f96eac73039c282df9","modified":1681960320512},{"_id":"public/images/image-20230410192219884.png","hash":"ff841bc140b928e09b773387c9aca0fadf07d0f2","modified":1681960320512},{"_id":"public/images/image-20230410192107578.png","hash":"a9c83d6c646ac4e73b7e4b3fa103bfe09857b463","modified":1681960320512},{"_id":"public/images/image-20230410193945910.png","hash":"842b64ab99d450d4e21858ffaa84e4f2ae73d42b","modified":1681960320512},{"_id":"public/images/image-20230410195212944.png","hash":"61f6c1bb166a22b792c173ba2297cca86d7f7aa1","modified":1681960320512},{"_id":"public/images/image-20230410193935550.png","hash":"842b64ab99d450d4e21858ffaa84e4f2ae73d42b","modified":1681960320512},{"_id":"public/images/image-20230410202054882.png","hash":"318e65c2b34de3806a0278092e5a11153a51e11e","modified":1681960320512},{"_id":"public/images/image-20230410192742420.png","hash":"556cd7b143521b46e8cd7a4434a420ecf5446eed","modified":1681960320512},{"_id":"source/images/image-20230414155237311.png","hash":"4ab7a275e60db5969809c0aabac794499ff89685","modified":1681458757311},{"_id":"source/images/image-20230414155204499.png","hash":"ae8efabc911844c8b46df8ea24e591f7799531fe","modified":1681458724501},{"_id":"source/images/image-20230413175026367.png","hash":"2c2009361ef3f67f8e9521f59d6e83068ac51e7c","modified":1681379426369},{"_id":"source/images/image-20230414155338981.png","hash":"8af82d1557b3f4439cc1ed7985d88c3f16573a87","modified":1681458818984},{"_id":"public/images/image-20230414155204499.png","hash":"ae8efabc911844c8b46df8ea24e591f7799531fe","modified":1681960320512},{"_id":"public/images/image-20230414155237311.png","hash":"4ab7a275e60db5969809c0aabac794499ff89685","modified":1681960320512},{"_id":"public/images/image-20230413175026367.png","hash":"2c2009361ef3f67f8e9521f59d6e83068ac51e7c","modified":1681960320512},{"_id":"public/images/image-20230414155338981.png","hash":"8af82d1557b3f4439cc1ed7985d88c3f16573a87","modified":1681960320512},{"_id":"public/images/avatar.jpg","hash":"71fb85947c1d17e5b3382c3b2156faad04e6f422","modified":1681960320512},{"_id":"public/images/banner.jpeg","hash":"fb9cbd029edb3927aaa0357f4623413178edd272","modified":1681809708079},{"_id":"public/images/banner_dark.jpeg","hash":"212dde0004c46785e19d68597a19393a60061125","modified":1681809708079},{"_id":"source/_posts/midjourney3-1.md","hash":"5561897c4e1b527f7a4162b15a02111fc52dfef9","modified":1681984851118},{"_id":"themes/kratos-rebirth/source/images/banner.png","hash":"2a794699f0618cff99630add44bf0f32c25e80d1","modified":1682221614320},{"_id":"themes/kratos-rebirth/source/images/banner_dark1.jpeg","hash":"212dde0004c46785e19d68597a19393a60061125","modified":1674599051133},{"_id":"themes/kratos-rebirth/source/images/banner_dark.png","hash":"578bcef37caaef5d6e37f1f8533efea6d06c7ecc","modified":1682221593621},{"_id":"themes/kratos-rebirth/source/images/bg.png","hash":"499b9199f6d817675c9297f76a20bdf36dd5cc39","modified":1682221524253},{"_id":"themes/kratos-rebirth/source/images/bg_dark.png","hash":"9faea0f5de8c856d0ac92f72805dab153e2fa61c","modified":1682221697691},{"_id":"public/2023/04/19/midjourney3-1/index.html","hash":"228e892d6fe6aa77ca9cddb0c05cdfe95c4f6682","modified":1683527725839},{"_id":"public/images/banner_dark1.jpeg","hash":"212dde0004c46785e19d68597a19393a60061125","modified":1681960320512},{"_id":"public/images/bg.png","hash":"499b9199f6d817675c9297f76a20bdf36dd5cc39","modified":1682222022600},{"_id":"public/images/banner.png","hash":"2a794699f0618cff99630add44bf0f32c25e80d1","modified":1682222022600},{"_id":"public/images/banner_dark.png","hash":"578bcef37caaef5d6e37f1f8533efea6d06c7ecc","modified":1682222022600},{"_id":"public/images/bg_dark.png","hash":"9faea0f5de8c856d0ac92f72805dab153e2fa61c","modified":1682222022600},{"_id":"themes/kratos-rebirth/source/images/bg_dark_web.png","hash":"c744878baaa00d674b92ef0234e4865dc532ca16","modified":1681971082501},{"_id":"public/images/bg_dark_web.png","hash":"c744878baaa00d674b92ef0234e4865dc532ca16","modified":1681971255725},{"_id":"themes/kratos-rebirth/source/images/bg_web_dark.png","hash":"f064873f04bfe1e28be500d7a8ad1f66451830fa","modified":1682221999010},{"_id":"themes/kratos-rebirth/source/images/bg_web.png","hash":"fddbeb8f30e125e90b26a15b9f71c8bf237870be","modified":1682222002530},{"_id":"themes/kratos-rebirth/source/images/banner_web_dark.png","hash":"ed0529fec06018c3cc7129cf473bd61a5b5b69d4","modified":1680448763683},{"_id":"themes/kratos-rebirth/source/images/banner_web.png","hash":"b24ef0d6ed99a738edd0a79a419ca4cca0d9b7d3","modified":1681897744235},{"_id":"public/images/bg_web.png","hash":"fddbeb8f30e125e90b26a15b9f71c8bf237870be","modified":1682222022600},{"_id":"public/images/bg_web_dark.png","hash":"f064873f04bfe1e28be500d7a8ad1f66451830fa","modified":1682222022600},{"_id":"public/images/banner_web_dark.png","hash":"ed0529fec06018c3cc7129cf473bd61a5b5b69d4","modified":1681977212898},{"_id":"public/images/banner_web.png","hash":"b24ef0d6ed99a738edd0a79a419ca4cca0d9b7d3","modified":1681977212898},{"_id":"themes/kratos-rebirth/source/images/footer.png","hash":"6abdb6c6990246aabad373d38cb7981bc7d1ecb6","modified":1682221713607},{"_id":"public/images/footer.png","hash":"6abdb6c6990246aabad373d38cb7981bc7d1ecb6","modified":1682222022600},{"_id":"themes/kratos-rebirth/source/images/a_girl_dressed_up_in_the_traditional_chinese_clothing_is_ho_47e5969f-33cd-478f-a734-a45369c10b85.png","hash":"9bfc826bcb9123552d7ec0920471eed878f719aa","modified":1682166637928},{"_id":"themes/kratos-rebirth/source/images/a_girl_dressed_up_in_the_traditional_chinese_clothing_is_ho_c612a660-2c76-4609-998b-148abfba33ca.png","hash":"bf048730997615689023cf4b6b83837ef21a0558","modified":1682166522445},{"_id":"public/images/a_girl_dressed_up_in_the_traditional_chinese_clothing_is_ho_47e5969f-33cd-478f-a734-a45369c10b85.png","hash":"9bfc826bcb9123552d7ec0920471eed878f719aa","modified":1682216679262},{"_id":"public/images/a_girl_dressed_up_in_the_traditional_chinese_clothing_is_ho_c612a660-2c76-4609-998b-148abfba33ca.png","hash":"bf048730997615689023cf4b6b83837ef21a0558","modified":1682216679262},{"_id":"themes/kratos-rebirth/source/images/bg_web1.png","hash":"2767f7791a5fa57208a4486f5a3e5deba35efcb5","modified":1682165868325},{"_id":"themes/kratos-rebirth/source/images/bg_web_dark1.png","hash":"2767f7791a5fa57208a4486f5a3e5deba35efcb5","modified":1682165868325},{"_id":"public/images/bg_web1.png","hash":"2767f7791a5fa57208a4486f5a3e5deba35efcb5","modified":1682220276331},{"_id":"public/images/bg_web_dark1.png","hash":"2767f7791a5fa57208a4486f5a3e5deba35efcb5","modified":1682220276331},{"_id":"source/_posts/六位颜色和八位颜色的区别.md","hash":"18ac8820e667dc83534ec543f452c789a1661158","modified":1683340836534},{"_id":"public/2023/04/23/六位颜色和八位颜色的区别/index.html","hash":"783e1da3d116195cd924f0b7fbf31c751ec5ab30","modified":1683527725839},{"_id":"source/images/image-20230423175106275.png","hash":"95ecd25d25ef8a2b7983d617c346df1d4a0875b4","modified":1682243466275},{"_id":"source/images/image-20230423175103467.png","hash":"95ecd25d25ef8a2b7983d617c346df1d4a0875b4","modified":1682243463468},{"_id":"public/images/image-20230423175106275.png","hash":"95ecd25d25ef8a2b7983d617c346df1d4a0875b4","modified":1682243540040},{"_id":"public/images/image-20230423175103467.png","hash":"95ecd25d25ef8a2b7983d617c346df1d4a0875b4","modified":1682243540040},{"_id":"source/images/image-20230423182136592.png","hash":"51b558ffb2fafa3a90878561aa0e5552f84b2646","modified":1682245296593},{"_id":"source/images/image-20230423180758894.png","hash":"16a37f1401afb1b4e43b15e710ab2d56d8d0a2b4","modified":1682244478902},{"_id":"source/images/image-20230423181147356.png","hash":"35c97b4951e020f517063095f3c1a66796aa7e09","modified":1682244707358},{"_id":"source/images/image-20230424120816939.png","hash":"9bc4a58d0548f065fbda975faf9675b093d25bdd","modified":1682309296942},{"_id":"source/images/image-20230424114321114.png","hash":"e467346c5ad4e126d8cc7943513a9c30a70269be","modified":1682307801116},{"_id":"source/images/image-20230424120926944.png","hash":"24bda6d7cfea88a919cf98b2e39626f308352291","modified":1682309366947},{"_id":"source/images/image-20230424120625511.png","hash":"2ab92ca5abdf29d0d8415deb2e5b22a5fbe0715a","modified":1682309185514},{"_id":"source/images/image-20230424120842336.png","hash":"8f935ca415fdc61dea6e729c3c813f510789dcc3","modified":1682309322336},{"_id":"source/images/image-20230424121226422.png","hash":"f0425ac17fd40072f4bd04ad188244c8a841b8d9","modified":1682309546424},{"_id":"source/images/image-20230424112851699.png","hash":"23e54c42d578b715e9a516cfb331077653598e6c","modified":1682306931701},{"_id":"source/images/image-20230424113120666.png","hash":"cd0fe7b6a034fa6c37d38ee80da2669d4588c77c","modified":1682307080668},{"_id":"source/images/image-20230424113107952.png","hash":"bbb81debe3c6469edd3c651bcf4ba4d00a5d9c0a","modified":1682307067953},{"_id":"source/images/image-20230424113700430.png","hash":"fb12beca12198cb6fbbbe7ca034d247ee4ed8319","modified":1682307420431},{"_id":"source/images/image-20230424102616997.png","hash":"0c9c45cea4448c7db6312f00a2e4bd5c8d09f294","modified":1682303176998},{"_id":"source/images/image-20230424102243529.png","hash":"91488ee139b3f5425c3b38b29a9bc5098fcdc8d4","modified":1682302963531},{"_id":"source/images/image-20230424112750753.png","hash":"3424d7466f81321816b5c5dabbd7bd1d0c19d639","modified":1682306870754},{"_id":"source/images/image-20230424102129976.png","hash":"0d2eaf216036d6d64d9274ce3cd5277248b0c0ba","modified":1682302889978},{"_id":"public/images/image-20230424120816939.png","hash":"9bc4a58d0548f065fbda975faf9675b093d25bdd","modified":1682309585151},{"_id":"public/images/image-20230424114321114.png","hash":"e467346c5ad4e126d8cc7943513a9c30a70269be","modified":1682309585151},{"_id":"public/images/image-20230424120625511.png","hash":"2ab92ca5abdf29d0d8415deb2e5b22a5fbe0715a","modified":1682309585151},{"_id":"public/images/image-20230424120926944.png","hash":"24bda6d7cfea88a919cf98b2e39626f308352291","modified":1682309585151},{"_id":"public/images/image-20230424120842336.png","hash":"8f935ca415fdc61dea6e729c3c813f510789dcc3","modified":1682309585151},{"_id":"public/images/image-20230424121226422.png","hash":"f0425ac17fd40072f4bd04ad188244c8a841b8d9","modified":1682309585151},{"_id":"public/images/image-20230424112851699.png","hash":"23e54c42d578b715e9a516cfb331077653598e6c","modified":1682309585151},{"_id":"public/images/image-20230423182136592.png","hash":"51b558ffb2fafa3a90878561aa0e5552f84b2646","modified":1682309585151},{"_id":"public/images/image-20230424113107952.png","hash":"bbb81debe3c6469edd3c651bcf4ba4d00a5d9c0a","modified":1682309585151},{"_id":"public/images/image-20230424113120666.png","hash":"cd0fe7b6a034fa6c37d38ee80da2669d4588c77c","modified":1682309585151},{"_id":"public/images/image-20230423180758894.png","hash":"16a37f1401afb1b4e43b15e710ab2d56d8d0a2b4","modified":1682309585151},{"_id":"public/images/image-20230424102616997.png","hash":"0c9c45cea4448c7db6312f00a2e4bd5c8d09f294","modified":1682309585151},{"_id":"public/images/image-20230424113700430.png","hash":"fb12beca12198cb6fbbbe7ca034d247ee4ed8319","modified":1682309585151},{"_id":"public/images/image-20230423181147356.png","hash":"35c97b4951e020f517063095f3c1a66796aa7e09","modified":1682309585151},{"_id":"public/images/image-20230424102243529.png","hash":"91488ee139b3f5425c3b38b29a9bc5098fcdc8d4","modified":1682309585151},{"_id":"public/images/image-20230424112750753.png","hash":"3424d7466f81321816b5c5dabbd7bd1d0c19d639","modified":1682309585151},{"_id":"public/images/image-20230424102129976.png","hash":"0d2eaf216036d6d64d9274ce3cd5277248b0c0ba","modified":1682309585151},{"_id":"themes/kratos-rebirth/source/images/fandom.png","hash":"9ea6d64deb70b1d393ef8f8c0a0068d207d3fcf5","modified":1682328731032},{"_id":"themes/kratos-rebirth/source/images/PDF.jpeg","hash":"f62f82494d3a717096c7ec2d24d2cad12ab9cc2a","modified":1682329113291},{"_id":"themes/kratos-rebirth/source/images/chatGpt.png","hash":"38bf552f0bba760b2682efd4d21b1b9aff3fc54d","modified":1682329258821},{"_id":"themes/kratos-rebirth/source/images/lineofaction.png","hash":"c3669502e2b19e40e5068890ed40aa74703b0b1b","modified":1682328963636},{"_id":"themes/kratos-rebirth/source/images/aigei.png","hash":"da0c597400769e3568cfeba844438bcc63a955cd","modified":1682328940258},{"_id":"themes/kratos-rebirth/source/images/akinator.jpeg","hash":"216f1e77ccff4300c281adf0360aa5aa6a94bc6d","modified":1682329205282},{"_id":"themes/kratos-rebirth/source/images/petalica.png","hash":"b00185b5d4fbbbebcd950b15ba47e993a326e726","modified":1682329068560},{"_id":"themes/kratos-rebirth/source/images/wuliquankai.png","hash":"3346bd45b8dc94020aea58c85895def6e7c95c76","modified":1682328888654},{"_id":"themes/kratos-rebirth/source/images/sms-activate.jpeg","hash":"a2dfec560342ff5f4f2479c2d3c167972ddcc4ae","modified":1682329089977},{"_id":"themes/kratos-rebirth/source/images/midjourney.jpeg","hash":"75cce682c86644813e927e77bcecd80f95e935ab","modified":1682329232934},{"_id":"themes/kratos-rebirth/source/images/chinaz.jpeg","hash":"6184762a304aa780372ec72ef736ea6a8093937f","modified":1682329501995},{"_id":"themes/kratos-rebirth/source/images/colab.png","hash":"dcc8fe9663c360755103b193de9ac49a152daadb","modified":1682329432691},{"_id":"public/images/chatGpt.png","hash":"38bf552f0bba760b2682efd4d21b1b9aff3fc54d","modified":1682329576467},{"_id":"public/images/akinator.jpeg","hash":"216f1e77ccff4300c281adf0360aa5aa6a94bc6d","modified":1682329576467},{"_id":"public/images/fandom.png","hash":"9ea6d64deb70b1d393ef8f8c0a0068d207d3fcf5","modified":1682329576467},{"_id":"public/images/aigei.png","hash":"da0c597400769e3568cfeba844438bcc63a955cd","modified":1682329576467},{"_id":"public/images/lineofaction.png","hash":"c3669502e2b19e40e5068890ed40aa74703b0b1b","modified":1682329576467},{"_id":"public/images/petalica.png","hash":"b00185b5d4fbbbebcd950b15ba47e993a326e726","modified":1682329576467},{"_id":"public/images/PDF.jpeg","hash":"f62f82494d3a717096c7ec2d24d2cad12ab9cc2a","modified":1682329576467},{"_id":"public/images/colab.png","hash":"dcc8fe9663c360755103b193de9ac49a152daadb","modified":1682329576467},{"_id":"public/images/chinaz.jpeg","hash":"6184762a304aa780372ec72ef736ea6a8093937f","modified":1682329576467},{"_id":"public/images/midjourney.jpeg","hash":"75cce682c86644813e927e77bcecd80f95e935ab","modified":1682329576467},{"_id":"public/images/wuliquankai.png","hash":"3346bd45b8dc94020aea58c85895def6e7c95c76","modified":1682329576467},{"_id":"public/images/sms-activate.jpeg","hash":"a2dfec560342ff5f4f2479c2d3c167972ddcc4ae","modified":1682329576467},{"_id":"source/_posts/prettier配置.md","hash":"9c3a8650406e4a23abdf0307e1486382f41ba6cb","modified":1682480939511},{"_id":"source/images/image-20230426113023587.png","hash":"b05666f175b091f1fb54208febda6ae3265d6e3e","modified":1682479823587},{"_id":"source/images/image-20230426114118275.png","hash":"4dea03d84be4aa31ebb071d35ce57a0b0365dd8b","modified":1682480478276},{"_id":"source/images/image-20230426113907920.png","hash":"f1b128ca9b0cbe4a2b614a61f29fe802f612710c","modified":1682480347921},{"_id":"source/images/image-20230426113405622.png","hash":"eeab403c48d1eaa321e980b01527644ee52c3c24","modified":1682480045623},{"_id":"source/images/image-20230426113555877.png","hash":"0b1607fd7629cb700cf5358973afc1e8df58d21b","modified":1682480155881},{"_id":"source/images/image-20230426114709495.png","hash":"3b815d3085120d9705c489ff06ef00919c83301b","modified":1682480829496},{"_id":"source/images/image-20230426114538654.png","hash":"0a2ba8538548c6fe6fd8aa8fcc576f293a64c538","modified":1682480738658},{"_id":"source/images/image-20230426114437094.png","hash":"cb99891ba43e038bdb9a54020a9e0fe22b4f6680","modified":1682480677095},{"_id":"public/2018/04/26/prettier配置/index.html","hash":"41b8928bf2b50333958ac47a49f577182b47b8c3","modified":1683527725839},{"_id":"public/archives/2018/04/index.html","hash":"f21d842651236526e702c53399a70df73c7a0c6c","modified":1683527725839},{"_id":"public/tags/iv1/index.html","hash":"9142574c4feb232ccc78b7c015cad65aac80266b","modified":1683527725839},{"_id":"public/tags/iv2/index.html","hash":"95917ddfec34f97dfc2a2134a09d64dcaf1298a7","modified":1683527725839},{"_id":"public/tags/iv3/index.html","hash":"2f26290b0d9cc8cb2b3f592edf8707bcf54aae0a","modified":1683527725839},{"_id":"public/tags/prettier/index.html","hash":"a2f5ec71c8760db06dfb1d4add464191827dc1db","modified":1683527725839},{"_id":"public/images/image-20230426114709495.png","hash":"3b815d3085120d9705c489ff06ef00919c83301b","modified":1682480953456},{"_id":"public/images/image-20230426113023587.png","hash":"b05666f175b091f1fb54208febda6ae3265d6e3e","modified":1682480953456},{"_id":"public/images/image-20230426114538654.png","hash":"0a2ba8538548c6fe6fd8aa8fcc576f293a64c538","modified":1682480953456},{"_id":"public/images/image-20230426113907920.png","hash":"f1b128ca9b0cbe4a2b614a61f29fe802f612710c","modified":1682480953456},{"_id":"public/images/image-20230426114118275.png","hash":"4dea03d84be4aa31ebb071d35ce57a0b0365dd8b","modified":1682480953456},{"_id":"public/images/image-20230426113555877.png","hash":"0b1607fd7629cb700cf5358973afc1e8df58d21b","modified":1682480953456},{"_id":"public/images/image-20230426113405622.png","hash":"eeab403c48d1eaa321e980b01527644ee52c3c24","modified":1682480953456},{"_id":"public/images/image-20230426114437094.png","hash":"cb99891ba43e038bdb9a54020a9e0fe22b4f6680","modified":1682480953456},{"_id":"source/_posts/色彩构成.md","hash":"81b35c84f3c1206a6d9560a0711f743d80354525","modified":1683527630913},{"_id":"source/images/image-20230506135300582.png","hash":"98b79e1d9d7394175cb0d01b841a9b27d8809e42","modified":1683352380582},{"_id":"source/images/image-20230506135410013.png","hash":"2bb50bedb645c4e7810b9bd01187f5825934733e","modified":1683352450013},{"_id":"source/images/image-20230506135322713.png","hash":"e70b4c76daeb8b018453551a769fed9c225e518c","modified":1683352402714},{"_id":"source/_posts/反向代理.md","hash":"38f541a47a722fd246814e0f3feff25eac8203a5","modified":1683527720338},{"_id":"public/2023/05/08/反向代理/index.html","hash":"940409c4c156385c771bc0f6bd1aee9a491355b0","modified":1683527725839},{"_id":"public/2023/05/06/色彩构成/index.html","hash":"b95e304a85969ce1acc8df1eecf13801f61ca132","modified":1683527725839},{"_id":"public/archives/page/12/index.html","hash":"ac5a8e5849b16952d5ca5b092b6c62724573dab5","modified":1683527725839},{"_id":"public/archives/2023/05/index.html","hash":"2c6fd8d05a9dcba027b98e85c56913bfd9bb0778","modified":1683527725839},{"_id":"public/page/12/index.html","hash":"616c7e76cc34bb212eb504d11d2964b52ef7e832","modified":1683527725839},{"_id":"public/images/image-20230506135300582.png","hash":"98b79e1d9d7394175cb0d01b841a9b27d8809e42","modified":1683527639987},{"_id":"public/images/image-20230506135410013.png","hash":"2bb50bedb645c4e7810b9bd01187f5825934733e","modified":1683527639987},{"_id":"public/images/image-20230506135322713.png","hash":"e70b4c76daeb8b018453551a769fed9c225e518c","modified":1683527639987},{"_id":"public/categories/程序员的自我修养/page/7/index.html","hash":"c01c8beaf868197d2662d23a227bf7786ad8968d","modified":1683527725839}],"Category":[{"name":"Diary","_id":"cldamdd0z0001vmwi1u0zh22q"},{"name":"kkkkk","_id":"cldamdd100002vmwi6sm58mpi"},{"name":"绘画","_id":"cldapzfh20000cwwicedtdic5"},{"name":"日记","_id":"cldaq68j40002icwi6wo12szc"},{"name":"程序员的自我修养","_id":"cldatmjem0001towicg6i4z60"},{"name":"建模","_id":"cldbhl5e80002p2wi6dknfrm7"},{"name":"水仙花观察日记","_id":"cldbhl5eq000ep2wi8qo24b7o"},{"name":"奇奇怪怪的积累","_id":"cldbhl5eu000up2wi50t325zu"},{"name":"生活","_id":"cldbhl5ew0012p2wi79628qbx"},{"name":"练字 绘画","_id":"cldbhl5f0001pp2wi0b102e98"},{"name":"练字","_id":"cldbhl5f2001xp2wigmcdbg8a"},{"name":"生活 -","_id":"cldc2n9sf0001ogwibwb623lx"},{"name":"css","_id":"clfgkv9s10002nuwicr8ydhau"},{"name":"乱七八糟","_id":"clg0c077900019dwie2ub718o"}],"Data":[],"Page":[],"Post":[{"title":"粤拼总结笔记","date":"2021-09-25T00:25:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n  \n粤拼教学：[点击访问](https://www.youtube.com/watch?v=KzkKkEETgtQ&list=PLj7yAwByEbSNGWmk_8chfxUTCnJDLmAGr&index=2)\n\n### 七个主要元音：\n\naa\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-17763eb172b63de7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\ne\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-fa8bd2a4af897f12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\ni\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-ffbb568a6a481159.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\no\n![](https://upload-images.jianshu.io/upload_images/20892169-f16142fc0c751f9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nu\n![ ](https://upload-images.jianshu.io/upload_images/20892169-6c9314921a4a0bae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nyu\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-9ba57e1b0fde6cca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\noe\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-2eb5550c08f25565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n粤语可以多个韵母组合\n![](https://upload-images.jianshu.io/upload_images/20892169-6fe3d1269342c564.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 双元音\n\n元音和元音的组合\n\n![](https://upload-images.jianshu.io/upload_images/20892169-5bd56122e15ea815.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n除了元音与元音的互相组合外，元音一般可以加：m/n/p/t/k/ng\n\n### 19个声母\n\nb p m f\n\nd t n l\n\ng k h\n\ngw kw w\n\nz c s\n\nj ng\n\n### 七个主要元音 + m\naam\ne \nim\no \nu\nyu\noe\n\n### 七个主要元音 + n\naan\ne \nin\non\nun\nyun\noe 不存在加n\n![](https://upload-images.jianshu.io/upload_images/20892169-038cc49651fe015f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 七个主要元音 + ng\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-35d20825bbf56f42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\niu也有后面介绍。\n\n### 七个主要元音 + p\n![](https://upload-images.jianshu.io/upload_images/20892169-3063d24522fb61e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 七个主要元音 + t\n![](https://upload-images.jianshu.io/upload_images/20892169-6cf0565d2dbcacc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 七个主要元音 + k\n![](https://upload-images.jianshu.io/upload_images/20892169-5d95a99189fa7d16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\niu也有后面介绍。\n\n### aa和a\n长aa 短a\n![](https://upload-images.jianshu.io/upload_images/20892169-45c3e345d7999ae6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### oe和eo\noe发音长（🤮）\neo发音短 （鹅噢）eo发音类似拼音（e）粤语里的e发音和拼音e不一样\n\n### 前面说要补充的ng和k的两个ing ik ung uk","source":"_posts/other-yueping.md","raw":"---\ntitle: '粤拼总结笔记'\ndate: 2021-09-25 08:25:49\ntags: 粤拼\ncategories:\n  - 奇奇怪怪的积累\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n  \n粤拼教学：[点击访问](https://www.youtube.com/watch?v=KzkKkEETgtQ&list=PLj7yAwByEbSNGWmk_8chfxUTCnJDLmAGr&index=2)\n\n### 七个主要元音：\n\naa\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-17763eb172b63de7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\ne\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-fa8bd2a4af897f12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\ni\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-ffbb568a6a481159.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\no\n![](https://upload-images.jianshu.io/upload_images/20892169-f16142fc0c751f9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nu\n![ ](https://upload-images.jianshu.io/upload_images/20892169-6c9314921a4a0bae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nyu\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-9ba57e1b0fde6cca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\noe\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-2eb5550c08f25565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n粤语可以多个韵母组合\n![](https://upload-images.jianshu.io/upload_images/20892169-6fe3d1269342c564.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 双元音\n\n元音和元音的组合\n\n![](https://upload-images.jianshu.io/upload_images/20892169-5bd56122e15ea815.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n除了元音与元音的互相组合外，元音一般可以加：m/n/p/t/k/ng\n\n### 19个声母\n\nb p m f\n\nd t n l\n\ng k h\n\ngw kw w\n\nz c s\n\nj ng\n\n### 七个主要元音 + m\naam\ne \nim\no \nu\nyu\noe\n\n### 七个主要元音 + n\naan\ne \nin\non\nun\nyun\noe 不存在加n\n![](https://upload-images.jianshu.io/upload_images/20892169-038cc49651fe015f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 七个主要元音 + ng\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-35d20825bbf56f42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\niu也有后面介绍。\n\n### 七个主要元音 + p\n![](https://upload-images.jianshu.io/upload_images/20892169-3063d24522fb61e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 七个主要元音 + t\n![](https://upload-images.jianshu.io/upload_images/20892169-6cf0565d2dbcacc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 七个主要元音 + k\n![](https://upload-images.jianshu.io/upload_images/20892169-5d95a99189fa7d16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\niu也有后面介绍。\n\n### aa和a\n长aa 短a\n![](https://upload-images.jianshu.io/upload_images/20892169-45c3e345d7999ae6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### oe和eo\noe发音长（🤮）\neo发音短 （鹅噢）eo发音类似拼音（e）粤语里的e发音和拼音e不一样\n\n### 前面说要补充的ng和k的两个ing ik ung uk","slug":"other-yueping","published":1,"updated":"2023-01-25T07:04:48.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbhl5et000pp2wifahkbkdf","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n  \n<p>粤拼教学：<a href=\"https://www.youtube.com/watch?v=KzkKkEETgtQ&list=PLj7yAwByEbSNGWmk_8chfxUTCnJDLmAGr&index=2\">点击访问</a></p>\n<h3 id=\"七个主要元音：\"><a href=\"#七个主要元音：\" class=\"headerlink\" title=\"七个主要元音：\"></a>七个主要元音：</h3><p>aa<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-17763eb172b63de7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>e<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fa8bd2a4af897f12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>i<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ffbb568a6a481159.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>o<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f16142fc0c751f9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>u<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6c9314921a4a0bae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" \"></p>\n<p>yu<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9ba57e1b0fde6cca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>oe<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2eb5550c08f25565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>粤语可以多个韵母组合<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6fe3d1269342c564.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"双元音\"><a href=\"#双元音\" class=\"headerlink\" title=\"双元音\"></a>双元音</h3><p>元音和元音的组合</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5bd56122e15ea815.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>除了元音与元音的互相组合外，元音一般可以加：m/n/p/t/k/ng</p>\n<h3 id=\"19个声母\"><a href=\"#19个声母\" class=\"headerlink\" title=\"19个声母\"></a>19个声母</h3><p>b p m f</p>\n<p>d t n l</p>\n<p>g k h</p>\n<p>gw kw w</p>\n<p>z c s</p>\n<p>j ng</p>\n<h3 id=\"七个主要元音-m\"><a href=\"#七个主要元音-m\" class=\"headerlink\" title=\"七个主要元音 + m\"></a>七个主要元音 + m</h3><p>aam<br>e<br>im<br>o<br>u<br>yu<br>oe</p>\n<h3 id=\"七个主要元音-n\"><a href=\"#七个主要元音-n\" class=\"headerlink\" title=\"七个主要元音 + n\"></a>七个主要元音 + n</h3><p>aan<br>e<br>in<br>on<br>un<br>yun<br>oe 不存在加n<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-038cc49651fe015f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"七个主要元音-ng\"><a href=\"#七个主要元音-ng\" class=\"headerlink\" title=\"七个主要元音 + ng\"></a>七个主要元音 + ng</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-35d20825bbf56f42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>iu也有后面介绍。</p>\n<h3 id=\"七个主要元音-p\"><a href=\"#七个主要元音-p\" class=\"headerlink\" title=\"七个主要元音 + p\"></a>七个主要元音 + p</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3063d24522fb61e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"七个主要元音-t\"><a href=\"#七个主要元音-t\" class=\"headerlink\" title=\"七个主要元音 + t\"></a>七个主要元音 + t</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6cf0565d2dbcacc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"七个主要元音-k\"><a href=\"#七个主要元音-k\" class=\"headerlink\" title=\"七个主要元音 + k\"></a>七个主要元音 + k</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5d95a99189fa7d16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>iu也有后面介绍。</p>\n<h3 id=\"aa和a\"><a href=\"#aa和a\" class=\"headerlink\" title=\"aa和a\"></a>aa和a</h3><p>长aa 短a<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-45c3e345d7999ae6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"oe和eo\"><a href=\"#oe和eo\" class=\"headerlink\" title=\"oe和eo\"></a>oe和eo</h3><p>oe发音长（🤮）<br>eo发音短 （鹅噢）eo发音类似拼音（e）粤语里的e发音和拼音e不一样</p>\n<h3 id=\"前面说要补充的ng和k的两个ing-ik-ung-uk\"><a href=\"#前面说要补充的ng和k的两个ing-ik-ung-uk\" class=\"headerlink\" title=\"前面说要补充的ng和k的两个ing ik ung uk\"></a>前面说要补充的ng和k的两个ing ik ung uk</h3>","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n  \n<p>粤拼教学：<a href=\"https://www.youtube.com/watch?v=KzkKkEETgtQ&list=PLj7yAwByEbSNGWmk_8chfxUTCnJDLmAGr&index=2\">点击访问</a></p>\n<h3 id=\"七个主要元音：\"><a href=\"#七个主要元音：\" class=\"headerlink\" title=\"七个主要元音：\"></a>七个主要元音：</h3><p>aa<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-17763eb172b63de7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>e<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fa8bd2a4af897f12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>i<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ffbb568a6a481159.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>o<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f16142fc0c751f9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>u<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6c9314921a4a0bae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" \"></p>\n<p>yu<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9ba57e1b0fde6cca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>oe<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2eb5550c08f25565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>粤语可以多个韵母组合<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6fe3d1269342c564.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"双元音\"><a href=\"#双元音\" class=\"headerlink\" title=\"双元音\"></a>双元音</h3><p>元音和元音的组合</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5bd56122e15ea815.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>除了元音与元音的互相组合外，元音一般可以加：m/n/p/t/k/ng</p>\n<h3 id=\"19个声母\"><a href=\"#19个声母\" class=\"headerlink\" title=\"19个声母\"></a>19个声母</h3><p>b p m f</p>\n<p>d t n l</p>\n<p>g k h</p>\n<p>gw kw w</p>\n<p>z c s</p>\n<p>j ng</p>\n<h3 id=\"七个主要元音-m\"><a href=\"#七个主要元音-m\" class=\"headerlink\" title=\"七个主要元音 + m\"></a>七个主要元音 + m</h3><p>aam<br>e<br>im<br>o<br>u<br>yu<br>oe</p>\n<h3 id=\"七个主要元音-n\"><a href=\"#七个主要元音-n\" class=\"headerlink\" title=\"七个主要元音 + n\"></a>七个主要元音 + n</h3><p>aan<br>e<br>in<br>on<br>un<br>yun<br>oe 不存在加n<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-038cc49651fe015f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"七个主要元音-ng\"><a href=\"#七个主要元音-ng\" class=\"headerlink\" title=\"七个主要元音 + ng\"></a>七个主要元音 + ng</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-35d20825bbf56f42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>iu也有后面介绍。</p>\n<h3 id=\"七个主要元音-p\"><a href=\"#七个主要元音-p\" class=\"headerlink\" title=\"七个主要元音 + p\"></a>七个主要元音 + p</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3063d24522fb61e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"七个主要元音-t\"><a href=\"#七个主要元音-t\" class=\"headerlink\" title=\"七个主要元音 + t\"></a>七个主要元音 + t</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6cf0565d2dbcacc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"七个主要元音-k\"><a href=\"#七个主要元音-k\" class=\"headerlink\" title=\"七个主要元音 + k\"></a>七个主要元音 + k</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5d95a99189fa7d16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>iu也有后面介绍。</p>\n<h3 id=\"aa和a\"><a href=\"#aa和a\" class=\"headerlink\" title=\"aa和a\"></a>aa和a</h3><p>长aa 短a<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-45c3e345d7999ae6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"oe和eo\"><a href=\"#oe和eo\" class=\"headerlink\" title=\"oe和eo\"></a>oe和eo</h3><p>oe发音长（🤮）<br>eo发音短 （鹅噢）eo发音类似拼音（e）粤语里的e发音和拼音e不一样</p>\n<h3 id=\"前面说要补充的ng和k的两个ing-ik-ung-uk\"><a href=\"#前面说要补充的ng和k的两个ing-ik-ung-uk\" class=\"headerlink\" title=\"前面说要补充的ng和k的两个ing ik ung uk\"></a>前面说要补充的ng和k的两个ing ik ung uk</h3>"},{"title":"坐在那里用仓颉和粤拼打字的练习","date":"2021-09-27T00:25:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n \n 給 kap1\n及 kap6\n吸 kap1\n\n西 sai1\n\n攻 gung1\n良 loeng4\n\n眼5\n體 tai2\n積 zik1\n狼狽爲奸gaan1\n\n跟 gan1\n斤 gan1\n\n鬆sung1綁bong2\n\nh：w\n珊saan瑚wu4\n\n安on1全cyun4\n\n染jim5\n\n明ming4白baak6\n\n欧au阳joeng4克hak1\n\n戰zin3國gwok3\n海hoi賊caak\n\nji\n极kap端dyun\n\nqi\n騎 ke4\n\n海hoi2洋joeng4\n\n契kai3機gei1\n\n源jyun4頭tau4\n\n蓉jung4兒ji4\n\n\n終身監禁gaamgam\n\n\n\n\n\n\n","source":"_posts/other-yuewenzi.md","raw":"---\ntitle: '坐在那里用仓颉和粤拼打字的练习'\ndate: 2021-09-27 08:25:49\ntags: \n - 粤拼\n - 粤语\ncategories:\n  - 奇奇怪怪的积累\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n \n 給 kap1\n及 kap6\n吸 kap1\n\n西 sai1\n\n攻 gung1\n良 loeng4\n\n眼5\n體 tai2\n積 zik1\n狼狽爲奸gaan1\n\n跟 gan1\n斤 gan1\n\n鬆sung1綁bong2\n\nh：w\n珊saan瑚wu4\n\n安on1全cyun4\n\n染jim5\n\n明ming4白baak6\n\n欧au阳joeng4克hak1\n\n戰zin3國gwok3\n海hoi賊caak\n\nji\n极kap端dyun\n\nqi\n騎 ke4\n\n海hoi2洋joeng4\n\n契kai3機gei1\n\n源jyun4頭tau4\n\n蓉jung4兒ji4\n\n\n終身監禁gaamgam\n\n\n\n\n\n\n","slug":"other-yuewenzi","published":1,"updated":"2023-01-25T07:13:33.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbhl5f1001tp2wib8lr9zrc","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n \n<p> 給 kap1<br>及 kap6<br>吸 kap1</p>\n<p>西 sai1</p>\n<p>攻 gung1<br>良 loeng4</p>\n<p>眼5<br>體 tai2<br>積 zik1<br>狼狽爲奸gaan1</p>\n<p>跟 gan1<br>斤 gan1</p>\n<p>鬆sung1綁bong2</p>\n<p>h：w<br>珊saan瑚wu4</p>\n<p>安on1全cyun4</p>\n<p>染jim5</p>\n<p>明ming4白baak6</p>\n<p>欧au阳joeng4克hak1</p>\n<p>戰zin3國gwok3<br>海hoi賊caak</p>\n<p>ji<br>极kap端dyun</p>\n<p>qi<br>騎 ke4</p>\n<p>海hoi2洋joeng4</p>\n<p>契kai3機gei1</p>\n<p>源jyun4頭tau4</p>\n<p>蓉jung4兒ji4</p>\n<p>終身監禁gaamgam</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n \n<p> 給 kap1<br>及 kap6<br>吸 kap1</p>\n<p>西 sai1</p>\n<p>攻 gung1<br>良 loeng4</p>\n<p>眼5<br>體 tai2<br>積 zik1<br>狼狽爲奸gaan1</p>\n<p>跟 gan1<br>斤 gan1</p>\n<p>鬆sung1綁bong2</p>\n<p>h：w<br>珊saan瑚wu4</p>\n<p>安on1全cyun4</p>\n<p>染jim5</p>\n<p>明ming4白baak6</p>\n<p>欧au阳joeng4克hak1</p>\n<p>戰zin3國gwok3<br>海hoi賊caak</p>\n<p>ji<br>极kap端dyun</p>\n<p>qi<br>騎 ke4</p>\n<p>海hoi2洋joeng4</p>\n<p>契kai3機gei1</p>\n<p>源jyun4頭tau4</p>\n<p>蓉jung4兒ji4</p>\n<p>終身監禁gaamgam</p>\n"},{"title":"【prettier】vscode + prettier自动格式化","date":"2022-11-21T15:11:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n**1. 搜索并安装`prettier`，并确定该插件是启用状态**\n![](https://upload-images.jianshu.io/upload_images/20892169-9b4bd29b1519333d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**2. 在项目中安装prettier**\n\n```\nnpm install --save-dev prettier\n```\n\n**3. 在项目根目录新建`.prettierrc`和`.prettierignore`文件**\n\n`.prettierrc`: 配置格式化规则，如以下配置\n\n```\n{\n  \"semi\": true,\n  \"singleQuote\": false,\n  \"arrowParens\": \"always\",\n  \"trailingComma\": \"all\"\n}\n```\n\n`.prettierrc`更多的配置内容可以[点击这里](https://prettier.io/docs/en/configuration.html)\n<br>\n\n`.prettierignore`: 配置不需要格式化的文件，如下：\n\n```\n# Ignore artifacts:\nbuild\ncoverage\n/node_modules\n```\n\n**4.打开`vscode`的`setting`(快捷键`command+,`)，搜索`Format`，并勾选`Editor: Format On Save`**\n![](https://upload-images.jianshu.io/upload_images/20892169-020af7ba79614712.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**5. 随便打开一个项目中的js文件，右键，点击使用...格式化文档**\n\n![](https://upload-images.jianshu.io/upload_images/20892169-89b40b6978d680e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**6. 在顶部点击配置默认格式化程序...，选择Prettier**\n\n![](https://upload-images.jianshu.io/upload_images/20892169-90844185703105d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n配置完成，改动文件并保存就可以生效了。","source":"_posts/vscode-prettier.md","raw":"---\ntitle: '【prettier】vscode + prettier自动格式化'\ndate: 2022-11-21 23:11:49\ntags: prettier \ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n**1. 搜索并安装`prettier`，并确定该插件是启用状态**\n![](https://upload-images.jianshu.io/upload_images/20892169-9b4bd29b1519333d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**2. 在项目中安装prettier**\n\n```\nnpm install --save-dev prettier\n```\n\n**3. 在项目根目录新建`.prettierrc`和`.prettierignore`文件**\n\n`.prettierrc`: 配置格式化规则，如以下配置\n\n```\n{\n  \"semi\": true,\n  \"singleQuote\": false,\n  \"arrowParens\": \"always\",\n  \"trailingComma\": \"all\"\n}\n```\n\n`.prettierrc`更多的配置内容可以[点击这里](https://prettier.io/docs/en/configuration.html)\n<br>\n\n`.prettierignore`: 配置不需要格式化的文件，如下：\n\n```\n# Ignore artifacts:\nbuild\ncoverage\n/node_modules\n```\n\n**4.打开`vscode`的`setting`(快捷键`command+,`)，搜索`Format`，并勾选`Editor: Format On Save`**\n![](https://upload-images.jianshu.io/upload_images/20892169-020af7ba79614712.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**5. 随便打开一个项目中的js文件，右键，点击使用...格式化文档**\n\n![](https://upload-images.jianshu.io/upload_images/20892169-89b40b6978d680e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**6. 在顶部点击配置默认格式化程序...，选择Prettier**\n\n![](https://upload-images.jianshu.io/upload_images/20892169-90844185703105d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n配置完成，改动文件并保存就可以生效了。","slug":"vscode-prettier","published":1,"updated":"2023-04-26T03:48:37.525Z","_id":"cldbmnw54000004wi2zc2ejkp","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p><strong>1. 搜索并安装<code>prettier</code>，并确定该插件是启用状态</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9b4bd29b1519333d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>2. 在项目中安装prettier</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev prettier</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. 在项目根目录新建<code>.prettierrc</code>和<code>.prettierignore</code>文件</strong></p>\n<p><code>.prettierrc</code>: 配置格式化规则，如以下配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;semi&quot;: true,</span><br><span class=\"line\">  &quot;singleQuote&quot;: false,</span><br><span class=\"line\">  &quot;arrowParens&quot;: &quot;always&quot;,</span><br><span class=\"line\">  &quot;trailingComma&quot;: &quot;all&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>.prettierrc</code>更多的配置内容可以<a href=\"https://prettier.io/docs/en/configuration.html\">点击这里</a><br><br></p>\n<p><code>.prettierignore</code>: 配置不需要格式化的文件，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Ignore artifacts:</span><br><span class=\"line\">build</span><br><span class=\"line\">coverage</span><br><span class=\"line\">/node_modules</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.打开<code>vscode</code>的<code>setting</code>(快捷键<code>command+,</code>)，搜索<code>Format</code>，并勾选<code>Editor: Format On Save</code></strong><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-020af7ba79614712.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>5. 随便打开一个项目中的js文件，右键，点击使用…格式化文档</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-89b40b6978d680e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><strong>6. 在顶部点击配置默认格式化程序…，选择Prettier</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-90844185703105d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>配置完成，改动文件并保存就可以生效了。</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p><strong>1. 搜索并安装<code>prettier</code>，并确定该插件是启用状态</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9b4bd29b1519333d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>2. 在项目中安装prettier</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev prettier</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. 在项目根目录新建<code>.prettierrc</code>和<code>.prettierignore</code>文件</strong></p>\n<p><code>.prettierrc</code>: 配置格式化规则，如以下配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;semi&quot;: true,</span><br><span class=\"line\">  &quot;singleQuote&quot;: false,</span><br><span class=\"line\">  &quot;arrowParens&quot;: &quot;always&quot;,</span><br><span class=\"line\">  &quot;trailingComma&quot;: &quot;all&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>.prettierrc</code>更多的配置内容可以<a href=\"https://prettier.io/docs/en/configuration.html\">点击这里</a><br><br></p>\n<p><code>.prettierignore</code>: 配置不需要格式化的文件，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Ignore artifacts:</span><br><span class=\"line\">build</span><br><span class=\"line\">coverage</span><br><span class=\"line\">/node_modules</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.打开<code>vscode</code>的<code>setting</code>(快捷键<code>command+,</code>)，搜索<code>Format</code>，并勾选<code>Editor: Format On Save</code></strong><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-020af7ba79614712.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>5. 随便打开一个项目中的js文件，右键，点击使用…格式化文档</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-89b40b6978d680e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><strong>6. 在顶部点击配置默认格式化程序…，选择Prettier</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-90844185703105d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>配置完成，改动文件并保存就可以生效了。</p>\n"},{"title":"【node】path.join和path.resolve的区别","date":"2021-05-11T04:01:08.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### 参数拼接 path.join([path1][, path2][, ...])\n**`path.join()`方法可以连接任意多个路径字符串。要连接的多个路径可做为参数传入。**\n\npath.join()方法的参数为string，可以加多个参数，最后会拼在一起形成一个地址，若不是string则报错\n```javascript\n// 用法\nconst path = require('path'); \npath.join('https://', 'www.', 'aaa', '.com', '/','aaa') \n'https://www.aaa.com/aaa' \n\n// 传入的不为字符串则报错\npath.join('aaa',{},'bbb') \n// 抛出的异常 TypeError: Arguments to path.join must be strings'\n```\n\n#### 路径解析：path.resolve([from ...], to)\n**path.resolve()方法可以将多个路径解析为一个规范化的绝对路径。**\n其处理方式类似于对这些路径逐一进行cd操作，但resolve在未执行时不会校验其合法性（就是可以不存在这个地址）\n```javascript\npath.resolve('foo/bar', '/tmp/file/', '..', 'a/../truefile')\n```\n相当于\n```javascript\ncd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../truefile\npwd\n```\n举例：\n```javascript\npath.resolve('/foo/bar', './baz') \n// 输出结果为 '/foo/bar/baz' \npath.resolve('/foo/bar', '/tmp/file/') \n// 输出结果为 '/tmp/file' \n\npath.resolve(__dirname, 'static_files/png/', '../gif/image.gif') \n// 当前的工作路径是 /home/itbilu/node，则输出结果为 \n// '/home/itbilu/node/wwwroot/static_files/gif/image.gif'\n\n```","source":"_posts/cxy/node-path.md","raw":"---\ntitle: '【node】path.join和path.resolve的区别'\ndate: 2021-05-11 12:01:08\ntags: node\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### 参数拼接 path.join([path1][, path2][, ...])\n**`path.join()`方法可以连接任意多个路径字符串。要连接的多个路径可做为参数传入。**\n\npath.join()方法的参数为string，可以加多个参数，最后会拼在一起形成一个地址，若不是string则报错\n```javascript\n// 用法\nconst path = require('path'); \npath.join('https://', 'www.', 'aaa', '.com', '/','aaa') \n'https://www.aaa.com/aaa' \n\n// 传入的不为字符串则报错\npath.join('aaa',{},'bbb') \n// 抛出的异常 TypeError: Arguments to path.join must be strings'\n```\n\n#### 路径解析：path.resolve([from ...], to)\n**path.resolve()方法可以将多个路径解析为一个规范化的绝对路径。**\n其处理方式类似于对这些路径逐一进行cd操作，但resolve在未执行时不会校验其合法性（就是可以不存在这个地址）\n```javascript\npath.resolve('foo/bar', '/tmp/file/', '..', 'a/../truefile')\n```\n相当于\n```javascript\ncd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../truefile\npwd\n```\n举例：\n```javascript\npath.resolve('/foo/bar', './baz') \n// 输出结果为 '/foo/bar/baz' \npath.resolve('/foo/bar', '/tmp/file/') \n// 输出结果为 '/tmp/file' \n\npath.resolve(__dirname, 'static_files/png/', '../gif/image.gif') \n// 当前的工作路径是 /home/itbilu/node，则输出结果为 \n// '/home/itbilu/node/wwwroot/static_files/gif/image.gif'\n\n```","slug":"cxy/node-path","published":1,"updated":"2023-01-25T10:56:14.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbmnw5d000h04wi2zob8jbw","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"参数拼接-path-join-path1-path2-…\"><a href=\"#参数拼接-path-join-path1-path2-…\" class=\"headerlink\" title=\"参数拼接 path.join([path1][, path2][, …])\"></a>参数拼接 path.join([path1][, path2][, …])</h4><p><strong><code>path.join()</code>方法可以连接任意多个路径字符串。要连接的多个路径可做为参数传入。</strong></p>\n<p>path.join()方法的参数为string，可以加多个参数，最后会拼在一起形成一个地址，若不是string则报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>); </span><br><span class=\"line\">path.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;https://&#x27;</span>, <span class=\"string\">&#x27;www.&#x27;</span>, <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"string\">&#x27;.com&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>,<span class=\"string\">&#x27;aaa&#x27;</span>) </span><br><span class=\"line\"><span class=\"string\">&#x27;https://www.aaa.com/aaa&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入的不为字符串则报错</span></span><br><span class=\"line\">path.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;aaa&#x27;</span>,&#123;&#125;,<span class=\"string\">&#x27;bbb&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">// 抛出的异常 TypeError: Arguments to path.join must be strings&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路径解析：path-resolve-from-…-to\"><a href=\"#路径解析：path-resolve-from-…-to\" class=\"headerlink\" title=\"路径解析：path.resolve([from …], to)\"></a>路径解析：path.resolve([from …], to)</h4><p><strong>path.resolve()方法可以将多个路径解析为一个规范化的绝对路径。</strong><br>其处理方式类似于对这些路径逐一进行cd操作，但resolve在未执行时不会校验其合法性（就是可以不存在这个地址）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;foo/bar&#x27;</span>, <span class=\"string\">&#x27;/tmp/file/&#x27;</span>, <span class=\"string\">&#x27;..&#x27;</span>, <span class=\"string\">&#x27;a/../truefile&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd foo/bar</span><br><span class=\"line\">cd /tmp/file/</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">cd a/../truefile</span><br><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/foo/bar&#x27;</span>, <span class=\"string\">&#x27;./baz&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">// 输出结果为 &#x27;/foo/bar/baz&#x27; </span></span><br><span class=\"line\">path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/foo/bar&#x27;</span>, <span class=\"string\">&#x27;/tmp/file/&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">// 输出结果为 &#x27;/tmp/file&#x27; </span></span><br><span class=\"line\"></span><br><span class=\"line\">path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;static_files/png/&#x27;</span>, <span class=\"string\">&#x27;../gif/image.gif&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">// 当前的工作路径是 /home/itbilu/node，则输出结果为 </span></span><br><span class=\"line\"><span class=\"comment\">// &#x27;/home/itbilu/node/wwwroot/static_files/gif/image.gif&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"参数拼接-path-join-path1-path2-…\"><a href=\"#参数拼接-path-join-path1-path2-…\" class=\"headerlink\" title=\"参数拼接 path.join([path1][, path2][, …])\"></a>参数拼接 path.join([path1][, path2][, …])</h4><p><strong><code>path.join()</code>方法可以连接任意多个路径字符串。要连接的多个路径可做为参数传入。</strong></p>\n<p>path.join()方法的参数为string，可以加多个参数，最后会拼在一起形成一个地址，若不是string则报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>); </span><br><span class=\"line\">path.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;https://&#x27;</span>, <span class=\"string\">&#x27;www.&#x27;</span>, <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"string\">&#x27;.com&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>,<span class=\"string\">&#x27;aaa&#x27;</span>) </span><br><span class=\"line\"><span class=\"string\">&#x27;https://www.aaa.com/aaa&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入的不为字符串则报错</span></span><br><span class=\"line\">path.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;aaa&#x27;</span>,&#123;&#125;,<span class=\"string\">&#x27;bbb&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">// 抛出的异常 TypeError: Arguments to path.join must be strings&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路径解析：path-resolve-from-…-to\"><a href=\"#路径解析：path-resolve-from-…-to\" class=\"headerlink\" title=\"路径解析：path.resolve([from …], to)\"></a>路径解析：path.resolve([from …], to)</h4><p><strong>path.resolve()方法可以将多个路径解析为一个规范化的绝对路径。</strong><br>其处理方式类似于对这些路径逐一进行cd操作，但resolve在未执行时不会校验其合法性（就是可以不存在这个地址）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;foo/bar&#x27;</span>, <span class=\"string\">&#x27;/tmp/file/&#x27;</span>, <span class=\"string\">&#x27;..&#x27;</span>, <span class=\"string\">&#x27;a/../truefile&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd foo/bar</span><br><span class=\"line\">cd /tmp/file/</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">cd a/../truefile</span><br><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/foo/bar&#x27;</span>, <span class=\"string\">&#x27;./baz&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">// 输出结果为 &#x27;/foo/bar/baz&#x27; </span></span><br><span class=\"line\">path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;/foo/bar&#x27;</span>, <span class=\"string\">&#x27;/tmp/file/&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">// 输出结果为 &#x27;/tmp/file&#x27; </span></span><br><span class=\"line\"></span><br><span class=\"line\">path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;static_files/png/&#x27;</span>, <span class=\"string\">&#x27;../gif/image.gif&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">// 当前的工作路径是 /home/itbilu/node，则输出结果为 </span></span><br><span class=\"line\"><span class=\"comment\">// &#x27;/home/itbilu/node/wwwroot/static_files/gif/image.gif&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"【npm】常见参数的区别","date":"2021-07-17T08:01:08.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### dependencies 与 devDependencies的区别：\n\n`dependencies`：它包含的依赖包是需要发布到生产环境中的，是项目正常运行必须依赖的包。\n`devDependencies`：它包含的依赖包只在开发时使用，不用于生产环境，如果只需要项目正常运行，则不必安装这里面的包。\n<hr>\n## npm install packageName：安装某个包到项目中\n默认情况下，不加参数。会安装包，并将依赖包的名称添加`package.json`中的`dependencies`字段。\n\n#### 1. `--save`参数\n```\nnpm install --save packageName\n```\n添加`--save`参数，与默认情况效果相同。会安装包，并将依赖包的名称添加到`package.json`中的`dependencies`字段。\n\n#### 2. `--save-dev`参数\n```\nnpm install --save-dev packageName\n```\n添加`--save-dev`参数，会安装包，并将依赖包的名称添加到`package.json`中的`devDependencies`字段。\n\n## npm install： 初始化项目\n####1. 无参数： 直接初始化\n```\nnpm install \n```\n我们常用`npm install`初始化项目，安装项目所需的依赖。但更深入的细节是：直接使用`npm install`时，项目`package.json`中`dependencies`字段和`devDependencies`字段中的依赖包都会被安装。\n#### 2. --production参数\n```\nnpm install --production\n```\n添加`--production`安装项目所需的依赖时，只有`dependencies`字段中的依赖包会被安装，`devDependencies`中的依赖包不会被安装。\n\n#### 3. --only=dev参数\n```\nnpm install --only=dev\n```\n添加`--only=dev`安装项目所需依赖时，只有`devDependencies`字段中的依赖包会被安装，`dependencies`字段中的依赖包不会被安装。与添加`--production`的效果刚好相反。","source":"_posts/cxy/npm-dependencies.md","raw":"---\ntitle: '【npm】常见参数的区别'\ndate: 2021-07-17 16:01:08\ntags: \n  - node\n  - npm\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### dependencies 与 devDependencies的区别：\n\n`dependencies`：它包含的依赖包是需要发布到生产环境中的，是项目正常运行必须依赖的包。\n`devDependencies`：它包含的依赖包只在开发时使用，不用于生产环境，如果只需要项目正常运行，则不必安装这里面的包。\n<hr>\n## npm install packageName：安装某个包到项目中\n默认情况下，不加参数。会安装包，并将依赖包的名称添加`package.json`中的`dependencies`字段。\n\n#### 1. `--save`参数\n```\nnpm install --save packageName\n```\n添加`--save`参数，与默认情况效果相同。会安装包，并将依赖包的名称添加到`package.json`中的`dependencies`字段。\n\n#### 2. `--save-dev`参数\n```\nnpm install --save-dev packageName\n```\n添加`--save-dev`参数，会安装包，并将依赖包的名称添加到`package.json`中的`devDependencies`字段。\n\n## npm install： 初始化项目\n####1. 无参数： 直接初始化\n```\nnpm install \n```\n我们常用`npm install`初始化项目，安装项目所需的依赖。但更深入的细节是：直接使用`npm install`时，项目`package.json`中`dependencies`字段和`devDependencies`字段中的依赖包都会被安装。\n#### 2. --production参数\n```\nnpm install --production\n```\n添加`--production`安装项目所需的依赖时，只有`dependencies`字段中的依赖包会被安装，`devDependencies`中的依赖包不会被安装。\n\n#### 3. --only=dev参数\n```\nnpm install --only=dev\n```\n添加`--only=dev`安装项目所需依赖时，只有`devDependencies`字段中的依赖包会被安装，`dependencies`字段中的依赖包不会被安装。与添加`--production`的效果刚好相反。","slug":"cxy/npm-dependencies","published":1,"updated":"2023-01-25T16:39:34.476Z","_id":"cldbmnw5d000k04wi5xmv1lhj","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"dependencies-与-devDependencies的区别：\"><a href=\"#dependencies-与-devDependencies的区别：\" class=\"headerlink\" title=\"dependencies 与 devDependencies的区别：\"></a>dependencies 与 devDependencies的区别：</h4><p><code>dependencies</code>：它包含的依赖包是需要发布到生产环境中的，是项目正常运行必须依赖的包。<br><code>devDependencies</code>：它包含的依赖包只在开发时使用，不用于生产环境，如果只需要项目正常运行，则不必安装这里面的包。</p>\n<hr>\n## npm install packageName：安装某个包到项目中\n默认情况下，不加参数。会安装包，并将依赖包的名称添加`package.json`中的`dependencies`字段。\n\n<h4 id=\"1-save参数\"><a href=\"#1-save参数\" class=\"headerlink\" title=\"1. --save参数\"></a>1. <code>--save</code>参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save packageName</span><br></pre></td></tr></table></figure>\n<p>添加<code>--save</code>参数，与默认情况效果相同。会安装包，并将依赖包的名称添加到<code>package.json</code>中的<code>dependencies</code>字段。</p>\n<h4 id=\"2-save-dev参数\"><a href=\"#2-save-dev参数\" class=\"headerlink\" title=\"2. --save-dev参数\"></a>2. <code>--save-dev</code>参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev packageName</span><br></pre></td></tr></table></figure>\n<p>添加<code>--save-dev</code>参数，会安装包，并将依赖包的名称添加到<code>package.json</code>中的<code>devDependencies</code>字段。</p>\n<h2 id=\"npm-install：-初始化项目\"><a href=\"#npm-install：-初始化项目\" class=\"headerlink\" title=\"npm install： 初始化项目\"></a>npm install： 初始化项目</h2><p>####1. 无参数： 直接初始化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install </span><br></pre></td></tr></table></figure>\n<p>我们常用<code>npm install</code>初始化项目，安装项目所需的依赖。但更深入的细节是：直接使用<code>npm install</code>时，项目<code>package.json</code>中<code>dependencies</code>字段和<code>devDependencies</code>字段中的依赖包都会被安装。</p>\n<h4 id=\"2-–production参数\"><a href=\"#2-–production参数\" class=\"headerlink\" title=\"2. –production参数\"></a>2. –production参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --production</span><br></pre></td></tr></table></figure>\n<p>添加<code>--production</code>安装项目所需的依赖时，只有<code>dependencies</code>字段中的依赖包会被安装，<code>devDependencies</code>中的依赖包不会被安装。</p>\n<h4 id=\"3-–only-dev参数\"><a href=\"#3-–only-dev参数\" class=\"headerlink\" title=\"3. –only=dev参数\"></a>3. –only=dev参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --only=dev</span><br></pre></td></tr></table></figure>\n<p>添加<code>--only=dev</code>安装项目所需依赖时，只有<code>devDependencies</code>字段中的依赖包会被安装，<code>dependencies</code>字段中的依赖包不会被安装。与添加<code>--production</code>的效果刚好相反。</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"dependencies-与-devDependencies的区别：\"><a href=\"#dependencies-与-devDependencies的区别：\" class=\"headerlink\" title=\"dependencies 与 devDependencies的区别：\"></a>dependencies 与 devDependencies的区别：</h4><p><code>dependencies</code>：它包含的依赖包是需要发布到生产环境中的，是项目正常运行必须依赖的包。<br><code>devDependencies</code>：它包含的依赖包只在开发时使用，不用于生产环境，如果只需要项目正常运行，则不必安装这里面的包。</p>\n<hr>\n## npm install packageName：安装某个包到项目中\n默认情况下，不加参数。会安装包，并将依赖包的名称添加`package.json`中的`dependencies`字段。\n\n<h4 id=\"1-save参数\"><a href=\"#1-save参数\" class=\"headerlink\" title=\"1. --save参数\"></a>1. <code>--save</code>参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save packageName</span><br></pre></td></tr></table></figure>\n<p>添加<code>--save</code>参数，与默认情况效果相同。会安装包，并将依赖包的名称添加到<code>package.json</code>中的<code>dependencies</code>字段。</p>\n<h4 id=\"2-save-dev参数\"><a href=\"#2-save-dev参数\" class=\"headerlink\" title=\"2. --save-dev参数\"></a>2. <code>--save-dev</code>参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev packageName</span><br></pre></td></tr></table></figure>\n<p>添加<code>--save-dev</code>参数，会安装包，并将依赖包的名称添加到<code>package.json</code>中的<code>devDependencies</code>字段。</p>\n<h2 id=\"npm-install：-初始化项目\"><a href=\"#npm-install：-初始化项目\" class=\"headerlink\" title=\"npm install： 初始化项目\"></a>npm install： 初始化项目</h2><p>####1. 无参数： 直接初始化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install </span><br></pre></td></tr></table></figure>\n<p>我们常用<code>npm install</code>初始化项目，安装项目所需的依赖。但更深入的细节是：直接使用<code>npm install</code>时，项目<code>package.json</code>中<code>dependencies</code>字段和<code>devDependencies</code>字段中的依赖包都会被安装。</p>\n<h4 id=\"2-–production参数\"><a href=\"#2-–production参数\" class=\"headerlink\" title=\"2. –production参数\"></a>2. –production参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --production</span><br></pre></td></tr></table></figure>\n<p>添加<code>--production</code>安装项目所需的依赖时，只有<code>dependencies</code>字段中的依赖包会被安装，<code>devDependencies</code>中的依赖包不会被安装。</p>\n<h4 id=\"3-–only-dev参数\"><a href=\"#3-–only-dev参数\" class=\"headerlink\" title=\"3. –only=dev参数\"></a>3. –only=dev参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --only=dev</span><br></pre></td></tr></table></figure>\n<p>添加<code>--only=dev</code>安装项目所需依赖时，只有<code>devDependencies</code>字段中的依赖包会被安装，<code>dependencies</code>字段中的依赖包不会被安装。与添加<code>--production</code>的效果刚好相反。</p>\n"},{"title":"【blender+scatter5插件】两分钟做好一个漂亮的地形","date":"2022-07-31T22:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n想录个随风摇摆的动画视频，结果粒子系统卡死我\n\n因为这个插件本质是生成一堆粒子系统，所以要对自己的配置有自信。\n所需blender版本: 3.1及以上\n\n##1. 安装Landscape插件\n![landscape插件](https://upload-images.jianshu.io/upload_images/20892169-d54e01f4fd73f9ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##2. 新建地形，在网格 - Landscape中。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-a4d3fe7b08cdf0ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##3. 点击后，左侧下方有一个下拉菜单，点开后可以进行地形的详细设置\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-30f9d160f8d8f735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##4. 物体 - 应用 - 全部变换\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-9834e7d52506d164.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n或command + a 调出应用面板，也可以选择应用变换              。\n##5. 下载安装 Scatter5 插件并启用\n下载地址：[点击查看](https://blender.kim/61665.html)\n下载后解压，通过插件引入，点击安装，导入解压后文件夹内的压缩包scatter5.2.zip，点击确定。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-4682af74b62c950a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击展开，然后进入enter manager\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-ba99e51ab4dd47de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击install a scatter package\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-f77f08855e689ca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n选择解压文件夹中的另外三个文件，，点击install即可。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-2a062090bf4fb309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##6.右侧n面板中，选择该插件，点击吸管，选择创建好的地形。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-d77ab5a22d87c6e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击后面板变为以下模样子。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-6b3069452b0db092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后点击图片，选择想要的预设。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-19a83961ccd80e99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击Biome Scatter，点击Open Biomes\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-2941c85ba4676d86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n选择喜欢的地形。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-a9a9ab0e69aca8d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n加载完成后，会有很多粒子系统被自动导入，默认不开启。\n点击每一个System List中的粒子系统，在下方wind中，开启Wind Waves\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-f442b70d52ae6d99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-197be147cc6f4349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<hr>\n\n加载一个天空纹理\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-fe56efba4b70c86d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击渲染模式并播放即可。\n\n\n###说明：\n&ensp; &ensp; **1. 操作项预设**\n&ensp; &ensp; &ensp; &ensp; 可以设置一些预设的地形，比如石头、湖泊、山等。\n\n&ensp; &ensp; **2.SubdivisionsX / Y**\n&ensp; &ensp;![](http://upload-images.jianshu.io/upload_images/20892169-67a9a938663d7fdd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50)\n\n &ensp; &ensp; 细分，细分自然是越高细节越多。但渲染也越慢。\n\n&ensp; &ensp; **3. mesh SizeX / Y**\n&ensp; &ensp; &ensp; &ensp; 设置平面的尺寸。\n\n**其他的设置也有很多，可以多尝试**\n\n##其他积累：\n&ensp; &ensp; 1. scale 平面，之前只知道是按s，但不知道按下数字键可以直接按比例缩放，比如按s，向外拖，再按2，就是放大两倍。按s，向内拖，再按下2，就是缩小两倍了。","source":"_posts/jianmo/bl-caoping.md","raw":"---\ntitle: '【blender+scatter5插件】两分钟做好一个漂亮的地形'\ndate: 2022-08-01 06:21:49\ntags: blender\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n想录个随风摇摆的动画视频，结果粒子系统卡死我\n\n因为这个插件本质是生成一堆粒子系统，所以要对自己的配置有自信。\n所需blender版本: 3.1及以上\n\n##1. 安装Landscape插件\n![landscape插件](https://upload-images.jianshu.io/upload_images/20892169-d54e01f4fd73f9ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##2. 新建地形，在网格 - Landscape中。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-a4d3fe7b08cdf0ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##3. 点击后，左侧下方有一个下拉菜单，点开后可以进行地形的详细设置\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-30f9d160f8d8f735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##4. 物体 - 应用 - 全部变换\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-9834e7d52506d164.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n或command + a 调出应用面板，也可以选择应用变换              。\n##5. 下载安装 Scatter5 插件并启用\n下载地址：[点击查看](https://blender.kim/61665.html)\n下载后解压，通过插件引入，点击安装，导入解压后文件夹内的压缩包scatter5.2.zip，点击确定。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-4682af74b62c950a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击展开，然后进入enter manager\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-ba99e51ab4dd47de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击install a scatter package\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-f77f08855e689ca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n选择解压文件夹中的另外三个文件，，点击install即可。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-2a062090bf4fb309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##6.右侧n面板中，选择该插件，点击吸管，选择创建好的地形。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-d77ab5a22d87c6e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击后面板变为以下模样子。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-6b3069452b0db092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后点击图片，选择想要的预设。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-19a83961ccd80e99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击Biome Scatter，点击Open Biomes\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-2941c85ba4676d86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n选择喜欢的地形。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-a9a9ab0e69aca8d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n加载完成后，会有很多粒子系统被自动导入，默认不开启。\n点击每一个System List中的粒子系统，在下方wind中，开启Wind Waves\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-f442b70d52ae6d99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-197be147cc6f4349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<hr>\n\n加载一个天空纹理\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-fe56efba4b70c86d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击渲染模式并播放即可。\n\n\n###说明：\n&ensp; &ensp; **1. 操作项预设**\n&ensp; &ensp; &ensp; &ensp; 可以设置一些预设的地形，比如石头、湖泊、山等。\n\n&ensp; &ensp; **2.SubdivisionsX / Y**\n&ensp; &ensp;![](http://upload-images.jianshu.io/upload_images/20892169-67a9a938663d7fdd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50)\n\n &ensp; &ensp; 细分，细分自然是越高细节越多。但渲染也越慢。\n\n&ensp; &ensp; **3. mesh SizeX / Y**\n&ensp; &ensp; &ensp; &ensp; 设置平面的尺寸。\n\n**其他的设置也有很多，可以多尝试**\n\n##其他积累：\n&ensp; &ensp; 1. scale 平面，之前只知道是按s，但不知道按下数字键可以直接按比例缩放，比如按s，向外拖，再按2，就是放大两倍。按s，向内拖，再按下2，就是缩小两倍了。","slug":"jianmo/bl-caoping","published":1,"updated":"2023-01-25T10:56:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbmnw5d000n04wi6yp0erup","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>想录个随风摇摆的动画视频，结果粒子系统卡死我</p>\n<p>因为这个插件本质是生成一堆粒子系统，所以要对自己的配置有自信。<br>所需blender版本: 3.1及以上</p>\n<p>##1. 安装Landscape插件<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d54e01f4fd73f9ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"landscape插件\"></p>\n<p>##2. 新建地形，在网格 - Landscape中。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a4d3fe7b08cdf0ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>##3. 点击后，左侧下方有一个下拉菜单，点开后可以进行地形的详细设置<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-30f9d160f8d8f735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>##4. 物体 - 应用 - 全部变换<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9834e7d52506d164.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>或command + a 调出应用面板，也可以选择应用变换              。<br>##5. 下载安装 Scatter5 插件并启用<br>下载地址：<a href=\"https://blender.kim/61665.html\">点击查看</a><br>下载后解压，通过插件引入，点击安装，导入解压后文件夹内的压缩包scatter5.2.zip，点击确定。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4682af74b62c950a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击展开，然后进入enter manager<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ba99e51ab4dd47de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击install a scatter package<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f77f08855e689ca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>选择解压文件夹中的另外三个文件，，点击install即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2a062090bf4fb309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>##6.右侧n面板中，选择该插件，点击吸管，选择创建好的地形。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d77ab5a22d87c6e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击后面板变为以下模样子。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6b3069452b0db092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>然后点击图片，选择想要的预设。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-19a83961ccd80e99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击Biome Scatter，点击Open Biomes<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2941c85ba4676d86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>选择喜欢的地形。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a9a9ab0e69aca8d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>加载完成后，会有很多粒子系统被自动导入，默认不开启。<br>点击每一个System List中的粒子系统，在下方wind中，开启Wind Waves<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f442b70d52ae6d99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-197be147cc6f4349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<hr>\n\n<p>加载一个天空纹理<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fe56efba4b70c86d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击渲染模式并播放即可。</p>\n<p>###说明：<br>&ensp; &ensp; <strong>1. 操作项预设</strong><br>&ensp; &ensp; &ensp; &ensp; 可以设置一些预设的地形，比如石头、湖泊、山等。</p>\n<p>&ensp; &ensp; <strong>2.SubdivisionsX / Y</strong><br>&ensp; &ensp;<img src=\"http://upload-images.jianshu.io/upload_images/20892169-67a9a938663d7fdd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50\"></p>\n<p> &ensp; &ensp; 细分，细分自然是越高细节越多。但渲染也越慢。</p>\n<p>&ensp; &ensp; <strong>3. mesh SizeX / Y</strong><br>&ensp; &ensp; &ensp; &ensp; 设置平面的尺寸。</p>\n<p><strong>其他的设置也有很多，可以多尝试</strong></p>\n<p>##其他积累：<br>&ensp; &ensp; 1. scale 平面，之前只知道是按s，但不知道按下数字键可以直接按比例缩放，比如按s，向外拖，再按2，就是放大两倍。按s，向内拖，再按下2，就是缩小两倍了。</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>想录个随风摇摆的动画视频，结果粒子系统卡死我</p>\n<p>因为这个插件本质是生成一堆粒子系统，所以要对自己的配置有自信。<br>所需blender版本: 3.1及以上</p>\n<p>##1. 安装Landscape插件<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d54e01f4fd73f9ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"landscape插件\"></p>\n<p>##2. 新建地形，在网格 - Landscape中。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a4d3fe7b08cdf0ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>##3. 点击后，左侧下方有一个下拉菜单，点开后可以进行地形的详细设置<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-30f9d160f8d8f735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>##4. 物体 - 应用 - 全部变换<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9834e7d52506d164.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>或command + a 调出应用面板，也可以选择应用变换              。<br>##5. 下载安装 Scatter5 插件并启用<br>下载地址：<a href=\"https://blender.kim/61665.html\">点击查看</a><br>下载后解压，通过插件引入，点击安装，导入解压后文件夹内的压缩包scatter5.2.zip，点击确定。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4682af74b62c950a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击展开，然后进入enter manager<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ba99e51ab4dd47de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击install a scatter package<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f77f08855e689ca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>选择解压文件夹中的另外三个文件，，点击install即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2a062090bf4fb309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>##6.右侧n面板中，选择该插件，点击吸管，选择创建好的地形。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d77ab5a22d87c6e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击后面板变为以下模样子。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6b3069452b0db092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>然后点击图片，选择想要的预设。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-19a83961ccd80e99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击Biome Scatter，点击Open Biomes<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2941c85ba4676d86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>选择喜欢的地形。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a9a9ab0e69aca8d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>加载完成后，会有很多粒子系统被自动导入，默认不开启。<br>点击每一个System List中的粒子系统，在下方wind中，开启Wind Waves<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f442b70d52ae6d99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-197be147cc6f4349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<hr>\n\n<p>加载一个天空纹理<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fe56efba4b70c86d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击渲染模式并播放即可。</p>\n<p>###说明：<br>&ensp; &ensp; <strong>1. 操作项预设</strong><br>&ensp; &ensp; &ensp; &ensp; 可以设置一些预设的地形，比如石头、湖泊、山等。</p>\n<p>&ensp; &ensp; <strong>2.SubdivisionsX / Y</strong><br>&ensp; &ensp;<img src=\"http://upload-images.jianshu.io/upload_images/20892169-67a9a938663d7fdd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50\"></p>\n<p> &ensp; &ensp; 细分，细分自然是越高细节越多。但渲染也越慢。</p>\n<p>&ensp; &ensp; <strong>3. mesh SizeX / Y</strong><br>&ensp; &ensp; &ensp; &ensp; 设置平面的尺寸。</p>\n<p><strong>其他的设置也有很多，可以多尝试</strong></p>\n<p>##其他积累：<br>&ensp; &ensp; 1. scale 平面，之前只知道是按s，但不知道按下数字键可以直接按比例缩放，比如按s，向外拖，再按2，就是放大两倍。按s，向内拖，再按下2，就是缩小两倍了。</p>\n"},{"title":"blender各种光源的设置","date":"2022-07-24T22:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 场景 - 世界自带光源与hdri光源。\n首先，场景 - 世界中的自带光源，与hdri光源是互斥的，二者只能有一个生效。\n当勾选 **视图着色方式 - 场景世界** 时，\n将强度/力度调为0，且没有建立其他光源的话，则世界场景完全无光源。\n将强度/力度调高世界场景也会亮。\n所以一般如果不需要这个的话，在渲染前需要调为0。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-ceb5ff9a35885d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n场景世界若不勾选，可以显示hdri，世界不透明度改为0的时候就可以只显示物体上的hdri效果。\nhdri图有360度的场景。相当于一个懒人全景打光，将场景中物体放入了已经定义好的一个360度的环境中。\n\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-0ab9c7cbe36dac5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 各种光源的详细介绍\n### 1. 点光源\n颜色：调整颜色 \n能量：调整瓦数\n半径：半径越大，向周围发送的光就越散\n点光源离物体越近，物体越亮。点光光源半径越大，阴影越散。\n\n![点光大半径，离物体近的情况](https://upload-images.jianshu.io/upload_images/20892169-1883e0e4b9a0516f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![点光大半径，离物体远的情况](https://upload-images.jianshu.io/upload_images/20892169-f92db444578b98d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![点光小半径，离物体远的情况](https://upload-images.jianshu.io/upload_images/20892169-5c829fdeaf3f5eff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![点光小半径，离物体近的情况](https://upload-images.jianshu.io/upload_images/20892169-cea42044907a4d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n***注：当沿点光源像物体两边作切线，离物体越近的光源切线范围越大。所以点光光源离物体越远时，阴影反而越硬朗，*** \n### 2. 日光\n日光本身建立在什么位置都无所谓，完全无所谓。\n日光的位置不会影响影子的角度、影子的强度。\n比如下图，日光在物体正上方，影子依旧向右。就算日光放到物体底下，影子依旧不会受日光的位置影响。\n\n![日光在物体上方](https://upload-images.jianshu.io/upload_images/20892169-065000ffee1dea5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![日光在物体下方](https://upload-images.jianshu.io/upload_images/20892169-c55a738eee448087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n影响日光角度的只有这个调节手杆儿\n![](https://upload-images.jianshu.io/upload_images/20892169-0a15053b4b5c67d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n手杆儿角度越大，阴影越长\n\n**角度和强度：**\n![](https://upload-images.jianshu.io/upload_images/20892169-becf125bf0a67c14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n太阳光强度一般1-3就很亮了。\n角度0-180度，和手柄调节的角度不是一个概念。试下来感觉角度越大阴影越散越亮。\n可以观察下面两张图的角度值，同时观察墙面的投影区别。\n\n![角度值27.3](https://upload-images.jianshu.io/upload_images/20892169-68c38402253f5024.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![角度值86.3](https://upload-images.jianshu.io/upload_images/20892169-47d88031dd17338f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 3. 聚光灯\n对物体的照射方式基本像点光，但它的角度可以调节，且只朝向一部分角度。就像是360度的点光截了几十度\n（1）光源半径\n光源半径越大，光越散，投影边缘越柔和，越暗。。\n![小半径聚光](https://upload-images.jianshu.io/upload_images/20892169-b15015d5527db51c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![大半径聚光](https://upload-images.jianshu.io/upload_images/20892169-77174ca1cbf8e402.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n（2）光斑尺寸\n越大的光斑尺寸，越大的光斑范围。\n光斑尺寸不影响边缘模糊与否。\n![光源半径相同，光斑尺寸大](https://upload-images.jianshu.io/upload_images/20892169-c8f638d083db6ed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![光源半径相同，光斑尺寸小](https://upload-images.jianshu.io/upload_images/20892169-45f8a75fb8b469fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n混合，数值 0 - 1，聚光灯下两个圆环\n数值越接近1 ， 聚光灯底部在中间的小圆的半径越小，光的边缘越模糊，不怎么影响投影的边缘。\n\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-a73dc81be72f23d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###4. 面光\n不具体说了，像一个有方向可调节大小和尺寸的太阳光。\n\n## hdri\n切换到world，点击颜色前面的点，点击图像纹理。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-a55f01ae86ac33ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n勾选hdri后，就在左图设置hdri相关。\n右边的设置基本就没什么用了。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-04268ab2dfd15604.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n渲染时如果不想有hdri背景，勾上透明就不会渲染hdri了。\n![渲染属性 - 胶片 - 透明](https://upload-images.jianshu.io/upload_images/20892169-c210344224557ede.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 用物体自发光来打光。\n自发光的物体相当于一个点光源\n在场景内新建一个球，为球指定自发光颜色及强度\n![](https://upload-images.jianshu.io/upload_images/20892169-cebc7569cfebb0d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n切换到渲染模式，就会发现球成为了一个光源照亮了周围的物体。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-4ab53e17b2e8d6f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####补充：在cycles模式下如何设置辉光？\n现在只能在渲染层设置，没办法预览，所以需要渲染后才能看到效果。\n\n![需要渲染后方能生效](https://upload-images.jianshu.io/upload_images/20892169-e2fed694ee367646.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 四、使用ies 纹理进行打光\nies纹理概念：ies纹理用于匹配基于IES文件(IES)的现实世界的灯光。IES文件存储光源的方向强度分布。\n***常用的ies纹理免费下载网站：[点击下载](https://ieslibrary.com/en/home)***\n![网站每一个ies纹理下方都有对该ies的描述，该参数用于将ies引入纹理中之后，灯光的瓦数及类型设置](https://upload-images.jianshu.io/upload_images/20892169-241501fa8a26d909.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n***下载的ies贴图对应的能量和建议的灯光类型。***\n\n![](https://upload-images.jianshu.io/upload_images/20892169-24f53213f85355cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-616e3dbbc9afe1e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n举例：\n第一张没有ies纹理。第二张有纹理。\n![](https://upload-images.jianshu.io/upload_images/20892169-c0a90c28ffd9bd8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到普通点光是均匀过度的。而用了有ies纹理的灯光是有可能不均匀的。接近现实世界的光。\n<br>\n着色器中有一个叫黑体节点，黑体值越大，越接近原本设置的颜色，越小，颜色越暖。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-b84cafd1629ebdc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n黑体温度为1111111和为1的对比。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-b20b1ee246850e78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/jianmo/bl-guangyuan.md","raw":"---\ntitle: 'blender各种光源的设置'\ndate: 2022-07-25 06:21:49\ntags: blender\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 场景 - 世界自带光源与hdri光源。\n首先，场景 - 世界中的自带光源，与hdri光源是互斥的，二者只能有一个生效。\n当勾选 **视图着色方式 - 场景世界** 时，\n将强度/力度调为0，且没有建立其他光源的话，则世界场景完全无光源。\n将强度/力度调高世界场景也会亮。\n所以一般如果不需要这个的话，在渲染前需要调为0。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-ceb5ff9a35885d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n场景世界若不勾选，可以显示hdri，世界不透明度改为0的时候就可以只显示物体上的hdri效果。\nhdri图有360度的场景。相当于一个懒人全景打光，将场景中物体放入了已经定义好的一个360度的环境中。\n\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-0ab9c7cbe36dac5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 各种光源的详细介绍\n### 1. 点光源\n颜色：调整颜色 \n能量：调整瓦数\n半径：半径越大，向周围发送的光就越散\n点光源离物体越近，物体越亮。点光光源半径越大，阴影越散。\n\n![点光大半径，离物体近的情况](https://upload-images.jianshu.io/upload_images/20892169-1883e0e4b9a0516f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![点光大半径，离物体远的情况](https://upload-images.jianshu.io/upload_images/20892169-f92db444578b98d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![点光小半径，离物体远的情况](https://upload-images.jianshu.io/upload_images/20892169-5c829fdeaf3f5eff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![点光小半径，离物体近的情况](https://upload-images.jianshu.io/upload_images/20892169-cea42044907a4d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n***注：当沿点光源像物体两边作切线，离物体越近的光源切线范围越大。所以点光光源离物体越远时，阴影反而越硬朗，*** \n### 2. 日光\n日光本身建立在什么位置都无所谓，完全无所谓。\n日光的位置不会影响影子的角度、影子的强度。\n比如下图，日光在物体正上方，影子依旧向右。就算日光放到物体底下，影子依旧不会受日光的位置影响。\n\n![日光在物体上方](https://upload-images.jianshu.io/upload_images/20892169-065000ffee1dea5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![日光在物体下方](https://upload-images.jianshu.io/upload_images/20892169-c55a738eee448087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n影响日光角度的只有这个调节手杆儿\n![](https://upload-images.jianshu.io/upload_images/20892169-0a15053b4b5c67d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n手杆儿角度越大，阴影越长\n\n**角度和强度：**\n![](https://upload-images.jianshu.io/upload_images/20892169-becf125bf0a67c14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n太阳光强度一般1-3就很亮了。\n角度0-180度，和手柄调节的角度不是一个概念。试下来感觉角度越大阴影越散越亮。\n可以观察下面两张图的角度值，同时观察墙面的投影区别。\n\n![角度值27.3](https://upload-images.jianshu.io/upload_images/20892169-68c38402253f5024.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![角度值86.3](https://upload-images.jianshu.io/upload_images/20892169-47d88031dd17338f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 3. 聚光灯\n对物体的照射方式基本像点光，但它的角度可以调节，且只朝向一部分角度。就像是360度的点光截了几十度\n（1）光源半径\n光源半径越大，光越散，投影边缘越柔和，越暗。。\n![小半径聚光](https://upload-images.jianshu.io/upload_images/20892169-b15015d5527db51c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![大半径聚光](https://upload-images.jianshu.io/upload_images/20892169-77174ca1cbf8e402.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n（2）光斑尺寸\n越大的光斑尺寸，越大的光斑范围。\n光斑尺寸不影响边缘模糊与否。\n![光源半径相同，光斑尺寸大](https://upload-images.jianshu.io/upload_images/20892169-c8f638d083db6ed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![光源半径相同，光斑尺寸小](https://upload-images.jianshu.io/upload_images/20892169-45f8a75fb8b469fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n混合，数值 0 - 1，聚光灯下两个圆环\n数值越接近1 ， 聚光灯底部在中间的小圆的半径越小，光的边缘越模糊，不怎么影响投影的边缘。\n\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-a73dc81be72f23d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###4. 面光\n不具体说了，像一个有方向可调节大小和尺寸的太阳光。\n\n## hdri\n切换到world，点击颜色前面的点，点击图像纹理。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-a55f01ae86ac33ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n勾选hdri后，就在左图设置hdri相关。\n右边的设置基本就没什么用了。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-04268ab2dfd15604.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n渲染时如果不想有hdri背景，勾上透明就不会渲染hdri了。\n![渲染属性 - 胶片 - 透明](https://upload-images.jianshu.io/upload_images/20892169-c210344224557ede.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 用物体自发光来打光。\n自发光的物体相当于一个点光源\n在场景内新建一个球，为球指定自发光颜色及强度\n![](https://upload-images.jianshu.io/upload_images/20892169-cebc7569cfebb0d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n切换到渲染模式，就会发现球成为了一个光源照亮了周围的物体。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-4ab53e17b2e8d6f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####补充：在cycles模式下如何设置辉光？\n现在只能在渲染层设置，没办法预览，所以需要渲染后才能看到效果。\n\n![需要渲染后方能生效](https://upload-images.jianshu.io/upload_images/20892169-e2fed694ee367646.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 四、使用ies 纹理进行打光\nies纹理概念：ies纹理用于匹配基于IES文件(IES)的现实世界的灯光。IES文件存储光源的方向强度分布。\n***常用的ies纹理免费下载网站：[点击下载](https://ieslibrary.com/en/home)***\n![网站每一个ies纹理下方都有对该ies的描述，该参数用于将ies引入纹理中之后，灯光的瓦数及类型设置](https://upload-images.jianshu.io/upload_images/20892169-241501fa8a26d909.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n***下载的ies贴图对应的能量和建议的灯光类型。***\n\n![](https://upload-images.jianshu.io/upload_images/20892169-24f53213f85355cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-616e3dbbc9afe1e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n举例：\n第一张没有ies纹理。第二张有纹理。\n![](https://upload-images.jianshu.io/upload_images/20892169-c0a90c28ffd9bd8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到普通点光是均匀过度的。而用了有ies纹理的灯光是有可能不均匀的。接近现实世界的光。\n<br>\n着色器中有一个叫黑体节点，黑体值越大，越接近原本设置的颜色，越小，颜色越暖。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-b84cafd1629ebdc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n黑体温度为1111111和为1的对比。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-b20b1ee246850e78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"jianmo/bl-guangyuan","published":1,"updated":"2023-01-25T10:56:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbmnw5e000t04wib54o28m0","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"场景-世界自带光源与hdri光源。\"><a href=\"#场景-世界自带光源与hdri光源。\" class=\"headerlink\" title=\"场景 - 世界自带光源与hdri光源。\"></a>场景 - 世界自带光源与hdri光源。</h2><p>首先，场景 - 世界中的自带光源，与hdri光源是互斥的，二者只能有一个生效。<br>当勾选 <strong>视图着色方式 - 场景世界</strong> 时，<br>将强度/力度调为0，且没有建立其他光源的话，则世界场景完全无光源。<br>将强度/力度调高世界场景也会亮。<br>所以一般如果不需要这个的话，在渲染前需要调为0。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ceb5ff9a35885d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>场景世界若不勾选，可以显示hdri，世界不透明度改为0的时候就可以只显示物体上的hdri效果。<br>hdri图有360度的场景。相当于一个懒人全景打光，将场景中物体放入了已经定义好的一个360度的环境中。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0ab9c7cbe36dac5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h2 id=\"各种光源的详细介绍\"><a href=\"#各种光源的详细介绍\" class=\"headerlink\" title=\"各种光源的详细介绍\"></a>各种光源的详细介绍</h2><h3 id=\"1-点光源\"><a href=\"#1-点光源\" class=\"headerlink\" title=\"1. 点光源\"></a>1. 点光源</h3><p>颜色：调整颜色<br>能量：调整瓦数<br>半径：半径越大，向周围发送的光就越散<br>点光源离物体越近，物体越亮。点光光源半径越大，阴影越散。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1883e0e4b9a0516f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"点光大半径，离物体近的情况\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f92db444578b98d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"点光大半径，离物体远的情况\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5c829fdeaf3f5eff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"点光小半径，离物体远的情况\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cea42044907a4d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"点光小半径，离物体近的情况\"></p>\n<p><em><strong>注：当沿点光源像物体两边作切线，离物体越近的光源切线范围越大。所以点光光源离物体越远时，阴影反而越硬朗，</strong></em> </p>\n<h3 id=\"2-日光\"><a href=\"#2-日光\" class=\"headerlink\" title=\"2. 日光\"></a>2. 日光</h3><p>日光本身建立在什么位置都无所谓，完全无所谓。<br>日光的位置不会影响影子的角度、影子的强度。<br>比如下图，日光在物体正上方，影子依旧向右。就算日光放到物体底下，影子依旧不会受日光的位置影响。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-065000ffee1dea5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"日光在物体上方\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c55a738eee448087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"日光在物体下方\"></p>\n<p>影响日光角度的只有这个调节手杆儿<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0a15053b4b5c67d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>手杆儿角度越大，阴影越长</p>\n<p><strong>角度和强度：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-becf125bf0a67c14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>太阳光强度一般1-3就很亮了。<br>角度0-180度，和手柄调节的角度不是一个概念。试下来感觉角度越大阴影越散越亮。<br>可以观察下面两张图的角度值，同时观察墙面的投影区别。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-68c38402253f5024.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"角度值27.3\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-47d88031dd17338f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"角度值86.3\"></p>\n<h3 id=\"3-聚光灯\"><a href=\"#3-聚光灯\" class=\"headerlink\" title=\"3. 聚光灯\"></a>3. 聚光灯</h3><p>对物体的照射方式基本像点光，但它的角度可以调节，且只朝向一部分角度。就像是360度的点光截了几十度<br>（1）光源半径<br>光源半径越大，光越散，投影边缘越柔和，越暗。。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b15015d5527db51c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小半径聚光\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-77174ca1cbf8e402.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"大半径聚光\"><br>（2）光斑尺寸<br>越大的光斑尺寸，越大的光斑范围。<br>光斑尺寸不影响边缘模糊与否。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c8f638d083db6ed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"光源半径相同，光斑尺寸大\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-45f8a75fb8b469fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"光源半径相同，光斑尺寸小\"></p>\n<p>混合，数值 0 - 1，聚光灯下两个圆环<br>数值越接近1 ， 聚光灯底部在中间的小圆的半径越小，光的边缘越模糊，不怎么影响投影的边缘。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a73dc81be72f23d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>###4. 面光<br>不具体说了，像一个有方向可调节大小和尺寸的太阳光。</p>\n<h2 id=\"hdri\"><a href=\"#hdri\" class=\"headerlink\" title=\"hdri\"></a>hdri</h2><p>切换到world，点击颜色前面的点，点击图像纹理。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a55f01ae86ac33ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>勾选hdri后，就在左图设置hdri相关。<br>右边的设置基本就没什么用了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-04268ab2dfd15604.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>渲染时如果不想有hdri背景，勾上透明就不会渲染hdri了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c210344224557ede.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"渲染属性 - 胶片 - 透明\"></p>\n<h2 id=\"用物体自发光来打光。\"><a href=\"#用物体自发光来打光。\" class=\"headerlink\" title=\"用物体自发光来打光。\"></a>用物体自发光来打光。</h2><p>自发光的物体相当于一个点光源<br>在场景内新建一个球，为球指定自发光颜色及强度<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cebc7569cfebb0d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>切换到渲染模式，就会发现球成为了一个光源照亮了周围的物体。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4ab53e17b2e8d6f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>####补充：在cycles模式下如何设置辉光？<br>现在只能在渲染层设置，没办法预览，所以需要渲染后才能看到效果。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e2fed694ee367646.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"需要渲染后方能生效\"></p>\n<h2 id=\"四、使用ies-纹理进行打光\"><a href=\"#四、使用ies-纹理进行打光\" class=\"headerlink\" title=\"四、使用ies 纹理进行打光\"></a>四、使用ies 纹理进行打光</h2><p>ies纹理概念：ies纹理用于匹配基于IES文件(IES)的现实世界的灯光。IES文件存储光源的方向强度分布。<br><em><strong>常用的ies纹理免费下载网站：<a href=\"https://ieslibrary.com/en/home\">点击下载</a></strong></em><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-241501fa8a26d909.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"网站每一个ies纹理下方都有对该ies的描述，该参数用于将ies引入纹理中之后，灯光的瓦数及类型设置\"></p>\n<p><em><strong>下载的ies贴图对应的能量和建议的灯光类型。</strong></em></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-24f53213f85355cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-616e3dbbc9afe1e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>举例：<br>第一张没有ies纹理。第二张有纹理。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c0a90c28ffd9bd8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>可以看到普通点光是均匀过度的。而用了有ies纹理的灯光是有可能不均匀的。接近现实世界的光。<br><br><br>着色器中有一个叫黑体节点，黑体值越大，越接近原本设置的颜色，越小，颜色越暖。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b84cafd1629ebdc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>黑体温度为1111111和为1的对比。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b20b1ee246850e78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"场景-世界自带光源与hdri光源。\"><a href=\"#场景-世界自带光源与hdri光源。\" class=\"headerlink\" title=\"场景 - 世界自带光源与hdri光源。\"></a>场景 - 世界自带光源与hdri光源。</h2><p>首先，场景 - 世界中的自带光源，与hdri光源是互斥的，二者只能有一个生效。<br>当勾选 <strong>视图着色方式 - 场景世界</strong> 时，<br>将强度/力度调为0，且没有建立其他光源的话，则世界场景完全无光源。<br>将强度/力度调高世界场景也会亮。<br>所以一般如果不需要这个的话，在渲染前需要调为0。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ceb5ff9a35885d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>场景世界若不勾选，可以显示hdri，世界不透明度改为0的时候就可以只显示物体上的hdri效果。<br>hdri图有360度的场景。相当于一个懒人全景打光，将场景中物体放入了已经定义好的一个360度的环境中。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0ab9c7cbe36dac5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h2 id=\"各种光源的详细介绍\"><a href=\"#各种光源的详细介绍\" class=\"headerlink\" title=\"各种光源的详细介绍\"></a>各种光源的详细介绍</h2><h3 id=\"1-点光源\"><a href=\"#1-点光源\" class=\"headerlink\" title=\"1. 点光源\"></a>1. 点光源</h3><p>颜色：调整颜色<br>能量：调整瓦数<br>半径：半径越大，向周围发送的光就越散<br>点光源离物体越近，物体越亮。点光光源半径越大，阴影越散。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1883e0e4b9a0516f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"点光大半径，离物体近的情况\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f92db444578b98d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"点光大半径，离物体远的情况\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5c829fdeaf3f5eff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"点光小半径，离物体远的情况\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cea42044907a4d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"点光小半径，离物体近的情况\"></p>\n<p><em><strong>注：当沿点光源像物体两边作切线，离物体越近的光源切线范围越大。所以点光光源离物体越远时，阴影反而越硬朗，</strong></em> </p>\n<h3 id=\"2-日光\"><a href=\"#2-日光\" class=\"headerlink\" title=\"2. 日光\"></a>2. 日光</h3><p>日光本身建立在什么位置都无所谓，完全无所谓。<br>日光的位置不会影响影子的角度、影子的强度。<br>比如下图，日光在物体正上方，影子依旧向右。就算日光放到物体底下，影子依旧不会受日光的位置影响。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-065000ffee1dea5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"日光在物体上方\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c55a738eee448087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"日光在物体下方\"></p>\n<p>影响日光角度的只有这个调节手杆儿<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0a15053b4b5c67d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>手杆儿角度越大，阴影越长</p>\n<p><strong>角度和强度：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-becf125bf0a67c14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>太阳光强度一般1-3就很亮了。<br>角度0-180度，和手柄调节的角度不是一个概念。试下来感觉角度越大阴影越散越亮。<br>可以观察下面两张图的角度值，同时观察墙面的投影区别。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-68c38402253f5024.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"角度值27.3\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-47d88031dd17338f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"角度值86.3\"></p>\n<h3 id=\"3-聚光灯\"><a href=\"#3-聚光灯\" class=\"headerlink\" title=\"3. 聚光灯\"></a>3. 聚光灯</h3><p>对物体的照射方式基本像点光，但它的角度可以调节，且只朝向一部分角度。就像是360度的点光截了几十度<br>（1）光源半径<br>光源半径越大，光越散，投影边缘越柔和，越暗。。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b15015d5527db51c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小半径聚光\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-77174ca1cbf8e402.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"大半径聚光\"><br>（2）光斑尺寸<br>越大的光斑尺寸，越大的光斑范围。<br>光斑尺寸不影响边缘模糊与否。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c8f638d083db6ed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"光源半径相同，光斑尺寸大\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-45f8a75fb8b469fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"光源半径相同，光斑尺寸小\"></p>\n<p>混合，数值 0 - 1，聚光灯下两个圆环<br>数值越接近1 ， 聚光灯底部在中间的小圆的半径越小，光的边缘越模糊，不怎么影响投影的边缘。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a73dc81be72f23d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>###4. 面光<br>不具体说了，像一个有方向可调节大小和尺寸的太阳光。</p>\n<h2 id=\"hdri\"><a href=\"#hdri\" class=\"headerlink\" title=\"hdri\"></a>hdri</h2><p>切换到world，点击颜色前面的点，点击图像纹理。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a55f01ae86ac33ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>勾选hdri后，就在左图设置hdri相关。<br>右边的设置基本就没什么用了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-04268ab2dfd15604.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>渲染时如果不想有hdri背景，勾上透明就不会渲染hdri了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c210344224557ede.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"渲染属性 - 胶片 - 透明\"></p>\n<h2 id=\"用物体自发光来打光。\"><a href=\"#用物体自发光来打光。\" class=\"headerlink\" title=\"用物体自发光来打光。\"></a>用物体自发光来打光。</h2><p>自发光的物体相当于一个点光源<br>在场景内新建一个球，为球指定自发光颜色及强度<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cebc7569cfebb0d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>切换到渲染模式，就会发现球成为了一个光源照亮了周围的物体。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4ab53e17b2e8d6f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>####补充：在cycles模式下如何设置辉光？<br>现在只能在渲染层设置，没办法预览，所以需要渲染后才能看到效果。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e2fed694ee367646.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"需要渲染后方能生效\"></p>\n<h2 id=\"四、使用ies-纹理进行打光\"><a href=\"#四、使用ies-纹理进行打光\" class=\"headerlink\" title=\"四、使用ies 纹理进行打光\"></a>四、使用ies 纹理进行打光</h2><p>ies纹理概念：ies纹理用于匹配基于IES文件(IES)的现实世界的灯光。IES文件存储光源的方向强度分布。<br><em><strong>常用的ies纹理免费下载网站：<a href=\"https://ieslibrary.com/en/home\">点击下载</a></strong></em><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-241501fa8a26d909.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"网站每一个ies纹理下方都有对该ies的描述，该参数用于将ies引入纹理中之后，灯光的瓦数及类型设置\"></p>\n<p><em><strong>下载的ies贴图对应的能量和建议的灯光类型。</strong></em></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-24f53213f85355cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-616e3dbbc9afe1e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>举例：<br>第一张没有ies纹理。第二张有纹理。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c0a90c28ffd9bd8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>可以看到普通点光是均匀过度的。而用了有ies纹理的灯光是有可能不均匀的。接近现实世界的光。<br><br><br>着色器中有一个叫黑体节点，黑体值越大，越接近原本设置的颜色，越小，颜色越暖。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b84cafd1629ebdc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>黑体温度为1111111和为1的对比。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b20b1ee246850e78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"【blender】积累的一些杂七杂八","date":"2022-09-15T04:21:08.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\nblender3.3更新了，毛发新增了编辑模式，但我没有找到。\n\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-839cb160abe45070.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n只有原先的雕刻模式，在雕刻模式左侧有一些工具可以操作毛发\n\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-d1ac2237a00050e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n官网写开启实验功能后的调试后，在实验特性prototypes开启new curves tools\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-9f14666b8bb98bbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n我并没有这个选项。。\n<hr>\n\nlow poly相关\n\n![](https://upload-images.jianshu.io/upload_images/20892169-e6289404df00e95e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/jianmo/bl-zaqizaba.md","raw":"---\ntitle: '【blender】积累的一些杂七杂八'\ndate: 2022-09-15 12:21:08\ntags: blender\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\nblender3.3更新了，毛发新增了编辑模式，但我没有找到。\n\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-839cb160abe45070.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n只有原先的雕刻模式，在雕刻模式左侧有一些工具可以操作毛发\n\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-d1ac2237a00050e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n官网写开启实验功能后的调试后，在实验特性prototypes开启new curves tools\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-9f14666b8bb98bbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n我并没有这个选项。。\n<hr>\n\nlow poly相关\n\n![](https://upload-images.jianshu.io/upload_images/20892169-e6289404df00e95e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"jianmo/bl-zaqizaba","published":1,"updated":"2023-01-25T10:56:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbmnw5e000w04wi1v3q74d3","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>blender3.3更新了，毛发新增了编辑模式，但我没有找到。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-839cb160abe45070.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>只有原先的雕刻模式，在雕刻模式左侧有一些工具可以操作毛发</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d1ac2237a00050e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>官网写开启实验功能后的调试后，在实验特性prototypes开启new curves tools<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9f14666b8bb98bbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>我并没有这个选项。。</p>\n<hr>\n\n<p>low poly相关</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e6289404df00e95e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>blender3.3更新了，毛发新增了编辑模式，但我没有找到。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-839cb160abe45070.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>只有原先的雕刻模式，在雕刻模式左侧有一些工具可以操作毛发</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d1ac2237a00050e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>官网写开启实验功能后的调试后，在实验特性prototypes开启new curves tools<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9f14666b8bb98bbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>我并没有这个选项。。</p>\n<hr>\n\n<p>low poly相关</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e6289404df00e95e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"【blender】给你跳段舞？","date":"2022-08-31T08:23:08.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\nvroid搞得基础模型\n大概花了一周时间在blender加的骨架\n然后搞了一段小动画~\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VpppjVz3Txo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n","source":"_posts/jianmo/bl-vroid.md","raw":"---\ntitle: '【blender】给你跳段舞？'\ndate: 2022-08-31 16:23:08\ntags: blender\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\nvroid搞得基础模型\n大概花了一周时间在blender加的骨架\n然后搞了一段小动画~\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VpppjVz3Txo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n","slug":"jianmo/bl-vroid","published":1,"updated":"2023-01-25T10:56:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbmnw5f000z04wi16p89ttz","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>vroid搞得基础模型<br>大概花了一周时间在blender加的骨架<br>然后搞了一段小动画~</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VpppjVz3Txo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>vroid搞得基础模型<br>大概花了一周时间在blender加的骨架<br>然后搞了一段小动画~</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VpppjVz3Txo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n"},{"title":"【blender】着色器基础","date":"2022-11-11T07:21:08.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n着色器部分国内文档太少，这段时间翻了很久的国外文档，请教了几位油管及discord大神，自己也做了不少东西后做出的总结。\n\n## 不同颜色节点的含义\n首先，着色器节点固定从左向右流动。\n**绿色节点**：着色器本身\n如各类bsdf\n![](https://upload-images.jianshu.io/upload_images/20892169-55547ef4d8900f65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**黄色节点**：颜色信息\n如：基础色、次表面色\n![](https://upload-images.jianshu.io/upload_images/20892169-a959ff512e84e321.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n表面并不是一定只能连接一个颜色。\n新建一个平面，切换到shading，新建一个材质槽。\nshift a新建一个图像纹理，添加一张图片，连接到bsdf的基础色，就可以将这张彩色图片的颜色信息显示在平面上。\n（其实可以直接拖进去，但不知道为什么自从我更新了3.3我就再也拖不进去了。）\n![](https://upload-images.jianshu.io/upload_images/20892169-ae4e6923eb4128c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**灰色节点**：值，bsdf的很多设置都是值\n![](https://upload-images.jianshu.io/upload_images/20892169-da43946283048655.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n着色器上的值与颜色一样，很多时候表面是不想用同一个值来设置所有位置的。如糙度，很多情况下表面的材质并不是同一糙度，所以这时候需要一张描述表面糙度的图，通过0（黑色）至1（白色）之间的值，使用黑白或灰度着色，将值映射到不同的表面位置。<br>\n即：pbr贴图中的粗糙度文件。<brr>\n如以下这张就是一张粗糙度描述图片，它黑色的地方表示完全不粗糙（0）白色的地方表示粗糙度满点（1），其余灰色的地方，灰色越深，越接近于零，也就越不粗糙。\n\n![Roughness](https://upload-images.jianshu.io/upload_images/20892169-62f089488a9fb5f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如图，将上面的粗糙度文件连接至糙度后，可以看到表面有不同程度的粗糙纹理。\n![](https://upload-images.jianshu.io/upload_images/20892169-17bbec7cf22db9d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**紫色节点**：矢量信息。\n![矢量运算](https://upload-images.jianshu.io/upload_images/20892169-95f7aa80396b1d9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![着色器上的矢量](https://upload-images.jianshu.io/upload_images/20892169-e3542d92e4fd350c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**蓝色节点**：表示属性，多和几何节点结合使用，不属于这里的讨论范围。\n\n当然，不同颜色节点之间可以互相转换，只是会丢失读取不出来的信息。将粗糙度图片连接到黄色节点，如基础色，由于粗糙度图片只有黑白灰的值，基础色无法读出其他颜色信息，所以无法显示彩色。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-809f78a87ee2f46a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n次表面：光穿透过表面后，在其下方散射发生的情况。最常见的就是人体皮肤。\n![当光足够强烈，在皮肤下的散射特别是明暗交界线附近，就会看的很清楚，一般会使得皮肤接近明暗交界线的部位饱和度急剧升高](https://upload-images.jianshu.io/upload_images/20892169-2612a7b2abcbd6a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n透射&&投射粗糙度\n透射：决定多少光可以通过材料，而不是从材料反射光。\n透射值越大，透过材料的光越多。\n透射粗糙度：透射光的粗糙度，只有cycles下可以使用，且分布为GGX。\n说简单点儿，透射粗糙度的高低差别就是镜面玻璃和磨砂玻璃的区别。\n![上平面透射值为1，光源为绿色，光从上平面向下打，上平面无法受到光源影响，所有光都通过它照射到了下平面，所以下平面为绿色](https://upload-images.jianshu.io/upload_images/20892169-9bb123e5c346f036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![上平面透射值为0，点光无法通过上平面，所以直接打在上平面，下平面几乎不受影响](https://upload-images.jianshu.io/upload_images/20892169-471b4b79fccdc892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n自发光（发射）：从材料实际发出的光，拥有自己的颜色和强度。\n![在一个大立方体的里面放入一个自发光的小立方体，小立方体会形成一个光源照亮大立方体内部。相当于一个点光](https://upload-images.jianshu.io/upload_images/20892169-2b7a607ce22fff7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nalpha：材料透明度。\n\n\n以上这些值都是可以通过为不同位置传入不同的值来做不同的设置，就如同上述说的粗糙度设置。\n![如，我对下平面的alpha值传入了一个马氏分形纹理，表面就会因为传入的不同值而显示不同的alpha状态](https://upload-images.jianshu.io/upload_images/20892169-b2b3c8574cb99660.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n法向：用于法线贴图，在不用更改网格几何形状的情况下，伪造材质的深度与阴影。\n![法线贴图一般是这样的一张图片，它描述了物体表面的深度和阴影，命名方式为xx_normal](https://upload-images.jianshu.io/upload_images/20892169-c53af5159f384551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![将法线贴图连接至法向的效果](https://upload-images.jianshu.io/upload_images/20892169-1403c256cded68af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##着色器节点\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-ccb11092d3ec3de8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不多叙述，分为表面着色器和体积着色器两类。原理化bsdf着色器理论是可以做出所有表面着色器的效果。但使用其他的表面着色器可以更快捷的实现想实现的效果。比如玻璃、透明、半透、毛发等。\n以玻璃bsdf举例\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-93709468fce74934.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n折射率：当bsdf为玻璃或半透明时，物体内部可以进行折射，折射的情况就由ior设置。\n水、不同厚度的玻璃、塑料瓶都有不同的折射率。\n![折射率可以使不同的材料以不同的角度反射光线](https://upload-images.jianshu.io/upload_images/20892169-3864e432698c1072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n粗糙度：物体表面粗糙度越高，越不容易进行折射。\n而这两个参数都是可以在原理化bsdf中进行设置，所以理论上来说原理化bsdf可以实现玻璃的效果，但使用玻璃bdsf来制作单纯的玻璃会更加的便捷。\n\n体积着色器可以连接至体积输出，有原理化体积、体积散射、体积吸收。原理化体积理论上是可以实现体积散射和体积吸收，且可以综合二者进行设置，但直接使用体积散射和体积吸收可以更快捷的实现对应的效果。\n体积吸收：表示光线穿过物体时，体积会吸收光线 \n体积散射：更接近于雾的效果，通过体积散射，光会撞击物体体积并进行反弹。\n![体积着色器](https://upload-images.jianshu.io/upload_images/20892169-e8e0776cd2dc8504.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n体积着色器经常用于实现一些场景的烟雾、或者表现场景的空气透视感时会很常用。\n如下面这张我建立了两个立方体，对外层大一些的立方体使用了体积散射，在两边设置了两个不同颜色的光源，就会有这种透光的烟雾效果。\n![体积散射](https://upload-images.jianshu.io/upload_images/20892169-d95939e3e4824ef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n我做的这张小场景的练习，为了表现出远处的空气透视感，也在中间加了一个体积散射的平面。\n\n![小场景练习](https://upload-images.jianshu.io/upload_images/20892169-548933ed2ac3c376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n体积bsdf的实际运用也可以和噪波纹理相结合，生成不同形状的烟雾，也可以用噪波纹理增加噪点等效果。\n![体积bsdf与噪波纹理](https://upload-images.jianshu.io/upload_images/20892169-ec549747af20846f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n混合bsdf：\n现在我将两个原理化bsdf使用混合bsdf连接，混合bsdf拥有上下两个叫混合器的插槽和一个系数插槽。\n我将红色bsdf放在下面的混合器插槽，蓝色bsdf放在上面的混合器插槽，若系数为0.5，即上下着色器等比混合，正常情况下物体表面应该为紫色。如下图\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-17f68892c17355a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n系数越大，混合结果越偏向于下面的着色器。\n\n若混合bsdf系数给一个灰度描述，如马氏分形纹理，那么表面就会因为不同的系数而做不同的着色器显示。将顶部着色器放在有黑色的地方（0），将底部着色器放在有白色的地方（1）。而灰色的地方进行两个着色器颜色的混合\n![](https://upload-images.jianshu.io/upload_images/20892169-68df64794580e9a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##纹理节点\nblender自带的一些材质节点，可以根据不同材质节点生成不同的灰度纹理。\n![](https://upload-images.jianshu.io/upload_images/20892169-fa610fcd97b30068.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n以马氏分形纹理做简单说明\n![](https://upload-images.jianshu.io/upload_images/20892169-871e8f5e1947127d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n简单说一下3d和4d的区别，4d比3d多了一个w值，w可以使纹理随时间推移改变w，一般用于设置动画。（按i可以设置关键帧，或在节点上右键 - 插入关键帧）\n![](https://upload-images.jianshu.io/upload_images/20892169-f0faa4bab4329411.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果将纹理直接连接着色器的基础色，那么就是灰度显示，因为材质节点本质就是生成不同位置的灰度信息。\n如果想让其显示彩色，可以连接一个colorRamp，也就是渐变\n![](https://upload-images.jianshu.io/upload_images/20892169-1b72dcd4616f4492.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n沃罗诺伊纹理是一种很常用的纹理，可以生成漂亮的图案及形状。\n就我个人而言，连接颜色时感觉很像一堆马赛克做了变换的纹理\n![随机性为1](https://upload-images.jianshu.io/upload_images/20892169-5411d1c934309471.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![随机性为0](https://upload-images.jianshu.io/upload_images/20892169-0536071be645690b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其他像砖墙纹理、棋盘格纹理就不再多说，纹理与纹理可以相互连接，组合生成不同的有意思的图案，需要多加尝试。\n除了纹理与纹理之间相互连接外，还有另一种方法，使用mixRgb（混合rgb）\n混合rgb与混合着色器的使用方法相当像，区别是混合rgb用于颜色输出，而混合着色器用于着色器输出。混合rgb可以控制灰度的信息，所以当两个纹理连接到混合rgb时，可以通过混合rgb去控制两个纹理的强弱。\n混合方式可以点击自己调节，不详细介绍了，如果用过ps应该是熟悉的。\n![将马氏分形纹理与砖墙纹理进行混合，调节系数。系数为0时显示上面的马氏分形纹理，系数为1时显示下面的砖墙纹理，中间则相互混合。](https://upload-images.jianshu.io/upload_images/20892169-33ae49ebcac2a1c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n还有一些不太常用于着色器表面信息的纹理节点，比如ies纹理（用于描述灯光）环境纹理（用于描述环境）等，之后我会再整理。\n\n##如何将纹理映射到对象上？\n与几个节点息息相关。\n1. 纹理坐标节点：用不同方式告诉纹理如何在blender中进行映射，不同的用途可以有不同的输出。\n常用的两个是物体和生成，生成是默认的形状，物体适合生成程序化的纹理。\n![纹理坐标](https://upload-images.jianshu.io/upload_images/20892169-c7fb176496920cf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2. 映射节点，可以调节纹理的位置、旋转和缩放\n![映射](https://upload-images.jianshu.io/upload_images/20892169-26bf0f7bd472cb77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. 运算节点，可以使两个值做对应运算\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-0a16f38b102d6122.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![很常见的连接方式，可以通过上述几个节点去操作纹理的映射方法。](https://upload-images.jianshu.io/upload_images/20892169-66bd294b4b41dd4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/jianmo/bl-zhuoseqi.md","raw":"---\ntitle: '【blender】着色器基础'\ndate: 2022-11-11 15:21:08\ntags: blender\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n着色器部分国内文档太少，这段时间翻了很久的国外文档，请教了几位油管及discord大神，自己也做了不少东西后做出的总结。\n\n## 不同颜色节点的含义\n首先，着色器节点固定从左向右流动。\n**绿色节点**：着色器本身\n如各类bsdf\n![](https://upload-images.jianshu.io/upload_images/20892169-55547ef4d8900f65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**黄色节点**：颜色信息\n如：基础色、次表面色\n![](https://upload-images.jianshu.io/upload_images/20892169-a959ff512e84e321.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n表面并不是一定只能连接一个颜色。\n新建一个平面，切换到shading，新建一个材质槽。\nshift a新建一个图像纹理，添加一张图片，连接到bsdf的基础色，就可以将这张彩色图片的颜色信息显示在平面上。\n（其实可以直接拖进去，但不知道为什么自从我更新了3.3我就再也拖不进去了。）\n![](https://upload-images.jianshu.io/upload_images/20892169-ae4e6923eb4128c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**灰色节点**：值，bsdf的很多设置都是值\n![](https://upload-images.jianshu.io/upload_images/20892169-da43946283048655.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n着色器上的值与颜色一样，很多时候表面是不想用同一个值来设置所有位置的。如糙度，很多情况下表面的材质并不是同一糙度，所以这时候需要一张描述表面糙度的图，通过0（黑色）至1（白色）之间的值，使用黑白或灰度着色，将值映射到不同的表面位置。<br>\n即：pbr贴图中的粗糙度文件。<brr>\n如以下这张就是一张粗糙度描述图片，它黑色的地方表示完全不粗糙（0）白色的地方表示粗糙度满点（1），其余灰色的地方，灰色越深，越接近于零，也就越不粗糙。\n\n![Roughness](https://upload-images.jianshu.io/upload_images/20892169-62f089488a9fb5f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如图，将上面的粗糙度文件连接至糙度后，可以看到表面有不同程度的粗糙纹理。\n![](https://upload-images.jianshu.io/upload_images/20892169-17bbec7cf22db9d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**紫色节点**：矢量信息。\n![矢量运算](https://upload-images.jianshu.io/upload_images/20892169-95f7aa80396b1d9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![着色器上的矢量](https://upload-images.jianshu.io/upload_images/20892169-e3542d92e4fd350c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**蓝色节点**：表示属性，多和几何节点结合使用，不属于这里的讨论范围。\n\n当然，不同颜色节点之间可以互相转换，只是会丢失读取不出来的信息。将粗糙度图片连接到黄色节点，如基础色，由于粗糙度图片只有黑白灰的值，基础色无法读出其他颜色信息，所以无法显示彩色。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-809f78a87ee2f46a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n次表面：光穿透过表面后，在其下方散射发生的情况。最常见的就是人体皮肤。\n![当光足够强烈，在皮肤下的散射特别是明暗交界线附近，就会看的很清楚，一般会使得皮肤接近明暗交界线的部位饱和度急剧升高](https://upload-images.jianshu.io/upload_images/20892169-2612a7b2abcbd6a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n透射&&投射粗糙度\n透射：决定多少光可以通过材料，而不是从材料反射光。\n透射值越大，透过材料的光越多。\n透射粗糙度：透射光的粗糙度，只有cycles下可以使用，且分布为GGX。\n说简单点儿，透射粗糙度的高低差别就是镜面玻璃和磨砂玻璃的区别。\n![上平面透射值为1，光源为绿色，光从上平面向下打，上平面无法受到光源影响，所有光都通过它照射到了下平面，所以下平面为绿色](https://upload-images.jianshu.io/upload_images/20892169-9bb123e5c346f036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![上平面透射值为0，点光无法通过上平面，所以直接打在上平面，下平面几乎不受影响](https://upload-images.jianshu.io/upload_images/20892169-471b4b79fccdc892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n自发光（发射）：从材料实际发出的光，拥有自己的颜色和强度。\n![在一个大立方体的里面放入一个自发光的小立方体，小立方体会形成一个光源照亮大立方体内部。相当于一个点光](https://upload-images.jianshu.io/upload_images/20892169-2b7a607ce22fff7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nalpha：材料透明度。\n\n\n以上这些值都是可以通过为不同位置传入不同的值来做不同的设置，就如同上述说的粗糙度设置。\n![如，我对下平面的alpha值传入了一个马氏分形纹理，表面就会因为传入的不同值而显示不同的alpha状态](https://upload-images.jianshu.io/upload_images/20892169-b2b3c8574cb99660.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n法向：用于法线贴图，在不用更改网格几何形状的情况下，伪造材质的深度与阴影。\n![法线贴图一般是这样的一张图片，它描述了物体表面的深度和阴影，命名方式为xx_normal](https://upload-images.jianshu.io/upload_images/20892169-c53af5159f384551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![将法线贴图连接至法向的效果](https://upload-images.jianshu.io/upload_images/20892169-1403c256cded68af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##着色器节点\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-ccb11092d3ec3de8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不多叙述，分为表面着色器和体积着色器两类。原理化bsdf着色器理论是可以做出所有表面着色器的效果。但使用其他的表面着色器可以更快捷的实现想实现的效果。比如玻璃、透明、半透、毛发等。\n以玻璃bsdf举例\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-93709468fce74934.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n折射率：当bsdf为玻璃或半透明时，物体内部可以进行折射，折射的情况就由ior设置。\n水、不同厚度的玻璃、塑料瓶都有不同的折射率。\n![折射率可以使不同的材料以不同的角度反射光线](https://upload-images.jianshu.io/upload_images/20892169-3864e432698c1072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n粗糙度：物体表面粗糙度越高，越不容易进行折射。\n而这两个参数都是可以在原理化bsdf中进行设置，所以理论上来说原理化bsdf可以实现玻璃的效果，但使用玻璃bdsf来制作单纯的玻璃会更加的便捷。\n\n体积着色器可以连接至体积输出，有原理化体积、体积散射、体积吸收。原理化体积理论上是可以实现体积散射和体积吸收，且可以综合二者进行设置，但直接使用体积散射和体积吸收可以更快捷的实现对应的效果。\n体积吸收：表示光线穿过物体时，体积会吸收光线 \n体积散射：更接近于雾的效果，通过体积散射，光会撞击物体体积并进行反弹。\n![体积着色器](https://upload-images.jianshu.io/upload_images/20892169-e8e0776cd2dc8504.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n体积着色器经常用于实现一些场景的烟雾、或者表现场景的空气透视感时会很常用。\n如下面这张我建立了两个立方体，对外层大一些的立方体使用了体积散射，在两边设置了两个不同颜色的光源，就会有这种透光的烟雾效果。\n![体积散射](https://upload-images.jianshu.io/upload_images/20892169-d95939e3e4824ef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n我做的这张小场景的练习，为了表现出远处的空气透视感，也在中间加了一个体积散射的平面。\n\n![小场景练习](https://upload-images.jianshu.io/upload_images/20892169-548933ed2ac3c376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n体积bsdf的实际运用也可以和噪波纹理相结合，生成不同形状的烟雾，也可以用噪波纹理增加噪点等效果。\n![体积bsdf与噪波纹理](https://upload-images.jianshu.io/upload_images/20892169-ec549747af20846f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n混合bsdf：\n现在我将两个原理化bsdf使用混合bsdf连接，混合bsdf拥有上下两个叫混合器的插槽和一个系数插槽。\n我将红色bsdf放在下面的混合器插槽，蓝色bsdf放在上面的混合器插槽，若系数为0.5，即上下着色器等比混合，正常情况下物体表面应该为紫色。如下图\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-17f68892c17355a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n系数越大，混合结果越偏向于下面的着色器。\n\n若混合bsdf系数给一个灰度描述，如马氏分形纹理，那么表面就会因为不同的系数而做不同的着色器显示。将顶部着色器放在有黑色的地方（0），将底部着色器放在有白色的地方（1）。而灰色的地方进行两个着色器颜色的混合\n![](https://upload-images.jianshu.io/upload_images/20892169-68df64794580e9a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##纹理节点\nblender自带的一些材质节点，可以根据不同材质节点生成不同的灰度纹理。\n![](https://upload-images.jianshu.io/upload_images/20892169-fa610fcd97b30068.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n以马氏分形纹理做简单说明\n![](https://upload-images.jianshu.io/upload_images/20892169-871e8f5e1947127d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n简单说一下3d和4d的区别，4d比3d多了一个w值，w可以使纹理随时间推移改变w，一般用于设置动画。（按i可以设置关键帧，或在节点上右键 - 插入关键帧）\n![](https://upload-images.jianshu.io/upload_images/20892169-f0faa4bab4329411.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果将纹理直接连接着色器的基础色，那么就是灰度显示，因为材质节点本质就是生成不同位置的灰度信息。\n如果想让其显示彩色，可以连接一个colorRamp，也就是渐变\n![](https://upload-images.jianshu.io/upload_images/20892169-1b72dcd4616f4492.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n沃罗诺伊纹理是一种很常用的纹理，可以生成漂亮的图案及形状。\n就我个人而言，连接颜色时感觉很像一堆马赛克做了变换的纹理\n![随机性为1](https://upload-images.jianshu.io/upload_images/20892169-5411d1c934309471.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![随机性为0](https://upload-images.jianshu.io/upload_images/20892169-0536071be645690b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其他像砖墙纹理、棋盘格纹理就不再多说，纹理与纹理可以相互连接，组合生成不同的有意思的图案，需要多加尝试。\n除了纹理与纹理之间相互连接外，还有另一种方法，使用mixRgb（混合rgb）\n混合rgb与混合着色器的使用方法相当像，区别是混合rgb用于颜色输出，而混合着色器用于着色器输出。混合rgb可以控制灰度的信息，所以当两个纹理连接到混合rgb时，可以通过混合rgb去控制两个纹理的强弱。\n混合方式可以点击自己调节，不详细介绍了，如果用过ps应该是熟悉的。\n![将马氏分形纹理与砖墙纹理进行混合，调节系数。系数为0时显示上面的马氏分形纹理，系数为1时显示下面的砖墙纹理，中间则相互混合。](https://upload-images.jianshu.io/upload_images/20892169-33ae49ebcac2a1c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n还有一些不太常用于着色器表面信息的纹理节点，比如ies纹理（用于描述灯光）环境纹理（用于描述环境）等，之后我会再整理。\n\n##如何将纹理映射到对象上？\n与几个节点息息相关。\n1. 纹理坐标节点：用不同方式告诉纹理如何在blender中进行映射，不同的用途可以有不同的输出。\n常用的两个是物体和生成，生成是默认的形状，物体适合生成程序化的纹理。\n![纹理坐标](https://upload-images.jianshu.io/upload_images/20892169-c7fb176496920cf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2. 映射节点，可以调节纹理的位置、旋转和缩放\n![映射](https://upload-images.jianshu.io/upload_images/20892169-26bf0f7bd472cb77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. 运算节点，可以使两个值做对应运算\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-0a16f38b102d6122.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![很常见的连接方式，可以通过上述几个节点去操作纹理的映射方法。](https://upload-images.jianshu.io/upload_images/20892169-66bd294b4b41dd4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"jianmo/bl-zhuoseqi","published":1,"updated":"2023-01-25T10:56:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbmnw5g001804wif6wk93mr","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>着色器部分国内文档太少，这段时间翻了很久的国外文档，请教了几位油管及discord大神，自己也做了不少东西后做出的总结。</p>\n<h2 id=\"不同颜色节点的含义\"><a href=\"#不同颜色节点的含义\" class=\"headerlink\" title=\"不同颜色节点的含义\"></a>不同颜色节点的含义</h2><p>首先，着色器节点固定从左向右流动。<br><strong>绿色节点</strong>：着色器本身<br>如各类bsdf<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-55547ef4d8900f65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><strong>黄色节点</strong>：颜色信息<br>如：基础色、次表面色<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a959ff512e84e321.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>表面并不是一定只能连接一个颜色。<br>新建一个平面，切换到shading，新建一个材质槽。<br>shift a新建一个图像纹理，添加一张图片，连接到bsdf的基础色，就可以将这张彩色图片的颜色信息显示在平面上。<br>（其实可以直接拖进去，但不知道为什么自从我更新了3.3我就再也拖不进去了。）<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ae4e6923eb4128c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><strong>灰色节点</strong>：值，bsdf的很多设置都是值<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-da43946283048655.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>着色器上的值与颜色一样，很多时候表面是不想用同一个值来设置所有位置的。如糙度，很多情况下表面的材质并不是同一糙度，所以这时候需要一张描述表面糙度的图，通过0（黑色）至1（白色）之间的值，使用黑白或灰度着色，将值映射到不同的表面位置。<br><br>即：pbr贴图中的粗糙度文件。<brr><br>如以下这张就是一张粗糙度描述图片，它黑色的地方表示完全不粗糙（0）白色的地方表示粗糙度满点（1），其余灰色的地方，灰色越深，越接近于零，也就越不粗糙。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-62f089488a9fb5f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Roughness\"></p>\n<p>如图，将上面的粗糙度文件连接至糙度后，可以看到表面有不同程度的粗糙纹理。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-17bbec7cf22db9d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><strong>紫色节点</strong>：矢量信息。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-95f7aa80396b1d9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"矢量运算\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e3542d92e4fd350c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"着色器上的矢量\"></p>\n<p><strong>蓝色节点</strong>：表示属性，多和几何节点结合使用，不属于这里的讨论范围。</p>\n<p>当然，不同颜色节点之间可以互相转换，只是会丢失读取不出来的信息。将粗糙度图片连接到黄色节点，如基础色，由于粗糙度图片只有黑白灰的值，基础色无法读出其他颜色信息，所以无法显示彩色。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-809f78a87ee2f46a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>次表面：光穿透过表面后，在其下方散射发生的情况。最常见的就是人体皮肤。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2612a7b2abcbd6a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"当光足够强烈，在皮肤下的散射特别是明暗交界线附近，就会看的很清楚，一般会使得皮肤接近明暗交界线的部位饱和度急剧升高\"></p>\n<p>透射&amp;&amp;投射粗糙度<br>透射：决定多少光可以通过材料，而不是从材料反射光。<br>透射值越大，透过材料的光越多。<br>透射粗糙度：透射光的粗糙度，只有cycles下可以使用，且分布为GGX。<br>说简单点儿，透射粗糙度的高低差别就是镜面玻璃和磨砂玻璃的区别。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9bb123e5c346f036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"上平面透射值为1，光源为绿色，光从上平面向下打，上平面无法受到光源影响，所有光都通过它照射到了下平面，所以下平面为绿色\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-471b4b79fccdc892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"上平面透射值为0，点光无法通过上平面，所以直接打在上平面，下平面几乎不受影响\"></p>\n<p>自发光（发射）：从材料实际发出的光，拥有自己的颜色和强度。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2b7a607ce22fff7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"在一个大立方体的里面放入一个自发光的小立方体，小立方体会形成一个光源照亮大立方体内部。相当于一个点光\"><br>alpha：材料透明度。</p>\n<p>以上这些值都是可以通过为不同位置传入不同的值来做不同的设置，就如同上述说的粗糙度设置。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b2b3c8574cb99660.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"如，我对下平面的alpha值传入了一个马氏分形纹理，表面就会因为传入的不同值而显示不同的alpha状态\"></p>\n<p>法向：用于法线贴图，在不用更改网格几何形状的情况下，伪造材质的深度与阴影。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c53af5159f384551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"法线贴图一般是这样的一张图片，它描述了物体表面的深度和阴影，命名方式为xx_normal\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1403c256cded68af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"将法线贴图连接至法向的效果\"></p>\n<p>##着色器节点<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ccb11092d3ec3de8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>不多叙述，分为表面着色器和体积着色器两类。原理化bsdf着色器理论是可以做出所有表面着色器的效果。但使用其他的表面着色器可以更快捷的实现想实现的效果。比如玻璃、透明、半透、毛发等。<br>以玻璃bsdf举例<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-93709468fce74934.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>折射率：当bsdf为玻璃或半透明时，物体内部可以进行折射，折射的情况就由ior设置。<br>水、不同厚度的玻璃、塑料瓶都有不同的折射率。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3864e432698c1072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"折射率可以使不同的材料以不同的角度反射光线\"><br>粗糙度：物体表面粗糙度越高，越不容易进行折射。<br>而这两个参数都是可以在原理化bsdf中进行设置，所以理论上来说原理化bsdf可以实现玻璃的效果，但使用玻璃bdsf来制作单纯的玻璃会更加的便捷。</p>\n<p>体积着色器可以连接至体积输出，有原理化体积、体积散射、体积吸收。原理化体积理论上是可以实现体积散射和体积吸收，且可以综合二者进行设置，但直接使用体积散射和体积吸收可以更快捷的实现对应的效果。<br>体积吸收：表示光线穿过物体时，体积会吸收光线<br>体积散射：更接近于雾的效果，通过体积散射，光会撞击物体体积并进行反弹。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e8e0776cd2dc8504.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"体积着色器\"></p>\n<p>体积着色器经常用于实现一些场景的烟雾、或者表现场景的空气透视感时会很常用。<br>如下面这张我建立了两个立方体，对外层大一些的立方体使用了体积散射，在两边设置了两个不同颜色的光源，就会有这种透光的烟雾效果。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d95939e3e4824ef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"体积散射\"><br>我做的这张小场景的练习，为了表现出远处的空气透视感，也在中间加了一个体积散射的平面。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-548933ed2ac3c376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小场景练习\"><br>体积bsdf的实际运用也可以和噪波纹理相结合，生成不同形状的烟雾，也可以用噪波纹理增加噪点等效果。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ec549747af20846f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"体积bsdf与噪波纹理\"></p>\n<p>混合bsdf：<br>现在我将两个原理化bsdf使用混合bsdf连接，混合bsdf拥有上下两个叫混合器的插槽和一个系数插槽。<br>我将红色bsdf放在下面的混合器插槽，蓝色bsdf放在上面的混合器插槽，若系数为0.5，即上下着色器等比混合，正常情况下物体表面应该为紫色。如下图<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-17f68892c17355a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>系数越大，混合结果越偏向于下面的着色器。</p>\n<p>若混合bsdf系数给一个灰度描述，如马氏分形纹理，那么表面就会因为不同的系数而做不同的着色器显示。将顶部着色器放在有黑色的地方（0），将底部着色器放在有白色的地方（1）。而灰色的地方进行两个着色器颜色的混合<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-68df64794580e9a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>##纹理节点<br>blender自带的一些材质节点，可以根据不同材质节点生成不同的灰度纹理。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fa610fcd97b30068.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>以马氏分形纹理做简单说明<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-871e8f5e1947127d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>简单说一下3d和4d的区别，4d比3d多了一个w值，w可以使纹理随时间推移改变w，一般用于设置动画。（按i可以设置关键帧，或在节点上右键 - 插入关键帧）<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f0faa4bab4329411.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>如果将纹理直接连接着色器的基础色，那么就是灰度显示，因为材质节点本质就是生成不同位置的灰度信息。<br>如果想让其显示彩色，可以连接一个colorRamp，也就是渐变<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1b72dcd4616f4492.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>沃罗诺伊纹理是一种很常用的纹理，可以生成漂亮的图案及形状。<br>就我个人而言，连接颜色时感觉很像一堆马赛克做了变换的纹理<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5411d1c934309471.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"随机性为1\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0536071be645690b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"随机性为0\"></p>\n<p>其他像砖墙纹理、棋盘格纹理就不再多说，纹理与纹理可以相互连接，组合生成不同的有意思的图案，需要多加尝试。<br>除了纹理与纹理之间相互连接外，还有另一种方法，使用mixRgb（混合rgb）<br>混合rgb与混合着色器的使用方法相当像，区别是混合rgb用于颜色输出，而混合着色器用于着色器输出。混合rgb可以控制灰度的信息，所以当两个纹理连接到混合rgb时，可以通过混合rgb去控制两个纹理的强弱。<br>混合方式可以点击自己调节，不详细介绍了，如果用过ps应该是熟悉的。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-33ae49ebcac2a1c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"将马氏分形纹理与砖墙纹理进行混合，调节系数。系数为0时显示上面的马氏分形纹理，系数为1时显示下面的砖墙纹理，中间则相互混合。\"></p>\n<p>还有一些不太常用于着色器表面信息的纹理节点，比如ies纹理（用于描述灯光）环境纹理（用于描述环境）等，之后我会再整理。</p>\n<p>##如何将纹理映射到对象上？<br>与几个节点息息相关。</p>\n<ol>\n<li>纹理坐标节点：用不同方式告诉纹理如何在blender中进行映射，不同的用途可以有不同的输出。<br>常用的两个是物体和生成，生成是默认的形状，物体适合生成程序化的纹理。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c7fb176496920cf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"纹理坐标\"></li>\n<li>映射节点，可以调节纹理的位置、旋转和缩放<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-26bf0f7bd472cb77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"映射\"></li>\n<li>运算节点，可以使两个值做对应运算<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0a16f38b102d6122.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-66bd294b4b41dd4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"很常见的连接方式，可以通过上述几个节点去操作纹理的映射方法。\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>着色器部分国内文档太少，这段时间翻了很久的国外文档，请教了几位油管及discord大神，自己也做了不少东西后做出的总结。</p>\n<h2 id=\"不同颜色节点的含义\"><a href=\"#不同颜色节点的含义\" class=\"headerlink\" title=\"不同颜色节点的含义\"></a>不同颜色节点的含义</h2><p>首先，着色器节点固定从左向右流动。<br><strong>绿色节点</strong>：着色器本身<br>如各类bsdf<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-55547ef4d8900f65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><strong>黄色节点</strong>：颜色信息<br>如：基础色、次表面色<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a959ff512e84e321.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>表面并不是一定只能连接一个颜色。<br>新建一个平面，切换到shading，新建一个材质槽。<br>shift a新建一个图像纹理，添加一张图片，连接到bsdf的基础色，就可以将这张彩色图片的颜色信息显示在平面上。<br>（其实可以直接拖进去，但不知道为什么自从我更新了3.3我就再也拖不进去了。）<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ae4e6923eb4128c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><strong>灰色节点</strong>：值，bsdf的很多设置都是值<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-da43946283048655.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>着色器上的值与颜色一样，很多时候表面是不想用同一个值来设置所有位置的。如糙度，很多情况下表面的材质并不是同一糙度，所以这时候需要一张描述表面糙度的图，通过0（黑色）至1（白色）之间的值，使用黑白或灰度着色，将值映射到不同的表面位置。<br><br>即：pbr贴图中的粗糙度文件。<brr><br>如以下这张就是一张粗糙度描述图片，它黑色的地方表示完全不粗糙（0）白色的地方表示粗糙度满点（1），其余灰色的地方，灰色越深，越接近于零，也就越不粗糙。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-62f089488a9fb5f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Roughness\"></p>\n<p>如图，将上面的粗糙度文件连接至糙度后，可以看到表面有不同程度的粗糙纹理。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-17bbec7cf22db9d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><strong>紫色节点</strong>：矢量信息。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-95f7aa80396b1d9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"矢量运算\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e3542d92e4fd350c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"着色器上的矢量\"></p>\n<p><strong>蓝色节点</strong>：表示属性，多和几何节点结合使用，不属于这里的讨论范围。</p>\n<p>当然，不同颜色节点之间可以互相转换，只是会丢失读取不出来的信息。将粗糙度图片连接到黄色节点，如基础色，由于粗糙度图片只有黑白灰的值，基础色无法读出其他颜色信息，所以无法显示彩色。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-809f78a87ee2f46a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>次表面：光穿透过表面后，在其下方散射发生的情况。最常见的就是人体皮肤。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2612a7b2abcbd6a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"当光足够强烈，在皮肤下的散射特别是明暗交界线附近，就会看的很清楚，一般会使得皮肤接近明暗交界线的部位饱和度急剧升高\"></p>\n<p>透射&amp;&amp;投射粗糙度<br>透射：决定多少光可以通过材料，而不是从材料反射光。<br>透射值越大，透过材料的光越多。<br>透射粗糙度：透射光的粗糙度，只有cycles下可以使用，且分布为GGX。<br>说简单点儿，透射粗糙度的高低差别就是镜面玻璃和磨砂玻璃的区别。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9bb123e5c346f036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"上平面透射值为1，光源为绿色，光从上平面向下打，上平面无法受到光源影响，所有光都通过它照射到了下平面，所以下平面为绿色\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-471b4b79fccdc892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"上平面透射值为0，点光无法通过上平面，所以直接打在上平面，下平面几乎不受影响\"></p>\n<p>自发光（发射）：从材料实际发出的光，拥有自己的颜色和强度。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2b7a607ce22fff7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"在一个大立方体的里面放入一个自发光的小立方体，小立方体会形成一个光源照亮大立方体内部。相当于一个点光\"><br>alpha：材料透明度。</p>\n<p>以上这些值都是可以通过为不同位置传入不同的值来做不同的设置，就如同上述说的粗糙度设置。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b2b3c8574cb99660.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"如，我对下平面的alpha值传入了一个马氏分形纹理，表面就会因为传入的不同值而显示不同的alpha状态\"></p>\n<p>法向：用于法线贴图，在不用更改网格几何形状的情况下，伪造材质的深度与阴影。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c53af5159f384551.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"法线贴图一般是这样的一张图片，它描述了物体表面的深度和阴影，命名方式为xx_normal\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1403c256cded68af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"将法线贴图连接至法向的效果\"></p>\n<p>##着色器节点<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ccb11092d3ec3de8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>不多叙述，分为表面着色器和体积着色器两类。原理化bsdf着色器理论是可以做出所有表面着色器的效果。但使用其他的表面着色器可以更快捷的实现想实现的效果。比如玻璃、透明、半透、毛发等。<br>以玻璃bsdf举例<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-93709468fce74934.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>折射率：当bsdf为玻璃或半透明时，物体内部可以进行折射，折射的情况就由ior设置。<br>水、不同厚度的玻璃、塑料瓶都有不同的折射率。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3864e432698c1072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"折射率可以使不同的材料以不同的角度反射光线\"><br>粗糙度：物体表面粗糙度越高，越不容易进行折射。<br>而这两个参数都是可以在原理化bsdf中进行设置，所以理论上来说原理化bsdf可以实现玻璃的效果，但使用玻璃bdsf来制作单纯的玻璃会更加的便捷。</p>\n<p>体积着色器可以连接至体积输出，有原理化体积、体积散射、体积吸收。原理化体积理论上是可以实现体积散射和体积吸收，且可以综合二者进行设置，但直接使用体积散射和体积吸收可以更快捷的实现对应的效果。<br>体积吸收：表示光线穿过物体时，体积会吸收光线<br>体积散射：更接近于雾的效果，通过体积散射，光会撞击物体体积并进行反弹。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e8e0776cd2dc8504.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"体积着色器\"></p>\n<p>体积着色器经常用于实现一些场景的烟雾、或者表现场景的空气透视感时会很常用。<br>如下面这张我建立了两个立方体，对外层大一些的立方体使用了体积散射，在两边设置了两个不同颜色的光源，就会有这种透光的烟雾效果。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d95939e3e4824ef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"体积散射\"><br>我做的这张小场景的练习，为了表现出远处的空气透视感，也在中间加了一个体积散射的平面。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-548933ed2ac3c376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小场景练习\"><br>体积bsdf的实际运用也可以和噪波纹理相结合，生成不同形状的烟雾，也可以用噪波纹理增加噪点等效果。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ec549747af20846f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"体积bsdf与噪波纹理\"></p>\n<p>混合bsdf：<br>现在我将两个原理化bsdf使用混合bsdf连接，混合bsdf拥有上下两个叫混合器的插槽和一个系数插槽。<br>我将红色bsdf放在下面的混合器插槽，蓝色bsdf放在上面的混合器插槽，若系数为0.5，即上下着色器等比混合，正常情况下物体表面应该为紫色。如下图<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-17f68892c17355a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>系数越大，混合结果越偏向于下面的着色器。</p>\n<p>若混合bsdf系数给一个灰度描述，如马氏分形纹理，那么表面就会因为不同的系数而做不同的着色器显示。将顶部着色器放在有黑色的地方（0），将底部着色器放在有白色的地方（1）。而灰色的地方进行两个着色器颜色的混合<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-68df64794580e9a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>##纹理节点<br>blender自带的一些材质节点，可以根据不同材质节点生成不同的灰度纹理。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fa610fcd97b30068.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>以马氏分形纹理做简单说明<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-871e8f5e1947127d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>简单说一下3d和4d的区别，4d比3d多了一个w值，w可以使纹理随时间推移改变w，一般用于设置动画。（按i可以设置关键帧，或在节点上右键 - 插入关键帧）<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f0faa4bab4329411.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>如果将纹理直接连接着色器的基础色，那么就是灰度显示，因为材质节点本质就是生成不同位置的灰度信息。<br>如果想让其显示彩色，可以连接一个colorRamp，也就是渐变<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1b72dcd4616f4492.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>沃罗诺伊纹理是一种很常用的纹理，可以生成漂亮的图案及形状。<br>就我个人而言，连接颜色时感觉很像一堆马赛克做了变换的纹理<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5411d1c934309471.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"随机性为1\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0536071be645690b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"随机性为0\"></p>\n<p>其他像砖墙纹理、棋盘格纹理就不再多说，纹理与纹理可以相互连接，组合生成不同的有意思的图案，需要多加尝试。<br>除了纹理与纹理之间相互连接外，还有另一种方法，使用mixRgb（混合rgb）<br>混合rgb与混合着色器的使用方法相当像，区别是混合rgb用于颜色输出，而混合着色器用于着色器输出。混合rgb可以控制灰度的信息，所以当两个纹理连接到混合rgb时，可以通过混合rgb去控制两个纹理的强弱。<br>混合方式可以点击自己调节，不详细介绍了，如果用过ps应该是熟悉的。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-33ae49ebcac2a1c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"将马氏分形纹理与砖墙纹理进行混合，调节系数。系数为0时显示上面的马氏分形纹理，系数为1时显示下面的砖墙纹理，中间则相互混合。\"></p>\n<p>还有一些不太常用于着色器表面信息的纹理节点，比如ies纹理（用于描述灯光）环境纹理（用于描述环境）等，之后我会再整理。</p>\n<p>##如何将纹理映射到对象上？<br>与几个节点息息相关。</p>\n<ol>\n<li>纹理坐标节点：用不同方式告诉纹理如何在blender中进行映射，不同的用途可以有不同的输出。<br>常用的两个是物体和生成，生成是默认的形状，物体适合生成程序化的纹理。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c7fb176496920cf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"纹理坐标\"></li>\n<li>映射节点，可以调节纹理的位置、旋转和缩放<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-26bf0f7bd472cb77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"映射\"></li>\n<li>运算节点，可以使两个值做对应运算<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0a16f38b102d6122.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-66bd294b4b41dd4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"很常见的连接方式，可以通过上述几个节点去操作纹理的映射方法。\"></li>\n</ol>\n"},{"title":"【人像】好久不画人像了","date":"2022-11-24T05:23:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n小练一下素描~\n过程录屏在微信视频号中\n\n![练习](http://upload-images.jianshu.io/upload_images/20892169-a3add5cba2b16577.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50)\n","source":"_posts/paint/paint-picture1.md","raw":"---\ntitle: '【人像】好久不画人像了'\ndate: 2022-11-24 13:23:38\ntags: 绘画\ncategories:\n  - 绘画\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n小练一下素描~\n过程录屏在微信视频号中\n\n![练习](http://upload-images.jianshu.io/upload_images/20892169-a3add5cba2b16577.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50)\n","slug":"paint/paint-picture1","published":1,"updated":"2023-01-25T13:05:24.169Z","_id":"cldbmnw5h001o04wi5ghh8xdg","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>小练一下素描~<br>过程录屏在微信视频号中</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/20892169-a3add5cba2b16577.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50\" alt=\"练习\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>小练一下素描~<br>过程录屏在微信视频号中</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/20892169-a3add5cba2b16577.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50\" alt=\"练习\"></p>\n"},{"title":"平面构成入门","date":"2022-07-02T05:23:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n![总结笔记](https://upload-images.jianshu.io/upload_images/20892169-12de060faaa14705.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n先把思维导图放好，之后慢慢配图\n<!--\n##第一课：\n理解生活中的点线面\n二方连续：连续两个是一样的\n![](https://upload-images.jianshu.io/upload_images/20892169-5c83b87e6ff850f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点线面的概念：\n![](https://upload-images.jianshu.io/upload_images/20892169-c1f9b5be52dd91b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点：有疏有密\n点线面不是绝对的，可以共存，也可以只有点线，只有线面，都是有可能的\n参照物不同，点线面也是可以变换的。\n找十张照片，分析照片中的点线面\n\n##第二课\n平面构成适用于所有设计类课程\n平面设计：视觉传达设计\n室内设计：环境艺术设计\n造型设计：产品设计、工业设计，制作手机、电脑等\n建筑设计：建筑设计\n服装设计：服装设计\n展示设计：车展、房展、专卖店、商场等展览\n绘画：纯艺（国画、油画、版画、雕塑）\n##第三课、第四课\n平面构成的应用领域\n![](https://upload-images.jianshu.io/upload_images/20892169-c5171feb8f384f41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-8f071f12af96a71f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n用不同的线去组成图形（抽象图形）\n![](https://upload-images.jianshu.io/upload_images/20892169-1826f85650d72f66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n用大小不同的点去组成图形（抽象图形）\n![](https://upload-images.jianshu.io/upload_images/20892169-089c769637cdc6c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-238e5e3af1256bc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##第六课\n![](https://upload-images.jianshu.io/upload_images/20892169-18b89cac132b350e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##第七课\n###平面构成的起源：包豪斯学院\n![](https://upload-images.jianshu.io/upload_images/20892169-85c708f2ee982e82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n###点线面的基本作用\n![](https://upload-images.jianshu.io/upload_images/20892169-38f7e301bd735f2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####设计中的点：\n在画面整体中元素中面积较小且装饰性很强的元素，可视为点状元素\n####点的特征：\n体积小、分散。大空间对比下小的、密集的\n![](https://upload-images.jianshu.io/upload_images/20892169-344434b8ee936a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####生活中的点：\n![](https://upload-images.jianshu.io/upload_images/20892169-3c8a53afa58f39b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-4435d93e52a6cce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-0bd0eb86e73bb2e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点可以有不同形状的\n![](https://upload-images.jianshu.io/upload_images/20892169-0183fd94487d9f42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  -->","source":"_posts/paint/paint-color copy.md","raw":"---\ntitle: 平面构成入门\ndate: 2022-07-02 13:23:38\ntags: 构成\ncategories:\n  - 绘画\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n![总结笔记](https://upload-images.jianshu.io/upload_images/20892169-12de060faaa14705.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n先把思维导图放好，之后慢慢配图\n<!--\n##第一课：\n理解生活中的点线面\n二方连续：连续两个是一样的\n![](https://upload-images.jianshu.io/upload_images/20892169-5c83b87e6ff850f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点线面的概念：\n![](https://upload-images.jianshu.io/upload_images/20892169-c1f9b5be52dd91b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点：有疏有密\n点线面不是绝对的，可以共存，也可以只有点线，只有线面，都是有可能的\n参照物不同，点线面也是可以变换的。\n找十张照片，分析照片中的点线面\n\n##第二课\n平面构成适用于所有设计类课程\n平面设计：视觉传达设计\n室内设计：环境艺术设计\n造型设计：产品设计、工业设计，制作手机、电脑等\n建筑设计：建筑设计\n服装设计：服装设计\n展示设计：车展、房展、专卖店、商场等展览\n绘画：纯艺（国画、油画、版画、雕塑）\n##第三课、第四课\n平面构成的应用领域\n![](https://upload-images.jianshu.io/upload_images/20892169-c5171feb8f384f41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-8f071f12af96a71f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n用不同的线去组成图形（抽象图形）\n![](https://upload-images.jianshu.io/upload_images/20892169-1826f85650d72f66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n用大小不同的点去组成图形（抽象图形）\n![](https://upload-images.jianshu.io/upload_images/20892169-089c769637cdc6c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-238e5e3af1256bc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##第六课\n![](https://upload-images.jianshu.io/upload_images/20892169-18b89cac132b350e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##第七课\n###平面构成的起源：包豪斯学院\n![](https://upload-images.jianshu.io/upload_images/20892169-85c708f2ee982e82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n###点线面的基本作用\n![](https://upload-images.jianshu.io/upload_images/20892169-38f7e301bd735f2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####设计中的点：\n在画面整体中元素中面积较小且装饰性很强的元素，可视为点状元素\n####点的特征：\n体积小、分散。大空间对比下小的、密集的\n![](https://upload-images.jianshu.io/upload_images/20892169-344434b8ee936a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####生活中的点：\n![](https://upload-images.jianshu.io/upload_images/20892169-3c8a53afa58f39b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-4435d93e52a6cce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-0bd0eb86e73bb2e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点可以有不同形状的\n![](https://upload-images.jianshu.io/upload_images/20892169-0183fd94487d9f42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  -->","slug":"paint/paint-color copy","published":1,"updated":"2023-01-25T13:05:13.430Z","_id":"cldbmnw5i001r04wi51tm5dgn","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-12de060faaa14705.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"总结笔记\"></p>\n<p>先把思维导图放好，之后慢慢配图</p>\n<!--\n##第一课：\n理解生活中的点线面\n二方连续：连续两个是一样的\n![](https://upload-images.jianshu.io/upload_images/20892169-5c83b87e6ff850f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点线面的概念：\n![](https://upload-images.jianshu.io/upload_images/20892169-c1f9b5be52dd91b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点：有疏有密\n点线面不是绝对的，可以共存，也可以只有点线，只有线面，都是有可能的\n参照物不同，点线面也是可以变换的。\n找十张照片，分析照片中的点线面\n\n##第二课\n平面构成适用于所有设计类课程\n平面设计：视觉传达设计\n室内设计：环境艺术设计\n造型设计：产品设计、工业设计，制作手机、电脑等\n建筑设计：建筑设计\n服装设计：服装设计\n展示设计：车展、房展、专卖店、商场等展览\n绘画：纯艺（国画、油画、版画、雕塑）\n##第三课、第四课\n平面构成的应用领域\n![](https://upload-images.jianshu.io/upload_images/20892169-c5171feb8f384f41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-8f071f12af96a71f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n用不同的线去组成图形（抽象图形）\n![](https://upload-images.jianshu.io/upload_images/20892169-1826f85650d72f66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n用大小不同的点去组成图形（抽象图形）\n![](https://upload-images.jianshu.io/upload_images/20892169-089c769637cdc6c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-238e5e3af1256bc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##第六课\n![](https://upload-images.jianshu.io/upload_images/20892169-18b89cac132b350e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##第七课\n###平面构成的起源：包豪斯学院\n![](https://upload-images.jianshu.io/upload_images/20892169-85c708f2ee982e82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n###点线面的基本作用\n![](https://upload-images.jianshu.io/upload_images/20892169-38f7e301bd735f2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####设计中的点：\n在画面整体中元素中面积较小且装饰性很强的元素，可视为点状元素\n####点的特征：\n体积小、分散。大空间对比下小的、密集的\n![](https://upload-images.jianshu.io/upload_images/20892169-344434b8ee936a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####生活中的点：\n![](https://upload-images.jianshu.io/upload_images/20892169-3c8a53afa58f39b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-4435d93e52a6cce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-0bd0eb86e73bb2e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点可以有不同形状的\n![](https://upload-images.jianshu.io/upload_images/20892169-0183fd94487d9f42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  -->","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-12de060faaa14705.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"总结笔记\"></p>\n<p>先把思维导图放好，之后慢慢配图</p>\n<!--\n##第一课：\n理解生活中的点线面\n二方连续：连续两个是一样的\n![](https://upload-images.jianshu.io/upload_images/20892169-5c83b87e6ff850f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点线面的概念：\n![](https://upload-images.jianshu.io/upload_images/20892169-c1f9b5be52dd91b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点：有疏有密\n点线面不是绝对的，可以共存，也可以只有点线，只有线面，都是有可能的\n参照物不同，点线面也是可以变换的。\n找十张照片，分析照片中的点线面\n\n##第二课\n平面构成适用于所有设计类课程\n平面设计：视觉传达设计\n室内设计：环境艺术设计\n造型设计：产品设计、工业设计，制作手机、电脑等\n建筑设计：建筑设计\n服装设计：服装设计\n展示设计：车展、房展、专卖店、商场等展览\n绘画：纯艺（国画、油画、版画、雕塑）\n##第三课、第四课\n平面构成的应用领域\n![](https://upload-images.jianshu.io/upload_images/20892169-c5171feb8f384f41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-8f071f12af96a71f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n用不同的线去组成图形（抽象图形）\n![](https://upload-images.jianshu.io/upload_images/20892169-1826f85650d72f66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n用大小不同的点去组成图形（抽象图形）\n![](https://upload-images.jianshu.io/upload_images/20892169-089c769637cdc6c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-238e5e3af1256bc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##第六课\n![](https://upload-images.jianshu.io/upload_images/20892169-18b89cac132b350e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##第七课\n###平面构成的起源：包豪斯学院\n![](https://upload-images.jianshu.io/upload_images/20892169-85c708f2ee982e82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n###点线面的基本作用\n![](https://upload-images.jianshu.io/upload_images/20892169-38f7e301bd735f2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####设计中的点：\n在画面整体中元素中面积较小且装饰性很强的元素，可视为点状元素\n####点的特征：\n体积小、分散。大空间对比下小的、密集的\n![](https://upload-images.jianshu.io/upload_images/20892169-344434b8ee936a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####生活中的点：\n![](https://upload-images.jianshu.io/upload_images/20892169-3c8a53afa58f39b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-4435d93e52a6cce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-0bd0eb86e73bb2e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点可以有不同形状的\n![](https://upload-images.jianshu.io/upload_images/20892169-0183fd94487d9f42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  -->"},{"title":"【zbrush】曲线弯折","date":"2022-10-15T02:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n做头发的时候总在想如果zbrush有类似blender的硬表面操作就好了，然后摸了一下，录了一个视频。\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HtuWvyJo7us\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","source":"_posts/jianmo/zb-quxianwanzhe.md","raw":"---\ntitle: '【zbrush】曲线弯折'\ndate: 2022-10-15 10:21:49\ntags: zbrush\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n做头发的时候总在想如果zbrush有类似blender的硬表面操作就好了，然后摸了一下，录了一个视频。\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HtuWvyJo7us\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","slug":"jianmo/zb-quxianwanzhe","published":1,"updated":"2023-01-25T10:56:14.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbmnw5i001t04wi7ikfg99l","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>做头发的时候总在想如果zbrush有类似blender的硬表面操作就好了，然后摸了一下，录了一个视频。</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HtuWvyJo7us\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>做头发的时候总在想如果zbrush有类似blender的硬表面操作就好了，然后摸了一下，录了一个视频。</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HtuWvyJo7us\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>"},{"title":"色彩构成入门","date":"2022-06-22T20:57:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 思维导图\n\n![](https://upload-images.jianshu.io/upload_images/20892169-52e84d1dcfa1f297.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5)1\\. 基本概念\n\n首先，有光线才有色彩。物体表面会吸收一部分光线，反射另一部分光线，反射的光线到达我们的眼睛，被视锥细胞（感知颜色的细胞）和视杆细胞（感知明暗的细胞）所接收，再通过神经传输到大脑，我们就产生了颜色的映像，从而具有色彩感。\n\n我们已经知道，牛顿用三棱镜将光分成了七色，从红到紫正是我们人眼能感知到的颜色范围，从光学的角度看，就是波长从 380 纳米到 780 纳米的光线。低于 380 纳米的，叫做紫外线，高于 780 纳米的，叫做红外线，都是我们人眼无法看到的。\n\n我们已经知道，光线具有波长和振幅，其中，光波的波长反映光波的频率，给人色彩感，光波的振幅反映光的强弱，给人明暗感。人眼中的两种细胞正是分别感知这两种参数，其中，视锥细胞感知波长，视杆细胞感知振幅。所以，我们看到的颜色，其实就是不同波长、不同振幅和不同比例的光线在人眼中的反映。\n\n通常，我们所称的自然光都是指太阳光，物体在自然光下呈现的颜色我们称为物体的固有色。但是，自然界中还有其它的光源，比如月光、闪电、灯光、烛光等，而在其它光源的照射下，物体颜色会发生改变，所以，我们平常所看到的颜色都是物体固有色和光源色的结合。\n\n如果照射到物体表面的全部光都被吸收，物体就呈现黑色，如果全部光都被反射，物体就呈现白色，不过，纯粹的黑白只存在于理论中，现实中没有物体可以全部反射或吸收光线。\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#11-%E8%89%B2%E5%BD%A9%E7%9A%84%E4%B8%89%E8%A6%81%E7%B4%A0)1.1 色彩的三要素\n\n就像度量衡一样，色彩也需要一个标定体系，像红、黄、蓝、绿这样的简单命名是模糊的，不足以区分不同的色彩。色彩的标定体系就是色彩的三要素：色相（Hue）、明度（Value）、纯度（Chroma）。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E8%89%B2%E7%9B%B8)色相\n\n字面上理解，就是色彩的相貌，用来区分不同的颜色，比如牛顿分解的光谱色：红、橙、黄、绿、青、蓝、紫，就是七种不同的色相。在我们后面会学到的色相环中，色相包括三原色和由它们按不同比例混合成的各种间色和复色，理论上，色相的划分是没有极限的，但是人眼的感知有极限，人眼只能分辨出大约 180 种不同色相的颜色。还要注意的是，无论色相环包含的色块有多少，每两块之间都有本质的区别，色块越多，仅仅是色差越小。\n\n从光学意义上讲，色相的不同是由光波波长的长短和不同光线的比例决定的。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E6%98%8E%E5%BA%A6)明度\n\n简单的理解，就是色彩的明暗程度。每一种色相都有自己的明暗度变化，而且都以白为最高明度，黑为最低明度。色彩的明度受两个因素影响：一是光源色的强弱，光线越强，色彩明度越高；二是黑与白的介入强度，加入黑色可以降低色彩明度，反之，加入白色可以提升色彩明度。\n\n明度在光学角度的本质是光的振幅（即强弱），所以黑和白的介入也可以这样理解，加入黑增强了物体吸收光线的能力，因此降低了它的明度，而加入白增强了物体反射光线的能力，因此提升了它的明度。\n\n除了色相本身的明度变化外，不同色相本身就有明度的差别，其中，黄色明度最高，紫红色明度最低。纯粹的黑白色也有明度的变化，这就是不同级别的灰色。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%BA%AF%E5%BA%A6)纯度\n\n纯度指的是色彩的鲜灰程度或纯净程度，也叫做饱和度。意思是一个色彩包含该种色素成分的多少，当该色素成分为 100% 时，就是该色相的纯色，所以加入其它任何颜色都会导致纯度的下降，不过，通常降低某色彩的纯度，都是通过混入无彩色系列的黑白灰或混入该色的补色完成的。\n\n从物理的角度讲，一个色相的纯色就是单一波长的光。\n\n黑白灰这三种颜色没有纯度的概念，因此叫做无彩色，其它有纯度的颜色叫做有彩色。\n\n### 1.2 色彩混合\n\n大部分的色彩都可以通过混合其它的色彩得到，但是，一定有几种是最基本的颜色，是不可拆分的，这就是**原色**。光的三原色是红、绿、紫，颜料的三原色是红、黄、蓝。\n\n任意两种原色混合得到的颜色叫**间色**，颜料的三间色是橙、绿、紫。\n\n将间色彼此混合，就形成了**复色**。由于间色本身就是原色混合而成的，复色就意味着是不同比例的原色混合，原色混合的不同比例加上纯度和明度的变化，就构成了我们所看到的丰富的颜色世界。\n\n光线彼此混合，亮度会不断提升，最后形成白色光，这叫做**加色混合**，计算机的显卡就属于 RGB 加色配色系统。通过改变每种原色电子光束的强度，得到深浅不同的色彩，从而合成丰富的色彩；\n\n颜料彼此混合，亮度会不断降低，最后形成黑色，这叫做减色混合。最后一种混合叫做**中性混合**，是利用人眼对空间的感知产生的一种混合方式，包括两种，一种是具有运动特点的旋转混合，比如具有两种颜色的陀螺旋转会呈现这两种颜色的复色，另一种是具有静止距离特点的空间混合，例如马赛克镶嵌画和点彩画。\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#13-%E8%89%B2%E7%9B%B8%E7%8E%AF)1.3 色相环\n\n色相环也称色环，是将色相以一定的变化规律顺序排列形成的一个环，反映了色相之间的数理关系，对色彩的使用具有很大的指导意义。常用的是 RGB 的 3 色相环、瑞士约翰内斯·伊顿的 12 色相环、德国奥斯特瓦尔德和日本色彩研究所的 PCCS 色彩体系的 24 色相环、美国孟赛尔的 100 色相环。所有的色相环都是以 120⁰ 的三原色为基础，在一个完整的圆内等量分割，形成变化均匀的等量过渡色。\n\n下面是伊顿的十二色相环，在 120° 的位置上是 3 个原色，每对原色中间加入一个间色，每对间色中间再加入一个复色，180° 的直径两端叫做互补色。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_伊顿十二色相环.jpg](https://upload-images.jianshu.io/upload_images/20892169-b05e246ae4274e5a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"伊顿十二色相环\")\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#14-%E8%89%B2%E7%AB%8B%E4%BD%93)1.4 色立体\n\n色立体是色彩理论的数学模型，是色相、明度和纯度三元素借助三维空间的表达，也是唯一区别每个颜色的标准。\n\n目前，主要的色立体体系有美国的孟赛尔色立体、德国的奥斯瓦尔德色立体、日本色彩研究所 PCCS 色立体、国际照明委员会 CIE 色立体等。虽然各自之间有一定的区别，但是理解了其中一种，剩下的就都很容易理解了。\n\n以如下的孟塞尔色立体为例，水平的圆环等量分成 10 份，分别是红、黄、绿、蓝、紫 5 个基色和它们的 5 个间色，共构成 10 个基础色域，每个色域再等分成 10 分，总计 100 个色相，这个圆环就是我们之前说的色相环；纯色在圆环的最外层，从最外层到圆心，纯度不断降低，直到变成圆心的灰色，纯度一共有 12 个等级；中间的轴代表无彩色，最下方是黑色，最上方是白色，黑白之间还有按明度变化的 9 个灰色，因此，纵轴就代表了明度的变化，每一种色相和纯度确定的色彩在纵向上都有明度的变化。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_孟塞尔色立体.jpg](https://upload-images.jianshu.io/upload_images/20892169-27b428b3e038f7fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"孟塞尔色立体\")\n\n下面是构造出的完整孟塞尔色立体。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_孟塞尔色立体完整图.png](https://upload-images.jianshu.io/upload_images/20892169-f251fc0a07ff5f11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"孟塞尔色立体完整图\")\n\n## 2\\. 色彩的对比\n\n色彩的对比是将两个以上的色彩放到一起，由于相互作用和相互影响而显现出差异的现象。事实上，对比是构成色彩的必要因素，如果整个世界只有一种颜色，没有彼此的对比，那也就失去了色彩的意义。\n\n根据前面所学的一些概念，色彩的对比可以分为：明度对比、色相对比、纯度对比、冷暖对比、面积对比等。\n\n### 2.1 色相对比\n\n因色相差别而形成的色彩对比称为色相对比。将不同色相的色彩并置在一起，可以使对方的特征更加突出。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_色相对比.png](https://upload-images.jianshu.io/upload_images/20892169-6e74e50c6aad4184.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"色相对比\")\n\n根据各色相在色相环上距离远近的不同，可以形成不同的色相对比，距离越远，对比效果越强烈，相距 180° 的两个色相对比最为强烈\n\n1.  **同类色对比**：色相环上距离在 15° 以内的两个色相的对比，对比的效果一般比较弱，通常还需要拉大明度和纯度来进行区别；\n2.  **邻接色对比**：色相环上距离在 15°-30° 之间的两个色相的对比，这样的两个色相就有了一定的区别，对比效果一般比较统一、和谐、柔和，适合背景处理；\n3.  **类似色对比**：色相环上距离在 60°-90° 之间的两个色相的对比，类似色对比一般显得丰满、活泼，即保持了随和统一的优点，又克服了视觉上不够饱满的缺点；\n4.  **中差色相对比**：色相环上距离在 90° 的两个色相的对比，由于差别比较明确，对比效果比较明快；\n5.  **对比色相**：色相环上距离在 120° 左右的两个色相的对比，对比效果比较强烈、鲜明，但过于刺激易产生视觉疲劳，处理不好容易出现烦躁和不安定的感觉；\n6.  **互补色相**：色相环上距离在 180° 左右的两个色相的对比，是最强烈的对比关系，更富于刺激性，但是画面比较直白，不够含蓄和雅致，同意易导致视觉疲劳。\n\n在我所阅读的几个材料中，对色相对比的分类和称呼各有不同，比如，在有的书籍中同类色指的就是距离 15° 的两个色相对比，因此，上述分类只能作为参考，唯一确定的是，距离越远，对比效果就越强烈。\n\n除了以上的色相对比外，还有两种特殊的色相对比\n\n1.  **全色相对比**：指的是色相环上所有色相都出现，由于人的视觉系统需要全色刺激，这种对比比较协调；\n2.  **有彩色和无彩色的对比**：无彩色又可以称为万能色，无论什么样的有彩色，和无彩色对比都可以呈现和谐的视觉效果。\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#22-%E6%98%8E%E5%BA%A6%E5%AF%B9%E6%AF%94)2.2 明度对比\n\n指因明度差别而形成的色彩对比。两种不同明度的色彩并列时，会使明色更亮，暗色更暗。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_明度对比.png](https://upload-images.jianshu.io/upload_images/20892169-b7ab56ff71cec25e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"明度对比\")\n\n根据孟塞尔色立体，由黑到白等差分为 9 个等级，加上黑白两色一共 11 个等级。0 级为纯黑，明度最低，10 级为纯白，明度最高。\n\n我们将明度在 0-3 级的色彩称为**低明度**，明度在 4-6 级的色彩称为**中明度**，明度在 7-10 级的色彩称为**高明度**。以低明度色彩为主的构成**低明度基调**，以中明度色彩为主的构成**中明度基调**，以高明度色彩为主的构成**高明度基调**。\n\n注：“……为主” 指该色彩在画面上的面积超过 70%，占绝对优势。\n\n同时，我们将明度差在 5 个级别以外的对比称为**强对比（长调对比）**，将明度差在 3-5 个级别内的对比称为**中对比（中调对比）**，将明度差在 3 个级别以内的对比称为**弱对比（短调对比）**。\n\n这样，不同的基调和明度对比程度就构成了一个 9 种明度对比方案，称为明度 9 调，分别是：高长调、高中调、高短调、中长调、中中调、中短调、低长调、低中调、低短调。举个例子，高长调指的就是主色调为中明度，明度差在 5 级以上的对比。一个明度 9 调的例子如下图：\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_纯度对比.png](https://upload-images.jianshu.io/upload_images/20892169-4bbabb89c499f17a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"明度9调\")\n\n### 2.3 纯度对比\n\n因纯度差别形成的色彩对比叫纯度对比，不同纯度的色彩并置，鲜的更鲜，浊的更浊。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_色彩对比与位置的关系.png](https://upload-images.jianshu.io/upload_images/20892169-dbf71248ff3bda78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"纯度对比\")\n\n和明度相似，纯度也有 3 种色调和 3 中等级差：\n\n- 高纯度色彩占 70% 左右叫鲜调（高彩对比）\n- 中纯度色彩占 70% 左右叫中调（中彩对比）\n- 低纯度色彩占 70% 左右叫低调（低彩对比）\n- 纯度差为 8 级以上叫强对比\n- 纯度差在 5-8 级叫中对比\n- 纯度差在 4 级以内叫弱对比\n\n因此，纯度也有九调，分别是：鲜强、鲜中、鲜弱、中强、中中、中弱、灰强、灰中、灰弱。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_纯度9调.jpg](https://upload-images.jianshu.io/upload_images/20892169-34c60b9ada7adc49.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"纯度9调\")\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#24-%E5%86%B7%E6%9A%96%E5%AF%B9%E6%AF%94)2.4 冷暖对比\n\n冷暖色形成的对比，关于冷暖色的定义可参考本文番外部分。根据孟塞尔色相环的十个主要色相，以最暖色橙为暖极，以最冷色蓝为冷极，可划分为 6 个冷暖区\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_冷暖区.png](https://upload-images.jianshu.io/upload_images/20892169-60299b3bfa7ada6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"冷暖区\")\n\n其中，两个冷暖极的对比是最强的，剩下的分三种\n\n1.  强对比：冷极和暖色，暖极和冷色；\n2.  中等对比：暖极、暖色和中性微冷，冷极、冷色和中性暖色；\n3.  弱对比：暖极和暖色；冷极和冷色；暖色和中性微暖色；冷色和中性微冷色；中性微暖色和中性微冷色。\n\n以暖色为主可构成暖色基调，以冷色为主可构成冷色基调，两者给人不同的感觉，如下表\n\n| 冷     | 暖     |\n| ------ | ------ |\n| 阴影   | 阳光   |\n| 透明   | 不透明 |\n| 镇静   | 刺激   |\n| 稀薄   | 稠密   |\n| 空气感 | 土质感 |\n| 远的   | 近的   |\n| 轻的   | 重的   |\n| 潮湿的 | 干燥的 |\n| 理智的 | 感情的 |\n| 流动的 | 静止的 |\n| 冷静的 | 热烈的 |\n\n### 2.5 面积位置对比\n\n形态作为视觉色彩的载体，总有一定的面积，因此面积也会对色彩的表达产生重要影响。\n\n色彩对比与面积的关系有：\n\n1.  色调组合，只有相同面积的色彩次啊能比较出实际的差别，互相之间产生抗衡，对比效果强烈；\n2.  对比双方的属性不变，一方增大面积，取得面积优势，而另一方缩小面积，将会削弱色彩的对比；\n3.  色彩属性不变，随着面积的增大，对视觉的刺激力量加强，反之削弱。因此，色彩的大面积对比可造成炫目效果；\n4.  相同性质与面积的色彩，大面积色稳定性较高，在对比中对它色的错视影响大，反之受它色的错视影响小。\n\n色彩对比和位置的关系有：\n\n1.  对比双方的色彩距离越近，对比效果越强，反之越弱；\n2.  双方互相呈接触、切入状态时，对比效果强烈；\n3.  一色包围另一色时，对比效果最强；\n4.  在作品中，一般将重点色彩设置在视觉中心部位，最易引入注目，如井字形构图的四个交叉点。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_平衡色轮.jpg](https://upload-images.jianshu.io/upload_images/20892169-db35d6e9ff01129a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"色彩对比与位置的关系\")\n\n注意，色彩对比从不是单一方面的，而是多个方面共同作用。\n\n## [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#3-%E8%89%B2%E5%BD%A9%E7%9A%84%E8%B0%83%E5%92%8C)3\\. 色彩的调和\n\n> 对比是手段，调和是目的\n\n色彩的调和是指两种或两种以上的色彩，有秩序、协调和谐的组织在一起，形成和谐统一的色彩搭配。色彩调和是色彩设计的基本法则，色彩调和有两层含义\n\n1.  使有明显差别的色彩经过调整，形成和谐而统一的完美整体；\n2.  合理的组织选择色彩搭配，使其形成具有目的性的美的色彩关系。\n\n调和方式包括：同一调和、类似调和和对比调和。\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#31-%E5%90%8C%E4%B8%80%E8%B0%83%E5%92%8C)3.1 同一调和\n\n同一调和指在色彩的三属性中保持一种属性相同，将另外两种属性进行变化，因此又可以分为同色相调和、同明度调和、同纯度调和，还有一种特殊的无彩色调和。\n\n[图片上传失败...(image-b5b89-1674499821595)]\n\n### 3.2 类似调和\n\n类似调和是类似要素的结合，与同一调和相比，具有稍多的变化，但并没脱离以统一为主的配色原则。\n\n[图片上传失败...(image-518ad2-1674499821595)]\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#33-%E5%AF%B9%E6%AF%94%E8%B0%83%E5%92%8C)3.3 对比调和\n\n对比调和是以强调变化而组成的和谐色彩搭配。在对比调和中，明度、色相、纯度三种要素都处于对比的状态，因此色彩更富于活泼、生动、鲜明的效果。\n\n对比调和的方法有：秩序调和、混入调和、分割调和、呼应调和和面积调和。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%A7%A9%E5%BA%8F%E8%B0%83%E5%92%8C)秩序调和\n\n指在画面组织时时多种色彩呈现一定的秩序规律，常见的有\n\n1.  在伊顿色相环中选择位于等腰三角形、等边三角形、长方形、正方形等几何图形顶点上的色相来组织；\n2.  对色彩的色相、明度、纯度做渐变推移处理，使最强和最弱的色彩间呈多个梯次的等差、等比关系，弱化对比强度；\n3.  九宫调和，将 9 个按顺序排列好的色块放入九宫格中，源自我国传统的「明堂九室」，是多年累积的视觉经验。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E6%B7%B7%E5%85%A5%E8%B0%83%E5%92%8C)混入调和\n\n指遇到不和谐的色彩组合时，选择一个同化元素（色彩要素中的任何一个），将其加入到所有的不同色彩中，使之都含有共同的因素，从而达到和谐的目的。\n\n对于色相，应使所有色彩都具有共同的色彩倾向，比如夕阳下的所有色彩都带有暖暖的橙色，可以看作色相混入的结果；对于纯度，可使所有色彩降低自己的纯度，形成统一的色彩饱和度，比如雨雾中的所有色彩都变得灰蒙蒙的；对于明度，可使所有色彩同时降低或提升明度。\n\n混入调和一般用在色彩调配阶段。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%88%86%E5%89%B2%E8%B0%83%E5%92%8C)分割调和\n\n指遇到不和谐的色彩组合时，在它们之间嵌入金、银、黑、白、灰任何一种颜色，或者嵌入这几种对比色的中间色，使之产生过渡，从而缓解直接对比的强度，使配色达到调和。\n\n分割调和主要用在画面的色彩组织中。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%91%BC%E5%BA%94%E8%B0%83%E5%92%8C)呼应调和\n\n指将合适的色彩添加到原画面中，使新色彩和原有色彩达成彼此呼应的调和关系。呼应的内容同样可以从色彩各要素触发，最常用的是色相的呼应。\n\n注意，呼应的色彩对象多为画面中的主体、中心色，起到呼应作用的色彩多在面积、位置、数量、形状等方面处于弱势。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E9%9D%A2%E7%A7%AF%E8%B0%83%E5%92%8C)面积调和\n\n使某种色彩的面积占据支配地位，可以削弱对比关系。另外，伊顿根据歌德的色彩面积研究成果提出：相等面积比例的红色和绿色能够产生中性的灰色，而黄色和紫色、橙色和蓝色则需要不同的配色比例。用数学比例来显示它们的配比关系为红色:绿色=1:1、黄色:紫色=1/4:3/4、橙色:蓝色=1/3:2/3，这也是著名的“面积对比调和色轮图”。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_类似调和.png](https://upload-images.jianshu.io/upload_images/20892169-3cb89f58ce74c1ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"平衡色轮\")\n\n红色和绿色，黄色和紫色、橙色和蓝色，不论哪一方超过这个比值，都将破坏两者间的调和关系，将两者转化到对比关系中。越接近这种调和比例，对比就越强烈，最终回到最熟悉的红花与绿叶的对比关系之中。\n\n## [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%95%AA%E5%A4%96)番外\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%86%B7%E6%9A%96%E8%89%B2)冷暖色\n\n从色相环的分布看，红橙色类为暖色系，蓝紫色类为冷色系，黄绿色类为中性，黑色感觉为暖色，白色感觉为冷色。色彩明度和纯度的改变也会影响色彩的冷暖感，明亮色偏冷，深暗色偏暖，纯色保持原色的冷暖感，而纯度的降低会使冷暖感趋于中性化。对于太阳光而言，时间也是影响冷暖的因素，一般来讲，早晨的阳光色彩偏冷，傍晚的阳光色彩偏暖。各种不同的光源提供的颜色本身就有偏向，比如，白炽灯的光源色偏暖黄，荧光灯的光源色偏冷蓝。\n\n### 色调\n\n我们常说一幅画、一张照片或一个场景是什么色调的，色调其实指的是占主导地位的一种视觉因素，色彩的三元素：色相、明度和纯度都可以作为色调，比如，从色相上，可以有红色调、蓝色调、黄色调、绿色调等；从色彩明度上，可以有明亮色调、暗色调等；从色彩纯度上，可以有清色调、浊色调、纯色调、灰色调；甚至从色彩的特性上，可以有暖色调、冷色调、中性色调。\n\n一般情况下，当某种类型色彩占据超过 70% 时，就称为该色调。\n","source":"_posts/paint/paint-color.md","raw":"---\ntitle: 色彩构成入门\ndate: 2022-06-23 04:57:38\ntags: 构成\ncategories:\n  - 绘画\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 思维导图\n\n![](https://upload-images.jianshu.io/upload_images/20892169-52e84d1dcfa1f297.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5)1\\. 基本概念\n\n首先，有光线才有色彩。物体表面会吸收一部分光线，反射另一部分光线，反射的光线到达我们的眼睛，被视锥细胞（感知颜色的细胞）和视杆细胞（感知明暗的细胞）所接收，再通过神经传输到大脑，我们就产生了颜色的映像，从而具有色彩感。\n\n我们已经知道，牛顿用三棱镜将光分成了七色，从红到紫正是我们人眼能感知到的颜色范围，从光学的角度看，就是波长从 380 纳米到 780 纳米的光线。低于 380 纳米的，叫做紫外线，高于 780 纳米的，叫做红外线，都是我们人眼无法看到的。\n\n我们已经知道，光线具有波长和振幅，其中，光波的波长反映光波的频率，给人色彩感，光波的振幅反映光的强弱，给人明暗感。人眼中的两种细胞正是分别感知这两种参数，其中，视锥细胞感知波长，视杆细胞感知振幅。所以，我们看到的颜色，其实就是不同波长、不同振幅和不同比例的光线在人眼中的反映。\n\n通常，我们所称的自然光都是指太阳光，物体在自然光下呈现的颜色我们称为物体的固有色。但是，自然界中还有其它的光源，比如月光、闪电、灯光、烛光等，而在其它光源的照射下，物体颜色会发生改变，所以，我们平常所看到的颜色都是物体固有色和光源色的结合。\n\n如果照射到物体表面的全部光都被吸收，物体就呈现黑色，如果全部光都被反射，物体就呈现白色，不过，纯粹的黑白只存在于理论中，现实中没有物体可以全部反射或吸收光线。\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#11-%E8%89%B2%E5%BD%A9%E7%9A%84%E4%B8%89%E8%A6%81%E7%B4%A0)1.1 色彩的三要素\n\n就像度量衡一样，色彩也需要一个标定体系，像红、黄、蓝、绿这样的简单命名是模糊的，不足以区分不同的色彩。色彩的标定体系就是色彩的三要素：色相（Hue）、明度（Value）、纯度（Chroma）。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E8%89%B2%E7%9B%B8)色相\n\n字面上理解，就是色彩的相貌，用来区分不同的颜色，比如牛顿分解的光谱色：红、橙、黄、绿、青、蓝、紫，就是七种不同的色相。在我们后面会学到的色相环中，色相包括三原色和由它们按不同比例混合成的各种间色和复色，理论上，色相的划分是没有极限的，但是人眼的感知有极限，人眼只能分辨出大约 180 种不同色相的颜色。还要注意的是，无论色相环包含的色块有多少，每两块之间都有本质的区别，色块越多，仅仅是色差越小。\n\n从光学意义上讲，色相的不同是由光波波长的长短和不同光线的比例决定的。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E6%98%8E%E5%BA%A6)明度\n\n简单的理解，就是色彩的明暗程度。每一种色相都有自己的明暗度变化，而且都以白为最高明度，黑为最低明度。色彩的明度受两个因素影响：一是光源色的强弱，光线越强，色彩明度越高；二是黑与白的介入强度，加入黑色可以降低色彩明度，反之，加入白色可以提升色彩明度。\n\n明度在光学角度的本质是光的振幅（即强弱），所以黑和白的介入也可以这样理解，加入黑增强了物体吸收光线的能力，因此降低了它的明度，而加入白增强了物体反射光线的能力，因此提升了它的明度。\n\n除了色相本身的明度变化外，不同色相本身就有明度的差别，其中，黄色明度最高，紫红色明度最低。纯粹的黑白色也有明度的变化，这就是不同级别的灰色。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%BA%AF%E5%BA%A6)纯度\n\n纯度指的是色彩的鲜灰程度或纯净程度，也叫做饱和度。意思是一个色彩包含该种色素成分的多少，当该色素成分为 100% 时，就是该色相的纯色，所以加入其它任何颜色都会导致纯度的下降，不过，通常降低某色彩的纯度，都是通过混入无彩色系列的黑白灰或混入该色的补色完成的。\n\n从物理的角度讲，一个色相的纯色就是单一波长的光。\n\n黑白灰这三种颜色没有纯度的概念，因此叫做无彩色，其它有纯度的颜色叫做有彩色。\n\n### 1.2 色彩混合\n\n大部分的色彩都可以通过混合其它的色彩得到，但是，一定有几种是最基本的颜色，是不可拆分的，这就是**原色**。光的三原色是红、绿、紫，颜料的三原色是红、黄、蓝。\n\n任意两种原色混合得到的颜色叫**间色**，颜料的三间色是橙、绿、紫。\n\n将间色彼此混合，就形成了**复色**。由于间色本身就是原色混合而成的，复色就意味着是不同比例的原色混合，原色混合的不同比例加上纯度和明度的变化，就构成了我们所看到的丰富的颜色世界。\n\n光线彼此混合，亮度会不断提升，最后形成白色光，这叫做**加色混合**，计算机的显卡就属于 RGB 加色配色系统。通过改变每种原色电子光束的强度，得到深浅不同的色彩，从而合成丰富的色彩；\n\n颜料彼此混合，亮度会不断降低，最后形成黑色，这叫做减色混合。最后一种混合叫做**中性混合**，是利用人眼对空间的感知产生的一种混合方式，包括两种，一种是具有运动特点的旋转混合，比如具有两种颜色的陀螺旋转会呈现这两种颜色的复色，另一种是具有静止距离特点的空间混合，例如马赛克镶嵌画和点彩画。\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#13-%E8%89%B2%E7%9B%B8%E7%8E%AF)1.3 色相环\n\n色相环也称色环，是将色相以一定的变化规律顺序排列形成的一个环，反映了色相之间的数理关系，对色彩的使用具有很大的指导意义。常用的是 RGB 的 3 色相环、瑞士约翰内斯·伊顿的 12 色相环、德国奥斯特瓦尔德和日本色彩研究所的 PCCS 色彩体系的 24 色相环、美国孟赛尔的 100 色相环。所有的色相环都是以 120⁰ 的三原色为基础，在一个完整的圆内等量分割，形成变化均匀的等量过渡色。\n\n下面是伊顿的十二色相环，在 120° 的位置上是 3 个原色，每对原色中间加入一个间色，每对间色中间再加入一个复色，180° 的直径两端叫做互补色。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_伊顿十二色相环.jpg](https://upload-images.jianshu.io/upload_images/20892169-b05e246ae4274e5a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"伊顿十二色相环\")\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#14-%E8%89%B2%E7%AB%8B%E4%BD%93)1.4 色立体\n\n色立体是色彩理论的数学模型，是色相、明度和纯度三元素借助三维空间的表达，也是唯一区别每个颜色的标准。\n\n目前，主要的色立体体系有美国的孟赛尔色立体、德国的奥斯瓦尔德色立体、日本色彩研究所 PCCS 色立体、国际照明委员会 CIE 色立体等。虽然各自之间有一定的区别，但是理解了其中一种，剩下的就都很容易理解了。\n\n以如下的孟塞尔色立体为例，水平的圆环等量分成 10 份，分别是红、黄、绿、蓝、紫 5 个基色和它们的 5 个间色，共构成 10 个基础色域，每个色域再等分成 10 分，总计 100 个色相，这个圆环就是我们之前说的色相环；纯色在圆环的最外层，从最外层到圆心，纯度不断降低，直到变成圆心的灰色，纯度一共有 12 个等级；中间的轴代表无彩色，最下方是黑色，最上方是白色，黑白之间还有按明度变化的 9 个灰色，因此，纵轴就代表了明度的变化，每一种色相和纯度确定的色彩在纵向上都有明度的变化。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_孟塞尔色立体.jpg](https://upload-images.jianshu.io/upload_images/20892169-27b428b3e038f7fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"孟塞尔色立体\")\n\n下面是构造出的完整孟塞尔色立体。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_孟塞尔色立体完整图.png](https://upload-images.jianshu.io/upload_images/20892169-f251fc0a07ff5f11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"孟塞尔色立体完整图\")\n\n## 2\\. 色彩的对比\n\n色彩的对比是将两个以上的色彩放到一起，由于相互作用和相互影响而显现出差异的现象。事实上，对比是构成色彩的必要因素，如果整个世界只有一种颜色，没有彼此的对比，那也就失去了色彩的意义。\n\n根据前面所学的一些概念，色彩的对比可以分为：明度对比、色相对比、纯度对比、冷暖对比、面积对比等。\n\n### 2.1 色相对比\n\n因色相差别而形成的色彩对比称为色相对比。将不同色相的色彩并置在一起，可以使对方的特征更加突出。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_色相对比.png](https://upload-images.jianshu.io/upload_images/20892169-6e74e50c6aad4184.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"色相对比\")\n\n根据各色相在色相环上距离远近的不同，可以形成不同的色相对比，距离越远，对比效果越强烈，相距 180° 的两个色相对比最为强烈\n\n1.  **同类色对比**：色相环上距离在 15° 以内的两个色相的对比，对比的效果一般比较弱，通常还需要拉大明度和纯度来进行区别；\n2.  **邻接色对比**：色相环上距离在 15°-30° 之间的两个色相的对比，这样的两个色相就有了一定的区别，对比效果一般比较统一、和谐、柔和，适合背景处理；\n3.  **类似色对比**：色相环上距离在 60°-90° 之间的两个色相的对比，类似色对比一般显得丰满、活泼，即保持了随和统一的优点，又克服了视觉上不够饱满的缺点；\n4.  **中差色相对比**：色相环上距离在 90° 的两个色相的对比，由于差别比较明确，对比效果比较明快；\n5.  **对比色相**：色相环上距离在 120° 左右的两个色相的对比，对比效果比较强烈、鲜明，但过于刺激易产生视觉疲劳，处理不好容易出现烦躁和不安定的感觉；\n6.  **互补色相**：色相环上距离在 180° 左右的两个色相的对比，是最强烈的对比关系，更富于刺激性，但是画面比较直白，不够含蓄和雅致，同意易导致视觉疲劳。\n\n在我所阅读的几个材料中，对色相对比的分类和称呼各有不同，比如，在有的书籍中同类色指的就是距离 15° 的两个色相对比，因此，上述分类只能作为参考，唯一确定的是，距离越远，对比效果就越强烈。\n\n除了以上的色相对比外，还有两种特殊的色相对比\n\n1.  **全色相对比**：指的是色相环上所有色相都出现，由于人的视觉系统需要全色刺激，这种对比比较协调；\n2.  **有彩色和无彩色的对比**：无彩色又可以称为万能色，无论什么样的有彩色，和无彩色对比都可以呈现和谐的视觉效果。\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#22-%E6%98%8E%E5%BA%A6%E5%AF%B9%E6%AF%94)2.2 明度对比\n\n指因明度差别而形成的色彩对比。两种不同明度的色彩并列时，会使明色更亮，暗色更暗。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_明度对比.png](https://upload-images.jianshu.io/upload_images/20892169-b7ab56ff71cec25e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"明度对比\")\n\n根据孟塞尔色立体，由黑到白等差分为 9 个等级，加上黑白两色一共 11 个等级。0 级为纯黑，明度最低，10 级为纯白，明度最高。\n\n我们将明度在 0-3 级的色彩称为**低明度**，明度在 4-6 级的色彩称为**中明度**，明度在 7-10 级的色彩称为**高明度**。以低明度色彩为主的构成**低明度基调**，以中明度色彩为主的构成**中明度基调**，以高明度色彩为主的构成**高明度基调**。\n\n注：“……为主” 指该色彩在画面上的面积超过 70%，占绝对优势。\n\n同时，我们将明度差在 5 个级别以外的对比称为**强对比（长调对比）**，将明度差在 3-5 个级别内的对比称为**中对比（中调对比）**，将明度差在 3 个级别以内的对比称为**弱对比（短调对比）**。\n\n这样，不同的基调和明度对比程度就构成了一个 9 种明度对比方案，称为明度 9 调，分别是：高长调、高中调、高短调、中长调、中中调、中短调、低长调、低中调、低短调。举个例子，高长调指的就是主色调为中明度，明度差在 5 级以上的对比。一个明度 9 调的例子如下图：\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_纯度对比.png](https://upload-images.jianshu.io/upload_images/20892169-4bbabb89c499f17a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"明度9调\")\n\n### 2.3 纯度对比\n\n因纯度差别形成的色彩对比叫纯度对比，不同纯度的色彩并置，鲜的更鲜，浊的更浊。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_色彩对比与位置的关系.png](https://upload-images.jianshu.io/upload_images/20892169-dbf71248ff3bda78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"纯度对比\")\n\n和明度相似，纯度也有 3 种色调和 3 中等级差：\n\n- 高纯度色彩占 70% 左右叫鲜调（高彩对比）\n- 中纯度色彩占 70% 左右叫中调（中彩对比）\n- 低纯度色彩占 70% 左右叫低调（低彩对比）\n- 纯度差为 8 级以上叫强对比\n- 纯度差在 5-8 级叫中对比\n- 纯度差在 4 级以内叫弱对比\n\n因此，纯度也有九调，分别是：鲜强、鲜中、鲜弱、中强、中中、中弱、灰强、灰中、灰弱。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_纯度9调.jpg](https://upload-images.jianshu.io/upload_images/20892169-34c60b9ada7adc49.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"纯度9调\")\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#24-%E5%86%B7%E6%9A%96%E5%AF%B9%E6%AF%94)2.4 冷暖对比\n\n冷暖色形成的对比，关于冷暖色的定义可参考本文番外部分。根据孟塞尔色相环的十个主要色相，以最暖色橙为暖极，以最冷色蓝为冷极，可划分为 6 个冷暖区\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_冷暖区.png](https://upload-images.jianshu.io/upload_images/20892169-60299b3bfa7ada6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"冷暖区\")\n\n其中，两个冷暖极的对比是最强的，剩下的分三种\n\n1.  强对比：冷极和暖色，暖极和冷色；\n2.  中等对比：暖极、暖色和中性微冷，冷极、冷色和中性暖色；\n3.  弱对比：暖极和暖色；冷极和冷色；暖色和中性微暖色；冷色和中性微冷色；中性微暖色和中性微冷色。\n\n以暖色为主可构成暖色基调，以冷色为主可构成冷色基调，两者给人不同的感觉，如下表\n\n| 冷     | 暖     |\n| ------ | ------ |\n| 阴影   | 阳光   |\n| 透明   | 不透明 |\n| 镇静   | 刺激   |\n| 稀薄   | 稠密   |\n| 空气感 | 土质感 |\n| 远的   | 近的   |\n| 轻的   | 重的   |\n| 潮湿的 | 干燥的 |\n| 理智的 | 感情的 |\n| 流动的 | 静止的 |\n| 冷静的 | 热烈的 |\n\n### 2.5 面积位置对比\n\n形态作为视觉色彩的载体，总有一定的面积，因此面积也会对色彩的表达产生重要影响。\n\n色彩对比与面积的关系有：\n\n1.  色调组合，只有相同面积的色彩次啊能比较出实际的差别，互相之间产生抗衡，对比效果强烈；\n2.  对比双方的属性不变，一方增大面积，取得面积优势，而另一方缩小面积，将会削弱色彩的对比；\n3.  色彩属性不变，随着面积的增大，对视觉的刺激力量加强，反之削弱。因此，色彩的大面积对比可造成炫目效果；\n4.  相同性质与面积的色彩，大面积色稳定性较高，在对比中对它色的错视影响大，反之受它色的错视影响小。\n\n色彩对比和位置的关系有：\n\n1.  对比双方的色彩距离越近，对比效果越强，反之越弱；\n2.  双方互相呈接触、切入状态时，对比效果强烈；\n3.  一色包围另一色时，对比效果最强；\n4.  在作品中，一般将重点色彩设置在视觉中心部位，最易引入注目，如井字形构图的四个交叉点。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_平衡色轮.jpg](https://upload-images.jianshu.io/upload_images/20892169-db35d6e9ff01129a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"色彩对比与位置的关系\")\n\n注意，色彩对比从不是单一方面的，而是多个方面共同作用。\n\n## [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#3-%E8%89%B2%E5%BD%A9%E7%9A%84%E8%B0%83%E5%92%8C)3\\. 色彩的调和\n\n> 对比是手段，调和是目的\n\n色彩的调和是指两种或两种以上的色彩，有秩序、协调和谐的组织在一起，形成和谐统一的色彩搭配。色彩调和是色彩设计的基本法则，色彩调和有两层含义\n\n1.  使有明显差别的色彩经过调整，形成和谐而统一的完美整体；\n2.  合理的组织选择色彩搭配，使其形成具有目的性的美的色彩关系。\n\n调和方式包括：同一调和、类似调和和对比调和。\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#31-%E5%90%8C%E4%B8%80%E8%B0%83%E5%92%8C)3.1 同一调和\n\n同一调和指在色彩的三属性中保持一种属性相同，将另外两种属性进行变化，因此又可以分为同色相调和、同明度调和、同纯度调和，还有一种特殊的无彩色调和。\n\n[图片上传失败...(image-b5b89-1674499821595)]\n\n### 3.2 类似调和\n\n类似调和是类似要素的结合，与同一调和相比，具有稍多的变化，但并没脱离以统一为主的配色原则。\n\n[图片上传失败...(image-518ad2-1674499821595)]\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#33-%E5%AF%B9%E6%AF%94%E8%B0%83%E5%92%8C)3.3 对比调和\n\n对比调和是以强调变化而组成的和谐色彩搭配。在对比调和中，明度、色相、纯度三种要素都处于对比的状态，因此色彩更富于活泼、生动、鲜明的效果。\n\n对比调和的方法有：秩序调和、混入调和、分割调和、呼应调和和面积调和。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%A7%A9%E5%BA%8F%E8%B0%83%E5%92%8C)秩序调和\n\n指在画面组织时时多种色彩呈现一定的秩序规律，常见的有\n\n1.  在伊顿色相环中选择位于等腰三角形、等边三角形、长方形、正方形等几何图形顶点上的色相来组织；\n2.  对色彩的色相、明度、纯度做渐变推移处理，使最强和最弱的色彩间呈多个梯次的等差、等比关系，弱化对比强度；\n3.  九宫调和，将 9 个按顺序排列好的色块放入九宫格中，源自我国传统的「明堂九室」，是多年累积的视觉经验。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E6%B7%B7%E5%85%A5%E8%B0%83%E5%92%8C)混入调和\n\n指遇到不和谐的色彩组合时，选择一个同化元素（色彩要素中的任何一个），将其加入到所有的不同色彩中，使之都含有共同的因素，从而达到和谐的目的。\n\n对于色相，应使所有色彩都具有共同的色彩倾向，比如夕阳下的所有色彩都带有暖暖的橙色，可以看作色相混入的结果；对于纯度，可使所有色彩降低自己的纯度，形成统一的色彩饱和度，比如雨雾中的所有色彩都变得灰蒙蒙的；对于明度，可使所有色彩同时降低或提升明度。\n\n混入调和一般用在色彩调配阶段。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%88%86%E5%89%B2%E8%B0%83%E5%92%8C)分割调和\n\n指遇到不和谐的色彩组合时，在它们之间嵌入金、银、黑、白、灰任何一种颜色，或者嵌入这几种对比色的中间色，使之产生过渡，从而缓解直接对比的强度，使配色达到调和。\n\n分割调和主要用在画面的色彩组织中。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%91%BC%E5%BA%94%E8%B0%83%E5%92%8C)呼应调和\n\n指将合适的色彩添加到原画面中，使新色彩和原有色彩达成彼此呼应的调和关系。呼应的内容同样可以从色彩各要素触发，最常用的是色相的呼应。\n\n注意，呼应的色彩对象多为画面中的主体、中心色，起到呼应作用的色彩多在面积、位置、数量、形状等方面处于弱势。\n\n#### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E9%9D%A2%E7%A7%AF%E8%B0%83%E5%92%8C)面积调和\n\n使某种色彩的面积占据支配地位，可以削弱对比关系。另外，伊顿根据歌德的色彩面积研究成果提出：相等面积比例的红色和绿色能够产生中性的灰色，而黄色和紫色、橙色和蓝色则需要不同的配色比例。用数学比例来显示它们的配比关系为红色:绿色=1:1、黄色:紫色=1/4:3/4、橙色:蓝色=1/3:2/3，这也是著名的“面积对比调和色轮图”。\n\n![https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_类似调和.png](https://upload-images.jianshu.io/upload_images/20892169-3cb89f58ce74c1ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"平衡色轮\")\n\n红色和绿色，黄色和紫色、橙色和蓝色，不论哪一方超过这个比值，都将破坏两者间的调和关系，将两者转化到对比关系中。越接近这种调和比例，对比就越强烈，最终回到最熟悉的红花与绿叶的对比关系之中。\n\n## [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%95%AA%E5%A4%96)番外\n\n### [](https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%86%B7%E6%9A%96%E8%89%B2)冷暖色\n\n从色相环的分布看，红橙色类为暖色系，蓝紫色类为冷色系，黄绿色类为中性，黑色感觉为暖色，白色感觉为冷色。色彩明度和纯度的改变也会影响色彩的冷暖感，明亮色偏冷，深暗色偏暖，纯色保持原色的冷暖感，而纯度的降低会使冷暖感趋于中性化。对于太阳光而言，时间也是影响冷暖的因素，一般来讲，早晨的阳光色彩偏冷，傍晚的阳光色彩偏暖。各种不同的光源提供的颜色本身就有偏向，比如，白炽灯的光源色偏暖黄，荧光灯的光源色偏冷蓝。\n\n### 色调\n\n我们常说一幅画、一张照片或一个场景是什么色调的，色调其实指的是占主导地位的一种视觉因素，色彩的三元素：色相、明度和纯度都可以作为色调，比如，从色相上，可以有红色调、蓝色调、黄色调、绿色调等；从色彩明度上，可以有明亮色调、暗色调等；从色彩纯度上，可以有清色调、浊色调、纯色调、灰色调；甚至从色彩的特性上，可以有暖色调、冷色调、中性色调。\n\n一般情况下，当某种类型色彩占据超过 70% 时，就称为该色调。\n","slug":"paint/paint-color","published":1,"updated":"2023-01-25T13:05:18.435Z","_id":"cldbmnw5i001v04wi5cbr9fsb","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-52e84d1dcfa1f297.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"></a>1. 基本概念</h2><p>首先，有光线才有色彩。物体表面会吸收一部分光线，反射另一部分光线，反射的光线到达我们的眼睛，被视锥细胞（感知颜色的细胞）和视杆细胞（感知明暗的细胞）所接收，再通过神经传输到大脑，我们就产生了颜色的映像，从而具有色彩感。</p>\n<p>我们已经知道，牛顿用三棱镜将光分成了七色，从红到紫正是我们人眼能感知到的颜色范围，从光学的角度看，就是波长从 380 纳米到 780 纳米的光线。低于 380 纳米的，叫做紫外线，高于 780 纳米的，叫做红外线，都是我们人眼无法看到的。</p>\n<p>我们已经知道，光线具有波长和振幅，其中，光波的波长反映光波的频率，给人色彩感，光波的振幅反映光的强弱，给人明暗感。人眼中的两种细胞正是分别感知这两种参数，其中，视锥细胞感知波长，视杆细胞感知振幅。所以，我们看到的颜色，其实就是不同波长、不同振幅和不同比例的光线在人眼中的反映。</p>\n<p>通常，我们所称的自然光都是指太阳光，物体在自然光下呈现的颜色我们称为物体的固有色。但是，自然界中还有其它的光源，比如月光、闪电、灯光、烛光等，而在其它光源的照射下，物体颜色会发生改变，所以，我们平常所看到的颜色都是物体固有色和光源色的结合。</p>\n<p>如果照射到物体表面的全部光都被吸收，物体就呈现黑色，如果全部光都被反射，物体就呈现白色，不过，纯粹的黑白只存在于理论中，现实中没有物体可以全部反射或吸收光线。</p>\n<h3 id=\"1-1-色彩的三要素\"><a href=\"#1-1-色彩的三要素\" class=\"headerlink\" title=\"1.1 色彩的三要素\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#11-%E8%89%B2%E5%BD%A9%E7%9A%84%E4%B8%89%E8%A6%81%E7%B4%A0\"></a>1.1 色彩的三要素</h3><p>就像度量衡一样，色彩也需要一个标定体系，像红、黄、蓝、绿这样的简单命名是模糊的，不足以区分不同的色彩。色彩的标定体系就是色彩的三要素：色相（Hue）、明度（Value）、纯度（Chroma）。</p>\n<h4 id=\"色相\"><a href=\"#色相\" class=\"headerlink\" title=\"色相\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E8%89%B2%E7%9B%B8\"></a>色相</h4><p>字面上理解，就是色彩的相貌，用来区分不同的颜色，比如牛顿分解的光谱色：红、橙、黄、绿、青、蓝、紫，就是七种不同的色相。在我们后面会学到的色相环中，色相包括三原色和由它们按不同比例混合成的各种间色和复色，理论上，色相的划分是没有极限的，但是人眼的感知有极限，人眼只能分辨出大约 180 种不同色相的颜色。还要注意的是，无论色相环包含的色块有多少，每两块之间都有本质的区别，色块越多，仅仅是色差越小。</p>\n<p>从光学意义上讲，色相的不同是由光波波长的长短和不同光线的比例决定的。</p>\n<h4 id=\"明度\"><a href=\"#明度\" class=\"headerlink\" title=\"明度\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E6%98%8E%E5%BA%A6\"></a>明度</h4><p>简单的理解，就是色彩的明暗程度。每一种色相都有自己的明暗度变化，而且都以白为最高明度，黑为最低明度。色彩的明度受两个因素影响：一是光源色的强弱，光线越强，色彩明度越高；二是黑与白的介入强度，加入黑色可以降低色彩明度，反之，加入白色可以提升色彩明度。</p>\n<p>明度在光学角度的本质是光的振幅（即强弱），所以黑和白的介入也可以这样理解，加入黑增强了物体吸收光线的能力，因此降低了它的明度，而加入白增强了物体反射光线的能力，因此提升了它的明度。</p>\n<p>除了色相本身的明度变化外，不同色相本身就有明度的差别，其中，黄色明度最高，紫红色明度最低。纯粹的黑白色也有明度的变化，这就是不同级别的灰色。</p>\n<h4 id=\"纯度\"><a href=\"#纯度\" class=\"headerlink\" title=\"纯度\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%BA%AF%E5%BA%A6\"></a>纯度</h4><p>纯度指的是色彩的鲜灰程度或纯净程度，也叫做饱和度。意思是一个色彩包含该种色素成分的多少，当该色素成分为 100% 时，就是该色相的纯色，所以加入其它任何颜色都会导致纯度的下降，不过，通常降低某色彩的纯度，都是通过混入无彩色系列的黑白灰或混入该色的补色完成的。</p>\n<p>从物理的角度讲，一个色相的纯色就是单一波长的光。</p>\n<p>黑白灰这三种颜色没有纯度的概念，因此叫做无彩色，其它有纯度的颜色叫做有彩色。</p>\n<h3 id=\"1-2-色彩混合\"><a href=\"#1-2-色彩混合\" class=\"headerlink\" title=\"1.2 色彩混合\"></a>1.2 色彩混合</h3><p>大部分的色彩都可以通过混合其它的色彩得到，但是，一定有几种是最基本的颜色，是不可拆分的，这就是<strong>原色</strong>。光的三原色是红、绿、紫，颜料的三原色是红、黄、蓝。</p>\n<p>任意两种原色混合得到的颜色叫<strong>间色</strong>，颜料的三间色是橙、绿、紫。</p>\n<p>将间色彼此混合，就形成了<strong>复色</strong>。由于间色本身就是原色混合而成的，复色就意味着是不同比例的原色混合，原色混合的不同比例加上纯度和明度的变化，就构成了我们所看到的丰富的颜色世界。</p>\n<p>光线彼此混合，亮度会不断提升，最后形成白色光，这叫做<strong>加色混合</strong>，计算机的显卡就属于 RGB 加色配色系统。通过改变每种原色电子光束的强度，得到深浅不同的色彩，从而合成丰富的色彩；</p>\n<p>颜料彼此混合，亮度会不断降低，最后形成黑色，这叫做减色混合。最后一种混合叫做<strong>中性混合</strong>，是利用人眼对空间的感知产生的一种混合方式，包括两种，一种是具有运动特点的旋转混合，比如具有两种颜色的陀螺旋转会呈现这两种颜色的复色，另一种是具有静止距离特点的空间混合，例如马赛克镶嵌画和点彩画。</p>\n<h3 id=\"1-3-色相环\"><a href=\"#1-3-色相环\" class=\"headerlink\" title=\"1.3 色相环\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#13-%E8%89%B2%E7%9B%B8%E7%8E%AF\"></a>1.3 色相环</h3><p>色相环也称色环，是将色相以一定的变化规律顺序排列形成的一个环，反映了色相之间的数理关系，对色彩的使用具有很大的指导意义。常用的是 RGB 的 3 色相环、瑞士约翰内斯·伊顿的 12 色相环、德国奥斯特瓦尔德和日本色彩研究所的 PCCS 色彩体系的 24 色相环、美国孟赛尔的 100 色相环。所有的色相环都是以 120⁰ 的三原色为基础，在一个完整的圆内等量分割，形成变化均匀的等量过渡色。</p>\n<p>下面是伊顿的十二色相环，在 120° 的位置上是 3 个原色，每对原色中间加入一个间色，每对间色中间再加入一个复色，180° 的直径两端叫做互补色。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b05e246ae4274e5a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_伊顿十二色相环.jpg\" title=\"伊顿十二色相环\"></p>\n<h3 id=\"1-4-色立体\"><a href=\"#1-4-色立体\" class=\"headerlink\" title=\"1.4 色立体\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#14-%E8%89%B2%E7%AB%8B%E4%BD%93\"></a>1.4 色立体</h3><p>色立体是色彩理论的数学模型，是色相、明度和纯度三元素借助三维空间的表达，也是唯一区别每个颜色的标准。</p>\n<p>目前，主要的色立体体系有美国的孟赛尔色立体、德国的奥斯瓦尔德色立体、日本色彩研究所 PCCS 色立体、国际照明委员会 CIE 色立体等。虽然各自之间有一定的区别，但是理解了其中一种，剩下的就都很容易理解了。</p>\n<p>以如下的孟塞尔色立体为例，水平的圆环等量分成 10 份，分别是红、黄、绿、蓝、紫 5 个基色和它们的 5 个间色，共构成 10 个基础色域，每个色域再等分成 10 分，总计 100 个色相，这个圆环就是我们之前说的色相环；纯色在圆环的最外层，从最外层到圆心，纯度不断降低，直到变成圆心的灰色，纯度一共有 12 个等级；中间的轴代表无彩色，最下方是黑色，最上方是白色，黑白之间还有按明度变化的 9 个灰色，因此，纵轴就代表了明度的变化，每一种色相和纯度确定的色彩在纵向上都有明度的变化。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-27b428b3e038f7fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_孟塞尔色立体.jpg\" title=\"孟塞尔色立体\"></p>\n<p>下面是构造出的完整孟塞尔色立体。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f251fc0a07ff5f11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_孟塞尔色立体完整图.png\" title=\"孟塞尔色立体完整图\"></p>\n<h2 id=\"2-色彩的对比\"><a href=\"#2-色彩的对比\" class=\"headerlink\" title=\"2. 色彩的对比\"></a>2. 色彩的对比</h2><p>色彩的对比是将两个以上的色彩放到一起，由于相互作用和相互影响而显现出差异的现象。事实上，对比是构成色彩的必要因素，如果整个世界只有一种颜色，没有彼此的对比，那也就失去了色彩的意义。</p>\n<p>根据前面所学的一些概念，色彩的对比可以分为：明度对比、色相对比、纯度对比、冷暖对比、面积对比等。</p>\n<h3 id=\"2-1-色相对比\"><a href=\"#2-1-色相对比\" class=\"headerlink\" title=\"2.1 色相对比\"></a>2.1 色相对比</h3><p>因色相差别而形成的色彩对比称为色相对比。将不同色相的色彩并置在一起，可以使对方的特征更加突出。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6e74e50c6aad4184.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_色相对比.png\" title=\"色相对比\"></p>\n<p>根据各色相在色相环上距离远近的不同，可以形成不同的色相对比，距离越远，对比效果越强烈，相距 180° 的两个色相对比最为强烈</p>\n<ol>\n<li> <strong>同类色对比</strong>：色相环上距离在 15° 以内的两个色相的对比，对比的效果一般比较弱，通常还需要拉大明度和纯度来进行区别；</li>\n<li> <strong>邻接色对比</strong>：色相环上距离在 15°-30° 之间的两个色相的对比，这样的两个色相就有了一定的区别，对比效果一般比较统一、和谐、柔和，适合背景处理；</li>\n<li> <strong>类似色对比</strong>：色相环上距离在 60°-90° 之间的两个色相的对比，类似色对比一般显得丰满、活泼，即保持了随和统一的优点，又克服了视觉上不够饱满的缺点；</li>\n<li> <strong>中差色相对比</strong>：色相环上距离在 90° 的两个色相的对比，由于差别比较明确，对比效果比较明快；</li>\n<li> <strong>对比色相</strong>：色相环上距离在 120° 左右的两个色相的对比，对比效果比较强烈、鲜明，但过于刺激易产生视觉疲劳，处理不好容易出现烦躁和不安定的感觉；</li>\n<li> <strong>互补色相</strong>：色相环上距离在 180° 左右的两个色相的对比，是最强烈的对比关系，更富于刺激性，但是画面比较直白，不够含蓄和雅致，同意易导致视觉疲劳。</li>\n</ol>\n<p>在我所阅读的几个材料中，对色相对比的分类和称呼各有不同，比如，在有的书籍中同类色指的就是距离 15° 的两个色相对比，因此，上述分类只能作为参考，唯一确定的是，距离越远，对比效果就越强烈。</p>\n<p>除了以上的色相对比外，还有两种特殊的色相对比</p>\n<ol>\n<li> <strong>全色相对比</strong>：指的是色相环上所有色相都出现，由于人的视觉系统需要全色刺激，这种对比比较协调；</li>\n<li> <strong>有彩色和无彩色的对比</strong>：无彩色又可以称为万能色，无论什么样的有彩色，和无彩色对比都可以呈现和谐的视觉效果。</li>\n</ol>\n<h3 id=\"2-2-明度对比\"><a href=\"#2-2-明度对比\" class=\"headerlink\" title=\"2.2 明度对比\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#22-%E6%98%8E%E5%BA%A6%E5%AF%B9%E6%AF%94\"></a>2.2 明度对比</h3><p>指因明度差别而形成的色彩对比。两种不同明度的色彩并列时，会使明色更亮，暗色更暗。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b7ab56ff71cec25e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_明度对比.png\" title=\"明度对比\"></p>\n<p>根据孟塞尔色立体，由黑到白等差分为 9 个等级，加上黑白两色一共 11 个等级。0 级为纯黑，明度最低，10 级为纯白，明度最高。</p>\n<p>我们将明度在 0-3 级的色彩称为<strong>低明度</strong>，明度在 4-6 级的色彩称为<strong>中明度</strong>，明度在 7-10 级的色彩称为<strong>高明度</strong>。以低明度色彩为主的构成<strong>低明度基调</strong>，以中明度色彩为主的构成<strong>中明度基调</strong>，以高明度色彩为主的构成<strong>高明度基调</strong>。</p>\n<p>注：“……为主” 指该色彩在画面上的面积超过 70%，占绝对优势。</p>\n<p>同时，我们将明度差在 5 个级别以外的对比称为<strong>强对比（长调对比）</strong>，将明度差在 3-5 个级别内的对比称为<strong>中对比（中调对比）</strong>，将明度差在 3 个级别以内的对比称为<strong>弱对比（短调对比）</strong>。</p>\n<p>这样，不同的基调和明度对比程度就构成了一个 9 种明度对比方案，称为明度 9 调，分别是：高长调、高中调、高短调、中长调、中中调、中短调、低长调、低中调、低短调。举个例子，高长调指的就是主色调为中明度，明度差在 5 级以上的对比。一个明度 9 调的例子如下图：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4bbabb89c499f17a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_纯度对比.png\" title=\"明度9调\"></p>\n<h3 id=\"2-3-纯度对比\"><a href=\"#2-3-纯度对比\" class=\"headerlink\" title=\"2.3 纯度对比\"></a>2.3 纯度对比</h3><p>因纯度差别形成的色彩对比叫纯度对比，不同纯度的色彩并置，鲜的更鲜，浊的更浊。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-dbf71248ff3bda78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_色彩对比与位置的关系.png\" title=\"纯度对比\"></p>\n<p>和明度相似，纯度也有 3 种色调和 3 中等级差：</p>\n<ul>\n<li>高纯度色彩占 70% 左右叫鲜调（高彩对比）</li>\n<li>中纯度色彩占 70% 左右叫中调（中彩对比）</li>\n<li>低纯度色彩占 70% 左右叫低调（低彩对比）</li>\n<li>纯度差为 8 级以上叫强对比</li>\n<li>纯度差在 5-8 级叫中对比</li>\n<li>纯度差在 4 级以内叫弱对比</li>\n</ul>\n<p>因此，纯度也有九调，分别是：鲜强、鲜中、鲜弱、中强、中中、中弱、灰强、灰中、灰弱。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-34c60b9ada7adc49.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_纯度9调.jpg\" title=\"纯度9调\"></p>\n<h3 id=\"2-4-冷暖对比\"><a href=\"#2-4-冷暖对比\" class=\"headerlink\" title=\"2.4 冷暖对比\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#24-%E5%86%B7%E6%9A%96%E5%AF%B9%E6%AF%94\"></a>2.4 冷暖对比</h3><p>冷暖色形成的对比，关于冷暖色的定义可参考本文番外部分。根据孟塞尔色相环的十个主要色相，以最暖色橙为暖极，以最冷色蓝为冷极，可划分为 6 个冷暖区</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-60299b3bfa7ada6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_冷暖区.png\" title=\"冷暖区\"></p>\n<p>其中，两个冷暖极的对比是最强的，剩下的分三种</p>\n<ol>\n<li> 强对比：冷极和暖色，暖极和冷色；</li>\n<li> 中等对比：暖极、暖色和中性微冷，冷极、冷色和中性暖色；</li>\n<li> 弱对比：暖极和暖色；冷极和冷色；暖色和中性微暖色；冷色和中性微冷色；中性微暖色和中性微冷色。</li>\n</ol>\n<p>以暖色为主可构成暖色基调，以冷色为主可构成冷色基调，两者给人不同的感觉，如下表</p>\n<table>\n<thead>\n<tr>\n<th>冷</th>\n<th>暖</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>阴影</td>\n<td>阳光</td>\n</tr>\n<tr>\n<td>透明</td>\n<td>不透明</td>\n</tr>\n<tr>\n<td>镇静</td>\n<td>刺激</td>\n</tr>\n<tr>\n<td>稀薄</td>\n<td>稠密</td>\n</tr>\n<tr>\n<td>空气感</td>\n<td>土质感</td>\n</tr>\n<tr>\n<td>远的</td>\n<td>近的</td>\n</tr>\n<tr>\n<td>轻的</td>\n<td>重的</td>\n</tr>\n<tr>\n<td>潮湿的</td>\n<td>干燥的</td>\n</tr>\n<tr>\n<td>理智的</td>\n<td>感情的</td>\n</tr>\n<tr>\n<td>流动的</td>\n<td>静止的</td>\n</tr>\n<tr>\n<td>冷静的</td>\n<td>热烈的</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-5-面积位置对比\"><a href=\"#2-5-面积位置对比\" class=\"headerlink\" title=\"2.5 面积位置对比\"></a>2.5 面积位置对比</h3><p>形态作为视觉色彩的载体，总有一定的面积，因此面积也会对色彩的表达产生重要影响。</p>\n<p>色彩对比与面积的关系有：</p>\n<ol>\n<li> 色调组合，只有相同面积的色彩次啊能比较出实际的差别，互相之间产生抗衡，对比效果强烈；</li>\n<li> 对比双方的属性不变，一方增大面积，取得面积优势，而另一方缩小面积，将会削弱色彩的对比；</li>\n<li> 色彩属性不变，随着面积的增大，对视觉的刺激力量加强，反之削弱。因此，色彩的大面积对比可造成炫目效果；</li>\n<li> 相同性质与面积的色彩，大面积色稳定性较高，在对比中对它色的错视影响大，反之受它色的错视影响小。</li>\n</ol>\n<p>色彩对比和位置的关系有：</p>\n<ol>\n<li> 对比双方的色彩距离越近，对比效果越强，反之越弱；</li>\n<li> 双方互相呈接触、切入状态时，对比效果强烈；</li>\n<li> 一色包围另一色时，对比效果最强；</li>\n<li> 在作品中，一般将重点色彩设置在视觉中心部位，最易引入注目，如井字形构图的四个交叉点。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-db35d6e9ff01129a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_平衡色轮.jpg\" title=\"色彩对比与位置的关系\"></p>\n<p>注意，色彩对比从不是单一方面的，而是多个方面共同作用。</p>\n<h2 id=\"3-色彩的调和\"><a href=\"#3-色彩的调和\" class=\"headerlink\" title=\"3. 色彩的调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#3-%E8%89%B2%E5%BD%A9%E7%9A%84%E8%B0%83%E5%92%8C\"></a>3. 色彩的调和</h2><blockquote>\n<p>对比是手段，调和是目的</p>\n</blockquote>\n<p>色彩的调和是指两种或两种以上的色彩，有秩序、协调和谐的组织在一起，形成和谐统一的色彩搭配。色彩调和是色彩设计的基本法则，色彩调和有两层含义</p>\n<ol>\n<li> 使有明显差别的色彩经过调整，形成和谐而统一的完美整体；</li>\n<li> 合理的组织选择色彩搭配，使其形成具有目的性的美的色彩关系。</li>\n</ol>\n<p>调和方式包括：同一调和、类似调和和对比调和。</p>\n<h3 id=\"3-1-同一调和\"><a href=\"#3-1-同一调和\" class=\"headerlink\" title=\"3.1 同一调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#31-%E5%90%8C%E4%B8%80%E8%B0%83%E5%92%8C\"></a>3.1 同一调和</h3><p>同一调和指在色彩的三属性中保持一种属性相同，将另外两种属性进行变化，因此又可以分为同色相调和、同明度调和、同纯度调和，还有一种特殊的无彩色调和。</p>\n<p>[图片上传失败…(image-b5b89-1674499821595)]</p>\n<h3 id=\"3-2-类似调和\"><a href=\"#3-2-类似调和\" class=\"headerlink\" title=\"3.2 类似调和\"></a>3.2 类似调和</h3><p>类似调和是类似要素的结合，与同一调和相比，具有稍多的变化，但并没脱离以统一为主的配色原则。</p>\n<p>[图片上传失败…(image-518ad2-1674499821595)]</p>\n<h3 id=\"3-3-对比调和\"><a href=\"#3-3-对比调和\" class=\"headerlink\" title=\"3.3 对比调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#33-%E5%AF%B9%E6%AF%94%E8%B0%83%E5%92%8C\"></a>3.3 对比调和</h3><p>对比调和是以强调变化而组成的和谐色彩搭配。在对比调和中，明度、色相、纯度三种要素都处于对比的状态，因此色彩更富于活泼、生动、鲜明的效果。</p>\n<p>对比调和的方法有：秩序调和、混入调和、分割调和、呼应调和和面积调和。</p>\n<h4 id=\"秩序调和\"><a href=\"#秩序调和\" class=\"headerlink\" title=\"秩序调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%A7%A9%E5%BA%8F%E8%B0%83%E5%92%8C\"></a>秩序调和</h4><p>指在画面组织时时多种色彩呈现一定的秩序规律，常见的有</p>\n<ol>\n<li> 在伊顿色相环中选择位于等腰三角形、等边三角形、长方形、正方形等几何图形顶点上的色相来组织；</li>\n<li> 对色彩的色相、明度、纯度做渐变推移处理，使最强和最弱的色彩间呈多个梯次的等差、等比关系，弱化对比强度；</li>\n<li> 九宫调和，将 9 个按顺序排列好的色块放入九宫格中，源自我国传统的「明堂九室」，是多年累积的视觉经验。</li>\n</ol>\n<h4 id=\"混入调和\"><a href=\"#混入调和\" class=\"headerlink\" title=\"混入调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E6%B7%B7%E5%85%A5%E8%B0%83%E5%92%8C\"></a>混入调和</h4><p>指遇到不和谐的色彩组合时，选择一个同化元素（色彩要素中的任何一个），将其加入到所有的不同色彩中，使之都含有共同的因素，从而达到和谐的目的。</p>\n<p>对于色相，应使所有色彩都具有共同的色彩倾向，比如夕阳下的所有色彩都带有暖暖的橙色，可以看作色相混入的结果；对于纯度，可使所有色彩降低自己的纯度，形成统一的色彩饱和度，比如雨雾中的所有色彩都变得灰蒙蒙的；对于明度，可使所有色彩同时降低或提升明度。</p>\n<p>混入调和一般用在色彩调配阶段。</p>\n<h4 id=\"分割调和\"><a href=\"#分割调和\" class=\"headerlink\" title=\"分割调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%88%86%E5%89%B2%E8%B0%83%E5%92%8C\"></a>分割调和</h4><p>指遇到不和谐的色彩组合时，在它们之间嵌入金、银、黑、白、灰任何一种颜色，或者嵌入这几种对比色的中间色，使之产生过渡，从而缓解直接对比的强度，使配色达到调和。</p>\n<p>分割调和主要用在画面的色彩组织中。</p>\n<h4 id=\"呼应调和\"><a href=\"#呼应调和\" class=\"headerlink\" title=\"呼应调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%91%BC%E5%BA%94%E8%B0%83%E5%92%8C\"></a>呼应调和</h4><p>指将合适的色彩添加到原画面中，使新色彩和原有色彩达成彼此呼应的调和关系。呼应的内容同样可以从色彩各要素触发，最常用的是色相的呼应。</p>\n<p>注意，呼应的色彩对象多为画面中的主体、中心色，起到呼应作用的色彩多在面积、位置、数量、形状等方面处于弱势。</p>\n<h4 id=\"面积调和\"><a href=\"#面积调和\" class=\"headerlink\" title=\"面积调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E9%9D%A2%E7%A7%AF%E8%B0%83%E5%92%8C\"></a>面积调和</h4><p>使某种色彩的面积占据支配地位，可以削弱对比关系。另外，伊顿根据歌德的色彩面积研究成果提出：相等面积比例的红色和绿色能够产生中性的灰色，而黄色和紫色、橙色和蓝色则需要不同的配色比例。用数学比例来显示它们的配比关系为红色:绿色=1:1、黄色:紫色=1/4:3/4、橙色:蓝色=1/3:2/3，这也是著名的“面积对比调和色轮图”。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3cb89f58ce74c1ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_类似调和.png\" title=\"平衡色轮\"></p>\n<p>红色和绿色，黄色和紫色、橙色和蓝色，不论哪一方超过这个比值，都将破坏两者间的调和关系，将两者转化到对比关系中。越接近这种调和比例，对比就越强烈，最终回到最熟悉的红花与绿叶的对比关系之中。</p>\n<h2 id=\"番外\"><a href=\"#番外\" class=\"headerlink\" title=\"番外\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%95%AA%E5%A4%96\"></a>番外</h2><h3 id=\"冷暖色\"><a href=\"#冷暖色\" class=\"headerlink\" title=\"冷暖色\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%86%B7%E6%9A%96%E8%89%B2\"></a>冷暖色</h3><p>从色相环的分布看，红橙色类为暖色系，蓝紫色类为冷色系，黄绿色类为中性，黑色感觉为暖色，白色感觉为冷色。色彩明度和纯度的改变也会影响色彩的冷暖感，明亮色偏冷，深暗色偏暖，纯色保持原色的冷暖感，而纯度的降低会使冷暖感趋于中性化。对于太阳光而言，时间也是影响冷暖的因素，一般来讲，早晨的阳光色彩偏冷，傍晚的阳光色彩偏暖。各种不同的光源提供的颜色本身就有偏向，比如，白炽灯的光源色偏暖黄，荧光灯的光源色偏冷蓝。</p>\n<h3 id=\"色调\"><a href=\"#色调\" class=\"headerlink\" title=\"色调\"></a>色调</h3><p>我们常说一幅画、一张照片或一个场景是什么色调的，色调其实指的是占主导地位的一种视觉因素，色彩的三元素：色相、明度和纯度都可以作为色调，比如，从色相上，可以有红色调、蓝色调、黄色调、绿色调等；从色彩明度上，可以有明亮色调、暗色调等；从色彩纯度上，可以有清色调、浊色调、纯色调、灰色调；甚至从色彩的特性上，可以有暖色调、冷色调、中性色调。</p>\n<p>一般情况下，当某种类型色彩占据超过 70% 时，就称为该色调。</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-52e84d1dcfa1f297.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"></a>1. 基本概念</h2><p>首先，有光线才有色彩。物体表面会吸收一部分光线，反射另一部分光线，反射的光线到达我们的眼睛，被视锥细胞（感知颜色的细胞）和视杆细胞（感知明暗的细胞）所接收，再通过神经传输到大脑，我们就产生了颜色的映像，从而具有色彩感。</p>\n<p>我们已经知道，牛顿用三棱镜将光分成了七色，从红到紫正是我们人眼能感知到的颜色范围，从光学的角度看，就是波长从 380 纳米到 780 纳米的光线。低于 380 纳米的，叫做紫外线，高于 780 纳米的，叫做红外线，都是我们人眼无法看到的。</p>\n<p>我们已经知道，光线具有波长和振幅，其中，光波的波长反映光波的频率，给人色彩感，光波的振幅反映光的强弱，给人明暗感。人眼中的两种细胞正是分别感知这两种参数，其中，视锥细胞感知波长，视杆细胞感知振幅。所以，我们看到的颜色，其实就是不同波长、不同振幅和不同比例的光线在人眼中的反映。</p>\n<p>通常，我们所称的自然光都是指太阳光，物体在自然光下呈现的颜色我们称为物体的固有色。但是，自然界中还有其它的光源，比如月光、闪电、灯光、烛光等，而在其它光源的照射下，物体颜色会发生改变，所以，我们平常所看到的颜色都是物体固有色和光源色的结合。</p>\n<p>如果照射到物体表面的全部光都被吸收，物体就呈现黑色，如果全部光都被反射，物体就呈现白色，不过，纯粹的黑白只存在于理论中，现实中没有物体可以全部反射或吸收光线。</p>\n<h3 id=\"1-1-色彩的三要素\"><a href=\"#1-1-色彩的三要素\" class=\"headerlink\" title=\"1.1 色彩的三要素\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#11-%E8%89%B2%E5%BD%A9%E7%9A%84%E4%B8%89%E8%A6%81%E7%B4%A0\"></a>1.1 色彩的三要素</h3><p>就像度量衡一样，色彩也需要一个标定体系，像红、黄、蓝、绿这样的简单命名是模糊的，不足以区分不同的色彩。色彩的标定体系就是色彩的三要素：色相（Hue）、明度（Value）、纯度（Chroma）。</p>\n<h4 id=\"色相\"><a href=\"#色相\" class=\"headerlink\" title=\"色相\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E8%89%B2%E7%9B%B8\"></a>色相</h4><p>字面上理解，就是色彩的相貌，用来区分不同的颜色，比如牛顿分解的光谱色：红、橙、黄、绿、青、蓝、紫，就是七种不同的色相。在我们后面会学到的色相环中，色相包括三原色和由它们按不同比例混合成的各种间色和复色，理论上，色相的划分是没有极限的，但是人眼的感知有极限，人眼只能分辨出大约 180 种不同色相的颜色。还要注意的是，无论色相环包含的色块有多少，每两块之间都有本质的区别，色块越多，仅仅是色差越小。</p>\n<p>从光学意义上讲，色相的不同是由光波波长的长短和不同光线的比例决定的。</p>\n<h4 id=\"明度\"><a href=\"#明度\" class=\"headerlink\" title=\"明度\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E6%98%8E%E5%BA%A6\"></a>明度</h4><p>简单的理解，就是色彩的明暗程度。每一种色相都有自己的明暗度变化，而且都以白为最高明度，黑为最低明度。色彩的明度受两个因素影响：一是光源色的强弱，光线越强，色彩明度越高；二是黑与白的介入强度，加入黑色可以降低色彩明度，反之，加入白色可以提升色彩明度。</p>\n<p>明度在光学角度的本质是光的振幅（即强弱），所以黑和白的介入也可以这样理解，加入黑增强了物体吸收光线的能力，因此降低了它的明度，而加入白增强了物体反射光线的能力，因此提升了它的明度。</p>\n<p>除了色相本身的明度变化外，不同色相本身就有明度的差别，其中，黄色明度最高，紫红色明度最低。纯粹的黑白色也有明度的变化，这就是不同级别的灰色。</p>\n<h4 id=\"纯度\"><a href=\"#纯度\" class=\"headerlink\" title=\"纯度\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%BA%AF%E5%BA%A6\"></a>纯度</h4><p>纯度指的是色彩的鲜灰程度或纯净程度，也叫做饱和度。意思是一个色彩包含该种色素成分的多少，当该色素成分为 100% 时，就是该色相的纯色，所以加入其它任何颜色都会导致纯度的下降，不过，通常降低某色彩的纯度，都是通过混入无彩色系列的黑白灰或混入该色的补色完成的。</p>\n<p>从物理的角度讲，一个色相的纯色就是单一波长的光。</p>\n<p>黑白灰这三种颜色没有纯度的概念，因此叫做无彩色，其它有纯度的颜色叫做有彩色。</p>\n<h3 id=\"1-2-色彩混合\"><a href=\"#1-2-色彩混合\" class=\"headerlink\" title=\"1.2 色彩混合\"></a>1.2 色彩混合</h3><p>大部分的色彩都可以通过混合其它的色彩得到，但是，一定有几种是最基本的颜色，是不可拆分的，这就是<strong>原色</strong>。光的三原色是红、绿、紫，颜料的三原色是红、黄、蓝。</p>\n<p>任意两种原色混合得到的颜色叫<strong>间色</strong>，颜料的三间色是橙、绿、紫。</p>\n<p>将间色彼此混合，就形成了<strong>复色</strong>。由于间色本身就是原色混合而成的，复色就意味着是不同比例的原色混合，原色混合的不同比例加上纯度和明度的变化，就构成了我们所看到的丰富的颜色世界。</p>\n<p>光线彼此混合，亮度会不断提升，最后形成白色光，这叫做<strong>加色混合</strong>，计算机的显卡就属于 RGB 加色配色系统。通过改变每种原色电子光束的强度，得到深浅不同的色彩，从而合成丰富的色彩；</p>\n<p>颜料彼此混合，亮度会不断降低，最后形成黑色，这叫做减色混合。最后一种混合叫做<strong>中性混合</strong>，是利用人眼对空间的感知产生的一种混合方式，包括两种，一种是具有运动特点的旋转混合，比如具有两种颜色的陀螺旋转会呈现这两种颜色的复色，另一种是具有静止距离特点的空间混合，例如马赛克镶嵌画和点彩画。</p>\n<h3 id=\"1-3-色相环\"><a href=\"#1-3-色相环\" class=\"headerlink\" title=\"1.3 色相环\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#13-%E8%89%B2%E7%9B%B8%E7%8E%AF\"></a>1.3 色相环</h3><p>色相环也称色环，是将色相以一定的变化规律顺序排列形成的一个环，反映了色相之间的数理关系，对色彩的使用具有很大的指导意义。常用的是 RGB 的 3 色相环、瑞士约翰内斯·伊顿的 12 色相环、德国奥斯特瓦尔德和日本色彩研究所的 PCCS 色彩体系的 24 色相环、美国孟赛尔的 100 色相环。所有的色相环都是以 120⁰ 的三原色为基础，在一个完整的圆内等量分割，形成变化均匀的等量过渡色。</p>\n<p>下面是伊顿的十二色相环，在 120° 的位置上是 3 个原色，每对原色中间加入一个间色，每对间色中间再加入一个复色，180° 的直径两端叫做互补色。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b05e246ae4274e5a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_伊顿十二色相环.jpg\" title=\"伊顿十二色相环\"></p>\n<h3 id=\"1-4-色立体\"><a href=\"#1-4-色立体\" class=\"headerlink\" title=\"1.4 色立体\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#14-%E8%89%B2%E7%AB%8B%E4%BD%93\"></a>1.4 色立体</h3><p>色立体是色彩理论的数学模型，是色相、明度和纯度三元素借助三维空间的表达，也是唯一区别每个颜色的标准。</p>\n<p>目前，主要的色立体体系有美国的孟赛尔色立体、德国的奥斯瓦尔德色立体、日本色彩研究所 PCCS 色立体、国际照明委员会 CIE 色立体等。虽然各自之间有一定的区别，但是理解了其中一种，剩下的就都很容易理解了。</p>\n<p>以如下的孟塞尔色立体为例，水平的圆环等量分成 10 份，分别是红、黄、绿、蓝、紫 5 个基色和它们的 5 个间色，共构成 10 个基础色域，每个色域再等分成 10 分，总计 100 个色相，这个圆环就是我们之前说的色相环；纯色在圆环的最外层，从最外层到圆心，纯度不断降低，直到变成圆心的灰色，纯度一共有 12 个等级；中间的轴代表无彩色，最下方是黑色，最上方是白色，黑白之间还有按明度变化的 9 个灰色，因此，纵轴就代表了明度的变化，每一种色相和纯度确定的色彩在纵向上都有明度的变化。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-27b428b3e038f7fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_孟塞尔色立体.jpg\" title=\"孟塞尔色立体\"></p>\n<p>下面是构造出的完整孟塞尔色立体。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f251fc0a07ff5f11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_孟塞尔色立体完整图.png\" title=\"孟塞尔色立体完整图\"></p>\n<h2 id=\"2-色彩的对比\"><a href=\"#2-色彩的对比\" class=\"headerlink\" title=\"2. 色彩的对比\"></a>2. 色彩的对比</h2><p>色彩的对比是将两个以上的色彩放到一起，由于相互作用和相互影响而显现出差异的现象。事实上，对比是构成色彩的必要因素，如果整个世界只有一种颜色，没有彼此的对比，那也就失去了色彩的意义。</p>\n<p>根据前面所学的一些概念，色彩的对比可以分为：明度对比、色相对比、纯度对比、冷暖对比、面积对比等。</p>\n<h3 id=\"2-1-色相对比\"><a href=\"#2-1-色相对比\" class=\"headerlink\" title=\"2.1 色相对比\"></a>2.1 色相对比</h3><p>因色相差别而形成的色彩对比称为色相对比。将不同色相的色彩并置在一起，可以使对方的特征更加突出。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6e74e50c6aad4184.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_色相对比.png\" title=\"色相对比\"></p>\n<p>根据各色相在色相环上距离远近的不同，可以形成不同的色相对比，距离越远，对比效果越强烈，相距 180° 的两个色相对比最为强烈</p>\n<ol>\n<li> <strong>同类色对比</strong>：色相环上距离在 15° 以内的两个色相的对比，对比的效果一般比较弱，通常还需要拉大明度和纯度来进行区别；</li>\n<li> <strong>邻接色对比</strong>：色相环上距离在 15°-30° 之间的两个色相的对比，这样的两个色相就有了一定的区别，对比效果一般比较统一、和谐、柔和，适合背景处理；</li>\n<li> <strong>类似色对比</strong>：色相环上距离在 60°-90° 之间的两个色相的对比，类似色对比一般显得丰满、活泼，即保持了随和统一的优点，又克服了视觉上不够饱满的缺点；</li>\n<li> <strong>中差色相对比</strong>：色相环上距离在 90° 的两个色相的对比，由于差别比较明确，对比效果比较明快；</li>\n<li> <strong>对比色相</strong>：色相环上距离在 120° 左右的两个色相的对比，对比效果比较强烈、鲜明，但过于刺激易产生视觉疲劳，处理不好容易出现烦躁和不安定的感觉；</li>\n<li> <strong>互补色相</strong>：色相环上距离在 180° 左右的两个色相的对比，是最强烈的对比关系，更富于刺激性，但是画面比较直白，不够含蓄和雅致，同意易导致视觉疲劳。</li>\n</ol>\n<p>在我所阅读的几个材料中，对色相对比的分类和称呼各有不同，比如，在有的书籍中同类色指的就是距离 15° 的两个色相对比，因此，上述分类只能作为参考，唯一确定的是，距离越远，对比效果就越强烈。</p>\n<p>除了以上的色相对比外，还有两种特殊的色相对比</p>\n<ol>\n<li> <strong>全色相对比</strong>：指的是色相环上所有色相都出现，由于人的视觉系统需要全色刺激，这种对比比较协调；</li>\n<li> <strong>有彩色和无彩色的对比</strong>：无彩色又可以称为万能色，无论什么样的有彩色，和无彩色对比都可以呈现和谐的视觉效果。</li>\n</ol>\n<h3 id=\"2-2-明度对比\"><a href=\"#2-2-明度对比\" class=\"headerlink\" title=\"2.2 明度对比\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#22-%E6%98%8E%E5%BA%A6%E5%AF%B9%E6%AF%94\"></a>2.2 明度对比</h3><p>指因明度差别而形成的色彩对比。两种不同明度的色彩并列时，会使明色更亮，暗色更暗。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b7ab56ff71cec25e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_明度对比.png\" title=\"明度对比\"></p>\n<p>根据孟塞尔色立体，由黑到白等差分为 9 个等级，加上黑白两色一共 11 个等级。0 级为纯黑，明度最低，10 级为纯白，明度最高。</p>\n<p>我们将明度在 0-3 级的色彩称为<strong>低明度</strong>，明度在 4-6 级的色彩称为<strong>中明度</strong>，明度在 7-10 级的色彩称为<strong>高明度</strong>。以低明度色彩为主的构成<strong>低明度基调</strong>，以中明度色彩为主的构成<strong>中明度基调</strong>，以高明度色彩为主的构成<strong>高明度基调</strong>。</p>\n<p>注：“……为主” 指该色彩在画面上的面积超过 70%，占绝对优势。</p>\n<p>同时，我们将明度差在 5 个级别以外的对比称为<strong>强对比（长调对比）</strong>，将明度差在 3-5 个级别内的对比称为<strong>中对比（中调对比）</strong>，将明度差在 3 个级别以内的对比称为<strong>弱对比（短调对比）</strong>。</p>\n<p>这样，不同的基调和明度对比程度就构成了一个 9 种明度对比方案，称为明度 9 调，分别是：高长调、高中调、高短调、中长调、中中调、中短调、低长调、低中调、低短调。举个例子，高长调指的就是主色调为中明度，明度差在 5 级以上的对比。一个明度 9 调的例子如下图：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4bbabb89c499f17a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_纯度对比.png\" title=\"明度9调\"></p>\n<h3 id=\"2-3-纯度对比\"><a href=\"#2-3-纯度对比\" class=\"headerlink\" title=\"2.3 纯度对比\"></a>2.3 纯度对比</h3><p>因纯度差别形成的色彩对比叫纯度对比，不同纯度的色彩并置，鲜的更鲜，浊的更浊。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-dbf71248ff3bda78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_色彩对比与位置的关系.png\" title=\"纯度对比\"></p>\n<p>和明度相似，纯度也有 3 种色调和 3 中等级差：</p>\n<ul>\n<li>高纯度色彩占 70% 左右叫鲜调（高彩对比）</li>\n<li>中纯度色彩占 70% 左右叫中调（中彩对比）</li>\n<li>低纯度色彩占 70% 左右叫低调（低彩对比）</li>\n<li>纯度差为 8 级以上叫强对比</li>\n<li>纯度差在 5-8 级叫中对比</li>\n<li>纯度差在 4 级以内叫弱对比</li>\n</ul>\n<p>因此，纯度也有九调，分别是：鲜强、鲜中、鲜弱、中强、中中、中弱、灰强、灰中、灰弱。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-34c60b9ada7adc49.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_纯度9调.jpg\" title=\"纯度9调\"></p>\n<h3 id=\"2-4-冷暖对比\"><a href=\"#2-4-冷暖对比\" class=\"headerlink\" title=\"2.4 冷暖对比\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#24-%E5%86%B7%E6%9A%96%E5%AF%B9%E6%AF%94\"></a>2.4 冷暖对比</h3><p>冷暖色形成的对比，关于冷暖色的定义可参考本文番外部分。根据孟塞尔色相环的十个主要色相，以最暖色橙为暖极，以最冷色蓝为冷极，可划分为 6 个冷暖区</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-60299b3bfa7ada6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_冷暖区.png\" title=\"冷暖区\"></p>\n<p>其中，两个冷暖极的对比是最强的，剩下的分三种</p>\n<ol>\n<li> 强对比：冷极和暖色，暖极和冷色；</li>\n<li> 中等对比：暖极、暖色和中性微冷，冷极、冷色和中性暖色；</li>\n<li> 弱对比：暖极和暖色；冷极和冷色；暖色和中性微暖色；冷色和中性微冷色；中性微暖色和中性微冷色。</li>\n</ol>\n<p>以暖色为主可构成暖色基调，以冷色为主可构成冷色基调，两者给人不同的感觉，如下表</p>\n<table>\n<thead>\n<tr>\n<th>冷</th>\n<th>暖</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>阴影</td>\n<td>阳光</td>\n</tr>\n<tr>\n<td>透明</td>\n<td>不透明</td>\n</tr>\n<tr>\n<td>镇静</td>\n<td>刺激</td>\n</tr>\n<tr>\n<td>稀薄</td>\n<td>稠密</td>\n</tr>\n<tr>\n<td>空气感</td>\n<td>土质感</td>\n</tr>\n<tr>\n<td>远的</td>\n<td>近的</td>\n</tr>\n<tr>\n<td>轻的</td>\n<td>重的</td>\n</tr>\n<tr>\n<td>潮湿的</td>\n<td>干燥的</td>\n</tr>\n<tr>\n<td>理智的</td>\n<td>感情的</td>\n</tr>\n<tr>\n<td>流动的</td>\n<td>静止的</td>\n</tr>\n<tr>\n<td>冷静的</td>\n<td>热烈的</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-5-面积位置对比\"><a href=\"#2-5-面积位置对比\" class=\"headerlink\" title=\"2.5 面积位置对比\"></a>2.5 面积位置对比</h3><p>形态作为视觉色彩的载体，总有一定的面积，因此面积也会对色彩的表达产生重要影响。</p>\n<p>色彩对比与面积的关系有：</p>\n<ol>\n<li> 色调组合，只有相同面积的色彩次啊能比较出实际的差别，互相之间产生抗衡，对比效果强烈；</li>\n<li> 对比双方的属性不变，一方增大面积，取得面积优势，而另一方缩小面积，将会削弱色彩的对比；</li>\n<li> 色彩属性不变，随着面积的增大，对视觉的刺激力量加强，反之削弱。因此，色彩的大面积对比可造成炫目效果；</li>\n<li> 相同性质与面积的色彩，大面积色稳定性较高，在对比中对它色的错视影响大，反之受它色的错视影响小。</li>\n</ol>\n<p>色彩对比和位置的关系有：</p>\n<ol>\n<li> 对比双方的色彩距离越近，对比效果越强，反之越弱；</li>\n<li> 双方互相呈接触、切入状态时，对比效果强烈；</li>\n<li> 一色包围另一色时，对比效果最强；</li>\n<li> 在作品中，一般将重点色彩设置在视觉中心部位，最易引入注目，如井字形构图的四个交叉点。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-db35d6e9ff01129a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_平衡色轮.jpg\" title=\"色彩对比与位置的关系\"></p>\n<p>注意，色彩对比从不是单一方面的，而是多个方面共同作用。</p>\n<h2 id=\"3-色彩的调和\"><a href=\"#3-色彩的调和\" class=\"headerlink\" title=\"3. 色彩的调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#3-%E8%89%B2%E5%BD%A9%E7%9A%84%E8%B0%83%E5%92%8C\"></a>3. 色彩的调和</h2><blockquote>\n<p>对比是手段，调和是目的</p>\n</blockquote>\n<p>色彩的调和是指两种或两种以上的色彩，有秩序、协调和谐的组织在一起，形成和谐统一的色彩搭配。色彩调和是色彩设计的基本法则，色彩调和有两层含义</p>\n<ol>\n<li> 使有明显差别的色彩经过调整，形成和谐而统一的完美整体；</li>\n<li> 合理的组织选择色彩搭配，使其形成具有目的性的美的色彩关系。</li>\n</ol>\n<p>调和方式包括：同一调和、类似调和和对比调和。</p>\n<h3 id=\"3-1-同一调和\"><a href=\"#3-1-同一调和\" class=\"headerlink\" title=\"3.1 同一调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#31-%E5%90%8C%E4%B8%80%E8%B0%83%E5%92%8C\"></a>3.1 同一调和</h3><p>同一调和指在色彩的三属性中保持一种属性相同，将另外两种属性进行变化，因此又可以分为同色相调和、同明度调和、同纯度调和，还有一种特殊的无彩色调和。</p>\n<p>[图片上传失败…(image-b5b89-1674499821595)]</p>\n<h3 id=\"3-2-类似调和\"><a href=\"#3-2-类似调和\" class=\"headerlink\" title=\"3.2 类似调和\"></a>3.2 类似调和</h3><p>类似调和是类似要素的结合，与同一调和相比，具有稍多的变化，但并没脱离以统一为主的配色原则。</p>\n<p>[图片上传失败…(image-518ad2-1674499821595)]</p>\n<h3 id=\"3-3-对比调和\"><a href=\"#3-3-对比调和\" class=\"headerlink\" title=\"3.3 对比调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#33-%E5%AF%B9%E6%AF%94%E8%B0%83%E5%92%8C\"></a>3.3 对比调和</h3><p>对比调和是以强调变化而组成的和谐色彩搭配。在对比调和中，明度、色相、纯度三种要素都处于对比的状态，因此色彩更富于活泼、生动、鲜明的效果。</p>\n<p>对比调和的方法有：秩序调和、混入调和、分割调和、呼应调和和面积调和。</p>\n<h4 id=\"秩序调和\"><a href=\"#秩序调和\" class=\"headerlink\" title=\"秩序调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%A7%A9%E5%BA%8F%E8%B0%83%E5%92%8C\"></a>秩序调和</h4><p>指在画面组织时时多种色彩呈现一定的秩序规律，常见的有</p>\n<ol>\n<li> 在伊顿色相环中选择位于等腰三角形、等边三角形、长方形、正方形等几何图形顶点上的色相来组织；</li>\n<li> 对色彩的色相、明度、纯度做渐变推移处理，使最强和最弱的色彩间呈多个梯次的等差、等比关系，弱化对比强度；</li>\n<li> 九宫调和，将 9 个按顺序排列好的色块放入九宫格中，源自我国传统的「明堂九室」，是多年累积的视觉经验。</li>\n</ol>\n<h4 id=\"混入调和\"><a href=\"#混入调和\" class=\"headerlink\" title=\"混入调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E6%B7%B7%E5%85%A5%E8%B0%83%E5%92%8C\"></a>混入调和</h4><p>指遇到不和谐的色彩组合时，选择一个同化元素（色彩要素中的任何一个），将其加入到所有的不同色彩中，使之都含有共同的因素，从而达到和谐的目的。</p>\n<p>对于色相，应使所有色彩都具有共同的色彩倾向，比如夕阳下的所有色彩都带有暖暖的橙色，可以看作色相混入的结果；对于纯度，可使所有色彩降低自己的纯度，形成统一的色彩饱和度，比如雨雾中的所有色彩都变得灰蒙蒙的；对于明度，可使所有色彩同时降低或提升明度。</p>\n<p>混入调和一般用在色彩调配阶段。</p>\n<h4 id=\"分割调和\"><a href=\"#分割调和\" class=\"headerlink\" title=\"分割调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%88%86%E5%89%B2%E8%B0%83%E5%92%8C\"></a>分割调和</h4><p>指遇到不和谐的色彩组合时，在它们之间嵌入金、银、黑、白、灰任何一种颜色，或者嵌入这几种对比色的中间色，使之产生过渡，从而缓解直接对比的强度，使配色达到调和。</p>\n<p>分割调和主要用在画面的色彩组织中。</p>\n<h4 id=\"呼应调和\"><a href=\"#呼应调和\" class=\"headerlink\" title=\"呼应调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%91%BC%E5%BA%94%E8%B0%83%E5%92%8C\"></a>呼应调和</h4><p>指将合适的色彩添加到原画面中，使新色彩和原有色彩达成彼此呼应的调和关系。呼应的内容同样可以从色彩各要素触发，最常用的是色相的呼应。</p>\n<p>注意，呼应的色彩对象多为画面中的主体、中心色，起到呼应作用的色彩多在面积、位置、数量、形状等方面处于弱势。</p>\n<h4 id=\"面积调和\"><a href=\"#面积调和\" class=\"headerlink\" title=\"面积调和\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E9%9D%A2%E7%A7%AF%E8%B0%83%E5%92%8C\"></a>面积调和</h4><p>使某种色彩的面积占据支配地位，可以削弱对比关系。另外，伊顿根据歌德的色彩面积研究成果提出：相等面积比例的红色和绿色能够产生中性的灰色，而黄色和紫色、橙色和蓝色则需要不同的配色比例。用数学比例来显示它们的配比关系为红色:绿色=1:1、黄色:紫色=1/4:3/4、橙色:蓝色=1/3:2/3，这也是著名的“面积对比调和色轮图”。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3cb89f58ce74c1ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"https://picped-1301226557.cos.ap-beijing.myqcloud.com/SH_20201202_类似调和.png\" title=\"平衡色轮\"></p>\n<p>红色和绿色，黄色和紫色、橙色和蓝色，不论哪一方超过这个比值，都将破坏两者间的调和关系，将两者转化到对比关系中。越接近这种调和比例，对比就越强烈，最终回到最熟悉的红花与绿叶的对比关系之中。</p>\n<h2 id=\"番外\"><a href=\"#番外\" class=\"headerlink\" title=\"番外\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E7%95%AA%E5%A4%96\"></a>番外</h2><h3 id=\"冷暖色\"><a href=\"#冷暖色\" class=\"headerlink\" title=\"冷暖色\"></a><a href=\"https://shuzang.github.io/2020/basic-knowledge-of-colorology/#%E5%86%B7%E6%9A%96%E8%89%B2\"></a>冷暖色</h3><p>从色相环的分布看，红橙色类为暖色系，蓝紫色类为冷色系，黄绿色类为中性，黑色感觉为暖色，白色感觉为冷色。色彩明度和纯度的改变也会影响色彩的冷暖感，明亮色偏冷，深暗色偏暖，纯色保持原色的冷暖感，而纯度的降低会使冷暖感趋于中性化。对于太阳光而言，时间也是影响冷暖的因素，一般来讲，早晨的阳光色彩偏冷，傍晚的阳光色彩偏暖。各种不同的光源提供的颜色本身就有偏向，比如，白炽灯的光源色偏暖黄，荧光灯的光源色偏冷蓝。</p>\n<h3 id=\"色调\"><a href=\"#色调\" class=\"headerlink\" title=\"色调\"></a>色调</h3><p>我们常说一幅画、一张照片或一个场景是什么色调的，色调其实指的是占主导地位的一种视觉因素，色彩的三元素：色相、明度和纯度都可以作为色调，比如，从色相上，可以有红色调、蓝色调、黄色调、绿色调等；从色彩明度上，可以有明亮色调、暗色调等；从色彩纯度上，可以有清色调、浊色调、纯色调、灰色调；甚至从色彩的特性上，可以有暖色调、冷色调、中性色调。</p>\n<p>一般情况下，当某种类型色彩占据超过 70% 时，就称为该色调。</p>\n"},{"title":"【Midjourney】用ai绘画生成的图","date":"2021-08-03T07:23:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n今天在discord玩了特别有意思的ai绘图，生成的图有些很糟糕，有些还是挺好看的~但基本不会生成你脑海中的图，觉得可能适合策划用吧，和设计沟通时可以更具象的去描述他自己想要的那种什么五彩斑斓的黑啥的。。。\n\n记一下我的描述关键字\nThere are many flowers on a skull,32k, 3D shading, Tone Mapping, elaborated, Procreate, the last of us look alike scene, Cinema 4D, ROMM RGB, color grading, retouch, blender, V-ray\n\n![](https://upload-images.jianshu.io/upload_images/20892169-b3a8c0caa7de2ebf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/20892169-1ebf505adeb1731c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n下面是两张discord看到感觉比较好的。\nlake boat blackduck bluesky \n\n one pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus --ar 16:9 --test --creative --upbeta\n\nsanta claus guitarist of the death metal band , HD, ultra detailed, hyper realistic, fine detail etc, cinematic high detailed, octane render, ultra realistic, unreal engine, 8k --ar 9:16 --test --creative --upbeta \n![image.png](https://upload-images.jianshu.io/upload_images/20892169-e22650a9f0c5a678.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\na 20m-long flying dragon attacking HMS Warrior in the ocean, detailed, cinematic, 4k --ar 16:9\n![](https://upload-images.jianshu.io/upload_images/20892169-fcc662bc6307e228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nlake boat blackduck bluesky\n![](https://upload-images.jianshu.io/upload_images/20892169-8909e6f9ed2327e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\none pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus --ar 3:5 --test --creative --upbeta --upbeta --upbeta\n![](https://upload-images.jianshu.io/upload_images/20892169-6481ee88c636c873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\none pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus --ar 3:5 --test --creative\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-6c397d203663d317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\na knight holding a longsword downward on purple wasteland, dark night with heavy rain and lightening, gloomy, dark, horror --ar 16:9\n![](https://upload-images.jianshu.io/upload_images/20892169-f0d464405e5e7419.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/20892169-0181b74bd9fac6b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/paint/paint-picture2 copy 2.md","raw":"---\ntitle: '【Midjourney】用ai绘画生成的图'\ndate: 2021-08-03 15:23:38\ntags: \n  - ai绘画\n  - Midjourney\ncategories:\n  - 绘画\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n今天在discord玩了特别有意思的ai绘图，生成的图有些很糟糕，有些还是挺好看的~但基本不会生成你脑海中的图，觉得可能适合策划用吧，和设计沟通时可以更具象的去描述他自己想要的那种什么五彩斑斓的黑啥的。。。\n\n记一下我的描述关键字\nThere are many flowers on a skull,32k, 3D shading, Tone Mapping, elaborated, Procreate, the last of us look alike scene, Cinema 4D, ROMM RGB, color grading, retouch, blender, V-ray\n\n![](https://upload-images.jianshu.io/upload_images/20892169-b3a8c0caa7de2ebf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/20892169-1ebf505adeb1731c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n下面是两张discord看到感觉比较好的。\nlake boat blackduck bluesky \n\n one pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus --ar 16:9 --test --creative --upbeta\n\nsanta claus guitarist of the death metal band , HD, ultra detailed, hyper realistic, fine detail etc, cinematic high detailed, octane render, ultra realistic, unreal engine, 8k --ar 9:16 --test --creative --upbeta \n![image.png](https://upload-images.jianshu.io/upload_images/20892169-e22650a9f0c5a678.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\na 20m-long flying dragon attacking HMS Warrior in the ocean, detailed, cinematic, 4k --ar 16:9\n![](https://upload-images.jianshu.io/upload_images/20892169-fcc662bc6307e228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nlake boat blackduck bluesky\n![](https://upload-images.jianshu.io/upload_images/20892169-8909e6f9ed2327e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\none pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus --ar 3:5 --test --creative --upbeta --upbeta --upbeta\n![](https://upload-images.jianshu.io/upload_images/20892169-6481ee88c636c873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\none pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus --ar 3:5 --test --creative\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-6c397d203663d317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\na knight holding a longsword downward on purple wasteland, dark night with heavy rain and lightening, gloomy, dark, horror --ar 16:9\n![](https://upload-images.jianshu.io/upload_images/20892169-f0d464405e5e7419.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/20892169-0181b74bd9fac6b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"paint/paint-picture2 copy 2","published":1,"updated":"2023-01-25T10:56:14.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbmnw5i001y04wihuypb8je","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>今天在discord玩了特别有意思的ai绘图，生成的图有些很糟糕，有些还是挺好看的~但基本不会生成你脑海中的图，觉得可能适合策划用吧，和设计沟通时可以更具象的去描述他自己想要的那种什么五彩斑斓的黑啥的。。。</p>\n<p>记一下我的描述关键字<br>There are many flowers on a skull,32k, 3D shading, Tone Mapping, elaborated, Procreate, the last of us look alike scene, Cinema 4D, ROMM RGB, color grading, retouch, blender, V-ray</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b3a8c0caa7de2ebf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1ebf505adeb1731c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>下面是两张discord看到感觉比较好的。<br>lake boat blackduck bluesky </p>\n<p> one pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus –ar 16:9 –test –creative –upbeta</p>\n<p>santa claus guitarist of the death metal band , HD, ultra detailed, hyper realistic, fine detail etc, cinematic high detailed, octane render, ultra realistic, unreal engine, 8k –ar 9:16 –test –creative –upbeta<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e22650a9f0c5a678.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>a 20m-long flying dragon attacking HMS Warrior in the ocean, detailed, cinematic, 4k –ar 16:9<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fcc662bc6307e228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>lake boat blackduck bluesky<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8909e6f9ed2327e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>one pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus –ar 3:5 –test –creative –upbeta –upbeta –upbeta<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6481ee88c636c873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>one pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus –ar 3:5 –test –creative<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6c397d203663d317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>a knight holding a longsword downward on purple wasteland, dark night with heavy rain and lightening, gloomy, dark, horror –ar 16:9<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f0d464405e5e7419.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0181b74bd9fac6b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>今天在discord玩了特别有意思的ai绘图，生成的图有些很糟糕，有些还是挺好看的~但基本不会生成你脑海中的图，觉得可能适合策划用吧，和设计沟通时可以更具象的去描述他自己想要的那种什么五彩斑斓的黑啥的。。。</p>\n<p>记一下我的描述关键字<br>There are many flowers on a skull,32k, 3D shading, Tone Mapping, elaborated, Procreate, the last of us look alike scene, Cinema 4D, ROMM RGB, color grading, retouch, blender, V-ray</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b3a8c0caa7de2ebf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1ebf505adeb1731c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>下面是两张discord看到感觉比较好的。<br>lake boat blackduck bluesky </p>\n<p> one pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus –ar 16:9 –test –creative –upbeta</p>\n<p>santa claus guitarist of the death metal band , HD, ultra detailed, hyper realistic, fine detail etc, cinematic high detailed, octane render, ultra realistic, unreal engine, 8k –ar 9:16 –test –creative –upbeta<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e22650a9f0c5a678.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>a 20m-long flying dragon attacking HMS Warrior in the ocean, detailed, cinematic, 4k –ar 16:9<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fcc662bc6307e228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>lake boat blackduck bluesky<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8909e6f9ed2327e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>one pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus –ar 3:5 –test –creative –upbeta –upbeta –upbeta<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6481ee88c636c873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>one pumpkins , intricate, elaborate, by artgerm and greg rutkowski and alphonse mucha, cinematic lighting, 32k, 3D shading, Tone Mapping, Ray Traced, Diffraction Grating, Crystalline, Lumen Reflections, Super-Resolution, gigapixel, color grading, retouch, Blender, V-ray, Procreate, zBrush, UE5, Cinema 4D, ROMM RGB, Adobe After Effects, tight shot, sharp focus –ar 3:5 –test –creative<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6c397d203663d317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>a knight holding a longsword downward on purple wasteland, dark night with heavy rain and lightening, gloomy, dark, horror –ar 16:9<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f0d464405e5e7419.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0181b74bd9fac6b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"【人像】画个刘亦菲","date":"2022-09-19T07:23:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n画了个刘亦菲，四五个人都说是宋祖儿hhhhh，好好好那这个画的就是宋祖儿\n\n![](https://upload-images.jianshu.io/upload_images/20892169-ceeda7f6b2a64564.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/paint/paint-picture2.md","raw":"---\ntitle: '【人像】画个刘亦菲'\ndate: 2022-09-19 15:23:38\ntags: 绘画\ncategories:\n  - 绘画\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n画了个刘亦菲，四五个人都说是宋祖儿hhhhh，好好好那这个画的就是宋祖儿\n\n![](https://upload-images.jianshu.io/upload_images/20892169-ceeda7f6b2a64564.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"paint/paint-picture2","published":1,"updated":"2023-01-25T13:05:33.990Z","_id":"cldbmnw5j002004wie9kw89ql","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>画了个刘亦菲，四五个人都说是宋祖儿hhhhh，好好好那这个画的就是宋祖儿</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ceeda7f6b2a64564.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>画了个刘亦菲，四五个人都说是宋祖儿hhhhh，好好好那这个画的就是宋祖儿</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ceeda7f6b2a64564.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"【练字】硬笔书法","date":"2020-05-24T05:23:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n字没几个，写都写了一天\n而且我发现即使练了字，我正儿八经写字还是那么难看\n虽然看起来没几个字，其实我写了一下午\n\n![练字](https://upload-images.jianshu.io/upload_images/20892169-1e86c290837bf0a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![练字](https://upload-images.jianshu.io/upload_images/20892169-3d7ee638fa93c349.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/paint/paint-picture3.md","raw":"---\ntitle: '【练字】硬笔书法'\ndate: 2020-05-24 13:23:38\ntags: 练字\ncategories:\n  - 练字\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n字没几个，写都写了一天\n而且我发现即使练了字，我正儿八经写字还是那么难看\n虽然看起来没几个字，其实我写了一下午\n\n![练字](https://upload-images.jianshu.io/upload_images/20892169-1e86c290837bf0a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![练字](https://upload-images.jianshu.io/upload_images/20892169-3d7ee638fa93c349.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"paint/paint-picture3","published":1,"updated":"2023-01-25T13:08:02.723Z","_id":"cldbmnw5l002804wi4u1c9qt2","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>字没几个，写都写了一天<br>而且我发现即使练了字，我正儿八经写字还是那么难看<br>虽然看起来没几个字，其实我写了一下午</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1e86c290837bf0a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"练字\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3d7ee638fa93c349.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"练字\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>字没几个，写都写了一天<br>而且我发现即使练了字，我正儿八经写字还是那么难看<br>虽然看起来没几个字，其实我写了一下午</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1e86c290837bf0a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"练字\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3d7ee638fa93c349.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"练字\"></p>\n"},{"title":"babel配置","date":"2021-10-24T22:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、使用\n### 安装\n```javascript\nnpm install --save-dev @babel/core @babel/cli @babel/preset-env \n```\n### 配置文件\n\nBabel 有两种并行的配置文件格式，可以一起使用，也可以独立使用。\n\n+ #### 全项目配置\n`babel.config.json`/`babel.config.js`文件\n+ 注：可以是js文件，可以是json文件\n\nBabel在项目根目录中自动搜索babel.config.json文件，或使用受支持扩展名的等效文件\n+ #### 文件相关配置\n`.babelrc.json`/`.babelrc.js`文件\n+ 注：可以是js文件，可以是json文件\nBabel通过从正在编译的“文件名”开始搜索目录结构来加载`.babelrc.json`文件，直至找到包含`package.json`的目录下。\n\n## 二、预设\n预设是指预先在babel内部设置好的插件，可以直接使用。\n\n示例：\n```javascript\n{\n\tpreset: [\n\t\t\"@babel/preset-env\",\n\t\t{\n\t\t\ttarget: {\n\t\t\t\tedge: 17,\n\t\t\t\tfirefox: 60,\n\t\t\t\tsafari: 111\n\t\t\t}\n\t\t},\n\t\t{ useBuiltIns: \"usage\" },\n\t]\n}\n```\n### 1. preset\n+ **@babel/preset-env 用于编译 ES2015+ 语法**\n+ **@babel/preset-typescript for TypeScript 编译ts，替代了ts-loader**\n+ **@babel/preset-react for React**\n#### 使用preset预设\n在配置文件中添加presets字段，**执行顺序是从右到左。**\n```javascript\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n### 2. target\n`targets` 是需要兼容的浏览器版本\n+ 他的值有：` android, chrome, deno, edge, electron, firefox, ie, ios, node, opera, rhino, safari, samsung`\n+ 可以设置成一个`string`，比如` > 0.5%`,` last 2 versions, not dead` 意思是有大于百分之零点五的人使用，前两个版本，并且没有废弃\n\n### 3. useBuildIns\n***useBuildIns需要安装corejs使用***\n```javascript\nnpm i core-js -S\n```\n比如：\n```javascript\n{ useBuiltIns: \"usage\" },\n```\n+ `false`： 默认值，不做任何语法转换\n+ `usage`：Babel 将检查你的所有代码，以便查找targets环境中缺失的功能，然后只把必须的 polyfill 包含进来\n+ entry：引入所有的polyfill包，必须在入口文件加入` import \"core-js/stable\"` 才会生效\n\n### 4. corejs\n安装的corejs版本号\n\n####什么是corejs?\nbabel编译只能针对浏览器行为，es6语法规定的，如`promise`、`async/await`则无法转义。这种情况下则需要配置corejs。\n之前这个操作通过`babel-polyfill`插件，但在7.4之后该插件已被废弃。","source":"_posts/cxy/framework/babel.md","raw":"---\ntitle: 'babel配置'\ndate: 2021-10-25 06:21:49\ntags: babel\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、使用\n### 安装\n```javascript\nnpm install --save-dev @babel/core @babel/cli @babel/preset-env \n```\n### 配置文件\n\nBabel 有两种并行的配置文件格式，可以一起使用，也可以独立使用。\n\n+ #### 全项目配置\n`babel.config.json`/`babel.config.js`文件\n+ 注：可以是js文件，可以是json文件\n\nBabel在项目根目录中自动搜索babel.config.json文件，或使用受支持扩展名的等效文件\n+ #### 文件相关配置\n`.babelrc.json`/`.babelrc.js`文件\n+ 注：可以是js文件，可以是json文件\nBabel通过从正在编译的“文件名”开始搜索目录结构来加载`.babelrc.json`文件，直至找到包含`package.json`的目录下。\n\n## 二、预设\n预设是指预先在babel内部设置好的插件，可以直接使用。\n\n示例：\n```javascript\n{\n\tpreset: [\n\t\t\"@babel/preset-env\",\n\t\t{\n\t\t\ttarget: {\n\t\t\t\tedge: 17,\n\t\t\t\tfirefox: 60,\n\t\t\t\tsafari: 111\n\t\t\t}\n\t\t},\n\t\t{ useBuiltIns: \"usage\" },\n\t]\n}\n```\n### 1. preset\n+ **@babel/preset-env 用于编译 ES2015+ 语法**\n+ **@babel/preset-typescript for TypeScript 编译ts，替代了ts-loader**\n+ **@babel/preset-react for React**\n#### 使用preset预设\n在配置文件中添加presets字段，**执行顺序是从右到左。**\n```javascript\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n### 2. target\n`targets` 是需要兼容的浏览器版本\n+ 他的值有：` android, chrome, deno, edge, electron, firefox, ie, ios, node, opera, rhino, safari, samsung`\n+ 可以设置成一个`string`，比如` > 0.5%`,` last 2 versions, not dead` 意思是有大于百分之零点五的人使用，前两个版本，并且没有废弃\n\n### 3. useBuildIns\n***useBuildIns需要安装corejs使用***\n```javascript\nnpm i core-js -S\n```\n比如：\n```javascript\n{ useBuiltIns: \"usage\" },\n```\n+ `false`： 默认值，不做任何语法转换\n+ `usage`：Babel 将检查你的所有代码，以便查找targets环境中缺失的功能，然后只把必须的 polyfill 包含进来\n+ entry：引入所有的polyfill包，必须在入口文件加入` import \"core-js/stable\"` 才会生效\n\n### 4. corejs\n安装的corejs版本号\n\n####什么是corejs?\nbabel编译只能针对浏览器行为，es6语法规定的，如`promise`、`async/await`则无法转义。这种情况下则需要配置corejs。\n之前这个操作通过`babel-polyfill`插件，但在7.4之后该插件已被废弃。","slug":"cxy/framework/babel","published":1,"updated":"2023-01-25T12:10:46.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbmnw5l002904wicefm8k5x","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、使用\"><a href=\"#一、使用\" class=\"headerlink\" title=\"一、使用\"></a>一、使用</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev @babel/core @babel/cli @babel/preset-env </span><br></pre></td></tr></table></figure>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>Babel 有两种并行的配置文件格式，可以一起使用，也可以独立使用。</p>\n<ul>\n<li><h4 id=\"全项目配置\"><a href=\"#全项目配置\" class=\"headerlink\" title=\"全项目配置\"></a>全项目配置</h4><code>babel.config.json</code>/<code>babel.config.js</code>文件</li>\n<li>注：可以是js文件，可以是json文件</li>\n</ul>\n<p>Babel在项目根目录中自动搜索babel.config.json文件，或使用受支持扩展名的等效文件</p>\n<ul>\n<li><h4 id=\"文件相关配置\"><a href=\"#文件相关配置\" class=\"headerlink\" title=\"文件相关配置\"></a>文件相关配置</h4><code>.babelrc.json</code>/<code>.babelrc.js</code>文件</li>\n<li>注：可以是js文件，可以是json文件<br>Babel通过从正在编译的“文件名”开始搜索目录结构来加载<code>.babelrc.json</code>文件，直至找到包含<code>package.json</code>的目录下。</li>\n</ul>\n<h2 id=\"二、预设\"><a href=\"#二、预设\" class=\"headerlink\" title=\"二、预设\"></a>二、预设</h2><p>预设是指预先在babel内部设置好的插件，可以直接使用。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">preset</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">target</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">edge</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">firefox</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">safari</span>: <span class=\"number\">111</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123; <span class=\"attr\">useBuiltIns</span>: <span class=\"string\">&quot;usage&quot;</span> &#125;,</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-preset\"><a href=\"#1-preset\" class=\"headerlink\" title=\"1. preset\"></a>1. preset</h3><ul>\n<li><strong>@babel/preset-env 用于编译 ES2015+ 语法</strong></li>\n<li><strong>@babel/preset-typescript for TypeScript 编译ts，替代了ts-loader</strong></li>\n<li><strong>@babel/preset-react for React</strong><h4 id=\"使用preset预设\"><a href=\"#使用preset预设\" class=\"headerlink\" title=\"使用preset预设\"></a>使用preset预设</h4>在配置文件中添加presets字段，<strong>执行顺序是从右到左。</strong><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [<span class=\"string\">&quot;@babel/preset-env&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-target\"><a href=\"#2-target\" class=\"headerlink\" title=\"2. target\"></a>2. target</h3><p><code>targets</code> 是需要兼容的浏览器版本</p>\n<ul>\n<li>他的值有：<code> android, chrome, deno, edge, electron, firefox, ie, ios, node, opera, rhino, safari, samsung</code></li>\n<li>可以设置成一个<code>string</code>，比如<code> &gt; 0.5%</code>,<code> last 2 versions, not dead</code> 意思是有大于百分之零点五的人使用，前两个版本，并且没有废弃</li>\n</ul>\n<h3 id=\"3-useBuildIns\"><a href=\"#3-useBuildIns\" class=\"headerlink\" title=\"3. useBuildIns\"></a>3. useBuildIns</h3><p><em><strong>useBuildIns需要安装corejs使用</strong></em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i core-js -S</span><br></pre></td></tr></table></figure>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">useBuiltIns</span>: <span class=\"string\">&quot;usage&quot;</span> &#125;,</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>false</code>： 默认值，不做任何语法转换</li>\n<li><code>usage</code>：Babel 将检查你的所有代码，以便查找targets环境中缺失的功能，然后只把必须的 polyfill 包含进来</li>\n<li>entry：引入所有的polyfill包，必须在入口文件加入<code> import &quot;core-js/stable&quot;</code> 才会生效</li>\n</ul>\n<h3 id=\"4-corejs\"><a href=\"#4-corejs\" class=\"headerlink\" title=\"4. corejs\"></a>4. corejs</h3><p>安装的corejs版本号</p>\n<p>####什么是corejs?<br>babel编译只能针对浏览器行为，es6语法规定的，如<code>promise</code>、<code>async/await</code>则无法转义。这种情况下则需要配置corejs。<br>之前这个操作通过<code>babel-polyfill</code>插件，但在7.4之后该插件已被废弃。</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、使用\"><a href=\"#一、使用\" class=\"headerlink\" title=\"一、使用\"></a>一、使用</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev @babel/core @babel/cli @babel/preset-env </span><br></pre></td></tr></table></figure>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>Babel 有两种并行的配置文件格式，可以一起使用，也可以独立使用。</p>\n<ul>\n<li><h4 id=\"全项目配置\"><a href=\"#全项目配置\" class=\"headerlink\" title=\"全项目配置\"></a>全项目配置</h4><code>babel.config.json</code>/<code>babel.config.js</code>文件</li>\n<li>注：可以是js文件，可以是json文件</li>\n</ul>\n<p>Babel在项目根目录中自动搜索babel.config.json文件，或使用受支持扩展名的等效文件</p>\n<ul>\n<li><h4 id=\"文件相关配置\"><a href=\"#文件相关配置\" class=\"headerlink\" title=\"文件相关配置\"></a>文件相关配置</h4><code>.babelrc.json</code>/<code>.babelrc.js</code>文件</li>\n<li>注：可以是js文件，可以是json文件<br>Babel通过从正在编译的“文件名”开始搜索目录结构来加载<code>.babelrc.json</code>文件，直至找到包含<code>package.json</code>的目录下。</li>\n</ul>\n<h2 id=\"二、预设\"><a href=\"#二、预设\" class=\"headerlink\" title=\"二、预设\"></a>二、预设</h2><p>预设是指预先在babel内部设置好的插件，可以直接使用。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">preset</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">target</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">edge</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">firefox</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">safari</span>: <span class=\"number\">111</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123; <span class=\"attr\">useBuiltIns</span>: <span class=\"string\">&quot;usage&quot;</span> &#125;,</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-preset\"><a href=\"#1-preset\" class=\"headerlink\" title=\"1. preset\"></a>1. preset</h3><ul>\n<li><strong>@babel/preset-env 用于编译 ES2015+ 语法</strong></li>\n<li><strong>@babel/preset-typescript for TypeScript 编译ts，替代了ts-loader</strong></li>\n<li><strong>@babel/preset-react for React</strong><h4 id=\"使用preset预设\"><a href=\"#使用preset预设\" class=\"headerlink\" title=\"使用preset预设\"></a>使用preset预设</h4>在配置文件中添加presets字段，<strong>执行顺序是从右到左。</strong><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [<span class=\"string\">&quot;@babel/preset-env&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-target\"><a href=\"#2-target\" class=\"headerlink\" title=\"2. target\"></a>2. target</h3><p><code>targets</code> 是需要兼容的浏览器版本</p>\n<ul>\n<li>他的值有：<code> android, chrome, deno, edge, electron, firefox, ie, ios, node, opera, rhino, safari, samsung</code></li>\n<li>可以设置成一个<code>string</code>，比如<code> &gt; 0.5%</code>,<code> last 2 versions, not dead</code> 意思是有大于百分之零点五的人使用，前两个版本，并且没有废弃</li>\n</ul>\n<h3 id=\"3-useBuildIns\"><a href=\"#3-useBuildIns\" class=\"headerlink\" title=\"3. useBuildIns\"></a>3. useBuildIns</h3><p><em><strong>useBuildIns需要安装corejs使用</strong></em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i core-js -S</span><br></pre></td></tr></table></figure>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">useBuiltIns</span>: <span class=\"string\">&quot;usage&quot;</span> &#125;,</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>false</code>： 默认值，不做任何语法转换</li>\n<li><code>usage</code>：Babel 将检查你的所有代码，以便查找targets环境中缺失的功能，然后只把必须的 polyfill 包含进来</li>\n<li>entry：引入所有的polyfill包，必须在入口文件加入<code> import &quot;core-js/stable&quot;</code> 才会生效</li>\n</ul>\n<h3 id=\"4-corejs\"><a href=\"#4-corejs\" class=\"headerlink\" title=\"4. corejs\"></a>4. corejs</h3><p>安装的corejs版本号</p>\n<p>####什么是corejs?<br>babel编译只能针对浏览器行为，es6语法规定的，如<code>promise</code>、<code>async/await</code>则无法转义。这种情况下则需要配置corejs。<br>之前这个操作通过<code>babel-polyfill</code>插件，但在7.4之后该插件已被废弃。</p>\n"},{"title":"【画画】把心血来潮想画的东西扔在这里","date":"2022-10-11T05:23:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n![练习](http://upload-images.jianshu.io/upload_images/20892169-a3add5cba2b16577.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50)\n\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-ceeda7f6b2a64564.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-8f5a7f0fd968df3d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-109bc8a501c9c004.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![ipad画](http://upload-images.jianshu.io/upload_images/20892169-6616aa3859f97f61.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50)\n\n\n有段时间很流行画各类月野兔的时候画的\n\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-72a6e38c2b9b587d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-909bdc4563428f74.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不知道为什么，ipad画完导入手机再看，两边色偏还是挺大的\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-9f43bf5637402b20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这破玩意儿我点点点了一周。\n![点画](https://upload-images.jianshu.io/upload_images/20892169-d94a50c0cee1e0bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n第一次画的水彩，没学任何技法，凭感觉瞎怼，那个树叶画的还真丑。\n\n![水彩](https://upload-images.jianshu.io/upload_images/20892169-16c645d068913a5c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n第二次画的水彩，画完之后就再也没动过水彩了。\n![水彩](https://upload-images.jianshu.io/upload_images/20892169-f1d5254aeb673211.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n第一次画的彩铅\n![彩铅](https://upload-images.jianshu.io/upload_images/20892169-846be79729ffd4f1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n第二次画彩铅\n![彩铅](https://upload-images.jianshu.io/upload_images/20892169-8404dac75d6ee983.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n第三次画彩铅\n![彩铅](https://upload-images.jianshu.io/upload_images/20892169-073a4cebcb578714.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n第四次画彩铅，一年多前的画，结果。。到现在彩铅找不到了都还没画完\n![彩铅](https://upload-images.jianshu.io/upload_images/20892169-f70efe3b5dce913f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/paint/paint-pictureall.md","raw":"---\ntitle: '【画画】把心血来潮想画的东西扔在这里'\ndate: 2022-10-11 13:23:38\ntags: 绘画\ncategories:\n  - 绘画\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n![练习](http://upload-images.jianshu.io/upload_images/20892169-a3add5cba2b16577.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50)\n\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-ceeda7f6b2a64564.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-8f5a7f0fd968df3d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-109bc8a501c9c004.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![ipad画](http://upload-images.jianshu.io/upload_images/20892169-6616aa3859f97f61.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50)\n\n\n有段时间很流行画各类月野兔的时候画的\n\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-72a6e38c2b9b587d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-909bdc4563428f74.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不知道为什么，ipad画完导入手机再看，两边色偏还是挺大的\n![ipad画](https://upload-images.jianshu.io/upload_images/20892169-9f43bf5637402b20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这破玩意儿我点点点了一周。\n![点画](https://upload-images.jianshu.io/upload_images/20892169-d94a50c0cee1e0bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n第一次画的水彩，没学任何技法，凭感觉瞎怼，那个树叶画的还真丑。\n\n![水彩](https://upload-images.jianshu.io/upload_images/20892169-16c645d068913a5c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n第二次画的水彩，画完之后就再也没动过水彩了。\n![水彩](https://upload-images.jianshu.io/upload_images/20892169-f1d5254aeb673211.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n第一次画的彩铅\n![彩铅](https://upload-images.jianshu.io/upload_images/20892169-846be79729ffd4f1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n第二次画彩铅\n![彩铅](https://upload-images.jianshu.io/upload_images/20892169-8404dac75d6ee983.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n第三次画彩铅\n![彩铅](https://upload-images.jianshu.io/upload_images/20892169-073a4cebcb578714.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n第四次画彩铅，一年多前的画，结果。。到现在彩铅找不到了都还没画完\n![彩铅](https://upload-images.jianshu.io/upload_images/20892169-f70efe3b5dce913f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"paint/paint-pictureall","published":1,"updated":"2023-01-25T13:07:00.453Z","_id":"cldbmnw5m002b04wi2w4b7y3f","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/20892169-a3add5cba2b16577.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50\" alt=\"练习\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ceeda7f6b2a64564.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8f5a7f0fd968df3d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-109bc8a501c9c004.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"><br><img src=\"http://upload-images.jianshu.io/upload_images/20892169-6616aa3859f97f61.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50\" alt=\"ipad画\"></p>\n<p>有段时间很流行画各类月野兔的时候画的</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-72a6e38c2b9b587d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-909bdc4563428f74.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"></p>\n<p>不知道为什么，ipad画完导入手机再看，两边色偏还是挺大的<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9f43bf5637402b20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"></p>\n<p>这破玩意儿我点点点了一周。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d94a50c0cee1e0bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"点画\"></p>\n<p>第一次画的水彩，没学任何技法，凭感觉瞎怼，那个树叶画的还真丑。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-16c645d068913a5c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"水彩\"><br>第二次画的水彩，画完之后就再也没动过水彩了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f1d5254aeb673211.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"水彩\"></p>\n<p>第一次画的彩铅<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-846be79729ffd4f1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"彩铅\"><br>第二次画彩铅<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8404dac75d6ee983.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"彩铅\"><br>第三次画彩铅<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-073a4cebcb578714.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"彩铅\"><br>第四次画彩铅，一年多前的画，结果。。到现在彩铅找不到了都还没画完<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f70efe3b5dce913f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"彩铅\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/20892169-a3add5cba2b16577.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50\" alt=\"练习\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ceeda7f6b2a64564.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8f5a7f0fd968df3d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-109bc8a501c9c004.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"><br><img src=\"http://upload-images.jianshu.io/upload_images/20892169-6616aa3859f97f61.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50\" alt=\"ipad画\"></p>\n<p>有段时间很流行画各类月野兔的时候画的</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-72a6e38c2b9b587d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-909bdc4563428f74.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"></p>\n<p>不知道为什么，ipad画完导入手机再看，两边色偏还是挺大的<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9f43bf5637402b20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ipad画\"></p>\n<p>这破玩意儿我点点点了一周。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d94a50c0cee1e0bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"点画\"></p>\n<p>第一次画的水彩，没学任何技法，凭感觉瞎怼，那个树叶画的还真丑。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-16c645d068913a5c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"水彩\"><br>第二次画的水彩，画完之后就再也没动过水彩了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f1d5254aeb673211.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"水彩\"></p>\n<p>第一次画的彩铅<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-846be79729ffd4f1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"彩铅\"><br>第二次画彩铅<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8404dac75d6ee983.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"彩铅\"><br>第三次画彩铅<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-073a4cebcb578714.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"彩铅\"><br>第四次画彩铅，一年多前的画，结果。。到现在彩铅找不到了都还没画完<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f70efe3b5dce913f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"彩铅\"></p>\n"},{"title":"【人像】人像练习","date":"2022-10-03T07:23:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n这次顺带录了屏嘿嘿~其实没画完拉\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/jzG5GRcTeEk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n![](https://upload-images.jianshu.io/upload_images/20892169-8f5a7f0fd968df3d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/paint/paint-picture2 copy.md","raw":"---\ntitle: '【人像】人像练习'\ndate: 2022-10-03 15:23:38\ntags: 绘画\ncategories:\n  - 绘画\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n这次顺带录了屏嘿嘿~其实没画完拉\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/jzG5GRcTeEk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n![](https://upload-images.jianshu.io/upload_images/20892169-8f5a7f0fd968df3d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"paint/paint-picture2 copy","published":1,"updated":"2023-01-25T13:05:31.308Z","_id":"cldbmnw5m002d04wi3aprgqxn","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>这次顺带录了屏嘿嘿~其实没画完拉</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/jzG5GRcTeEk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8f5a7f0fd968df3d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>这次顺带录了屏嘿嘿~其实没画完拉</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/jzG5GRcTeEk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8f5a7f0fd968df3d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"【chrome插件】Ajax Interceptor修改 ajax 请求的响应文本","date":"2021-04-02T22:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### 一、介绍\nAjax Interceptor是一个用于修改 ajax 请求响应的 chrome 扩展，修改ajax请求并返回结果的chrome插件。你可以用该插件修改页面上Ajax请求的返回结果。\n\n#### 二、安装\nAjax Interceptor下载安装地址：[点击跳转](https://chrome.google.com/webstore/detail/ajax-interceptor/nhpjggchkhnlbgdfcbgpdpkifemomkpg?hl=zh-CN)\n\n#### 三、使用\n1. 安装完成后，点击图标并展开\n![](https://upload-images.jianshu.io/upload_images/20892169-a70b52f7a5a767e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2. 点击加号，在network中找到需要修改的请求\n![](https://upload-images.jianshu.io/upload_images/20892169-21e15d48c92accc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. 将从network获取到的地址和json数据粘贴至框中\n![](https://upload-images.jianshu.io/upload_images/20892169-0cea7d65b83b5dc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4. 点击JSON Editor，即可编辑需要修改的字段\n![](https://upload-images.jianshu.io/upload_images/20892169-b2f9a2de34dc01a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n5. 刷新或重新请求后，即可生效。\n![](https://upload-images.jianshu.io/upload_images/20892169-131b0c841a7cd5e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<br>\n<br>\n\n*✨注意：*\n\n*1. 第一次安装完，请刷新你需要使用的页面，或者重启浏览器。*\n\n*2. 当你不需要使用该插件时，建议把开关关上（插件icon变为灰色），以免对页面正常浏览造成影响。*\n\n*3. 该插件只会在JS层面上对返回结果进行修改，即只会修改全局的XMLHTTPRequest对象和fetch方法里的返回值，进而影响页面展现。而你在chrome的devtools的network里看到的请求返回结果不会有任何变化。*\n","source":"_posts/cxy/other/chrome-ajax.md","raw":"---\ntitle: '【chrome插件】Ajax Interceptor修改 ajax 请求的响应文本'\ndate: 2021-04-03 06:21:49\ntags: 开发效率\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### 一、介绍\nAjax Interceptor是一个用于修改 ajax 请求响应的 chrome 扩展，修改ajax请求并返回结果的chrome插件。你可以用该插件修改页面上Ajax请求的返回结果。\n\n#### 二、安装\nAjax Interceptor下载安装地址：[点击跳转](https://chrome.google.com/webstore/detail/ajax-interceptor/nhpjggchkhnlbgdfcbgpdpkifemomkpg?hl=zh-CN)\n\n#### 三、使用\n1. 安装完成后，点击图标并展开\n![](https://upload-images.jianshu.io/upload_images/20892169-a70b52f7a5a767e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2. 点击加号，在network中找到需要修改的请求\n![](https://upload-images.jianshu.io/upload_images/20892169-21e15d48c92accc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. 将从network获取到的地址和json数据粘贴至框中\n![](https://upload-images.jianshu.io/upload_images/20892169-0cea7d65b83b5dc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4. 点击JSON Editor，即可编辑需要修改的字段\n![](https://upload-images.jianshu.io/upload_images/20892169-b2f9a2de34dc01a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n5. 刷新或重新请求后，即可生效。\n![](https://upload-images.jianshu.io/upload_images/20892169-131b0c841a7cd5e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<br>\n<br>\n\n*✨注意：*\n\n*1. 第一次安装完，请刷新你需要使用的页面，或者重启浏览器。*\n\n*2. 当你不需要使用该插件时，建议把开关关上（插件icon变为灰色），以免对页面正常浏览造成影响。*\n\n*3. 该插件只会在JS层面上对返回结果进行修改，即只会修改全局的XMLHTTPRequest对象和fetch方法里的返回值，进而影响页面展现。而你在chrome的devtools的network里看到的请求返回结果不会有任何变化。*\n","slug":"cxy/other/chrome-ajax","published":1,"updated":"2023-01-25T12:23:32.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbn5nu10000f0wi0gst02wl","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h4><p>Ajax Interceptor是一个用于修改 ajax 请求响应的 chrome 扩展，修改ajax请求并返回结果的chrome插件。你可以用该插件修改页面上Ajax请求的返回结果。</p>\n<h4 id=\"二、安装\"><a href=\"#二、安装\" class=\"headerlink\" title=\"二、安装\"></a>二、安装</h4><p>Ajax Interceptor下载安装地址：<a href=\"https://chrome.google.com/webstore/detail/ajax-interceptor/nhpjggchkhnlbgdfcbgpdpkifemomkpg?hl=zh-CN\">点击跳转</a></p>\n<h4 id=\"三、使用\"><a href=\"#三、使用\" class=\"headerlink\" title=\"三、使用\"></a>三、使用</h4><ol>\n<li>安装完成后，点击图标并展开<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a70b52f7a5a767e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></li>\n<li>点击加号，在network中找到需要修改的请求<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-21e15d48c92accc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></li>\n<li>将从network获取到的地址和json数据粘贴至框中<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0cea7d65b83b5dc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></li>\n<li>点击JSON Editor，即可编辑需要修改的字段<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b2f9a2de34dc01a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></li>\n<li>刷新或重新请求后，即可生效。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-131b0c841a7cd5e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>\n<br></li>\n</ol>\n<p><em>✨注意：</em></p>\n<p><em>1. 第一次安装完，请刷新你需要使用的页面，或者重启浏览器。</em></p>\n<p><em>2. 当你不需要使用该插件时，建议把开关关上（插件icon变为灰色），以免对页面正常浏览造成影响。</em></p>\n<p><em>3. 该插件只会在JS层面上对返回结果进行修改，即只会修改全局的XMLHTTPRequest对象和fetch方法里的返回值，进而影响页面展现。而你在chrome的devtools的network里看到的请求返回结果不会有任何变化。</em></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h4><p>Ajax Interceptor是一个用于修改 ajax 请求响应的 chrome 扩展，修改ajax请求并返回结果的chrome插件。你可以用该插件修改页面上Ajax请求的返回结果。</p>\n<h4 id=\"二、安装\"><a href=\"#二、安装\" class=\"headerlink\" title=\"二、安装\"></a>二、安装</h4><p>Ajax Interceptor下载安装地址：<a href=\"https://chrome.google.com/webstore/detail/ajax-interceptor/nhpjggchkhnlbgdfcbgpdpkifemomkpg?hl=zh-CN\">点击跳转</a></p>\n<h4 id=\"三、使用\"><a href=\"#三、使用\" class=\"headerlink\" title=\"三、使用\"></a>三、使用</h4><ol>\n<li>安装完成后，点击图标并展开<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a70b52f7a5a767e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></li>\n<li>点击加号，在network中找到需要修改的请求<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-21e15d48c92accc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></li>\n<li>将从network获取到的地址和json数据粘贴至框中<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0cea7d65b83b5dc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></li>\n<li>点击JSON Editor，即可编辑需要修改的字段<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b2f9a2de34dc01a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></li>\n<li>刷新或重新请求后，即可生效。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-131b0c841a7cd5e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>\n<br></li>\n</ol>\n<p><em>✨注意：</em></p>\n<p><em>1. 第一次安装完，请刷新你需要使用的页面，或者重启浏览器。</em></p>\n<p><em>2. 当你不需要使用该插件时，建议把开关关上（插件icon变为灰色），以免对页面正常浏览造成影响。</em></p>\n<p><em>3. 该插件只会在JS层面上对返回结果进行修改，即只会修改全局的XMLHTTPRequest对象和fetch方法里的返回值，进而影响页面展现。而你在chrome的devtools的network里看到的请求返回结果不会有任何变化。</em></p>\n"},{"title":"【chrome调试】使用chrome调试已发布页面的文件代码","date":"2022-03-12T07:01:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n让这个脚本跑了一晚上，并顺便水了一个视频，骗了两个硬币。\n熬了一整夜剧都没掉下去\n\n<iframe width=\"560\" height=\"315\"  src=\"//player.bilibili.com/player.html?aid=213624485&bvid=BV1aa411e74z&cid=585957393&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n已经编译上线的代码，在需要进行浏览器调试的时候，改文件会相当不方便，有时候只是改一些小条件也需要繁杂的操作，并且浏览器一刷新就又要重新改。<br>\n为了解决这个问题，可以使用chrome的snippets调试已发布页面的文件，通过拦截network\n1. 打开sources - Snippets\n\n![](https://upload-images.jianshu.io/upload_images/20892169-7cc7e59cd2fd40fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2. 点击Select folder for overrides，选择一个文件夹，用于存储需要调试的在线文件。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-cdc56f8712588f6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. 上方点击“允许”，可以看见文件夹就显示在Overrides里了。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-ebee6b64b9f35234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-1938b54b69b97a56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4. 比如在google首页，打开network，随便选择一张图，右键 - Save for Overrides\n![](https://upload-images.jianshu.io/upload_images/20892169-8597f38e5290e5e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n5. 回到source，就可以在你的文件夹中看见这张图了\n![](https://upload-images.jianshu.io/upload_images/20892169-e3db37ed9076c760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n6. 现在可以把它替换成其他logo，比如百度\n![](https://upload-images.jianshu.io/upload_images/20892169-61c3ca9abfdf8142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n7. 也可以去调试代码，搞些有意思的小事情~\n比如很久之前有段时间很流行的b站风叶穿行游戏，我是用这种方法改脚本自动跑的成绩\n![](https://upload-images.jianshu.io/upload_images/20892169-314dc6b621ccf4a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-d1281e2091743458.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n使用chrome的Snippets比较省事的是，即使刷新很多次，只要勾选了Enable Local Overrides就会一直生效，有时候本地未经过编译的代码怎么测试都没有问题，但放到线上就是有奇奇怪怪的问题，如果能调试压缩后的代码也会比较直观~我是一直很喜欢这个方法拉。","source":"_posts/cxy/other/chrome-tiaoshi.md","raw":"---\ntitle: '【chrome调试】使用chrome调试已发布页面的文件代码'\ndate: 2022-03-12 15:01:49\ntags: 开发效率\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n让这个脚本跑了一晚上，并顺便水了一个视频，骗了两个硬币。\n熬了一整夜剧都没掉下去\n\n<iframe width=\"560\" height=\"315\"  src=\"//player.bilibili.com/player.html?aid=213624485&bvid=BV1aa411e74z&cid=585957393&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n已经编译上线的代码，在需要进行浏览器调试的时候，改文件会相当不方便，有时候只是改一些小条件也需要繁杂的操作，并且浏览器一刷新就又要重新改。<br>\n为了解决这个问题，可以使用chrome的snippets调试已发布页面的文件，通过拦截network\n1. 打开sources - Snippets\n\n![](https://upload-images.jianshu.io/upload_images/20892169-7cc7e59cd2fd40fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2. 点击Select folder for overrides，选择一个文件夹，用于存储需要调试的在线文件。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-cdc56f8712588f6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. 上方点击“允许”，可以看见文件夹就显示在Overrides里了。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-ebee6b64b9f35234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-1938b54b69b97a56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4. 比如在google首页，打开network，随便选择一张图，右键 - Save for Overrides\n![](https://upload-images.jianshu.io/upload_images/20892169-8597f38e5290e5e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n5. 回到source，就可以在你的文件夹中看见这张图了\n![](https://upload-images.jianshu.io/upload_images/20892169-e3db37ed9076c760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n6. 现在可以把它替换成其他logo，比如百度\n![](https://upload-images.jianshu.io/upload_images/20892169-61c3ca9abfdf8142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n7. 也可以去调试代码，搞些有意思的小事情~\n比如很久之前有段时间很流行的b站风叶穿行游戏，我是用这种方法改脚本自动跑的成绩\n![](https://upload-images.jianshu.io/upload_images/20892169-314dc6b621ccf4a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-d1281e2091743458.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n使用chrome的Snippets比较省事的是，即使刷新很多次，只要勾选了Enable Local Overrides就会一直生效，有时候本地未经过编译的代码怎么测试都没有问题，但放到线上就是有奇奇怪怪的问题，如果能调试压缩后的代码也会比较直观~我是一直很喜欢这个方法拉。","slug":"cxy/other/chrome-tiaoshi","published":1,"updated":"2023-01-25T19:57:42.649Z","_id":"cldbn5nu40003f0wi890hfnbh","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>让这个脚本跑了一晚上，并顺便水了一个视频，骗了两个硬币。<br>熬了一整夜剧都没掉下去</p>\n<iframe width=\"560\" height=\"315\"  src=\"//player.bilibili.com/player.html?aid=213624485&bvid=BV1aa411e74z&cid=585957393&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<p>已经编译上线的代码，在需要进行浏览器调试的时候，改文件会相当不方便，有时候只是改一些小条件也需要繁杂的操作，并且浏览器一刷新就又要重新改。<br><br>为了解决这个问题，可以使用chrome的snippets调试已发布页面的文件，通过拦截network</p>\n<ol>\n<li>打开sources - Snippets</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-7cc7e59cd2fd40fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>2. 点击Select folder for overrides，选择一个文件夹，用于存储需要调试的在线文件。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cdc56f8712588f6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>3. 上方点击“允许”，可以看见文件夹就显示在Overrides里了。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ebee6b64b9f35234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1938b54b69b97a56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>4. 比如在google首页，打开network，随便选择一张图，右键 - Save for Overrides<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8597f38e5290e5e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>5. 回到source，就可以在你的文件夹中看见这张图了<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e3db37ed9076c760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>6. 现在可以把它替换成其他logo，比如百度<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-61c3ca9abfdf8142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>7. 也可以去调试代码，搞些有意思的小事情~<br>比如很久之前有段时间很流行的b站风叶穿行游戏，我是用这种方法改脚本自动跑的成绩<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-314dc6b621ccf4a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d1281e2091743458.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>使用chrome的Snippets比较省事的是，即使刷新很多次，只要勾选了Enable Local Overrides就会一直生效，有时候本地未经过编译的代码怎么测试都没有问题，但放到线上就是有奇奇怪怪的问题，如果能调试压缩后的代码也会比较直观~我是一直很喜欢这个方法拉。</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>让这个脚本跑了一晚上，并顺便水了一个视频，骗了两个硬币。<br>熬了一整夜剧都没掉下去</p>\n<iframe width=\"560\" height=\"315\"  src=\"//player.bilibili.com/player.html?aid=213624485&bvid=BV1aa411e74z&cid=585957393&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<p>已经编译上线的代码，在需要进行浏览器调试的时候，改文件会相当不方便，有时候只是改一些小条件也需要繁杂的操作，并且浏览器一刷新就又要重新改。<br><br>为了解决这个问题，可以使用chrome的snippets调试已发布页面的文件，通过拦截network</p>\n<ol>\n<li>打开sources - Snippets</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-7cc7e59cd2fd40fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>2. 点击Select folder for overrides，选择一个文件夹，用于存储需要调试的在线文件。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cdc56f8712588f6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>3. 上方点击“允许”，可以看见文件夹就显示在Overrides里了。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ebee6b64b9f35234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1938b54b69b97a56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>4. 比如在google首页，打开network，随便选择一张图，右键 - Save for Overrides<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8597f38e5290e5e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>5. 回到source，就可以在你的文件夹中看见这张图了<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e3db37ed9076c760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>6. 现在可以把它替换成其他logo，比如百度<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-61c3ca9abfdf8142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>7. 也可以去调试代码，搞些有意思的小事情~<br>比如很久之前有段时间很流行的b站风叶穿行游戏，我是用这种方法改脚本自动跑的成绩<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-314dc6b621ccf4a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d1281e2091743458.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>使用chrome的Snippets比较省事的是，即使刷新很多次，只要勾选了Enable Local Overrides就会一直生效，有时候本地未经过编译的代码怎么测试都没有问题，但放到线上就是有奇奇怪怪的问题，如果能调试压缩后的代码也会比较直观~我是一直很喜欢这个方法拉。</p>\n"},{"title":"【github】使用my-json-server建立线上测试api库","date":"2021-11-27T14:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### my-json-server\n点击访问：[my-json-server](https://my-json-server.typicode.com/)\n\n#### 1. 创建db.json文件并提交至master/main\n```\n{\n\t\"posts\": [\n\t\t{ \"id\": 1, \"title\": \"Post 1\" },\n\t\t{ \"id\": 2, \"title\": \"Post 2\" },\n\t\t{ \"id\": 3, \"title\": \"Post 3\" }\n\t],\n\t\"comments\": [\n\t\t{ \"id\": 1, \"body\": \"some comment\", \"postId\": 1 },\n\t\t{ \"id\": 2, \"body\": \"some comment\", \"postId\": 1 }\n\t],\n\t\"profile\": {\n\t\t\"name\": \"typicode\"\n\t}\n}\n```\n#### 2. 请求方式\n访问 `https://my-json-server.typicode.com/[你的用户名]/[你的仓库名]`，可以获取到api列表\n \n比如，我的地址为：[https://my-json-server.typicode.com/yuxiaoyujun/api](https://my-json-server.typicode.com/yuxiaoyujun/api) \n点击页面提供的链接就可以访问到对应的api\n![](https://upload-images.jianshu.io/upload_images/20892169-a1695b0d2cf0ad44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nposts接口数据\nhttps://my-json-server.typicode.com/yuxiaoyujun/api/posts\nprofile接口数据\nhttps://my-json-server.typicode.com/yuxiaoyujun/api/profile\n![](https://upload-images.jianshu.io/upload_images/20892169-aa26d983fc5947a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/cxy/other/git-my-json-server.md","raw":"---\ntitle: '【github】使用my-json-server建立线上测试api库'\ndate: 2021-11-27 22:21:49\ntags: 实用开源代码or工具\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### my-json-server\n点击访问：[my-json-server](https://my-json-server.typicode.com/)\n\n#### 1. 创建db.json文件并提交至master/main\n```\n{\n\t\"posts\": [\n\t\t{ \"id\": 1, \"title\": \"Post 1\" },\n\t\t{ \"id\": 2, \"title\": \"Post 2\" },\n\t\t{ \"id\": 3, \"title\": \"Post 3\" }\n\t],\n\t\"comments\": [\n\t\t{ \"id\": 1, \"body\": \"some comment\", \"postId\": 1 },\n\t\t{ \"id\": 2, \"body\": \"some comment\", \"postId\": 1 }\n\t],\n\t\"profile\": {\n\t\t\"name\": \"typicode\"\n\t}\n}\n```\n#### 2. 请求方式\n访问 `https://my-json-server.typicode.com/[你的用户名]/[你的仓库名]`，可以获取到api列表\n \n比如，我的地址为：[https://my-json-server.typicode.com/yuxiaoyujun/api](https://my-json-server.typicode.com/yuxiaoyujun/api) \n点击页面提供的链接就可以访问到对应的api\n![](https://upload-images.jianshu.io/upload_images/20892169-a1695b0d2cf0ad44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nposts接口数据\nhttps://my-json-server.typicode.com/yuxiaoyujun/api/posts\nprofile接口数据\nhttps://my-json-server.typicode.com/yuxiaoyujun/api/profile\n![](https://upload-images.jianshu.io/upload_images/20892169-aa26d983fc5947a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"cxy/other/git-my-json-server","published":1,"updated":"2023-02-01T11:19:41.197Z","_id":"cldbn5nu50004f0wi06xi04jf","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"my-json-server\"><a href=\"#my-json-server\" class=\"headerlink\" title=\"my-json-server\"></a>my-json-server</h4><p>点击访问：<a href=\"https://my-json-server.typicode.com/\">my-json-server</a></p>\n<h4 id=\"1-创建db-json文件并提交至master-main\"><a href=\"#1-创建db-json文件并提交至master-main\" class=\"headerlink\" title=\"1. 创建db.json文件并提交至master/main\"></a>1. 创建db.json文件并提交至master/main</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;posts&quot;: [</span><br><span class=\"line\">\t\t&#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;Post 1&quot; &#125;,</span><br><span class=\"line\">\t\t&#123; &quot;id&quot;: 2, &quot;title&quot;: &quot;Post 2&quot; &#125;,</span><br><span class=\"line\">\t\t&#123; &quot;id&quot;: 3, &quot;title&quot;: &quot;Post 3&quot; &#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;comments&quot;: [</span><br><span class=\"line\">\t\t&#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;,</span><br><span class=\"line\">\t\t&#123; &quot;id&quot;: 2, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;profile&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;name&quot;: &quot;typicode&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-请求方式\"><a href=\"#2-请求方式\" class=\"headerlink\" title=\"2. 请求方式\"></a>2. 请求方式</h4><p>访问 <code>https://my-json-server.typicode.com/[你的用户名]/[你的仓库名]</code>，可以获取到api列表</p>\n<p>比如，我的地址为：<a href=\"https://my-json-server.typicode.com/yuxiaoyujun/api\">https://my-json-server.typicode.com/yuxiaoyujun/api</a> <br>点击页面提供的链接就可以访问到对应的api<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a1695b0d2cf0ad44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>posts接口数据<br><a href=\"https://my-json-server.typicode.com/yuxiaoyujun/api/posts\">https://my-json-server.typicode.com/yuxiaoyujun/api/posts</a><br>profile接口数据<br><a href=\"https://my-json-server.typicode.com/yuxiaoyujun/api/profile\">https://my-json-server.typicode.com/yuxiaoyujun/api/profile</a><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-aa26d983fc5947a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"my-json-server\"><a href=\"#my-json-server\" class=\"headerlink\" title=\"my-json-server\"></a>my-json-server</h4><p>点击访问：<a href=\"https://my-json-server.typicode.com/\">my-json-server</a></p>\n<h4 id=\"1-创建db-json文件并提交至master-main\"><a href=\"#1-创建db-json文件并提交至master-main\" class=\"headerlink\" title=\"1. 创建db.json文件并提交至master/main\"></a>1. 创建db.json文件并提交至master/main</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;posts&quot;: [</span><br><span class=\"line\">\t\t&#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;Post 1&quot; &#125;,</span><br><span class=\"line\">\t\t&#123; &quot;id&quot;: 2, &quot;title&quot;: &quot;Post 2&quot; &#125;,</span><br><span class=\"line\">\t\t&#123; &quot;id&quot;: 3, &quot;title&quot;: &quot;Post 3&quot; &#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;comments&quot;: [</span><br><span class=\"line\">\t\t&#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;,</span><br><span class=\"line\">\t\t&#123; &quot;id&quot;: 2, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;profile&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;name&quot;: &quot;typicode&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-请求方式\"><a href=\"#2-请求方式\" class=\"headerlink\" title=\"2. 请求方式\"></a>2. 请求方式</h4><p>访问 <code>https://my-json-server.typicode.com/[你的用户名]/[你的仓库名]</code>，可以获取到api列表</p>\n<p>比如，我的地址为：<a href=\"https://my-json-server.typicode.com/yuxiaoyujun/api\">https://my-json-server.typicode.com/yuxiaoyujun/api</a> <br>点击页面提供的链接就可以访问到对应的api<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a1695b0d2cf0ad44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>posts接口数据<br><a href=\"https://my-json-server.typicode.com/yuxiaoyujun/api/posts\">https://my-json-server.typicode.com/yuxiaoyujun/api/posts</a><br>profile接口数据<br><a href=\"https://my-json-server.typicode.com/yuxiaoyujun/api/profile\">https://my-json-server.typicode.com/yuxiaoyujun/api/profile</a><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-aa26d983fc5947a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"【github】私有仓库如何避免每次pull都要输入用户名密码","date":"2021-05-14T22:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### 一. 使用https提交方式：\n\n###### 1. 使用git config命令在本地全局设置用户名和邮箱\n\n``git config --global user.name \"username\"``：全局添加用户名\n``git config --global user.email “someone@mail.com”``：全局添加邮箱\n``git config --global credential.helper store``： 该命令用于为credential.helper设置值，避免重复输入用户名密码\n\n###### 2. 执行完成以上后，运行\n``cat ~/.gitconfig``\n会发现.gitconfig多出了以下代码\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-6f69db560ee3dce8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###### 3. 再次git pull，只需输入一次密码，之后就可以不再输入密码了。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-e7f7b35931f8b774.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 二、使用ssh提交方式：\n###### 1. 生成秘钥\n执行``ssh-keygen``。\n如果原本没有秘钥，就一路回车。如果有秘钥且秘钥关联了其他网站的项目，比如gitlab什么的，那就需要重新指定目录。\n![](https://upload-images.jianshu.io/upload_images/20892169-c34eb67d9e738fb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n###### 2. 获取公钥\n执行 ``cat 你指定的目录/id_rsa.pub``获取公钥（如果没指定，就是 ``~/.ssh/id_rsa.pub``）\n###### 3. github中，新建ssh\n![](https://upload-images.jianshu.io/upload_images/20892169-2cbe3ed2d34e88e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n###### 4. 复制公钥粘贴保存即可。\n![](https://upload-images.jianshu.io/upload_images/20892169-7603f2c0488cab4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","source":"_posts/cxy/other/github-siyoucangku.md","raw":"---\ntitle: '【github】私有仓库如何避免每次pull都要输入用户名密码'\ndate: 2021-05-15 06:21:49\ntags: github\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### 一. 使用https提交方式：\n\n###### 1. 使用git config命令在本地全局设置用户名和邮箱\n\n``git config --global user.name \"username\"``：全局添加用户名\n``git config --global user.email “someone@mail.com”``：全局添加邮箱\n``git config --global credential.helper store``： 该命令用于为credential.helper设置值，避免重复输入用户名密码\n\n###### 2. 执行完成以上后，运行\n``cat ~/.gitconfig``\n会发现.gitconfig多出了以下代码\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-6f69db560ee3dce8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###### 3. 再次git pull，只需输入一次密码，之后就可以不再输入密码了。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-e7f7b35931f8b774.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 二、使用ssh提交方式：\n###### 1. 生成秘钥\n执行``ssh-keygen``。\n如果原本没有秘钥，就一路回车。如果有秘钥且秘钥关联了其他网站的项目，比如gitlab什么的，那就需要重新指定目录。\n![](https://upload-images.jianshu.io/upload_images/20892169-c34eb67d9e738fb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n###### 2. 获取公钥\n执行 ``cat 你指定的目录/id_rsa.pub``获取公钥（如果没指定，就是 ``~/.ssh/id_rsa.pub``）\n###### 3. github中，新建ssh\n![](https://upload-images.jianshu.io/upload_images/20892169-2cbe3ed2d34e88e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n###### 4. 复制公钥粘贴保存即可。\n![](https://upload-images.jianshu.io/upload_images/20892169-7603f2c0488cab4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","slug":"cxy/other/github-siyoucangku","published":1,"updated":"2023-02-01T11:19:41.199Z","_id":"cldbn5nu50006f0wi4pqv5d3h","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"一-使用https提交方式：\"><a href=\"#一-使用https提交方式：\" class=\"headerlink\" title=\"一. 使用https提交方式：\"></a>一. 使用https提交方式：</h4><h6 id=\"1-使用git-config命令在本地全局设置用户名和邮箱\"><a href=\"#1-使用git-config命令在本地全局设置用户名和邮箱\" class=\"headerlink\" title=\"1. 使用git config命令在本地全局设置用户名和邮箱\"></a>1. 使用git config命令在本地全局设置用户名和邮箱</h6><p><code>git config --global user.name &quot;username&quot;</code>：全局添加用户名<br><code>git config --global user.email “someone@mail.com”</code>：全局添加邮箱<br><code>git config --global credential.helper store</code>： 该命令用于为credential.helper设置值，避免重复输入用户名密码</p>\n<h6 id=\"2-执行完成以上后，运行\"><a href=\"#2-执行完成以上后，运行\" class=\"headerlink\" title=\"2. 执行完成以上后，运行\"></a>2. 执行完成以上后，运行</h6><p><code>cat ~/.gitconfig</code><br>会发现.gitconfig多出了以下代码<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6f69db560ee3dce8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h6 id=\"3-再次git-pull，只需输入一次密码，之后就可以不再输入密码了。\"><a href=\"#3-再次git-pull，只需输入一次密码，之后就可以不再输入密码了。\" class=\"headerlink\" title=\"3. 再次git pull，只需输入一次密码，之后就可以不再输入密码了。\"></a>3. 再次git pull，只需输入一次密码，之后就可以不再输入密码了。</h6><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e7f7b35931f8b774.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"二、使用ssh提交方式：\"><a href=\"#二、使用ssh提交方式：\" class=\"headerlink\" title=\"二、使用ssh提交方式：\"></a>二、使用ssh提交方式：</h4><h6 id=\"1-生成秘钥\"><a href=\"#1-生成秘钥\" class=\"headerlink\" title=\"1. 生成秘钥\"></a>1. 生成秘钥</h6><p>执行<code>ssh-keygen</code>。<br>如果原本没有秘钥，就一路回车。如果有秘钥且秘钥关联了其他网站的项目，比如gitlab什么的，那就需要重新指定目录。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c34eb67d9e738fb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h6 id=\"2-获取公钥\"><a href=\"#2-获取公钥\" class=\"headerlink\" title=\"2. 获取公钥\"></a>2. 获取公钥</h6><p>执行 <code>cat 你指定的目录/id_rsa.pub</code>获取公钥（如果没指定，就是 <code>~/.ssh/id_rsa.pub</code>）</p>\n<h6 id=\"3-github中，新建ssh\"><a href=\"#3-github中，新建ssh\" class=\"headerlink\" title=\"3. github中，新建ssh\"></a>3. github中，新建ssh</h6><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2cbe3ed2d34e88e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h6 id=\"4-复制公钥粘贴保存即可。\"><a href=\"#4-复制公钥粘贴保存即可。\" class=\"headerlink\" title=\"4. 复制公钥粘贴保存即可。\"></a>4. 复制公钥粘贴保存即可。</h6><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-7603f2c0488cab4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"一-使用https提交方式：\"><a href=\"#一-使用https提交方式：\" class=\"headerlink\" title=\"一. 使用https提交方式：\"></a>一. 使用https提交方式：</h4><h6 id=\"1-使用git-config命令在本地全局设置用户名和邮箱\"><a href=\"#1-使用git-config命令在本地全局设置用户名和邮箱\" class=\"headerlink\" title=\"1. 使用git config命令在本地全局设置用户名和邮箱\"></a>1. 使用git config命令在本地全局设置用户名和邮箱</h6><p><code>git config --global user.name &quot;username&quot;</code>：全局添加用户名<br><code>git config --global user.email “someone@mail.com”</code>：全局添加邮箱<br><code>git config --global credential.helper store</code>： 该命令用于为credential.helper设置值，避免重复输入用户名密码</p>\n<h6 id=\"2-执行完成以上后，运行\"><a href=\"#2-执行完成以上后，运行\" class=\"headerlink\" title=\"2. 执行完成以上后，运行\"></a>2. 执行完成以上后，运行</h6><p><code>cat ~/.gitconfig</code><br>会发现.gitconfig多出了以下代码<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6f69db560ee3dce8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h6 id=\"3-再次git-pull，只需输入一次密码，之后就可以不再输入密码了。\"><a href=\"#3-再次git-pull，只需输入一次密码，之后就可以不再输入密码了。\" class=\"headerlink\" title=\"3. 再次git pull，只需输入一次密码，之后就可以不再输入密码了。\"></a>3. 再次git pull，只需输入一次密码，之后就可以不再输入密码了。</h6><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e7f7b35931f8b774.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"二、使用ssh提交方式：\"><a href=\"#二、使用ssh提交方式：\" class=\"headerlink\" title=\"二、使用ssh提交方式：\"></a>二、使用ssh提交方式：</h4><h6 id=\"1-生成秘钥\"><a href=\"#1-生成秘钥\" class=\"headerlink\" title=\"1. 生成秘钥\"></a>1. 生成秘钥</h6><p>执行<code>ssh-keygen</code>。<br>如果原本没有秘钥，就一路回车。如果有秘钥且秘钥关联了其他网站的项目，比如gitlab什么的，那就需要重新指定目录。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c34eb67d9e738fb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h6 id=\"2-获取公钥\"><a href=\"#2-获取公钥\" class=\"headerlink\" title=\"2. 获取公钥\"></a>2. 获取公钥</h6><p>执行 <code>cat 你指定的目录/id_rsa.pub</code>获取公钥（如果没指定，就是 <code>~/.ssh/id_rsa.pub</code>）</p>\n<h6 id=\"3-github中，新建ssh\"><a href=\"#3-github中，新建ssh\" class=\"headerlink\" title=\"3. github中，新建ssh\"></a>3. github中，新建ssh</h6><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2cbe3ed2d34e88e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h6 id=\"4-复制公钥粘贴保存即可。\"><a href=\"#4-复制公钥粘贴保存即可。\" class=\"headerlink\" title=\"4. 复制公钥粘贴保存即可。\"></a>4. 复制公钥粘贴保存即可。</h6><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-7603f2c0488cab4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"zbrush/blender雕刻工作流gob交互","date":"2022-10-05T02:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n希望下次我再看我自己讲话能听懂。\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MCCNIRBPKcI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","source":"_posts/jianmo/zb-bl-gob.md","raw":"---\ntitle: 'zbrush/blender雕刻工作流gob交互'\ndate: 2022-10-05 10:21:49\ntags: \n  - zbrush\n  - blender\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n希望下次我再看我自己讲话能听懂。\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MCCNIRBPKcI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","slug":"jianmo/zb-bl-gob","published":1,"updated":"2023-01-25T12:30:44.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbnaatn0000r0wih8moc1oa","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>希望下次我再看我自己讲话能听懂。</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MCCNIRBPKcI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>希望下次我再看我自己讲话能听懂。</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MCCNIRBPKcI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>"},{"title":"【菜谱】自己做的菜合集 + 简单描述的菜谱们","date":"2022-07-23T04:33:23.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n日记本来一直在有道云写的，因为有道云太辣鸡吞了我好多图所以当做日记一样复制过来。\n所以图拍的不是那么讲究，背后很多杂物，甚至很多是吃了一半才想起来拍一张。。。\n好多图都被有道云吃了，现在只能找回这些了，真惨。\n\n##香辣鸡翅尖\n1. 鸡翅尖开水焯水，加一点点盐，两三分钟捞出备用。\n2. 切葱、蒜、干辣椒段、花椒、准备一点熟白芝麻。\n3. 锅中热油，放入蒜、干辣椒段（泡水）、花椒，炒香。\n4. 倒入一点点火锅底料，炒化后倒入鸡翅。\n5. 炒出香味后，倒入鸡翅尖，翻炒均匀后加生抽、糖、蚝油、孜然等尝味道。\n6. 撒入香葱翻均匀，撒入芝麻，留一点点香葱装盘后洒在表面做点缀。\n\n![鸡翅尖](https://upload-images.jianshu.io/upload_images/20892169-5394a346fc348dd3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##炸鸡翅根\n1. 鸡翅洗净剪开，露出骨头。\n2. 酱油、糖、蚝油、花椒粉、辣椒粉、孜然粉、五香粉、蒜、葱、水淀粉进行腌制，二十分钟左右可以拿出。\n3. 低筋面粉+淀粉1:1进行混合，腌好的鸡翅根放入其中粘上粉末，捏紧实。搓一搓，再次裹上粉。\n4. 如果想脆皮厚一些，可以准备一个放了清水的碗，裹好粉的鸡翅放入水中浸一下就捞出，然后再重复裹上粉，搓一搓的步骤。\n5. 油温三成热下入鸡翅，小火炸一会儿翻一下面，炸八分钟到十分钟。用筷子插鸡翅如果可以插透表示熟了。\n6.捞出鸡翅控油，大火让让油温十成热，下入鸡翅，炸制表面金黄且完全脱水，变为脆脆的感觉即可。\n![炸鸡翅根](https://upload-images.jianshu.io/upload_images/20892169-bdf3e93dec19bfff.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##仿南大门米糕做的桂花糕\n比较麻烦，快赶上烤蛋糕那么麻烦了，但很好吃。\n\n**材料：**\n粘米粉、糯米粉、糖粉，桂花糖，干桂花，还需要准备切刀，30+目筛子，最好是60目，最好备个电子秤，模具，我的是四寸方形慕斯蛋糕模具。\n\n**比例：**\n粘米粉：糯米粉：糖粉 = 3:1:1，我用的是四寸方形模具，粘米粉：糯米粉：糖粉 = 150g:50g:50g。还多出一些，做了两次。\n水：约为糯米粉or糖粉的两倍，如糯米粉五十克，则水要一百克。\n\n**详细过程：**\n1. 糯米粉、粘米粉混合，然后一点一点慢慢加水，搅成一个个松散的小坨坨。\n2. 过筛成细细的粉，不要按压细粉，多过几遍筛会让口感更细腻。\n3. 蒸锅垫布，模具放入蒸锅，倒入细细的粉，千万不要按压千万不要按压千万不要按压！用刮刀把表面刮平整，，，，，小心翼翼的切分为3*3的九宫格，如果这时候不切开，蒸好后切开就容易碎不好看。\n4. 水开后转小火，放上去东西蒸20分钟左右。蒸到五分钟左右的时候其实模具就可以拿掉了，不要等最后才拿模具，因为水会聚集在底部，底部会显得很湿。\n5. 蒸完后拿出来，每一块上挤上桂花糖，撒上桂花，趁热吃吧。\n\n![桂花糕](https://upload-images.jianshu.io/upload_images/20892169-67cd1fae272bce4b.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##桂花蒸鸡蛋羹\n1. 普通的蒸鸡蛋，就是鸡蛋打了之后加水到鸡蛋一倍左右，然后加盐，把表面气泡用勺子或者别的撇干净。\n2. 裹保鲜膜扎洞小火蒸，出锅后表面撒上桂花，切一半圣女果摆上去，沿碗边加上酱油即可。\n![桂花蒸鸡蛋羹](https://upload-images.jianshu.io/upload_images/20892169-5dd532cd478303db.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 蒜蓉粉丝娃娃菜\n1. 至少一颗整蒜，切末，红尖椒，切碎，切葱、准备几颗花椒。\n2. 小火加入油三四成热，油多倒一点，下入花椒炸出香味，下入尖椒翻炒一下，加入蒜末炸至金黄。\n3. 倒入生抽、白糖、蚝油、一点点孜然，尝味道合适了备用。\n4. 娃娃菜洗净铺在盘底，上面放上泡软的粉丝，倒入炒好的蒜香油。\n5. 烧开水，上蒸锅蒸二十分钟。\n6. 端出来，加入香葱点缀即可。\n\n![蒸娃娃菜](https://upload-images.jianshu.io/upload_images/20892169-0623d22da9f9cb51.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 鸡蛋杂菜薄饼\n太简单了，不写做法了。\n![鸡蛋杂菜薄饼](https://upload-images.jianshu.io/upload_images/20892169-c7232bd25f3cae29.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当然也可以卷了切开做鸡蛋卷，中间加了些肉松。\n以前的我还真讲究摆盘。。\n\n![鸡蛋卷](https://upload-images.jianshu.io/upload_images/20892169-3b37de4609f06793.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##杂菜饭团\n1. 米饭煮好，香菇、火腿、玉米、肉松、海苔/裙带菜切碎，切葱蒜小米辣。\n2. 小火炒香蒜小米辣，下香菇碎、火腿碎、玉米粒、裙带菜/海苔，加盐、味精调味至合适倒入米饭中搅拌。\n捏成团摆入盘中，芝士切片铺在饭团上，蒸锅蒸化芝士即可。\n\n![杂菜饭团 芝士款](https://upload-images.jianshu.io/upload_images/20892169-fb30ebe1cd2afc9e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![杂菜饭团 无芝士款](https://upload-images.jianshu.io/upload_images/20892169-1f3d4ac62f9657af.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##麻辣鸭掌\n1. 鸭掌凉水下锅焯水，焯水后大火转小火，煮四十分钟以上，想要软烂则一小时以上最好。\n2. 捞出洗净，准备四五个蒜瓣切蒜末（or蒜瓣拍碎，喜欢吃蒜可以切蒜末），稍微多一些的干辣椒，三根香葱，花椒一小把，熟白芝麻。\n3. 大火热油，加入一小块火锅底料炒化，下入蒜末、干辣椒（泡水）、花椒翻炒出香味，下入鸭掌翻炒均匀，加入一点点老抽调色，加入生抽、蚝油、糖调味，（尝一下锅铲的味道。。。合适的话），翻炒几下即可出锅了，关火后加入香葱翻一下，再加入白芝麻翻一下，可以加一点点鸡精翻均匀。\n4. 装盘再在表面撒一些香葱和白芝麻即可。\n\n![麻辣鸭掌](https://upload-images.jianshu.io/upload_images/20892169-9443a4915bea894d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##蛋挞\n蛋挞皮是现成的，蛋挞液是炼乳+蛋黄+牛奶+白糖，过筛后倒入蛋挞皮，180度预热烤箱，然后放进去烤20分钟左右就好了，反正烤箱是可以看表面状态的。\n下次拿出来的时候要小心烫手，我把自己手指烫了。\n![蛋挞](https://upload-images.jianshu.io/upload_images/20892169-86453049c21bfa0e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##麻辣花蛤\n1. 花蛤泡的久一点让他吐沙，然后剥出来。\n2. 开水加料酒焯水两三分钟让它熟了，捞出备用。\n3.准备干辣椒花椒小葱蒜瓣拍碎，干辣椒蒜瓣花椒大火下锅炒出香味，加入花蛤翻几下，加生抽蚝油糖翻几下，加一点点孜然翻几下，嫌颜色不够可以加一点点老抽，然后就可以出锅了。\n\n![麻辣花蛤](http://upload-images.jianshu.io/upload_images/20892169-debbabeb37d5d7b0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50)\n\n##年年有余\n1. 吉利丁粉在热水中一点一点加，一定要一点一点加。慢慢融化慢慢融化，加入糖，加入枸杞。\n2. 倒入模具中冷藏一小时or更长，发现凝固了就拿出来脱模就完成了。如果是很薄的塑料膜可能会沾膜，拿根牙签稍微挑一下就行了。\n3. 周围撒上枸杞。\n说真的真好看，但口感一般，也就果冻的味道，却没有果冻的添加剂。平时我一个人过节的时候，或者还剩吉利丁消耗不掉的时候才会做一做，我是羞于拿它的口感出来招待客人的。\n![年年有余](https://upload-images.jianshu.io/upload_images/20892169-9955566bc27297ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n##糖葫芦 - 小番茄版\n1. 圣女果洗净两两穿好备用\n2. 糖：水=2：1，放入小锅（重要）小锅中加热，先大火将糖融化至起大泡，然后小火至起小泡，继续加热，至用筷子蘸取糖液，若能拉丝，则放入冰水中，结成块且尝起来易脆则ok。全程不要搅动。\n3. 串好的圣女果在锅中沾满糖液，小心拿起避免拉丝，然后放入冰水中浸泡至定型，放入盘中即完成。\n\n![糖葫芦 - 小番茄版](https://upload-images.jianshu.io/upload_images/20892169-d47a0c8cf0da1182.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![糖葫芦 - 小番茄版](https://upload-images.jianshu.io/upload_images/20892169-0f00f3a39849a617.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##冒红薯粉\n1. 红薯粉开水下锅加一点盐煮20分钟，捞出凉水洗一下。\n2. 切小米辣、蒜末（多多多）、葱末（多多多）、香菜（半根）、辣椒面、准备白芝麻大半勺、花生酱一两勺（or花生碎+芝麻酱）、孜然、白糖、蚝油，混合，倒入热油（多一些）搅拌均匀，冷一会儿后加入鸡精、生抽再搅拌。\n3. 与粉混合均匀，完成。如果想更好看些，可以再混合后加入小葱香菜在表面做点缀。\n\n![冒红薯粉](https://upload-images.jianshu.io/upload_images/20892169-bf698a4a9d9d9c1a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##自制钵钵鸡汤底\n炖鸡汤，一部分鸡汤放盐备用\n素菜开水加盐焯熟，荤菜凉水加盐焯熟\n魔芋要先泡水之后，再煮二十分钟，魔芋不熟有毒，不泡水会去不掉碱味的\n炒些辣椒油（孜然/辣椒面/花椒/糖/盐/味精/炸花生米/熟白芝麻/其他，热油泼进）\n干辣椒多些（稍微泡水再过水），花椒多些（稍微泡水再过水），八角，辣椒面，葱段，蒜瓣拍碎\n锅中稍多点油，放入两勺豆瓣酱，炒出红油，放入上述干辣椒等材料片炒出香味，然后加高汤，然后大火煮沸，转小火加盐调味。\n五分钟左右关火，捞出那些调料扔掉，加入炒好的辣椒油（一点一点加，防溅锅），然后加大量鸡精调味。\n汤底倒出汤碗中，放入食材浸泡越长时间越好即可。\n\n![自制钵钵鸡汤底](https://upload-images.jianshu.io/upload_images/20892169-303602ebfae2a9c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##鸡胸肉饼\n1. 鸡胸肉搅碎，加玉米粒、豌豆粒、葱、小米辣、二荆条辣椒，盐、鸡精、花椒粉、生抽。\n2. 锅中放入涂上油的圆形模具，倒入油，小火加热，加入鸡肉铺好，待定型取下圆形模具，盖上锅盖焖一下，开锅翻面煎。\n3. 怕碎可以加淀粉，但我是不加的，我也没碎，只要鸡胸肉处理的够筋道就不会碎，多摔打，多搅拌，像搅饺子馅那样。\n\n![鸡胸肉饼](https://upload-images.jianshu.io/upload_images/20892169-10cb7c22842fa279.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##牛奶桂花土豆泥\n1. 土豆洗净切块蒸熟，混合白糖用料理机打成泥，加入\n2. 牛奶拌匀，倒入碗中搅拌均匀，铺上桂花，铺上桂花蜜。\n\n![牛奶桂花土豆泥](https://upload-images.jianshu.io/upload_images/20892169-91ad563fd105efb9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![牛奶桂花土豆泥](https://upload-images.jianshu.io/upload_images/20892169-791c7016b2c3aee7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##狼牙土豆\n1. 土豆用狼牙刀切成条状，浸泡去淀粉。\n2. 锅中水烧开加盐，土豆放入水中焯熟，不要煮太久，捞出控水。\n3. 碗中放辣子面、孜然、花椒（多）花椒粉、糖（灵魂）、白芝麻、葱、蒜末（一个都不要少）、味精、盐，油烧滚泼入，搅拌至盐融化。\n4. 土豆控水后，将调料倒入即可。\n\n![狼牙土豆](https://upload-images.jianshu.io/upload_images/20892169-ebd6dc12b5338a6a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##干煸辣子鸡.\n1. 鸡腿肉去骨，剪成小块儿\n2. 花椒粉+辣椒粉+生抽+一点点老抽+白糖+五香粉+孜然粉，腌制十五分钟。\n3. 干辣椒、花椒切段泡水，蒜切片，准备一小段大葱。\n4. 锅中入油，小火加热至三分热倒入鸡腿，加入大葱葱段、花椒、蒜片一起炸，鸡腿炸去水分微金黄捞出控油，油十分热再炸一遍。\n5. 油倒掉，锅中重新加入多一点的油，倒入辣椒段、花椒、蒜片翻炒出香味，加入鸡腿肉翻炒一分钟即可出锅。\n特别好吃！\n\n![干煸辣子鸡](https://upload-images.jianshu.io/upload_images/20892169-1be285a4a81835f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##红烧后腿肉\n五五分的肉，比较肥，感觉还是红烧比较有味道。\n就是普通红烧肉的做法，不说了。\n![红烧后腿肉](https://upload-images.jianshu.io/upload_images/20892169-38029678655841a0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##香菇炖鸡腿汤\n1. 新！鲜！的鸡全腿用剪刀剪出露出骨头，放入锅中焯水，倒些料酒，放入花椒、大葱段一小段。\n2. 捞出洗净，炖锅中倒入许多凉水，放入鸡腿，加入三两颗花椒、一片姜片，放入两三朵新鲜香菇，大火烧开转小火，炖越久肉越烂。\n3. 其实更简单的方法就是放进电饭煲按煲汤模式。。火候不用自己看，到时间了就自然好了。\n\n![香菇炖鸡腿汤](https://upload-images.jianshu.io/upload_images/20892169-0a5efa5018d6b1f2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##烤口蘑\n1. 口蘑小心去蒂，放入空气炸锅160度烤十分钟。\n2. 锅中放玉米油，蒜切碎（或打成蒜泥），切小米辣、蒜苗，炒蒜蓉酱，先小火加热油，倒入蒜末，小火炒制发黄，加入小米辣碎，搅几下，关火加入白糖、盐、味精搅化。\n3. 倒在烤好的口蘑上，撒上蒜苗和葱花即可。\n\n![烤口蘑](https://upload-images.jianshu.io/upload_images/20892169-10c13ffadd650432.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##清炖狮子头\n1. 五花肉/后腿肉/前腿肉/梅花肉洗净，切碎，加入葱、蒜末（要切的很碎很碎）、马蹄碎（建议加，没有也可以不加）、淀粉，反正别用纯瘦肉。\n2. 向一个方向搅搅搅，直到感觉有那种韧劲儿了，就比饺子馅还有韧劲儿的那种感觉，然后摔打，多摔几下。\n3. 做成大丸子，凉水烧一会儿大概有温度了就下炖锅，慢慢放下去小心碎了，然后大火烧开，小火四五十分钟就可以了。\n\n![清炖狮子头](https://upload-images.jianshu.io/upload_images/20892169-fcac809ae1752953.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##鸡蛋饼裹生菜\n太简单了都不想说了\n就是鸡蛋+低筋面粉加了些调味料（盐、花椒粉、糖、孜然，反正根据自己口味加。），搅拌至没有面粉沉淀，然后加入自己喜欢的配菜搅拌成均匀的糊糊，比如玉米粒、香葱、小米辣碎、火腿等等\n热锅凉油下入上面说的糊糊，小火小火小火，均匀撒上黑芝麻，一面定型后翻至另一面煎熟，然后拿出裹上生菜，表面挤上番茄酱即可。\n\n![鸡蛋饼裹生菜](https://upload-images.jianshu.io/upload_images/20892169-37fcc35c753f556f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##炸香菇\n1. 一勺淀粉一勺低筋面粉一个鸡蛋，搅拌均匀，加一些花椒粉、五香粉、盐、孜然、糖。\n2. 香菇放里面裹上糊糊，然后小火加热油，油温三成热下香菇，炸至油温七成热熟了捞出。\n3. 大火加热油温到十成热，快速放入刚刚炸好的香菇，把表面水分彻底炸干，炸一会儿就捞出，然后表面撒上椒盐，就行了。\n\n![炸香菇](https://upload-images.jianshu.io/upload_images/20892169-cdb525162ab2817e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##娃娃菜粉丝汤\n没啥说的，奶白色汤的秘诀是，加入的配料比如火腿或者皮蛋是要先炒一下的，用除了菜籽油之外的油炒一下然后再加水炖，就会有奶白色的汤了。菜籽油其实也可以用，但炖出来的汤是黄的~味道没有太大差别。\n\n![娃娃菜粉丝汤](https://upload-images.jianshu.io/upload_images/20892169-9ae3212f80b0ff3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![娃娃菜粉丝汤 奶白汤](https://upload-images.jianshu.io/upload_images/20892169-b5eb40fae3a12afa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#油炸花生\n没啥说的，小火凉油倒入花生不停的翻炒，噼噼啪啪的声音出来就是好了。\n酥脆的秘诀就是捞出之后加入料酒然后用筷子不停的搅，加入料酒会有刺啦的声音，搅拌的时候也会冒烟\n\n![炒白花生](https://upload-images.jianshu.io/upload_images/20892169-f29f15b21dadec82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![炒红花生](https://upload-images.jianshu.io/upload_images/20892169-f78b2ed974664cfa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##好看不好吃的空气炸锅杏鲍菇\n1. 一个淀粉一个鸡蛋混合均匀加入花椒粉生抽孜然粉五香粉调味调味\n2. 面包糠放入另一个碗中备用。\n3. 杏鲍菇切条，放入淀粉鸡蛋液中滚一滚，再裹上面包糠，再放入鸡蛋液滚一滚，再裹一次面包糠，放入空气炸锅刷一层油，200度烤十分钟即可。\n4. 因为是面包糠，再加上空气炸锅虽说叫炸锅实际上是烤，所以表面很干很干，并没有那么好吃。无奈我只能就这个形态又去油炸了 一遍，味道才变得好吃，\n**注：**面包糠的特性是虽然脆，但不会像淀粉+面粉那样油炸之后边的膨胀，所以要想好看的话面包糠是要裹至少两遍的。\n\n![杏鲍菇 - 空气炸锅版](https://upload-images.jianshu.io/upload_images/20892169-4f001371b0d4e52b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##烤豆腐 - 空气炸锅版\n1. 豆腐横刀一刀，竖刀三四刀将豆腐切块。\n2. 空气炸锅平铺锡纸，豆腐摆入空气炸锅，180十分钟翻面，再烤十五分钟（或更长），考好拿出摆盘。\n3. 调酱汁，蚝油+糖（天下无双）加自己炒的特辣辣椒油和辣椒面，加一点孜然粉，加小葱和蒜和一点醋（这个料绝了，味道超级好）也可以加一点小米辣，我没加懒得切，倒在豆腐表面，完成。\n\n![烤豆腐 - 空气炸锅版](https://upload-images.jianshu.io/upload_images/20892169-2ebeb3eb510c4aa2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##烤苕皮\n酱汁：辣椒面、花椒面、孜然、熟白芝麻、韩式烧烤酱或糖各一勺，搅拌后淋上热油。\n炒些花生。\n刷上酱汁，苕皮一点油小火煎，煎至起泡，翻面刷上酱汁，煎至两面起泡，撒上香葱、韭菜、花生、榨菜，折三折，用竹签穿好即可。\n\n![烤苕皮](https://upload-images.jianshu.io/upload_images/20892169-8e91bb849ebbb77c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##烤五花肉片\n选新鲜的五花肉，新鲜的五花肉，新鲜的五花肉，腌个十来分钟，然后锅里小火煎熟就行。\n\n![烤五花肉片](https://upload-images.jianshu.io/upload_images/20892169-7ab220a7b7018fd2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##烤鸡腿\n腌料腌半小时–三小时，烤二十分钟中途翻面。\n我的腌料：花椒粉、生抽蚝油糖、孜然粉、辣椒粉、蒜末、葱\n烤的时候表面刷蜂蜜\n\n![烤鸡腿 - 空气炸锅](https://upload-images.jianshu.io/upload_images/20892169-0f1a3dc35df765f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##娃娃菜豆腐汤\n豆腐煎一下，加入水烧开，加入娃娃菜小火炖十几分钟，捞出撒入香葱。\n这个豆腐使用菜籽油煎的，所以汤变成了黄色。如果用玉米油煎就不会是黄色而是奶白色。\n\n![娃娃菜豆腐汤](https://upload-images.jianshu.io/upload_images/20892169-25e0cb89d37ba6cc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##拔丝土豆\n简单但麻烦，麻烦的点在于，锅如果当时做完不洗干净，等锅里的糖凉了就很难洗干净。。做菜五分钟洗锅一晚上。\n1. 水糖1:2熬糖，大火冒大泡转小火，熬一会儿拉丝了加入炸好的土豆块搅拌均匀即可。\n2. 炸土豆块就不说了，土豆块焯水七八成熟控水，下入三分热油锅炸熟，大火十成热油复炸就行了。\n\n![拔丝儿土豆](https://upload-images.jianshu.io/upload_images/20892169-24faf5b3579bf758.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##圆圆的煎鸡蛋~\n让它圆圆的秘诀在于不要用平底锅，要用普通炒锅，因为普通炒锅打鸡蛋下去不会跑偏。平底锅就容易跑偏。\n![煎鸡蛋](https://upload-images.jianshu.io/upload_images/20892169-b448ce6a747c351e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##月饼\n![月饼](https://upload-images.jianshu.io/upload_images/20892169-99d02f37a694c836.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n装到盒子里也很好看啵\n\n![装到盒子里也很好看啵](https://upload-images.jianshu.io/upload_images/20892169-6dceff1271840aa9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 酸菜鱼\n酸菜切了，加葱姜蒜花椒泡椒炒一炒\n鱼片成片，加花椒粉淀粉盐腌，鱼头骨炖汤。\n炒后的酸菜加鱼汤煮，煮到沸腾转小火，放入鱼片煮熟（一般鱼是熟的很快的）。\n碗底铺焯好水的豆芽和金针菇，然后捞出鱼片放在表面，倒入汤。\n表面再放花椒、干辣椒段、蒜末、香葱。热油淋上去表面撒上香葱即可。\n![4811662730488_.pic.jpg](https://upload-images.jianshu.io/upload_images/20892169-a2daff6f36e6a550.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/caipu.md","raw":"---\ntitle: 【菜谱】自己做的菜合集 + 简单描述的菜谱们\ndate: 2022-07-23 12:33:23\ntags: 菜谱\ncategories:\n  - 生活\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n日记本来一直在有道云写的，因为有道云太辣鸡吞了我好多图所以当做日记一样复制过来。\n所以图拍的不是那么讲究，背后很多杂物，甚至很多是吃了一半才想起来拍一张。。。\n好多图都被有道云吃了，现在只能找回这些了，真惨。\n\n##香辣鸡翅尖\n1. 鸡翅尖开水焯水，加一点点盐，两三分钟捞出备用。\n2. 切葱、蒜、干辣椒段、花椒、准备一点熟白芝麻。\n3. 锅中热油，放入蒜、干辣椒段（泡水）、花椒，炒香。\n4. 倒入一点点火锅底料，炒化后倒入鸡翅。\n5. 炒出香味后，倒入鸡翅尖，翻炒均匀后加生抽、糖、蚝油、孜然等尝味道。\n6. 撒入香葱翻均匀，撒入芝麻，留一点点香葱装盘后洒在表面做点缀。\n\n![鸡翅尖](https://upload-images.jianshu.io/upload_images/20892169-5394a346fc348dd3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##炸鸡翅根\n1. 鸡翅洗净剪开，露出骨头。\n2. 酱油、糖、蚝油、花椒粉、辣椒粉、孜然粉、五香粉、蒜、葱、水淀粉进行腌制，二十分钟左右可以拿出。\n3. 低筋面粉+淀粉1:1进行混合，腌好的鸡翅根放入其中粘上粉末，捏紧实。搓一搓，再次裹上粉。\n4. 如果想脆皮厚一些，可以准备一个放了清水的碗，裹好粉的鸡翅放入水中浸一下就捞出，然后再重复裹上粉，搓一搓的步骤。\n5. 油温三成热下入鸡翅，小火炸一会儿翻一下面，炸八分钟到十分钟。用筷子插鸡翅如果可以插透表示熟了。\n6.捞出鸡翅控油，大火让让油温十成热，下入鸡翅，炸制表面金黄且完全脱水，变为脆脆的感觉即可。\n![炸鸡翅根](https://upload-images.jianshu.io/upload_images/20892169-bdf3e93dec19bfff.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##仿南大门米糕做的桂花糕\n比较麻烦，快赶上烤蛋糕那么麻烦了，但很好吃。\n\n**材料：**\n粘米粉、糯米粉、糖粉，桂花糖，干桂花，还需要准备切刀，30+目筛子，最好是60目，最好备个电子秤，模具，我的是四寸方形慕斯蛋糕模具。\n\n**比例：**\n粘米粉：糯米粉：糖粉 = 3:1:1，我用的是四寸方形模具，粘米粉：糯米粉：糖粉 = 150g:50g:50g。还多出一些，做了两次。\n水：约为糯米粉or糖粉的两倍，如糯米粉五十克，则水要一百克。\n\n**详细过程：**\n1. 糯米粉、粘米粉混合，然后一点一点慢慢加水，搅成一个个松散的小坨坨。\n2. 过筛成细细的粉，不要按压细粉，多过几遍筛会让口感更细腻。\n3. 蒸锅垫布，模具放入蒸锅，倒入细细的粉，千万不要按压千万不要按压千万不要按压！用刮刀把表面刮平整，，，，，小心翼翼的切分为3*3的九宫格，如果这时候不切开，蒸好后切开就容易碎不好看。\n4. 水开后转小火，放上去东西蒸20分钟左右。蒸到五分钟左右的时候其实模具就可以拿掉了，不要等最后才拿模具，因为水会聚集在底部，底部会显得很湿。\n5. 蒸完后拿出来，每一块上挤上桂花糖，撒上桂花，趁热吃吧。\n\n![桂花糕](https://upload-images.jianshu.io/upload_images/20892169-67cd1fae272bce4b.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##桂花蒸鸡蛋羹\n1. 普通的蒸鸡蛋，就是鸡蛋打了之后加水到鸡蛋一倍左右，然后加盐，把表面气泡用勺子或者别的撇干净。\n2. 裹保鲜膜扎洞小火蒸，出锅后表面撒上桂花，切一半圣女果摆上去，沿碗边加上酱油即可。\n![桂花蒸鸡蛋羹](https://upload-images.jianshu.io/upload_images/20892169-5dd532cd478303db.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 蒜蓉粉丝娃娃菜\n1. 至少一颗整蒜，切末，红尖椒，切碎，切葱、准备几颗花椒。\n2. 小火加入油三四成热，油多倒一点，下入花椒炸出香味，下入尖椒翻炒一下，加入蒜末炸至金黄。\n3. 倒入生抽、白糖、蚝油、一点点孜然，尝味道合适了备用。\n4. 娃娃菜洗净铺在盘底，上面放上泡软的粉丝，倒入炒好的蒜香油。\n5. 烧开水，上蒸锅蒸二十分钟。\n6. 端出来，加入香葱点缀即可。\n\n![蒸娃娃菜](https://upload-images.jianshu.io/upload_images/20892169-0623d22da9f9cb51.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 鸡蛋杂菜薄饼\n太简单了，不写做法了。\n![鸡蛋杂菜薄饼](https://upload-images.jianshu.io/upload_images/20892169-c7232bd25f3cae29.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当然也可以卷了切开做鸡蛋卷，中间加了些肉松。\n以前的我还真讲究摆盘。。\n\n![鸡蛋卷](https://upload-images.jianshu.io/upload_images/20892169-3b37de4609f06793.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##杂菜饭团\n1. 米饭煮好，香菇、火腿、玉米、肉松、海苔/裙带菜切碎，切葱蒜小米辣。\n2. 小火炒香蒜小米辣，下香菇碎、火腿碎、玉米粒、裙带菜/海苔，加盐、味精调味至合适倒入米饭中搅拌。\n捏成团摆入盘中，芝士切片铺在饭团上，蒸锅蒸化芝士即可。\n\n![杂菜饭团 芝士款](https://upload-images.jianshu.io/upload_images/20892169-fb30ebe1cd2afc9e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![杂菜饭团 无芝士款](https://upload-images.jianshu.io/upload_images/20892169-1f3d4ac62f9657af.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##麻辣鸭掌\n1. 鸭掌凉水下锅焯水，焯水后大火转小火，煮四十分钟以上，想要软烂则一小时以上最好。\n2. 捞出洗净，准备四五个蒜瓣切蒜末（or蒜瓣拍碎，喜欢吃蒜可以切蒜末），稍微多一些的干辣椒，三根香葱，花椒一小把，熟白芝麻。\n3. 大火热油，加入一小块火锅底料炒化，下入蒜末、干辣椒（泡水）、花椒翻炒出香味，下入鸭掌翻炒均匀，加入一点点老抽调色，加入生抽、蚝油、糖调味，（尝一下锅铲的味道。。。合适的话），翻炒几下即可出锅了，关火后加入香葱翻一下，再加入白芝麻翻一下，可以加一点点鸡精翻均匀。\n4. 装盘再在表面撒一些香葱和白芝麻即可。\n\n![麻辣鸭掌](https://upload-images.jianshu.io/upload_images/20892169-9443a4915bea894d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##蛋挞\n蛋挞皮是现成的，蛋挞液是炼乳+蛋黄+牛奶+白糖，过筛后倒入蛋挞皮，180度预热烤箱，然后放进去烤20分钟左右就好了，反正烤箱是可以看表面状态的。\n下次拿出来的时候要小心烫手，我把自己手指烫了。\n![蛋挞](https://upload-images.jianshu.io/upload_images/20892169-86453049c21bfa0e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##麻辣花蛤\n1. 花蛤泡的久一点让他吐沙，然后剥出来。\n2. 开水加料酒焯水两三分钟让它熟了，捞出备用。\n3.准备干辣椒花椒小葱蒜瓣拍碎，干辣椒蒜瓣花椒大火下锅炒出香味，加入花蛤翻几下，加生抽蚝油糖翻几下，加一点点孜然翻几下，嫌颜色不够可以加一点点老抽，然后就可以出锅了。\n\n![麻辣花蛤](http://upload-images.jianshu.io/upload_images/20892169-debbabeb37d5d7b0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50)\n\n##年年有余\n1. 吉利丁粉在热水中一点一点加，一定要一点一点加。慢慢融化慢慢融化，加入糖，加入枸杞。\n2. 倒入模具中冷藏一小时or更长，发现凝固了就拿出来脱模就完成了。如果是很薄的塑料膜可能会沾膜，拿根牙签稍微挑一下就行了。\n3. 周围撒上枸杞。\n说真的真好看，但口感一般，也就果冻的味道，却没有果冻的添加剂。平时我一个人过节的时候，或者还剩吉利丁消耗不掉的时候才会做一做，我是羞于拿它的口感出来招待客人的。\n![年年有余](https://upload-images.jianshu.io/upload_images/20892169-9955566bc27297ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n##糖葫芦 - 小番茄版\n1. 圣女果洗净两两穿好备用\n2. 糖：水=2：1，放入小锅（重要）小锅中加热，先大火将糖融化至起大泡，然后小火至起小泡，继续加热，至用筷子蘸取糖液，若能拉丝，则放入冰水中，结成块且尝起来易脆则ok。全程不要搅动。\n3. 串好的圣女果在锅中沾满糖液，小心拿起避免拉丝，然后放入冰水中浸泡至定型，放入盘中即完成。\n\n![糖葫芦 - 小番茄版](https://upload-images.jianshu.io/upload_images/20892169-d47a0c8cf0da1182.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![糖葫芦 - 小番茄版](https://upload-images.jianshu.io/upload_images/20892169-0f00f3a39849a617.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##冒红薯粉\n1. 红薯粉开水下锅加一点盐煮20分钟，捞出凉水洗一下。\n2. 切小米辣、蒜末（多多多）、葱末（多多多）、香菜（半根）、辣椒面、准备白芝麻大半勺、花生酱一两勺（or花生碎+芝麻酱）、孜然、白糖、蚝油，混合，倒入热油（多一些）搅拌均匀，冷一会儿后加入鸡精、生抽再搅拌。\n3. 与粉混合均匀，完成。如果想更好看些，可以再混合后加入小葱香菜在表面做点缀。\n\n![冒红薯粉](https://upload-images.jianshu.io/upload_images/20892169-bf698a4a9d9d9c1a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##自制钵钵鸡汤底\n炖鸡汤，一部分鸡汤放盐备用\n素菜开水加盐焯熟，荤菜凉水加盐焯熟\n魔芋要先泡水之后，再煮二十分钟，魔芋不熟有毒，不泡水会去不掉碱味的\n炒些辣椒油（孜然/辣椒面/花椒/糖/盐/味精/炸花生米/熟白芝麻/其他，热油泼进）\n干辣椒多些（稍微泡水再过水），花椒多些（稍微泡水再过水），八角，辣椒面，葱段，蒜瓣拍碎\n锅中稍多点油，放入两勺豆瓣酱，炒出红油，放入上述干辣椒等材料片炒出香味，然后加高汤，然后大火煮沸，转小火加盐调味。\n五分钟左右关火，捞出那些调料扔掉，加入炒好的辣椒油（一点一点加，防溅锅），然后加大量鸡精调味。\n汤底倒出汤碗中，放入食材浸泡越长时间越好即可。\n\n![自制钵钵鸡汤底](https://upload-images.jianshu.io/upload_images/20892169-303602ebfae2a9c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##鸡胸肉饼\n1. 鸡胸肉搅碎，加玉米粒、豌豆粒、葱、小米辣、二荆条辣椒，盐、鸡精、花椒粉、生抽。\n2. 锅中放入涂上油的圆形模具，倒入油，小火加热，加入鸡肉铺好，待定型取下圆形模具，盖上锅盖焖一下，开锅翻面煎。\n3. 怕碎可以加淀粉，但我是不加的，我也没碎，只要鸡胸肉处理的够筋道就不会碎，多摔打，多搅拌，像搅饺子馅那样。\n\n![鸡胸肉饼](https://upload-images.jianshu.io/upload_images/20892169-10cb7c22842fa279.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##牛奶桂花土豆泥\n1. 土豆洗净切块蒸熟，混合白糖用料理机打成泥，加入\n2. 牛奶拌匀，倒入碗中搅拌均匀，铺上桂花，铺上桂花蜜。\n\n![牛奶桂花土豆泥](https://upload-images.jianshu.io/upload_images/20892169-91ad563fd105efb9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![牛奶桂花土豆泥](https://upload-images.jianshu.io/upload_images/20892169-791c7016b2c3aee7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##狼牙土豆\n1. 土豆用狼牙刀切成条状，浸泡去淀粉。\n2. 锅中水烧开加盐，土豆放入水中焯熟，不要煮太久，捞出控水。\n3. 碗中放辣子面、孜然、花椒（多）花椒粉、糖（灵魂）、白芝麻、葱、蒜末（一个都不要少）、味精、盐，油烧滚泼入，搅拌至盐融化。\n4. 土豆控水后，将调料倒入即可。\n\n![狼牙土豆](https://upload-images.jianshu.io/upload_images/20892169-ebd6dc12b5338a6a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##干煸辣子鸡.\n1. 鸡腿肉去骨，剪成小块儿\n2. 花椒粉+辣椒粉+生抽+一点点老抽+白糖+五香粉+孜然粉，腌制十五分钟。\n3. 干辣椒、花椒切段泡水，蒜切片，准备一小段大葱。\n4. 锅中入油，小火加热至三分热倒入鸡腿，加入大葱葱段、花椒、蒜片一起炸，鸡腿炸去水分微金黄捞出控油，油十分热再炸一遍。\n5. 油倒掉，锅中重新加入多一点的油，倒入辣椒段、花椒、蒜片翻炒出香味，加入鸡腿肉翻炒一分钟即可出锅。\n特别好吃！\n\n![干煸辣子鸡](https://upload-images.jianshu.io/upload_images/20892169-1be285a4a81835f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##红烧后腿肉\n五五分的肉，比较肥，感觉还是红烧比较有味道。\n就是普通红烧肉的做法，不说了。\n![红烧后腿肉](https://upload-images.jianshu.io/upload_images/20892169-38029678655841a0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##香菇炖鸡腿汤\n1. 新！鲜！的鸡全腿用剪刀剪出露出骨头，放入锅中焯水，倒些料酒，放入花椒、大葱段一小段。\n2. 捞出洗净，炖锅中倒入许多凉水，放入鸡腿，加入三两颗花椒、一片姜片，放入两三朵新鲜香菇，大火烧开转小火，炖越久肉越烂。\n3. 其实更简单的方法就是放进电饭煲按煲汤模式。。火候不用自己看，到时间了就自然好了。\n\n![香菇炖鸡腿汤](https://upload-images.jianshu.io/upload_images/20892169-0a5efa5018d6b1f2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##烤口蘑\n1. 口蘑小心去蒂，放入空气炸锅160度烤十分钟。\n2. 锅中放玉米油，蒜切碎（或打成蒜泥），切小米辣、蒜苗，炒蒜蓉酱，先小火加热油，倒入蒜末，小火炒制发黄，加入小米辣碎，搅几下，关火加入白糖、盐、味精搅化。\n3. 倒在烤好的口蘑上，撒上蒜苗和葱花即可。\n\n![烤口蘑](https://upload-images.jianshu.io/upload_images/20892169-10c13ffadd650432.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##清炖狮子头\n1. 五花肉/后腿肉/前腿肉/梅花肉洗净，切碎，加入葱、蒜末（要切的很碎很碎）、马蹄碎（建议加，没有也可以不加）、淀粉，反正别用纯瘦肉。\n2. 向一个方向搅搅搅，直到感觉有那种韧劲儿了，就比饺子馅还有韧劲儿的那种感觉，然后摔打，多摔几下。\n3. 做成大丸子，凉水烧一会儿大概有温度了就下炖锅，慢慢放下去小心碎了，然后大火烧开，小火四五十分钟就可以了。\n\n![清炖狮子头](https://upload-images.jianshu.io/upload_images/20892169-fcac809ae1752953.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##鸡蛋饼裹生菜\n太简单了都不想说了\n就是鸡蛋+低筋面粉加了些调味料（盐、花椒粉、糖、孜然，反正根据自己口味加。），搅拌至没有面粉沉淀，然后加入自己喜欢的配菜搅拌成均匀的糊糊，比如玉米粒、香葱、小米辣碎、火腿等等\n热锅凉油下入上面说的糊糊，小火小火小火，均匀撒上黑芝麻，一面定型后翻至另一面煎熟，然后拿出裹上生菜，表面挤上番茄酱即可。\n\n![鸡蛋饼裹生菜](https://upload-images.jianshu.io/upload_images/20892169-37fcc35c753f556f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##炸香菇\n1. 一勺淀粉一勺低筋面粉一个鸡蛋，搅拌均匀，加一些花椒粉、五香粉、盐、孜然、糖。\n2. 香菇放里面裹上糊糊，然后小火加热油，油温三成热下香菇，炸至油温七成热熟了捞出。\n3. 大火加热油温到十成热，快速放入刚刚炸好的香菇，把表面水分彻底炸干，炸一会儿就捞出，然后表面撒上椒盐，就行了。\n\n![炸香菇](https://upload-images.jianshu.io/upload_images/20892169-cdb525162ab2817e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##娃娃菜粉丝汤\n没啥说的，奶白色汤的秘诀是，加入的配料比如火腿或者皮蛋是要先炒一下的，用除了菜籽油之外的油炒一下然后再加水炖，就会有奶白色的汤了。菜籽油其实也可以用，但炖出来的汤是黄的~味道没有太大差别。\n\n![娃娃菜粉丝汤](https://upload-images.jianshu.io/upload_images/20892169-9ae3212f80b0ff3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![娃娃菜粉丝汤 奶白汤](https://upload-images.jianshu.io/upload_images/20892169-b5eb40fae3a12afa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#油炸花生\n没啥说的，小火凉油倒入花生不停的翻炒，噼噼啪啪的声音出来就是好了。\n酥脆的秘诀就是捞出之后加入料酒然后用筷子不停的搅，加入料酒会有刺啦的声音，搅拌的时候也会冒烟\n\n![炒白花生](https://upload-images.jianshu.io/upload_images/20892169-f29f15b21dadec82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![炒红花生](https://upload-images.jianshu.io/upload_images/20892169-f78b2ed974664cfa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##好看不好吃的空气炸锅杏鲍菇\n1. 一个淀粉一个鸡蛋混合均匀加入花椒粉生抽孜然粉五香粉调味调味\n2. 面包糠放入另一个碗中备用。\n3. 杏鲍菇切条，放入淀粉鸡蛋液中滚一滚，再裹上面包糠，再放入鸡蛋液滚一滚，再裹一次面包糠，放入空气炸锅刷一层油，200度烤十分钟即可。\n4. 因为是面包糠，再加上空气炸锅虽说叫炸锅实际上是烤，所以表面很干很干，并没有那么好吃。无奈我只能就这个形态又去油炸了 一遍，味道才变得好吃，\n**注：**面包糠的特性是虽然脆，但不会像淀粉+面粉那样油炸之后边的膨胀，所以要想好看的话面包糠是要裹至少两遍的。\n\n![杏鲍菇 - 空气炸锅版](https://upload-images.jianshu.io/upload_images/20892169-4f001371b0d4e52b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##烤豆腐 - 空气炸锅版\n1. 豆腐横刀一刀，竖刀三四刀将豆腐切块。\n2. 空气炸锅平铺锡纸，豆腐摆入空气炸锅，180十分钟翻面，再烤十五分钟（或更长），考好拿出摆盘。\n3. 调酱汁，蚝油+糖（天下无双）加自己炒的特辣辣椒油和辣椒面，加一点孜然粉，加小葱和蒜和一点醋（这个料绝了，味道超级好）也可以加一点小米辣，我没加懒得切，倒在豆腐表面，完成。\n\n![烤豆腐 - 空气炸锅版](https://upload-images.jianshu.io/upload_images/20892169-2ebeb3eb510c4aa2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##烤苕皮\n酱汁：辣椒面、花椒面、孜然、熟白芝麻、韩式烧烤酱或糖各一勺，搅拌后淋上热油。\n炒些花生。\n刷上酱汁，苕皮一点油小火煎，煎至起泡，翻面刷上酱汁，煎至两面起泡，撒上香葱、韭菜、花生、榨菜，折三折，用竹签穿好即可。\n\n![烤苕皮](https://upload-images.jianshu.io/upload_images/20892169-8e91bb849ebbb77c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##烤五花肉片\n选新鲜的五花肉，新鲜的五花肉，新鲜的五花肉，腌个十来分钟，然后锅里小火煎熟就行。\n\n![烤五花肉片](https://upload-images.jianshu.io/upload_images/20892169-7ab220a7b7018fd2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##烤鸡腿\n腌料腌半小时–三小时，烤二十分钟中途翻面。\n我的腌料：花椒粉、生抽蚝油糖、孜然粉、辣椒粉、蒜末、葱\n烤的时候表面刷蜂蜜\n\n![烤鸡腿 - 空气炸锅](https://upload-images.jianshu.io/upload_images/20892169-0f1a3dc35df765f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##娃娃菜豆腐汤\n豆腐煎一下，加入水烧开，加入娃娃菜小火炖十几分钟，捞出撒入香葱。\n这个豆腐使用菜籽油煎的，所以汤变成了黄色。如果用玉米油煎就不会是黄色而是奶白色。\n\n![娃娃菜豆腐汤](https://upload-images.jianshu.io/upload_images/20892169-25e0cb89d37ba6cc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##拔丝土豆\n简单但麻烦，麻烦的点在于，锅如果当时做完不洗干净，等锅里的糖凉了就很难洗干净。。做菜五分钟洗锅一晚上。\n1. 水糖1:2熬糖，大火冒大泡转小火，熬一会儿拉丝了加入炸好的土豆块搅拌均匀即可。\n2. 炸土豆块就不说了，土豆块焯水七八成熟控水，下入三分热油锅炸熟，大火十成热油复炸就行了。\n\n![拔丝儿土豆](https://upload-images.jianshu.io/upload_images/20892169-24faf5b3579bf758.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##圆圆的煎鸡蛋~\n让它圆圆的秘诀在于不要用平底锅，要用普通炒锅，因为普通炒锅打鸡蛋下去不会跑偏。平底锅就容易跑偏。\n![煎鸡蛋](https://upload-images.jianshu.io/upload_images/20892169-b448ce6a747c351e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##月饼\n![月饼](https://upload-images.jianshu.io/upload_images/20892169-99d02f37a694c836.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n装到盒子里也很好看啵\n\n![装到盒子里也很好看啵](https://upload-images.jianshu.io/upload_images/20892169-6dceff1271840aa9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 酸菜鱼\n酸菜切了，加葱姜蒜花椒泡椒炒一炒\n鱼片成片，加花椒粉淀粉盐腌，鱼头骨炖汤。\n炒后的酸菜加鱼汤煮，煮到沸腾转小火，放入鱼片煮熟（一般鱼是熟的很快的）。\n碗底铺焯好水的豆芽和金针菇，然后捞出鱼片放在表面，倒入汤。\n表面再放花椒、干辣椒段、蒜末、香葱。热油淋上去表面撒上香葱即可。\n![4811662730488_.pic.jpg](https://upload-images.jianshu.io/upload_images/20892169-a2daff6f36e6a550.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"caipu","published":1,"updated":"2023-01-25T13:02:28.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldborqa20000snwiaolpe35e","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>日记本来一直在有道云写的，因为有道云太辣鸡吞了我好多图所以当做日记一样复制过来。<br>所以图拍的不是那么讲究，背后很多杂物，甚至很多是吃了一半才想起来拍一张。。。<br>好多图都被有道云吃了，现在只能找回这些了，真惨。</p>\n<p>##香辣鸡翅尖</p>\n<ol>\n<li>鸡翅尖开水焯水，加一点点盐，两三分钟捞出备用。</li>\n<li>切葱、蒜、干辣椒段、花椒、准备一点熟白芝麻。</li>\n<li>锅中热油，放入蒜、干辣椒段（泡水）、花椒，炒香。</li>\n<li>倒入一点点火锅底料，炒化后倒入鸡翅。</li>\n<li>炒出香味后，倒入鸡翅尖，翻炒均匀后加生抽、糖、蚝油、孜然等尝味道。</li>\n<li>撒入香葱翻均匀，撒入芝麻，留一点点香葱装盘后洒在表面做点缀。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5394a346fc348dd3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鸡翅尖\"></p>\n<p>##炸鸡翅根</p>\n<ol>\n<li>鸡翅洗净剪开，露出骨头。</li>\n<li>酱油、糖、蚝油、花椒粉、辣椒粉、孜然粉、五香粉、蒜、葱、水淀粉进行腌制，二十分钟左右可以拿出。</li>\n<li>低筋面粉+淀粉1:1进行混合，腌好的鸡翅根放入其中粘上粉末，捏紧实。搓一搓，再次裹上粉。</li>\n<li>如果想脆皮厚一些，可以准备一个放了清水的碗，裹好粉的鸡翅放入水中浸一下就捞出，然后再重复裹上粉，搓一搓的步骤。</li>\n<li>油温三成热下入鸡翅，小火炸一会儿翻一下面，炸八分钟到十分钟。用筷子插鸡翅如果可以插透表示熟了。</li>\n<li>捞出鸡翅控油，大火让让油温十成热，下入鸡翅，炸制表面金黄且完全脱水，变为脆脆的感觉即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-bdf3e93dec19bfff.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"炸鸡翅根\"></li>\n</ol>\n<p>##仿南大门米糕做的桂花糕<br>比较麻烦，快赶上烤蛋糕那么麻烦了，但很好吃。</p>\n<p><strong>材料：</strong><br>粘米粉、糯米粉、糖粉，桂花糖，干桂花，还需要准备切刀，30+目筛子，最好是60目，最好备个电子秤，模具，我的是四寸方形慕斯蛋糕模具。</p>\n<p><strong>比例：</strong><br>粘米粉：糯米粉：糖粉 = 3:1:1，我用的是四寸方形模具，粘米粉：糯米粉：糖粉 = 150g:50g:50g。还多出一些，做了两次。<br>水：约为糯米粉or糖粉的两倍，如糯米粉五十克，则水要一百克。</p>\n<p><strong>详细过程：</strong></p>\n<ol>\n<li>糯米粉、粘米粉混合，然后一点一点慢慢加水，搅成一个个松散的小坨坨。</li>\n<li>过筛成细细的粉，不要按压细粉，多过几遍筛会让口感更细腻。</li>\n<li>蒸锅垫布，模具放入蒸锅，倒入细细的粉，千万不要按压千万不要按压千万不要按压！用刮刀把表面刮平整，，，，，小心翼翼的切分为3*3的九宫格，如果这时候不切开，蒸好后切开就容易碎不好看。</li>\n<li>水开后转小火，放上去东西蒸20分钟左右。蒸到五分钟左右的时候其实模具就可以拿掉了，不要等最后才拿模具，因为水会聚集在底部，底部会显得很湿。</li>\n<li>蒸完后拿出来，每一块上挤上桂花糖，撒上桂花，趁热吃吧。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-67cd1fae272bce4b.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"桂花糕\"></p>\n<p>##桂花蒸鸡蛋羹</p>\n<ol>\n<li>普通的蒸鸡蛋，就是鸡蛋打了之后加水到鸡蛋一倍左右，然后加盐，把表面气泡用勺子或者别的撇干净。</li>\n<li>裹保鲜膜扎洞小火蒸，出锅后表面撒上桂花，切一半圣女果摆上去，沿碗边加上酱油即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5dd532cd478303db.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"桂花蒸鸡蛋羹\"></li>\n</ol>\n<h2 id=\"蒜蓉粉丝娃娃菜\"><a href=\"#蒜蓉粉丝娃娃菜\" class=\"headerlink\" title=\"蒜蓉粉丝娃娃菜\"></a>蒜蓉粉丝娃娃菜</h2><ol>\n<li>至少一颗整蒜，切末，红尖椒，切碎，切葱、准备几颗花椒。</li>\n<li>小火加入油三四成热，油多倒一点，下入花椒炸出香味，下入尖椒翻炒一下，加入蒜末炸至金黄。</li>\n<li>倒入生抽、白糖、蚝油、一点点孜然，尝味道合适了备用。</li>\n<li>娃娃菜洗净铺在盘底，上面放上泡软的粉丝，倒入炒好的蒜香油。</li>\n<li>烧开水，上蒸锅蒸二十分钟。</li>\n<li>端出来，加入香葱点缀即可。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0623d22da9f9cb51.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"蒸娃娃菜\"></p>\n<h2 id=\"鸡蛋杂菜薄饼\"><a href=\"#鸡蛋杂菜薄饼\" class=\"headerlink\" title=\"鸡蛋杂菜薄饼\"></a>鸡蛋杂菜薄饼</h2><p>太简单了，不写做法了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c7232bd25f3cae29.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鸡蛋杂菜薄饼\"></p>\n<p>当然也可以卷了切开做鸡蛋卷，中间加了些肉松。<br>以前的我还真讲究摆盘。。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3b37de4609f06793.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鸡蛋卷\"></p>\n<p>##杂菜饭团</p>\n<ol>\n<li>米饭煮好，香菇、火腿、玉米、肉松、海苔/裙带菜切碎，切葱蒜小米辣。</li>\n<li>小火炒香蒜小米辣，下香菇碎、火腿碎、玉米粒、裙带菜/海苔，加盐、味精调味至合适倒入米饭中搅拌。<br>捏成团摆入盘中，芝士切片铺在饭团上，蒸锅蒸化芝士即可。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fb30ebe1cd2afc9e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"杂菜饭团 芝士款\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1f3d4ac62f9657af.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"杂菜饭团 无芝士款\"><br>##麻辣鸭掌</p>\n<ol>\n<li>鸭掌凉水下锅焯水，焯水后大火转小火，煮四十分钟以上，想要软烂则一小时以上最好。</li>\n<li>捞出洗净，准备四五个蒜瓣切蒜末（or蒜瓣拍碎，喜欢吃蒜可以切蒜末），稍微多一些的干辣椒，三根香葱，花椒一小把，熟白芝麻。</li>\n<li>大火热油，加入一小块火锅底料炒化，下入蒜末、干辣椒（泡水）、花椒翻炒出香味，下入鸭掌翻炒均匀，加入一点点老抽调色，加入生抽、蚝油、糖调味，（尝一下锅铲的味道。。。合适的话），翻炒几下即可出锅了，关火后加入香葱翻一下，再加入白芝麻翻一下，可以加一点点鸡精翻均匀。</li>\n<li>装盘再在表面撒一些香葱和白芝麻即可。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9443a4915bea894d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"麻辣鸭掌\"></p>\n<p>##蛋挞<br>蛋挞皮是现成的，蛋挞液是炼乳+蛋黄+牛奶+白糖，过筛后倒入蛋挞皮，180度预热烤箱，然后放进去烤20分钟左右就好了，反正烤箱是可以看表面状态的。<br>下次拿出来的时候要小心烫手，我把自己手指烫了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-86453049c21bfa0e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"蛋挞\"></p>\n<p>##麻辣花蛤</p>\n<ol>\n<li>花蛤泡的久一点让他吐沙，然后剥出来。</li>\n<li>开水加料酒焯水两三分钟让它熟了，捞出备用。</li>\n<li>准备干辣椒花椒小葱蒜瓣拍碎，干辣椒蒜瓣花椒大火下锅炒出香味，加入花蛤翻几下，加生抽蚝油糖翻几下，加一点点孜然翻几下，嫌颜色不够可以加一点点老抽，然后就可以出锅了。</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/20892169-debbabeb37d5d7b0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50\" alt=\"麻辣花蛤\"></p>\n<p>##年年有余</p>\n<ol>\n<li>吉利丁粉在热水中一点一点加，一定要一点一点加。慢慢融化慢慢融化，加入糖，加入枸杞。</li>\n<li>倒入模具中冷藏一小时or更长，发现凝固了就拿出来脱模就完成了。如果是很薄的塑料膜可能会沾膜，拿根牙签稍微挑一下就行了。</li>\n<li>周围撒上枸杞。<br>说真的真好看，但口感一般，也就果冻的味道，却没有果冻的添加剂。平时我一个人过节的时候，或者还剩吉利丁消耗不掉的时候才会做一做，我是羞于拿它的口感出来招待客人的。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9955566bc27297ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"年年有余\"></li>\n</ol>\n<p>##糖葫芦 - 小番茄版</p>\n<ol>\n<li>圣女果洗净两两穿好备用</li>\n<li>糖：水=2：1，放入小锅（重要）小锅中加热，先大火将糖融化至起大泡，然后小火至起小泡，继续加热，至用筷子蘸取糖液，若能拉丝，则放入冰水中，结成块且尝起来易脆则ok。全程不要搅动。</li>\n<li>串好的圣女果在锅中沾满糖液，小心拿起避免拉丝，然后放入冰水中浸泡至定型，放入盘中即完成。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d47a0c8cf0da1182.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"糖葫芦 - 小番茄版\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0f00f3a39849a617.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"糖葫芦 - 小番茄版\"><br>##冒红薯粉</p>\n<ol>\n<li>红薯粉开水下锅加一点盐煮20分钟，捞出凉水洗一下。</li>\n<li>切小米辣、蒜末（多多多）、葱末（多多多）、香菜（半根）、辣椒面、准备白芝麻大半勺、花生酱一两勺（or花生碎+芝麻酱）、孜然、白糖、蚝油，混合，倒入热油（多一些）搅拌均匀，冷一会儿后加入鸡精、生抽再搅拌。</li>\n<li>与粉混合均匀，完成。如果想更好看些，可以再混合后加入小葱香菜在表面做点缀。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-bf698a4a9d9d9c1a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"冒红薯粉\"><br>##自制钵钵鸡汤底<br>炖鸡汤，一部分鸡汤放盐备用<br>素菜开水加盐焯熟，荤菜凉水加盐焯熟<br>魔芋要先泡水之后，再煮二十分钟，魔芋不熟有毒，不泡水会去不掉碱味的<br>炒些辣椒油（孜然/辣椒面/花椒/糖/盐/味精/炸花生米/熟白芝麻/其他，热油泼进）<br>干辣椒多些（稍微泡水再过水），花椒多些（稍微泡水再过水），八角，辣椒面，葱段，蒜瓣拍碎<br>锅中稍多点油，放入两勺豆瓣酱，炒出红油，放入上述干辣椒等材料片炒出香味，然后加高汤，然后大火煮沸，转小火加盐调味。<br>五分钟左右关火，捞出那些调料扔掉，加入炒好的辣椒油（一点一点加，防溅锅），然后加大量鸡精调味。<br>汤底倒出汤碗中，放入食材浸泡越长时间越好即可。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-303602ebfae2a9c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"自制钵钵鸡汤底\"><br>##鸡胸肉饼</p>\n<ol>\n<li>鸡胸肉搅碎，加玉米粒、豌豆粒、葱、小米辣、二荆条辣椒，盐、鸡精、花椒粉、生抽。</li>\n<li>锅中放入涂上油的圆形模具，倒入油，小火加热，加入鸡肉铺好，待定型取下圆形模具，盖上锅盖焖一下，开锅翻面煎。</li>\n<li>怕碎可以加淀粉，但我是不加的，我也没碎，只要鸡胸肉处理的够筋道就不会碎，多摔打，多搅拌，像搅饺子馅那样。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-10cb7c22842fa279.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鸡胸肉饼\"><br>##牛奶桂花土豆泥</p>\n<ol>\n<li>土豆洗净切块蒸熟，混合白糖用料理机打成泥，加入</li>\n<li>牛奶拌匀，倒入碗中搅拌均匀，铺上桂花，铺上桂花蜜。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-91ad563fd105efb9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"牛奶桂花土豆泥\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-791c7016b2c3aee7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"牛奶桂花土豆泥\"><br>##狼牙土豆</p>\n<ol>\n<li>土豆用狼牙刀切成条状，浸泡去淀粉。</li>\n<li>锅中水烧开加盐，土豆放入水中焯熟，不要煮太久，捞出控水。</li>\n<li>碗中放辣子面、孜然、花椒（多）花椒粉、糖（灵魂）、白芝麻、葱、蒜末（一个都不要少）、味精、盐，油烧滚泼入，搅拌至盐融化。</li>\n<li>土豆控水后，将调料倒入即可。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ebd6dc12b5338a6a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"狼牙土豆\"><br>##干煸辣子鸡.</p>\n<ol>\n<li>鸡腿肉去骨，剪成小块儿</li>\n<li>花椒粉+辣椒粉+生抽+一点点老抽+白糖+五香粉+孜然粉，腌制十五分钟。</li>\n<li>干辣椒、花椒切段泡水，蒜切片，准备一小段大葱。</li>\n<li>锅中入油，小火加热至三分热倒入鸡腿，加入大葱葱段、花椒、蒜片一起炸，鸡腿炸去水分微金黄捞出控油，油十分热再炸一遍。</li>\n<li>油倒掉，锅中重新加入多一点的油，倒入辣椒段、花椒、蒜片翻炒出香味，加入鸡腿肉翻炒一分钟即可出锅。<br>特别好吃！</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1be285a4a81835f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"干煸辣子鸡\"><br>##红烧后腿肉<br>五五分的肉，比较肥，感觉还是红烧比较有味道。<br>就是普通红烧肉的做法，不说了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-38029678655841a0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"红烧后腿肉\"><br>##香菇炖鸡腿汤</p>\n<ol>\n<li>新！鲜！的鸡全腿用剪刀剪出露出骨头，放入锅中焯水，倒些料酒，放入花椒、大葱段一小段。</li>\n<li>捞出洗净，炖锅中倒入许多凉水，放入鸡腿，加入三两颗花椒、一片姜片，放入两三朵新鲜香菇，大火烧开转小火，炖越久肉越烂。</li>\n<li>其实更简单的方法就是放进电饭煲按煲汤模式。。火候不用自己看，到时间了就自然好了。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0a5efa5018d6b1f2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"香菇炖鸡腿汤\"><br>##烤口蘑</p>\n<ol>\n<li>口蘑小心去蒂，放入空气炸锅160度烤十分钟。</li>\n<li>锅中放玉米油，蒜切碎（或打成蒜泥），切小米辣、蒜苗，炒蒜蓉酱，先小火加热油，倒入蒜末，小火炒制发黄，加入小米辣碎，搅几下，关火加入白糖、盐、味精搅化。</li>\n<li>倒在烤好的口蘑上，撒上蒜苗和葱花即可。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-10c13ffadd650432.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"烤口蘑\"><br>##清炖狮子头</p>\n<ol>\n<li>五花肉/后腿肉/前腿肉/梅花肉洗净，切碎，加入葱、蒜末（要切的很碎很碎）、马蹄碎（建议加，没有也可以不加）、淀粉，反正别用纯瘦肉。</li>\n<li>向一个方向搅搅搅，直到感觉有那种韧劲儿了，就比饺子馅还有韧劲儿的那种感觉，然后摔打，多摔几下。</li>\n<li>做成大丸子，凉水烧一会儿大概有温度了就下炖锅，慢慢放下去小心碎了，然后大火烧开，小火四五十分钟就可以了。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fcac809ae1752953.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"清炖狮子头\"><br>##鸡蛋饼裹生菜<br>太简单了都不想说了<br>就是鸡蛋+低筋面粉加了些调味料（盐、花椒粉、糖、孜然，反正根据自己口味加。），搅拌至没有面粉沉淀，然后加入自己喜欢的配菜搅拌成均匀的糊糊，比如玉米粒、香葱、小米辣碎、火腿等等<br>热锅凉油下入上面说的糊糊，小火小火小火，均匀撒上黑芝麻，一面定型后翻至另一面煎熟，然后拿出裹上生菜，表面挤上番茄酱即可。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-37fcc35c753f556f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鸡蛋饼裹生菜\"><br>##炸香菇</p>\n<ol>\n<li>一勺淀粉一勺低筋面粉一个鸡蛋，搅拌均匀，加一些花椒粉、五香粉、盐、孜然、糖。</li>\n<li>香菇放里面裹上糊糊，然后小火加热油，油温三成热下香菇，炸至油温七成热熟了捞出。</li>\n<li>大火加热油温到十成热，快速放入刚刚炸好的香菇，把表面水分彻底炸干，炸一会儿就捞出，然后表面撒上椒盐，就行了。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cdb525162ab2817e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"炸香菇\"><br>##娃娃菜粉丝汤<br>没啥说的，奶白色汤的秘诀是，加入的配料比如火腿或者皮蛋是要先炒一下的，用除了菜籽油之外的油炒一下然后再加水炖，就会有奶白色的汤了。菜籽油其实也可以用，但炖出来的汤是黄的~味道没有太大差别。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9ae3212f80b0ff3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"娃娃菜粉丝汤\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b5eb40fae3a12afa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"娃娃菜粉丝汤 奶白汤\"><br>#油炸花生<br>没啥说的，小火凉油倒入花生不停的翻炒，噼噼啪啪的声音出来就是好了。<br>酥脆的秘诀就是捞出之后加入料酒然后用筷子不停的搅，加入料酒会有刺啦的声音，搅拌的时候也会冒烟</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f29f15b21dadec82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"炒白花生\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f78b2ed974664cfa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"炒红花生\"><br>##好看不好吃的空气炸锅杏鲍菇</p>\n<ol>\n<li>一个淀粉一个鸡蛋混合均匀加入花椒粉生抽孜然粉五香粉调味调味</li>\n<li>面包糠放入另一个碗中备用。</li>\n<li>杏鲍菇切条，放入淀粉鸡蛋液中滚一滚，再裹上面包糠，再放入鸡蛋液滚一滚，再裹一次面包糠，放入空气炸锅刷一层油，200度烤十分钟即可。</li>\n<li>因为是面包糠，再加上空气炸锅虽说叫炸锅实际上是烤，所以表面很干很干，并没有那么好吃。无奈我只能就这个形态又去油炸了 一遍，味道才变得好吃，</li>\n</ol>\n<p><strong>注：</strong>面包糠的特性是虽然脆，但不会像淀粉+面粉那样油炸之后边的膨胀，所以要想好看的话面包糠是要裹至少两遍的。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4f001371b0d4e52b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"杏鲍菇 - 空气炸锅版\"><br>##烤豆腐 - 空气炸锅版</p>\n<ol>\n<li>豆腐横刀一刀，竖刀三四刀将豆腐切块。</li>\n<li>空气炸锅平铺锡纸，豆腐摆入空气炸锅，180十分钟翻面，再烤十五分钟（或更长），考好拿出摆盘。</li>\n<li>调酱汁，蚝油+糖（天下无双）加自己炒的特辣辣椒油和辣椒面，加一点孜然粉，加小葱和蒜和一点醋（这个料绝了，味道超级好）也可以加一点小米辣，我没加懒得切，倒在豆腐表面，完成。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2ebeb3eb510c4aa2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"烤豆腐 - 空气炸锅版\"><br>##烤苕皮<br>酱汁：辣椒面、花椒面、孜然、熟白芝麻、韩式烧烤酱或糖各一勺，搅拌后淋上热油。<br>炒些花生。<br>刷上酱汁，苕皮一点油小火煎，煎至起泡，翻面刷上酱汁，煎至两面起泡，撒上香葱、韭菜、花生、榨菜，折三折，用竹签穿好即可。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8e91bb849ebbb77c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"烤苕皮\"><br>##烤五花肉片<br>选新鲜的五花肉，新鲜的五花肉，新鲜的五花肉，腌个十来分钟，然后锅里小火煎熟就行。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-7ab220a7b7018fd2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"烤五花肉片\"><br>##烤鸡腿<br>腌料腌半小时–三小时，烤二十分钟中途翻面。<br>我的腌料：花椒粉、生抽蚝油糖、孜然粉、辣椒粉、蒜末、葱<br>烤的时候表面刷蜂蜜</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0f1a3dc35df765f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"烤鸡腿 - 空气炸锅\"><br>##娃娃菜豆腐汤<br>豆腐煎一下，加入水烧开，加入娃娃菜小火炖十几分钟，捞出撒入香葱。<br>这个豆腐使用菜籽油煎的，所以汤变成了黄色。如果用玉米油煎就不会是黄色而是奶白色。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-25e0cb89d37ba6cc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"娃娃菜豆腐汤\"><br>##拔丝土豆<br>简单但麻烦，麻烦的点在于，锅如果当时做完不洗干净，等锅里的糖凉了就很难洗干净。。做菜五分钟洗锅一晚上。</p>\n<ol>\n<li>水糖1:2熬糖，大火冒大泡转小火，熬一会儿拉丝了加入炸好的土豆块搅拌均匀即可。</li>\n<li>炸土豆块就不说了，土豆块焯水七八成熟控水，下入三分热油锅炸熟，大火十成热油复炸就行了。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-24faf5b3579bf758.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"拔丝儿土豆\"><br>##圆圆的煎鸡蛋~<br>让它圆圆的秘诀在于不要用平底锅，要用普通炒锅，因为普通炒锅打鸡蛋下去不会跑偏。平底锅就容易跑偏。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b448ce6a747c351e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"煎鸡蛋\"></p>\n<p>##月饼<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-99d02f37a694c836.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"月饼\"><br>装到盒子里也很好看啵</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6dceff1271840aa9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"装到盒子里也很好看啵\"></p>\n<h2 id=\"酸菜鱼\"><a href=\"#酸菜鱼\" class=\"headerlink\" title=\"酸菜鱼\"></a>酸菜鱼</h2><p>酸菜切了，加葱姜蒜花椒泡椒炒一炒<br>鱼片成片，加花椒粉淀粉盐腌，鱼头骨炖汤。<br>炒后的酸菜加鱼汤煮，煮到沸腾转小火，放入鱼片煮熟（一般鱼是熟的很快的）。<br>碗底铺焯好水的豆芽和金针菇，然后捞出鱼片放在表面，倒入汤。<br>表面再放花椒、干辣椒段、蒜末、香葱。热油淋上去表面撒上香葱即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a2daff6f36e6a550.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"4811662730488_.pic.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>日记本来一直在有道云写的，因为有道云太辣鸡吞了我好多图所以当做日记一样复制过来。<br>所以图拍的不是那么讲究，背后很多杂物，甚至很多是吃了一半才想起来拍一张。。。<br>好多图都被有道云吃了，现在只能找回这些了，真惨。</p>\n<p>##香辣鸡翅尖</p>\n<ol>\n<li>鸡翅尖开水焯水，加一点点盐，两三分钟捞出备用。</li>\n<li>切葱、蒜、干辣椒段、花椒、准备一点熟白芝麻。</li>\n<li>锅中热油，放入蒜、干辣椒段（泡水）、花椒，炒香。</li>\n<li>倒入一点点火锅底料，炒化后倒入鸡翅。</li>\n<li>炒出香味后，倒入鸡翅尖，翻炒均匀后加生抽、糖、蚝油、孜然等尝味道。</li>\n<li>撒入香葱翻均匀，撒入芝麻，留一点点香葱装盘后洒在表面做点缀。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5394a346fc348dd3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鸡翅尖\"></p>\n<p>##炸鸡翅根</p>\n<ol>\n<li>鸡翅洗净剪开，露出骨头。</li>\n<li>酱油、糖、蚝油、花椒粉、辣椒粉、孜然粉、五香粉、蒜、葱、水淀粉进行腌制，二十分钟左右可以拿出。</li>\n<li>低筋面粉+淀粉1:1进行混合，腌好的鸡翅根放入其中粘上粉末，捏紧实。搓一搓，再次裹上粉。</li>\n<li>如果想脆皮厚一些，可以准备一个放了清水的碗，裹好粉的鸡翅放入水中浸一下就捞出，然后再重复裹上粉，搓一搓的步骤。</li>\n<li>油温三成热下入鸡翅，小火炸一会儿翻一下面，炸八分钟到十分钟。用筷子插鸡翅如果可以插透表示熟了。</li>\n<li>捞出鸡翅控油，大火让让油温十成热，下入鸡翅，炸制表面金黄且完全脱水，变为脆脆的感觉即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-bdf3e93dec19bfff.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"炸鸡翅根\"></li>\n</ol>\n<p>##仿南大门米糕做的桂花糕<br>比较麻烦，快赶上烤蛋糕那么麻烦了，但很好吃。</p>\n<p><strong>材料：</strong><br>粘米粉、糯米粉、糖粉，桂花糖，干桂花，还需要准备切刀，30+目筛子，最好是60目，最好备个电子秤，模具，我的是四寸方形慕斯蛋糕模具。</p>\n<p><strong>比例：</strong><br>粘米粉：糯米粉：糖粉 = 3:1:1，我用的是四寸方形模具，粘米粉：糯米粉：糖粉 = 150g:50g:50g。还多出一些，做了两次。<br>水：约为糯米粉or糖粉的两倍，如糯米粉五十克，则水要一百克。</p>\n<p><strong>详细过程：</strong></p>\n<ol>\n<li>糯米粉、粘米粉混合，然后一点一点慢慢加水，搅成一个个松散的小坨坨。</li>\n<li>过筛成细细的粉，不要按压细粉，多过几遍筛会让口感更细腻。</li>\n<li>蒸锅垫布，模具放入蒸锅，倒入细细的粉，千万不要按压千万不要按压千万不要按压！用刮刀把表面刮平整，，，，，小心翼翼的切分为3*3的九宫格，如果这时候不切开，蒸好后切开就容易碎不好看。</li>\n<li>水开后转小火，放上去东西蒸20分钟左右。蒸到五分钟左右的时候其实模具就可以拿掉了，不要等最后才拿模具，因为水会聚集在底部，底部会显得很湿。</li>\n<li>蒸完后拿出来，每一块上挤上桂花糖，撒上桂花，趁热吃吧。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-67cd1fae272bce4b.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"桂花糕\"></p>\n<p>##桂花蒸鸡蛋羹</p>\n<ol>\n<li>普通的蒸鸡蛋，就是鸡蛋打了之后加水到鸡蛋一倍左右，然后加盐，把表面气泡用勺子或者别的撇干净。</li>\n<li>裹保鲜膜扎洞小火蒸，出锅后表面撒上桂花，切一半圣女果摆上去，沿碗边加上酱油即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5dd532cd478303db.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"桂花蒸鸡蛋羹\"></li>\n</ol>\n<h2 id=\"蒜蓉粉丝娃娃菜\"><a href=\"#蒜蓉粉丝娃娃菜\" class=\"headerlink\" title=\"蒜蓉粉丝娃娃菜\"></a>蒜蓉粉丝娃娃菜</h2><ol>\n<li>至少一颗整蒜，切末，红尖椒，切碎，切葱、准备几颗花椒。</li>\n<li>小火加入油三四成热，油多倒一点，下入花椒炸出香味，下入尖椒翻炒一下，加入蒜末炸至金黄。</li>\n<li>倒入生抽、白糖、蚝油、一点点孜然，尝味道合适了备用。</li>\n<li>娃娃菜洗净铺在盘底，上面放上泡软的粉丝，倒入炒好的蒜香油。</li>\n<li>烧开水，上蒸锅蒸二十分钟。</li>\n<li>端出来，加入香葱点缀即可。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0623d22da9f9cb51.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"蒸娃娃菜\"></p>\n<h2 id=\"鸡蛋杂菜薄饼\"><a href=\"#鸡蛋杂菜薄饼\" class=\"headerlink\" title=\"鸡蛋杂菜薄饼\"></a>鸡蛋杂菜薄饼</h2><p>太简单了，不写做法了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c7232bd25f3cae29.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鸡蛋杂菜薄饼\"></p>\n<p>当然也可以卷了切开做鸡蛋卷，中间加了些肉松。<br>以前的我还真讲究摆盘。。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3b37de4609f06793.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鸡蛋卷\"></p>\n<p>##杂菜饭团</p>\n<ol>\n<li>米饭煮好，香菇、火腿、玉米、肉松、海苔/裙带菜切碎，切葱蒜小米辣。</li>\n<li>小火炒香蒜小米辣，下香菇碎、火腿碎、玉米粒、裙带菜/海苔，加盐、味精调味至合适倒入米饭中搅拌。<br>捏成团摆入盘中，芝士切片铺在饭团上，蒸锅蒸化芝士即可。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fb30ebe1cd2afc9e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"杂菜饭团 芝士款\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1f3d4ac62f9657af.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"杂菜饭团 无芝士款\"><br>##麻辣鸭掌</p>\n<ol>\n<li>鸭掌凉水下锅焯水，焯水后大火转小火，煮四十分钟以上，想要软烂则一小时以上最好。</li>\n<li>捞出洗净，准备四五个蒜瓣切蒜末（or蒜瓣拍碎，喜欢吃蒜可以切蒜末），稍微多一些的干辣椒，三根香葱，花椒一小把，熟白芝麻。</li>\n<li>大火热油，加入一小块火锅底料炒化，下入蒜末、干辣椒（泡水）、花椒翻炒出香味，下入鸭掌翻炒均匀，加入一点点老抽调色，加入生抽、蚝油、糖调味，（尝一下锅铲的味道。。。合适的话），翻炒几下即可出锅了，关火后加入香葱翻一下，再加入白芝麻翻一下，可以加一点点鸡精翻均匀。</li>\n<li>装盘再在表面撒一些香葱和白芝麻即可。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9443a4915bea894d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"麻辣鸭掌\"></p>\n<p>##蛋挞<br>蛋挞皮是现成的，蛋挞液是炼乳+蛋黄+牛奶+白糖，过筛后倒入蛋挞皮，180度预热烤箱，然后放进去烤20分钟左右就好了，反正烤箱是可以看表面状态的。<br>下次拿出来的时候要小心烫手，我把自己手指烫了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-86453049c21bfa0e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"蛋挞\"></p>\n<p>##麻辣花蛤</p>\n<ol>\n<li>花蛤泡的久一点让他吐沙，然后剥出来。</li>\n<li>开水加料酒焯水两三分钟让它熟了，捞出备用。</li>\n<li>准备干辣椒花椒小葱蒜瓣拍碎，干辣椒蒜瓣花椒大火下锅炒出香味，加入花蛤翻几下，加生抽蚝油糖翻几下，加一点点孜然翻几下，嫌颜色不够可以加一点点老抽，然后就可以出锅了。</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/20892169-debbabeb37d5d7b0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50\" alt=\"麻辣花蛤\"></p>\n<p>##年年有余</p>\n<ol>\n<li>吉利丁粉在热水中一点一点加，一定要一点一点加。慢慢融化慢慢融化，加入糖，加入枸杞。</li>\n<li>倒入模具中冷藏一小时or更长，发现凝固了就拿出来脱模就完成了。如果是很薄的塑料膜可能会沾膜，拿根牙签稍微挑一下就行了。</li>\n<li>周围撒上枸杞。<br>说真的真好看，但口感一般，也就果冻的味道，却没有果冻的添加剂。平时我一个人过节的时候，或者还剩吉利丁消耗不掉的时候才会做一做，我是羞于拿它的口感出来招待客人的。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9955566bc27297ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"年年有余\"></li>\n</ol>\n<p>##糖葫芦 - 小番茄版</p>\n<ol>\n<li>圣女果洗净两两穿好备用</li>\n<li>糖：水=2：1，放入小锅（重要）小锅中加热，先大火将糖融化至起大泡，然后小火至起小泡，继续加热，至用筷子蘸取糖液，若能拉丝，则放入冰水中，结成块且尝起来易脆则ok。全程不要搅动。</li>\n<li>串好的圣女果在锅中沾满糖液，小心拿起避免拉丝，然后放入冰水中浸泡至定型，放入盘中即完成。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d47a0c8cf0da1182.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"糖葫芦 - 小番茄版\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0f00f3a39849a617.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"糖葫芦 - 小番茄版\"><br>##冒红薯粉</p>\n<ol>\n<li>红薯粉开水下锅加一点盐煮20分钟，捞出凉水洗一下。</li>\n<li>切小米辣、蒜末（多多多）、葱末（多多多）、香菜（半根）、辣椒面、准备白芝麻大半勺、花生酱一两勺（or花生碎+芝麻酱）、孜然、白糖、蚝油，混合，倒入热油（多一些）搅拌均匀，冷一会儿后加入鸡精、生抽再搅拌。</li>\n<li>与粉混合均匀，完成。如果想更好看些，可以再混合后加入小葱香菜在表面做点缀。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-bf698a4a9d9d9c1a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"冒红薯粉\"><br>##自制钵钵鸡汤底<br>炖鸡汤，一部分鸡汤放盐备用<br>素菜开水加盐焯熟，荤菜凉水加盐焯熟<br>魔芋要先泡水之后，再煮二十分钟，魔芋不熟有毒，不泡水会去不掉碱味的<br>炒些辣椒油（孜然/辣椒面/花椒/糖/盐/味精/炸花生米/熟白芝麻/其他，热油泼进）<br>干辣椒多些（稍微泡水再过水），花椒多些（稍微泡水再过水），八角，辣椒面，葱段，蒜瓣拍碎<br>锅中稍多点油，放入两勺豆瓣酱，炒出红油，放入上述干辣椒等材料片炒出香味，然后加高汤，然后大火煮沸，转小火加盐调味。<br>五分钟左右关火，捞出那些调料扔掉，加入炒好的辣椒油（一点一点加，防溅锅），然后加大量鸡精调味。<br>汤底倒出汤碗中，放入食材浸泡越长时间越好即可。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-303602ebfae2a9c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"自制钵钵鸡汤底\"><br>##鸡胸肉饼</p>\n<ol>\n<li>鸡胸肉搅碎，加玉米粒、豌豆粒、葱、小米辣、二荆条辣椒，盐、鸡精、花椒粉、生抽。</li>\n<li>锅中放入涂上油的圆形模具，倒入油，小火加热，加入鸡肉铺好，待定型取下圆形模具，盖上锅盖焖一下，开锅翻面煎。</li>\n<li>怕碎可以加淀粉，但我是不加的，我也没碎，只要鸡胸肉处理的够筋道就不会碎，多摔打，多搅拌，像搅饺子馅那样。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-10cb7c22842fa279.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鸡胸肉饼\"><br>##牛奶桂花土豆泥</p>\n<ol>\n<li>土豆洗净切块蒸熟，混合白糖用料理机打成泥，加入</li>\n<li>牛奶拌匀，倒入碗中搅拌均匀，铺上桂花，铺上桂花蜜。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-91ad563fd105efb9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"牛奶桂花土豆泥\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-791c7016b2c3aee7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"牛奶桂花土豆泥\"><br>##狼牙土豆</p>\n<ol>\n<li>土豆用狼牙刀切成条状，浸泡去淀粉。</li>\n<li>锅中水烧开加盐，土豆放入水中焯熟，不要煮太久，捞出控水。</li>\n<li>碗中放辣子面、孜然、花椒（多）花椒粉、糖（灵魂）、白芝麻、葱、蒜末（一个都不要少）、味精、盐，油烧滚泼入，搅拌至盐融化。</li>\n<li>土豆控水后，将调料倒入即可。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ebd6dc12b5338a6a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"狼牙土豆\"><br>##干煸辣子鸡.</p>\n<ol>\n<li>鸡腿肉去骨，剪成小块儿</li>\n<li>花椒粉+辣椒粉+生抽+一点点老抽+白糖+五香粉+孜然粉，腌制十五分钟。</li>\n<li>干辣椒、花椒切段泡水，蒜切片，准备一小段大葱。</li>\n<li>锅中入油，小火加热至三分热倒入鸡腿，加入大葱葱段、花椒、蒜片一起炸，鸡腿炸去水分微金黄捞出控油，油十分热再炸一遍。</li>\n<li>油倒掉，锅中重新加入多一点的油，倒入辣椒段、花椒、蒜片翻炒出香味，加入鸡腿肉翻炒一分钟即可出锅。<br>特别好吃！</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1be285a4a81835f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"干煸辣子鸡\"><br>##红烧后腿肉<br>五五分的肉，比较肥，感觉还是红烧比较有味道。<br>就是普通红烧肉的做法，不说了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-38029678655841a0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"红烧后腿肉\"><br>##香菇炖鸡腿汤</p>\n<ol>\n<li>新！鲜！的鸡全腿用剪刀剪出露出骨头，放入锅中焯水，倒些料酒，放入花椒、大葱段一小段。</li>\n<li>捞出洗净，炖锅中倒入许多凉水，放入鸡腿，加入三两颗花椒、一片姜片，放入两三朵新鲜香菇，大火烧开转小火，炖越久肉越烂。</li>\n<li>其实更简单的方法就是放进电饭煲按煲汤模式。。火候不用自己看，到时间了就自然好了。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0a5efa5018d6b1f2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"香菇炖鸡腿汤\"><br>##烤口蘑</p>\n<ol>\n<li>口蘑小心去蒂，放入空气炸锅160度烤十分钟。</li>\n<li>锅中放玉米油，蒜切碎（或打成蒜泥），切小米辣、蒜苗，炒蒜蓉酱，先小火加热油，倒入蒜末，小火炒制发黄，加入小米辣碎，搅几下，关火加入白糖、盐、味精搅化。</li>\n<li>倒在烤好的口蘑上，撒上蒜苗和葱花即可。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-10c13ffadd650432.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"烤口蘑\"><br>##清炖狮子头</p>\n<ol>\n<li>五花肉/后腿肉/前腿肉/梅花肉洗净，切碎，加入葱、蒜末（要切的很碎很碎）、马蹄碎（建议加，没有也可以不加）、淀粉，反正别用纯瘦肉。</li>\n<li>向一个方向搅搅搅，直到感觉有那种韧劲儿了，就比饺子馅还有韧劲儿的那种感觉，然后摔打，多摔几下。</li>\n<li>做成大丸子，凉水烧一会儿大概有温度了就下炖锅，慢慢放下去小心碎了，然后大火烧开，小火四五十分钟就可以了。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fcac809ae1752953.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"清炖狮子头\"><br>##鸡蛋饼裹生菜<br>太简单了都不想说了<br>就是鸡蛋+低筋面粉加了些调味料（盐、花椒粉、糖、孜然，反正根据自己口味加。），搅拌至没有面粉沉淀，然后加入自己喜欢的配菜搅拌成均匀的糊糊，比如玉米粒、香葱、小米辣碎、火腿等等<br>热锅凉油下入上面说的糊糊，小火小火小火，均匀撒上黑芝麻，一面定型后翻至另一面煎熟，然后拿出裹上生菜，表面挤上番茄酱即可。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-37fcc35c753f556f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"鸡蛋饼裹生菜\"><br>##炸香菇</p>\n<ol>\n<li>一勺淀粉一勺低筋面粉一个鸡蛋，搅拌均匀，加一些花椒粉、五香粉、盐、孜然、糖。</li>\n<li>香菇放里面裹上糊糊，然后小火加热油，油温三成热下香菇，炸至油温七成热熟了捞出。</li>\n<li>大火加热油温到十成热，快速放入刚刚炸好的香菇，把表面水分彻底炸干，炸一会儿就捞出，然后表面撒上椒盐，就行了。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cdb525162ab2817e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"炸香菇\"><br>##娃娃菜粉丝汤<br>没啥说的，奶白色汤的秘诀是，加入的配料比如火腿或者皮蛋是要先炒一下的，用除了菜籽油之外的油炒一下然后再加水炖，就会有奶白色的汤了。菜籽油其实也可以用，但炖出来的汤是黄的~味道没有太大差别。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-9ae3212f80b0ff3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"娃娃菜粉丝汤\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b5eb40fae3a12afa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"娃娃菜粉丝汤 奶白汤\"><br>#油炸花生<br>没啥说的，小火凉油倒入花生不停的翻炒，噼噼啪啪的声音出来就是好了。<br>酥脆的秘诀就是捞出之后加入料酒然后用筷子不停的搅，加入料酒会有刺啦的声音，搅拌的时候也会冒烟</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f29f15b21dadec82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"炒白花生\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f78b2ed974664cfa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"炒红花生\"><br>##好看不好吃的空气炸锅杏鲍菇</p>\n<ol>\n<li>一个淀粉一个鸡蛋混合均匀加入花椒粉生抽孜然粉五香粉调味调味</li>\n<li>面包糠放入另一个碗中备用。</li>\n<li>杏鲍菇切条，放入淀粉鸡蛋液中滚一滚，再裹上面包糠，再放入鸡蛋液滚一滚，再裹一次面包糠，放入空气炸锅刷一层油，200度烤十分钟即可。</li>\n<li>因为是面包糠，再加上空气炸锅虽说叫炸锅实际上是烤，所以表面很干很干，并没有那么好吃。无奈我只能就这个形态又去油炸了 一遍，味道才变得好吃，</li>\n</ol>\n<p><strong>注：</strong>面包糠的特性是虽然脆，但不会像淀粉+面粉那样油炸之后边的膨胀，所以要想好看的话面包糠是要裹至少两遍的。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4f001371b0d4e52b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"杏鲍菇 - 空气炸锅版\"><br>##烤豆腐 - 空气炸锅版</p>\n<ol>\n<li>豆腐横刀一刀，竖刀三四刀将豆腐切块。</li>\n<li>空气炸锅平铺锡纸，豆腐摆入空气炸锅，180十分钟翻面，再烤十五分钟（或更长），考好拿出摆盘。</li>\n<li>调酱汁，蚝油+糖（天下无双）加自己炒的特辣辣椒油和辣椒面，加一点孜然粉，加小葱和蒜和一点醋（这个料绝了，味道超级好）也可以加一点小米辣，我没加懒得切，倒在豆腐表面，完成。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2ebeb3eb510c4aa2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"烤豆腐 - 空气炸锅版\"><br>##烤苕皮<br>酱汁：辣椒面、花椒面、孜然、熟白芝麻、韩式烧烤酱或糖各一勺，搅拌后淋上热油。<br>炒些花生。<br>刷上酱汁，苕皮一点油小火煎，煎至起泡，翻面刷上酱汁，煎至两面起泡，撒上香葱、韭菜、花生、榨菜，折三折，用竹签穿好即可。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-8e91bb849ebbb77c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"烤苕皮\"><br>##烤五花肉片<br>选新鲜的五花肉，新鲜的五花肉，新鲜的五花肉，腌个十来分钟，然后锅里小火煎熟就行。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-7ab220a7b7018fd2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"烤五花肉片\"><br>##烤鸡腿<br>腌料腌半小时–三小时，烤二十分钟中途翻面。<br>我的腌料：花椒粉、生抽蚝油糖、孜然粉、辣椒粉、蒜末、葱<br>烤的时候表面刷蜂蜜</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0f1a3dc35df765f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"烤鸡腿 - 空气炸锅\"><br>##娃娃菜豆腐汤<br>豆腐煎一下，加入水烧开，加入娃娃菜小火炖十几分钟，捞出撒入香葱。<br>这个豆腐使用菜籽油煎的，所以汤变成了黄色。如果用玉米油煎就不会是黄色而是奶白色。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-25e0cb89d37ba6cc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"娃娃菜豆腐汤\"><br>##拔丝土豆<br>简单但麻烦，麻烦的点在于，锅如果当时做完不洗干净，等锅里的糖凉了就很难洗干净。。做菜五分钟洗锅一晚上。</p>\n<ol>\n<li>水糖1:2熬糖，大火冒大泡转小火，熬一会儿拉丝了加入炸好的土豆块搅拌均匀即可。</li>\n<li>炸土豆块就不说了，土豆块焯水七八成熟控水，下入三分热油锅炸熟，大火十成热油复炸就行了。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-24faf5b3579bf758.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"拔丝儿土豆\"><br>##圆圆的煎鸡蛋~<br>让它圆圆的秘诀在于不要用平底锅，要用普通炒锅，因为普通炒锅打鸡蛋下去不会跑偏。平底锅就容易跑偏。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b448ce6a747c351e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"煎鸡蛋\"></p>\n<p>##月饼<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-99d02f37a694c836.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"月饼\"><br>装到盒子里也很好看啵</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6dceff1271840aa9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"装到盒子里也很好看啵\"></p>\n<h2 id=\"酸菜鱼\"><a href=\"#酸菜鱼\" class=\"headerlink\" title=\"酸菜鱼\"></a>酸菜鱼</h2><p>酸菜切了，加葱姜蒜花椒泡椒炒一炒<br>鱼片成片，加花椒粉淀粉盐腌，鱼头骨炖汤。<br>炒后的酸菜加鱼汤煮，煮到沸腾转小火，放入鱼片煮熟（一般鱼是熟的很快的）。<br>碗底铺焯好水的豆芽和金针菇，然后捞出鱼片放在表面，倒入汤。<br>表面再放花椒、干辣椒段、蒜末、香葱。热油淋上去表面撒上香葱即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a2daff6f36e6a550.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"4811662730488_.pic.jpg\"></p>\n"},{"title":"[2021-04-03]水仙花观察日记","date":"2021-04-03T04:00:38.000Z","_content":"\n水仙花没有任何变化","source":"_posts/diary/diary-sxh/diary-sxh3.md","raw":"---\ntitle: '[2021-04-03]水仙花观察日记'\ndate: 2021-04-03 12:00:38\ntags:\ncategories:\n  - 水仙花观察日记\n\n---\n\n水仙花没有任何变化","slug":"diary/diary-sxh/diary-sxh3","published":1,"updated":"2023-01-25T10:56:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldborqac0009snwidgxtfleg","content":"<p>水仙花没有任何变化</p>\n","site":{"data":{}},"excerpt":"","more":"<p>水仙花没有任何变化</p>\n"},{"title":"[2021-04-02]水仙花观察日记","date":"2021-04-02T04:00:38.000Z","_content":"\n水仙花没有任何变化","source":"_posts/diary/diary-sxh/diary-sxh.md","raw":"---\ntitle: '[2021-04-02]水仙花观察日记'\ndate: 2021-04-02 12:00:38\ntags:\ncategories:\n  - 水仙花观察日记\n---\n\n水仙花没有任何变化","slug":"diary/diary-sxh/diary-sxh","published":1,"updated":"2023-01-25T10:56:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldborqad000csnwi69w5efgt","content":"<p>水仙花没有任何变化</p>\n","site":{"data":{}},"excerpt":"","more":"<p>水仙花没有任何变化</p>\n"},{"title":"[2021-04-06]水仙花观察日记","date":"2021-04-06T04:00:38.000Z","_content":"\n水仙花没有任何变化","source":"_posts/diary/diary-sxh/diary-sxh4.md","raw":"---\ntitle: '[2021-04-06]水仙花观察日记'\ndate: 2021-04-06 12:00:38\ntags:\ncategories:\n  - 水仙花观察日记\n\n---\n\n水仙花没有任何变化","slug":"diary/diary-sxh/diary-sxh4","published":1,"updated":"2023-01-25T10:56:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldborqad000esnwi6hxqd3pu","content":"<p>水仙花没有任何变化</p>\n","site":{"data":{}},"excerpt":"","more":"<p>水仙花没有任何变化</p>\n"},{"title":"[2021-04-05]水仙花观察日记","date":"2021-04-05T04:00:38.000Z","_content":"\n水仙花没有任何变化","source":"_posts/diary/diary-sxh/diary-sxh5.md","raw":"---\ntitle: '[2021-04-05]水仙花观察日记'\ndate: 2021-04-05 12:00:38\ntags:\ncategories:\n  - 水仙花观察日记\n\n---\n\n水仙花没有任何变化","slug":"diary/diary-sxh/diary-sxh5","published":1,"updated":"2023-01-25T10:56:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldborqae000isnwi4adp1q1s","content":"<p>水仙花没有任何变化</p>\n","site":{"data":{}},"excerpt":"","more":"<p>水仙花没有任何变化</p>\n"},{"title":"[2021-04-07]水仙花观察日记","date":"2021-04-07T04:00:38.000Z","_content":"\n水仙花没有任何变化","source":"_posts/diary/diary-sxh/diary-sxh2.md","raw":"---\ntitle: '[2021-04-07]水仙花观察日记'\ndate: 2021-04-07 12:00:38\ntags:\ncategories:\n  - 水仙花观察日记\n---\n\n水仙花没有任何变化","slug":"diary/diary-sxh/diary-sxh2","published":1,"updated":"2023-01-25T10:56:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldborqae000ksnwi9lf45sgh","content":"<p>水仙花没有任何变化</p>\n","site":{"data":{}},"excerpt":"","more":"<p>水仙花没有任何变化</p>\n"},{"title":"[2021-04-01] 水仙花观察日记","date":"2021-03-31T20:57:38.000Z","_content":"\n今天我种下了一朵水仙花，我为它浇了水，施了肥，把它放到了温暖的阳光下，阿~可爱的水仙花请快快长大吧！","source":"_posts/diary/diary-sxh/diary-sxh6.md","raw":"---\ntitle: '[2021-04-01] 水仙花观察日记'\ndate: 2021-04-01 04:57:38\ntags:\ncategories:\n  - 水仙花观察日记\n---\n\n今天我种下了一朵水仙花，我为它浇了水，施了肥，把它放到了温暖的阳光下，阿~可爱的水仙花请快快长大吧！","slug":"diary/diary-sxh/diary-sxh6","published":1,"updated":"2023-01-25T10:56:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldborqae000nsnwi2ihd5o77","content":"<p>今天我种下了一朵水仙花，我为它浇了水，施了肥，把它放到了温暖的阳光下，阿~可爱的水仙花请快快长大吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天我种下了一朵水仙花，我为它浇了水，施了肥，把它放到了温暖的阳光下，阿~可爱的水仙花请快快长大吧！</p>\n"},{"title":"【2022-10-09】前几天在咖啡厅画速写","date":"2022-07-02T05:23:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n还被画的小姐姐发现了，但她坐了很长时间之后，默默的走了，走之前和同行小姐姐说“看不看？”最后也没过来看。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-b53ca9fbb66cd298.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-4fee1ed4c024fab1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/diary/diary-1009.md","raw":"---\ntitle: 【2022-10-09】前几天在咖啡厅画速写\ndate: 2022-07-02 13:23:38\ntags: \n  - 生活\n  - 绘画\ncategories:\n  - 日记\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n还被画的小姐姐发现了，但她坐了很长时间之后，默默的走了，走之前和同行小姐姐说“看不看？”最后也没过来看。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-b53ca9fbb66cd298.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-4fee1ed4c024fab1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"diary/diary-1009","published":1,"updated":"2023-01-25T13:17:02.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbr7q3c0000zewifqf6ehml","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>还被画的小姐姐发现了，但她坐了很长时间之后，默默的走了，走之前和同行小姐姐说“看不看？”最后也没过来看。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b53ca9fbb66cd298.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4fee1ed4c024fab1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>还被画的小姐姐发现了，但她坐了很长时间之后，默默的走了，走之前和同行小姐姐说“看不看？”最后也没过来看。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b53ca9fbb66cd298.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4fee1ed4c024fab1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"模块化之AMD和CommonJS","date":"2021-04-13T04:00:38.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、AMD\n### 概念：\n异步加载模块的规范，即，加载模块不会阻塞之后代码的执行。\nAMD是为浏览器环境所设计的，如requirejs。\n### 用法：\n#### 1. 定义模块\nAMD的模块，通过define函数定义在闭包中，格式如下：\n\n```javascript\ndefine(id?: string,dependencies?: string[],factory: Function | object)\n```\n\n**`id`**: 模块名，可选，若不写，则模块为匿名模块。\n\n**`dependencies`**: 所要依赖的模块列表，字符串数组类型，可选。若未指定`dependencies`，默认值为`[\"require\", \"exports\", \"module\"]`。\n\n```javascript\ndefine(function(require, exports, module) {}）\n```\n\n**`factory`**: 模块的具体实现，类型为对象或函数。\n\n#### 2. 引入模块\n\n通过`require`引入\n```javascript\nrequire([\n\t\"moduleA\",\n\t\"moduleB\",\n\tfunction (m1, m2) {\n\t\t// 使用m1、m2\n\t}\n]);\n```\n\n#### 例子：\n下面通过`requirejs`写个例子：\n\n##### 1. 建立如下的目录结构：\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-a1c46888e1da89da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 2. 在index.html引入requirejs，并通过data-main标识入口文件\n要注意入口文件是唯一的。\n```javascript\n<script\n\tsrc=\"./require.js\"\n\tdata-main=\"js/main.js\"></script>\n```\n##### 3. 在moduleA、moduleB中定义模块\nmoduleA.js\n```javascript\ndefine(function () {\n\tfunction logStr(str) {\n\t\tconsole.log(str);\n\t}\n\treturn { logStr };\n// 必须要将需要导出的内容return，且被花括号包裹上\n// 或define的第三个参数就是一个对象,require才能接收到\n});\n\n```\nmoduleB.js\n```javascript\ndefine([\"component/moduleA\"], function (moduleA) {\n// function的参数moduleA和前面的模块一一对应，如果引入多个模块，那么function就写多个参数去接收，可以改名。\n// 引入moduleA的方法如下：\n\tmoduleA.logStr(\"moduleA被moduleB引入\");\n\tfunction logNum(num) {\n\t\tconsole.log(num);\n\t}\n\treturn { logNum };\n});\n```\nmain.js\n```javascript\nrequire([\"component/moduleB\"], function (moduleB) {\n\tconsole.log(\"ModuleB被main引入，打印数字\");\n\tmoduleB.logNum(2);\n});\n```\n也可以使用require.config去定义公用路径：\n```javascript\nrequire.config({\n\tpaths: {\n\t\tmoduleB: \"./component/moduleB\"\n\t}\n});\nrequire([\"moduleB\"], function (moduleB) {\n\tconsole.log(\"ModuleB被main引入，打印数字\");\n\tmoduleB.logNum(2);\n});\n\n```\n\n##### 运行结果：\n![](https://upload-images.jianshu.io/upload_images/20892169-02f2299da74151fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 二、CommonJS\n同步加载模块的规范，即，只有加载完成，才能执行后续操作。\nCommonJS 是以在浏览器环境之外构建 JavaScript 生态系统为目标而产生的项目，如nodejs。\n\n### 用法\n\n```javascript\n// moduleA.js\nmodule.exports = function( value ){\n    return value * 2;\n}\n```\n\n```javascript\n// moduleB.js\nvar multiplyBy2 = require('./moduleA');\nvar result = multiplyBy2(4);\n```\n\nCommonJS 是同步加载模块，但其实也有浏览器端的实现，其原理是将所有模块都定义好并通过 `id` 索引，这样就可以方便的在浏览器环境中解析了，可以参考 [require1k](https://github.com/Stuk/require1k) 和 [tiny-browser-require](https://github.com/ruanyf/tiny-browser-require) 的源码来理解其解析（resolve）的过程。\n\n更多关于 CommonJS 规范的内容请查看 [http://wiki.commonjs.org/wiki/CommonJS](http://wiki.commonjs.org/wiki/CommonJS)。\n\nCommonJS的写法比AMD要简单明了很多，不举例了。","source":"_posts/cxy/js/js-amd.md","raw":"---\ntitle: '模块化之AMD和CommonJS'\ndate: 2021-04-13 12:00:38\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、AMD\n### 概念：\n异步加载模块的规范，即，加载模块不会阻塞之后代码的执行。\nAMD是为浏览器环境所设计的，如requirejs。\n### 用法：\n#### 1. 定义模块\nAMD的模块，通过define函数定义在闭包中，格式如下：\n\n```javascript\ndefine(id?: string,dependencies?: string[],factory: Function | object)\n```\n\n**`id`**: 模块名，可选，若不写，则模块为匿名模块。\n\n**`dependencies`**: 所要依赖的模块列表，字符串数组类型，可选。若未指定`dependencies`，默认值为`[\"require\", \"exports\", \"module\"]`。\n\n```javascript\ndefine(function(require, exports, module) {}）\n```\n\n**`factory`**: 模块的具体实现，类型为对象或函数。\n\n#### 2. 引入模块\n\n通过`require`引入\n```javascript\nrequire([\n\t\"moduleA\",\n\t\"moduleB\",\n\tfunction (m1, m2) {\n\t\t// 使用m1、m2\n\t}\n]);\n```\n\n#### 例子：\n下面通过`requirejs`写个例子：\n\n##### 1. 建立如下的目录结构：\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-a1c46888e1da89da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 2. 在index.html引入requirejs，并通过data-main标识入口文件\n要注意入口文件是唯一的。\n```javascript\n<script\n\tsrc=\"./require.js\"\n\tdata-main=\"js/main.js\"></script>\n```\n##### 3. 在moduleA、moduleB中定义模块\nmoduleA.js\n```javascript\ndefine(function () {\n\tfunction logStr(str) {\n\t\tconsole.log(str);\n\t}\n\treturn { logStr };\n// 必须要将需要导出的内容return，且被花括号包裹上\n// 或define的第三个参数就是一个对象,require才能接收到\n});\n\n```\nmoduleB.js\n```javascript\ndefine([\"component/moduleA\"], function (moduleA) {\n// function的参数moduleA和前面的模块一一对应，如果引入多个模块，那么function就写多个参数去接收，可以改名。\n// 引入moduleA的方法如下：\n\tmoduleA.logStr(\"moduleA被moduleB引入\");\n\tfunction logNum(num) {\n\t\tconsole.log(num);\n\t}\n\treturn { logNum };\n});\n```\nmain.js\n```javascript\nrequire([\"component/moduleB\"], function (moduleB) {\n\tconsole.log(\"ModuleB被main引入，打印数字\");\n\tmoduleB.logNum(2);\n});\n```\n也可以使用require.config去定义公用路径：\n```javascript\nrequire.config({\n\tpaths: {\n\t\tmoduleB: \"./component/moduleB\"\n\t}\n});\nrequire([\"moduleB\"], function (moduleB) {\n\tconsole.log(\"ModuleB被main引入，打印数字\");\n\tmoduleB.logNum(2);\n});\n\n```\n\n##### 运行结果：\n![](https://upload-images.jianshu.io/upload_images/20892169-02f2299da74151fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 二、CommonJS\n同步加载模块的规范，即，只有加载完成，才能执行后续操作。\nCommonJS 是以在浏览器环境之外构建 JavaScript 生态系统为目标而产生的项目，如nodejs。\n\n### 用法\n\n```javascript\n// moduleA.js\nmodule.exports = function( value ){\n    return value * 2;\n}\n```\n\n```javascript\n// moduleB.js\nvar multiplyBy2 = require('./moduleA');\nvar result = multiplyBy2(4);\n```\n\nCommonJS 是同步加载模块，但其实也有浏览器端的实现，其原理是将所有模块都定义好并通过 `id` 索引，这样就可以方便的在浏览器环境中解析了，可以参考 [require1k](https://github.com/Stuk/require1k) 和 [tiny-browser-require](https://github.com/ruanyf/tiny-browser-require) 的源码来理解其解析（resolve）的过程。\n\n更多关于 CommonJS 规范的内容请查看 [http://wiki.commonjs.org/wiki/CommonJS](http://wiki.commonjs.org/wiki/CommonJS)。\n\nCommonJS的写法比AMD要简单明了很多，不举例了。","slug":"cxy/js/js-amd","published":1,"updated":"2023-01-25T13:57:51.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbr7q3g0001zewi4qdt2iz3","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、AMD\"><a href=\"#一、AMD\" class=\"headerlink\" title=\"一、AMD\"></a>一、AMD</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><p>异步加载模块的规范，即，加载模块不会阻塞之后代码的执行。<br>AMD是为浏览器环境所设计的，如requirejs。</p>\n<h3 id=\"用法：\"><a href=\"#用法：\" class=\"headerlink\" title=\"用法：\"></a>用法：</h3><h4 id=\"1-定义模块\"><a href=\"#1-定义模块\" class=\"headerlink\" title=\"1. 定义模块\"></a>1. 定义模块</h4><p>AMD的模块，通过define函数定义在闭包中，格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(id?: string,dependencies?: string[],<span class=\"attr\">factory</span>: <span class=\"title class_\">Function</span> | object)</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>id</code></strong>: 模块名，可选，若不写，则模块为匿名模块。</p>\n<p><strong><code>dependencies</code></strong>: 所要依赖的模块列表，字符串数组类型，可选。若未指定<code>dependencies</code>，默认值为<code>[&quot;require&quot;, &quot;exports&quot;, &quot;module&quot;]</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>, <span class=\"variable language_\">module</span></span>) &#123;&#125;）</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>factory</code></strong>: 模块的具体实现，类型为对象或函数。</p>\n<h4 id=\"2-引入模块\"><a href=\"#2-引入模块\" class=\"headerlink\" title=\"2. 引入模块\"></a>2. 引入模块</h4><p>通过<code>require</code>引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([</span><br><span class=\"line\">\t<span class=\"string\">&quot;moduleA&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;moduleB&quot;</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (<span class=\"params\">m1, m2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用m1、m2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h4><p>下面通过<code>requirejs</code>写个例子：</p>\n<h5 id=\"1-建立如下的目录结构：\"><a href=\"#1-建立如下的目录结构：\" class=\"headerlink\" title=\"1. 建立如下的目录结构：\"></a>1. 建立如下的目录结构：</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a1c46888e1da89da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h5 id=\"2-在index-html引入requirejs，并通过data-main标识入口文件\"><a href=\"#2-在index-html引入requirejs，并通过data-main标识入口文件\" class=\"headerlink\" title=\"2. 在index.html引入requirejs，并通过data-main标识入口文件\"></a>2. 在index.html引入requirejs，并通过data-main标识入口文件</h5><p>要注意入口文件是唯一的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script</span><br><span class=\"line\">\tsrc=<span class=\"string\">&quot;./require.js&quot;</span></span><br><span class=\"line\">\tdata-main=<span class=\"string\">&quot;js/main.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-在moduleA、moduleB中定义模块\"><a href=\"#3-在moduleA、moduleB中定义模块\" class=\"headerlink\" title=\"3. 在moduleA、moduleB中定义模块\"></a>3. 在moduleA、moduleB中定义模块</h5><p>moduleA.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">logStr</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123; logStr &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 必须要将需要导出的内容return，且被花括号包裹上</span></span><br><span class=\"line\"><span class=\"comment\">// 或define的第三个参数就是一个对象,require才能接收到</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>moduleB.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"string\">&quot;component/moduleA&quot;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">moduleA</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// function的参数moduleA和前面的模块一一对应，如果引入多个模块，那么function就写多个参数去接收，可以改名。</span></span><br><span class=\"line\"><span class=\"comment\">// 引入moduleA的方法如下：</span></span><br><span class=\"line\">\tmoduleA.<span class=\"title function_\">logStr</span>(<span class=\"string\">&quot;moduleA被moduleB引入&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">logNum</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123; logNum &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&quot;component/moduleB&quot;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">moduleB</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ModuleB被main引入，打印数字&quot;</span>);</span><br><span class=\"line\">\tmoduleB.<span class=\"title function_\">logNum</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>也可以使用require.config去定义公用路径：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.<span class=\"title function_\">config</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">paths</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">moduleB</span>: <span class=\"string\">&quot;./component/moduleB&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&quot;moduleB&quot;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">moduleB</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ModuleB被main引入，打印数字&quot;</span>);</span><br><span class=\"line\">\tmoduleB.<span class=\"title function_\">logNum</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-02f2299da74151fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"二、CommonJS\"><a href=\"#二、CommonJS\" class=\"headerlink\" title=\"二、CommonJS\"></a>二、CommonJS</h2><p>同步加载模块的规范，即，只有加载完成，才能执行后续操作。<br>CommonJS 是以在浏览器环境之外构建 JavaScript 生态系统为目标而产生的项目，如nodejs。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\"> value </span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> multiplyBy2 = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./moduleA&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title function_\">multiplyBy2</span>(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>CommonJS 是同步加载模块，但其实也有浏览器端的实现，其原理是将所有模块都定义好并通过 <code>id</code> 索引，这样就可以方便的在浏览器环境中解析了，可以参考 <a href=\"https://github.com/Stuk/require1k\">require1k</a> 和 <a href=\"https://github.com/ruanyf/tiny-browser-require\">tiny-browser-require</a> 的源码来理解其解析（resolve）的过程。</p>\n<p>更多关于 CommonJS 规范的内容请查看 <a href=\"http://wiki.commonjs.org/wiki/CommonJS\">http://wiki.commonjs.org/wiki/CommonJS</a>。</p>\n<p>CommonJS的写法比AMD要简单明了很多，不举例了。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、AMD\"><a href=\"#一、AMD\" class=\"headerlink\" title=\"一、AMD\"></a>一、AMD</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><p>异步加载模块的规范，即，加载模块不会阻塞之后代码的执行。<br>AMD是为浏览器环境所设计的，如requirejs。</p>\n<h3 id=\"用法：\"><a href=\"#用法：\" class=\"headerlink\" title=\"用法：\"></a>用法：</h3><h4 id=\"1-定义模块\"><a href=\"#1-定义模块\" class=\"headerlink\" title=\"1. 定义模块\"></a>1. 定义模块</h4><p>AMD的模块，通过define函数定义在闭包中，格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(id?: string,dependencies?: string[],<span class=\"attr\">factory</span>: <span class=\"title class_\">Function</span> | object)</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>id</code></strong>: 模块名，可选，若不写，则模块为匿名模块。</p>\n<p><strong><code>dependencies</code></strong>: 所要依赖的模块列表，字符串数组类型，可选。若未指定<code>dependencies</code>，默认值为<code>[&quot;require&quot;, &quot;exports&quot;, &quot;module&quot;]</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>, <span class=\"variable language_\">module</span></span>) &#123;&#125;）</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>factory</code></strong>: 模块的具体实现，类型为对象或函数。</p>\n<h4 id=\"2-引入模块\"><a href=\"#2-引入模块\" class=\"headerlink\" title=\"2. 引入模块\"></a>2. 引入模块</h4><p>通过<code>require</code>引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([</span><br><span class=\"line\">\t<span class=\"string\">&quot;moduleA&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;moduleB&quot;</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (<span class=\"params\">m1, m2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用m1、m2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h4><p>下面通过<code>requirejs</code>写个例子：</p>\n<h5 id=\"1-建立如下的目录结构：\"><a href=\"#1-建立如下的目录结构：\" class=\"headerlink\" title=\"1. 建立如下的目录结构：\"></a>1. 建立如下的目录结构：</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a1c46888e1da89da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h5 id=\"2-在index-html引入requirejs，并通过data-main标识入口文件\"><a href=\"#2-在index-html引入requirejs，并通过data-main标识入口文件\" class=\"headerlink\" title=\"2. 在index.html引入requirejs，并通过data-main标识入口文件\"></a>2. 在index.html引入requirejs，并通过data-main标识入口文件</h5><p>要注意入口文件是唯一的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script</span><br><span class=\"line\">\tsrc=<span class=\"string\">&quot;./require.js&quot;</span></span><br><span class=\"line\">\tdata-main=<span class=\"string\">&quot;js/main.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-在moduleA、moduleB中定义模块\"><a href=\"#3-在moduleA、moduleB中定义模块\" class=\"headerlink\" title=\"3. 在moduleA、moduleB中定义模块\"></a>3. 在moduleA、moduleB中定义模块</h5><p>moduleA.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">logStr</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123; logStr &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 必须要将需要导出的内容return，且被花括号包裹上</span></span><br><span class=\"line\"><span class=\"comment\">// 或define的第三个参数就是一个对象,require才能接收到</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>moduleB.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"string\">&quot;component/moduleA&quot;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">moduleA</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// function的参数moduleA和前面的模块一一对应，如果引入多个模块，那么function就写多个参数去接收，可以改名。</span></span><br><span class=\"line\"><span class=\"comment\">// 引入moduleA的方法如下：</span></span><br><span class=\"line\">\tmoduleA.<span class=\"title function_\">logStr</span>(<span class=\"string\">&quot;moduleA被moduleB引入&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">logNum</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123; logNum &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&quot;component/moduleB&quot;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">moduleB</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ModuleB被main引入，打印数字&quot;</span>);</span><br><span class=\"line\">\tmoduleB.<span class=\"title function_\">logNum</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>也可以使用require.config去定义公用路径：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.<span class=\"title function_\">config</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">paths</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">moduleB</span>: <span class=\"string\">&quot;./component/moduleB&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&quot;moduleB&quot;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">moduleB</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ModuleB被main引入，打印数字&quot;</span>);</span><br><span class=\"line\">\tmoduleB.<span class=\"title function_\">logNum</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-02f2299da74151fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"二、CommonJS\"><a href=\"#二、CommonJS\" class=\"headerlink\" title=\"二、CommonJS\"></a>二、CommonJS</h2><p>同步加载模块的规范，即，只有加载完成，才能执行后续操作。<br>CommonJS 是以在浏览器环境之外构建 JavaScript 生态系统为目标而产生的项目，如nodejs。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\"> value </span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> multiplyBy2 = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./moduleA&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title function_\">multiplyBy2</span>(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>CommonJS 是同步加载模块，但其实也有浏览器端的实现，其原理是将所有模块都定义好并通过 <code>id</code> 索引，这样就可以方便的在浏览器环境中解析了，可以参考 <a href=\"https://github.com/Stuk/require1k\">require1k</a> 和 <a href=\"https://github.com/ruanyf/tiny-browser-require\">tiny-browser-require</a> 的源码来理解其解析（resolve）的过程。</p>\n<p>更多关于 CommonJS 规范的内容请查看 <a href=\"http://wiki.commonjs.org/wiki/CommonJS\">http://wiki.commonjs.org/wiki/CommonJS</a>。</p>\n<p>CommonJS的写法比AMD要简单明了很多，不举例了。</p>\n"},{"title":"模块化之ES6","date":"2021-04-12T04:00:38.000Z","_content":" \n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、export命令\n### 1. 基本使用\n\n```javascript\nexport var firstName = 'Michael';\nexport var lastName = 'kaol';\nexport var age = '10'\n```\n或\n\n```javascript\nvar firstName = 'Michael';\nvar lastName = 'kaol';\nvar age = '10'\nexport {firstName,lastName,age};\n```\n\n### 2. export也可以输出函数和类\n\n```javascript\nexport function fun() {\n  return 'fun'\n}  // 对外输出函数名为fun的函数\n```\n\n### 3. as关键字\n\n```javascript\nfunction v1() { ... }\nfunction v2() { ... }\n\nexport {\n  v1 as streamV1,\n  v2 as streamV2,\n  v2 as streamLatestVersion\n}\n```\n### 4. 下面这种写法是错的\n\n```javascript\nvar a = 1\nexport a // 相当与export 1，而输出的应为接口，值是不能输出的\n```\n正确写法： \n```javascript\nexport var a = 1\n```\n```javascript\nvar a = 1\nexport { a }\n```\n```javascript\nvar a = 1\nexport { a as n }\n```\n## 二、import\nimport命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。\n\n```javascript\nimport { firstName, lastName, year } from './profile.js';\n```\n\n## 三、export default\n### 1. 基本用法\n\n```javascript\nexport default function () {\n  console.log('foo');\n}\n```\n\n``export default`` 导出的一定是一个匿名的东西，即使接受的不是匿名函数或变量，因为从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。\n\n```javascript\nfunction foo() {\n  console.log('foo');\n}\n\nexport default foo; \n```\n\n上面代码中，foo函数的函数名foo，在模块外部是无效的。加载的时候，视同匿名函数加载。\n### 2. export default的正确写法\n\n```javascript\nexport default 1 //正确\n```\n\n```javascript\nlet a = 1\nexport default a //正确\n```\n\n```javascript\nexport default var a = 1 // 报错！export default命令其实只是输出一个叫做default的变量，所以它后面不能跟变量声明语句。\n```\n\n在export default时，import导出不用大括号，除非是解构赋值。\n\n```javascript\nlet obj = {\n  a: 1,\n  b: 2,\n  c: 3\n}\nexport default obj\n```\n从其他文件导入时：\n\n```javascript\nimport obj from 'xxx.js'\n```\n\n## 四、其他注意点\n### 1. commonJS和import\n虽然通过babel转码，commonJS的require和import可以写在一起，可是由于import是静态解析阶段执行，所以在require引入前，import会先于它执行，这样有可能会导致错误。\n### 2. import的简易写法\n当导出下面的文件时\n\n```javascript\nexport let a = 1;\nexport let b = 2;\nexport let c = 3;\n```\n\n引入可以这样写\n\n```javascript\nimport {a,b,c} from xxx\n```\n\n或\n\n```javascript\nimport * from xxx\n```\n\n### 3. import 和 export 的复合写法\n如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。\n```javascript\nexport { a, b } from 'xxx_module';\n// 可以简单理解为\nimport { a, b } from 'my_module';\nexport { a, b };\n```\n## 五、import()\nimport()用于动态加载，它返回一个 Promise 对象。下面是一个例子。\n```javascript\nconst main = document.querySelector('main');\n\nimport(`./section-modules/${someVariable}.js`)\n  .then(module => {\n    module.loadPageInto(main);\n  })\n  .catch(err => {\n    main.textContent = err.message;\n  });\n```\n### import可以用作\n#### 1. 条件加载\n```javascript\nif(flag) {\n  import('./xxx')\n}\n```\n#### 2. 按需加载\n```javascript\nbtn.addEventListener('click',function(){\n  import('./xxx')\n})\n```\n#### 3. 动态模块路径\n```javascript\nfunction fun(a) {\n  let moduleFun = ''\n  if(a=1) {moduleFun = '/blog/1'}\n  if(a=2) {moduleFun = '/blog/2'}\n  if(a=3) {moduleFun = '/blog/3'}\n  return moduleFun\n}\nimport(fun(1)) // 根据函数的返回结果加载不同模块\n```\n\n","source":"_posts/cxy/js/js-mkh.md","raw":"---\ntitle: '模块化之ES6'\ndate: 2021-04-12 12:00:38\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n \n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、export命令\n### 1. 基本使用\n\n```javascript\nexport var firstName = 'Michael';\nexport var lastName = 'kaol';\nexport var age = '10'\n```\n或\n\n```javascript\nvar firstName = 'Michael';\nvar lastName = 'kaol';\nvar age = '10'\nexport {firstName,lastName,age};\n```\n\n### 2. export也可以输出函数和类\n\n```javascript\nexport function fun() {\n  return 'fun'\n}  // 对外输出函数名为fun的函数\n```\n\n### 3. as关键字\n\n```javascript\nfunction v1() { ... }\nfunction v2() { ... }\n\nexport {\n  v1 as streamV1,\n  v2 as streamV2,\n  v2 as streamLatestVersion\n}\n```\n### 4. 下面这种写法是错的\n\n```javascript\nvar a = 1\nexport a // 相当与export 1，而输出的应为接口，值是不能输出的\n```\n正确写法： \n```javascript\nexport var a = 1\n```\n```javascript\nvar a = 1\nexport { a }\n```\n```javascript\nvar a = 1\nexport { a as n }\n```\n## 二、import\nimport命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。\n\n```javascript\nimport { firstName, lastName, year } from './profile.js';\n```\n\n## 三、export default\n### 1. 基本用法\n\n```javascript\nexport default function () {\n  console.log('foo');\n}\n```\n\n``export default`` 导出的一定是一个匿名的东西，即使接受的不是匿名函数或变量，因为从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。\n\n```javascript\nfunction foo() {\n  console.log('foo');\n}\n\nexport default foo; \n```\n\n上面代码中，foo函数的函数名foo，在模块外部是无效的。加载的时候，视同匿名函数加载。\n### 2. export default的正确写法\n\n```javascript\nexport default 1 //正确\n```\n\n```javascript\nlet a = 1\nexport default a //正确\n```\n\n```javascript\nexport default var a = 1 // 报错！export default命令其实只是输出一个叫做default的变量，所以它后面不能跟变量声明语句。\n```\n\n在export default时，import导出不用大括号，除非是解构赋值。\n\n```javascript\nlet obj = {\n  a: 1,\n  b: 2,\n  c: 3\n}\nexport default obj\n```\n从其他文件导入时：\n\n```javascript\nimport obj from 'xxx.js'\n```\n\n## 四、其他注意点\n### 1. commonJS和import\n虽然通过babel转码，commonJS的require和import可以写在一起，可是由于import是静态解析阶段执行，所以在require引入前，import会先于它执行，这样有可能会导致错误。\n### 2. import的简易写法\n当导出下面的文件时\n\n```javascript\nexport let a = 1;\nexport let b = 2;\nexport let c = 3;\n```\n\n引入可以这样写\n\n```javascript\nimport {a,b,c} from xxx\n```\n\n或\n\n```javascript\nimport * from xxx\n```\n\n### 3. import 和 export 的复合写法\n如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。\n```javascript\nexport { a, b } from 'xxx_module';\n// 可以简单理解为\nimport { a, b } from 'my_module';\nexport { a, b };\n```\n## 五、import()\nimport()用于动态加载，它返回一个 Promise 对象。下面是一个例子。\n```javascript\nconst main = document.querySelector('main');\n\nimport(`./section-modules/${someVariable}.js`)\n  .then(module => {\n    module.loadPageInto(main);\n  })\n  .catch(err => {\n    main.textContent = err.message;\n  });\n```\n### import可以用作\n#### 1. 条件加载\n```javascript\nif(flag) {\n  import('./xxx')\n}\n```\n#### 2. 按需加载\n```javascript\nbtn.addEventListener('click',function(){\n  import('./xxx')\n})\n```\n#### 3. 动态模块路径\n```javascript\nfunction fun(a) {\n  let moduleFun = ''\n  if(a=1) {moduleFun = '/blog/1'}\n  if(a=2) {moduleFun = '/blog/2'}\n  if(a=3) {moduleFun = '/blog/3'}\n  return moduleFun\n}\nimport(fun(1)) // 根据函数的返回结果加载不同模块\n```\n\n","slug":"cxy/js/js-mkh","published":1,"updated":"2023-01-25T14:01:26.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbr7q3h0003zewi819vage7","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、export命令\"><a href=\"#一、export命令\" class=\"headerlink\" title=\"一、export命令\"></a>一、export命令</h2><h3 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1. 基本使用\"></a>1. 基本使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;kaol&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> age = <span class=\"string\">&#x27;10&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;kaol&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">&#x27;10&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;firstName,lastName,age&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-export也可以输出函数和类\"><a href=\"#2-export也可以输出函数和类\" class=\"headerlink\" title=\"2. export也可以输出函数和类\"></a>2. export也可以输出函数和类</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;fun&#x27;</span></span><br><span class=\"line\">&#125;  <span class=\"comment\">// 对外输出函数名为fun的函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-as关键字\"><a href=\"#3-as关键字\" class=\"headerlink\" title=\"3. as关键字\"></a>3. as关键字</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">v1</span>(<span class=\"params\"></span>) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">v2</span>(<span class=\"params\"></span>) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  v1 <span class=\"keyword\">as</span> streamV1,</span><br><span class=\"line\">  v2 <span class=\"keyword\">as</span> streamV2,</span><br><span class=\"line\">  v2 <span class=\"keyword\">as</span> streamLatestVersion</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-下面这种写法是错的\"><a href=\"#4-下面这种写法是错的\" class=\"headerlink\" title=\"4. 下面这种写法是错的\"></a>4. 下面这种写法是错的</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> a <span class=\"comment\">// 相当与export 1，而输出的应为接口，值是不能输出的</span></span><br></pre></td></tr></table></figure>\n<p>正确写法： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; a &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; a <span class=\"keyword\">as</span> n &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、import\"><a href=\"#二、import\" class=\"headerlink\" title=\"二、import\"></a>二、import</h2><p>import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; firstName, lastName, year &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./profile.js&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、export-default\"><a href=\"#三、export-default\" class=\"headerlink\" title=\"三、export default\"></a>三、export default</h2><h3 id=\"1-基本用法\"><a href=\"#1-基本用法\" class=\"headerlink\" title=\"1. 基本用法\"></a>1. 基本用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>export default</code> 导出的一定是一个匿名的东西，即使接受的不是匿名函数或变量，因为从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo; </span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，foo函数的函数名foo，在模块外部是无效的。加载的时候，视同匿名函数加载。</p>\n<h3 id=\"2-export-default的正确写法\"><a href=\"#2-export-default的正确写法\" class=\"headerlink\" title=\"2. export default的正确写法\"></a>2. export default的正确写法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"number\">1</span> <span class=\"comment\">//正确</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> a <span class=\"comment\">//正确</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> <span class=\"comment\">// 报错！export default命令其实只是输出一个叫做default的变量，所以它后面不能跟变量声明语句。</span></span><br></pre></td></tr></table></figure>\n\n<p>在export default时，import导出不用大括号，除非是解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> obj</span><br></pre></td></tr></table></figure>\n<p>从其他文件导入时：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> obj <span class=\"keyword\">from</span> <span class=\"string\">&#x27;xxx.js&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、其他注意点\"><a href=\"#四、其他注意点\" class=\"headerlink\" title=\"四、其他注意点\"></a>四、其他注意点</h2><h3 id=\"1-commonJS和import\"><a href=\"#1-commonJS和import\" class=\"headerlink\" title=\"1. commonJS和import\"></a>1. commonJS和import</h3><p>虽然通过babel转码，commonJS的require和import可以写在一起，可是由于import是静态解析阶段执行，所以在require引入前，import会先于它执行，这样有可能会导致错误。</p>\n<h3 id=\"2-import的简易写法\"><a href=\"#2-import的简易写法\" class=\"headerlink\" title=\"2. import的简易写法\"></a>2. import的简易写法</h3><p>当导出下面的文件时</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>引入可以这样写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;a,b,c&#125; <span class=\"keyword\">from</span> xxx</span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">from</span> xxx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-import-和-export-的复合写法\"><a href=\"#3-import-和-export-的复合写法\" class=\"headerlink\" title=\"3. import 和 export 的复合写法\"></a>3. import 和 export 的复合写法</h3><p>如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; a, b &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;xxx_module&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 可以简单理解为</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; a, b &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;my_module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; a, b &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、import\"><a href=\"#五、import\" class=\"headerlink\" title=\"五、import()\"></a>五、import()</h2><p>import()用于动态加载，它返回一个 Promise 对象。下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> main = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;main&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">`./section-modules/<span class=\"subst\">$&#123;someVariable&#125;</span>.js`</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"title function_\">loadPageInto</span>(main);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    main.<span class=\"property\">textContent</span> = err.<span class=\"property\">message</span>;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"import可以用作\"><a href=\"#import可以用作\" class=\"headerlink\" title=\"import可以用作\"></a>import可以用作</h3><h4 id=\"1-条件加载\"><a href=\"#1-条件加载\" class=\"headerlink\" title=\"1. 条件加载\"></a>1. 条件加载</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./xxx&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-按需加载\"><a href=\"#2-按需加载\" class=\"headerlink\" title=\"2. 按需加载\"></a>2. 按需加载</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./xxx&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-动态模块路径\"><a href=\"#3-动态模块路径\" class=\"headerlink\" title=\"3. 动态模块路径\"></a>3. 动态模块路径</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> moduleFun = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a=<span class=\"number\">1</span>) &#123;moduleFun = <span class=\"string\">&#x27;/blog/1&#x27;</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a=<span class=\"number\">2</span>) &#123;moduleFun = <span class=\"string\">&#x27;/blog/2&#x27;</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a=<span class=\"number\">3</span>) &#123;moduleFun = <span class=\"string\">&#x27;/blog/3&#x27;</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> moduleFun</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"title function_\">fun</span>(<span class=\"number\">1</span>)) <span class=\"comment\">// 根据函数的返回结果加载不同模块</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、export命令\"><a href=\"#一、export命令\" class=\"headerlink\" title=\"一、export命令\"></a>一、export命令</h2><h3 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1. 基本使用\"></a>1. 基本使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;kaol&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> age = <span class=\"string\">&#x27;10&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;kaol&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">&#x27;10&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;firstName,lastName,age&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-export也可以输出函数和类\"><a href=\"#2-export也可以输出函数和类\" class=\"headerlink\" title=\"2. export也可以输出函数和类\"></a>2. export也可以输出函数和类</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;fun&#x27;</span></span><br><span class=\"line\">&#125;  <span class=\"comment\">// 对外输出函数名为fun的函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-as关键字\"><a href=\"#3-as关键字\" class=\"headerlink\" title=\"3. as关键字\"></a>3. as关键字</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">v1</span>(<span class=\"params\"></span>) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">v2</span>(<span class=\"params\"></span>) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  v1 <span class=\"keyword\">as</span> streamV1,</span><br><span class=\"line\">  v2 <span class=\"keyword\">as</span> streamV2,</span><br><span class=\"line\">  v2 <span class=\"keyword\">as</span> streamLatestVersion</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-下面这种写法是错的\"><a href=\"#4-下面这种写法是错的\" class=\"headerlink\" title=\"4. 下面这种写法是错的\"></a>4. 下面这种写法是错的</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> a <span class=\"comment\">// 相当与export 1，而输出的应为接口，值是不能输出的</span></span><br></pre></td></tr></table></figure>\n<p>正确写法： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; a &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; a <span class=\"keyword\">as</span> n &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、import\"><a href=\"#二、import\" class=\"headerlink\" title=\"二、import\"></a>二、import</h2><p>import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; firstName, lastName, year &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./profile.js&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、export-default\"><a href=\"#三、export-default\" class=\"headerlink\" title=\"三、export default\"></a>三、export default</h2><h3 id=\"1-基本用法\"><a href=\"#1-基本用法\" class=\"headerlink\" title=\"1. 基本用法\"></a>1. 基本用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>export default</code> 导出的一定是一个匿名的东西，即使接受的不是匿名函数或变量，因为从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo; </span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，foo函数的函数名foo，在模块外部是无效的。加载的时候，视同匿名函数加载。</p>\n<h3 id=\"2-export-default的正确写法\"><a href=\"#2-export-default的正确写法\" class=\"headerlink\" title=\"2. export default的正确写法\"></a>2. export default的正确写法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"number\">1</span> <span class=\"comment\">//正确</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> a <span class=\"comment\">//正确</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> <span class=\"comment\">// 报错！export default命令其实只是输出一个叫做default的变量，所以它后面不能跟变量声明语句。</span></span><br></pre></td></tr></table></figure>\n\n<p>在export default时，import导出不用大括号，除非是解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> obj</span><br></pre></td></tr></table></figure>\n<p>从其他文件导入时：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> obj <span class=\"keyword\">from</span> <span class=\"string\">&#x27;xxx.js&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、其他注意点\"><a href=\"#四、其他注意点\" class=\"headerlink\" title=\"四、其他注意点\"></a>四、其他注意点</h2><h3 id=\"1-commonJS和import\"><a href=\"#1-commonJS和import\" class=\"headerlink\" title=\"1. commonJS和import\"></a>1. commonJS和import</h3><p>虽然通过babel转码，commonJS的require和import可以写在一起，可是由于import是静态解析阶段执行，所以在require引入前，import会先于它执行，这样有可能会导致错误。</p>\n<h3 id=\"2-import的简易写法\"><a href=\"#2-import的简易写法\" class=\"headerlink\" title=\"2. import的简易写法\"></a>2. import的简易写法</h3><p>当导出下面的文件时</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>引入可以这样写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;a,b,c&#125; <span class=\"keyword\">from</span> xxx</span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">from</span> xxx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-import-和-export-的复合写法\"><a href=\"#3-import-和-export-的复合写法\" class=\"headerlink\" title=\"3. import 和 export 的复合写法\"></a>3. import 和 export 的复合写法</h3><p>如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; a, b &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;xxx_module&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 可以简单理解为</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; a, b &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;my_module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; a, b &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、import\"><a href=\"#五、import\" class=\"headerlink\" title=\"五、import()\"></a>五、import()</h2><p>import()用于动态加载，它返回一个 Promise 对象。下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> main = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;main&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">`./section-modules/<span class=\"subst\">$&#123;someVariable&#125;</span>.js`</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"title function_\">loadPageInto</span>(main);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    main.<span class=\"property\">textContent</span> = err.<span class=\"property\">message</span>;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"import可以用作\"><a href=\"#import可以用作\" class=\"headerlink\" title=\"import可以用作\"></a>import可以用作</h3><h4 id=\"1-条件加载\"><a href=\"#1-条件加载\" class=\"headerlink\" title=\"1. 条件加载\"></a>1. 条件加载</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./xxx&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-按需加载\"><a href=\"#2-按需加载\" class=\"headerlink\" title=\"2. 按需加载\"></a>2. 按需加载</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./xxx&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-动态模块路径\"><a href=\"#3-动态模块路径\" class=\"headerlink\" title=\"3. 动态模块路径\"></a>3. 动态模块路径</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> moduleFun = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a=<span class=\"number\">1</span>) &#123;moduleFun = <span class=\"string\">&#x27;/blog/1&#x27;</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a=<span class=\"number\">2</span>) &#123;moduleFun = <span class=\"string\">&#x27;/blog/2&#x27;</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a=<span class=\"number\">3</span>) &#123;moduleFun = <span class=\"string\">&#x27;/blog/3&#x27;</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> moduleFun</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"title function_\">fun</span>(<span class=\"number\">1</span>)) <span class=\"comment\">// 根据函数的返回结果加载不同模块</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"class总结","date":"2020-07-21T05:03:15.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、基本写法\n类的方法、属性、静态方法、静态属性、私有方法、私有属性\n继承、接口（没有）、抽象（没有）、final（这个有）\n\n```javascript\nclass Student {\n    constructor(name,age) {\n        this._name = name\n        this._age = age\n    }\n\n    toString() {\n        return `(姓名：${this._name},年龄${this._age})`\n    }\n}\n\nlet s1 = new Student('小明','12')\ns1.y // 12\n```\n#### 构造函数constuctor\n```javascript\nclass Student {\n    constructor(name,age) {\n        this._name = name\n        this._age = age\n    }\n    toString() {\n        return `(姓名：${this._name},年龄${this._age})`\n    }\n}\n```\n#### 实例属性\n可以使用this.xxx写在constructor方法中，也可以写在类的顶端。\n```javascript\nclass Student {\n    _age = 12;\n    constructor(name) {\n        this._name = name\n    }\n}\nlet s1 = new Student('小欧')\ns1._name //小欧\ns1._age // 12\n```\n实例属性不存在于原型链上，而是存在于单个实例中。如果constructor写了赋值，在创建实例时却没有赋值，那就会变成undefined拉\n```javascript\nclass Student {\n    _age = 12;\n    constructor(name,age) {\n        this._name = name\n        this._age = age\n    }\n}\nlet s1 = new Student('小欧')\ns1._name //小欧\ns1._age // undefined\n```\n原型属性（使用prototype赋值）存在于原型链，用“类.prototype.属性名”可以调用到。\n```javascript\nStudent.prototype.sex = '女'\ns1.sex // 女\ns2.sex // 女\n```\n类的方法是默认定义在原型链上，供所有实例共享的。但在类内部定义的变量是属于单个实例的，不存在与原型链上。\n如果想在类外通过赋值的方法，定义属于原型链的属性，当然所有实例也都可以共享，但一旦修改所有实例的该属性都会修改，其实没有什么意义还容易出问题。所以虽然可以在原型链上定义实例，但一般来说没必要。除非真的确定这个属性在所有的实例上都是相同的。\n\n#### getter、setter方法\n在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\nget/set方法定义的变量不需要提前定义。\nset方法必须要传入value\n```javascript\nclass JuniorStudent {\n    _name = '';\n    _age = 0;\n    _sex = ''\n    constructor (sex) {\n        this._sex = sex\n    }\n    get say () {\n        return 'hi!'\n    }\n    set say (value) {\n        console.log('say is'+value)\n    }\n}\n\nlet js = new JuniorStudent()\njs.say = '111'\n```\n#### name\n在类内部，可以使用类名.name去调用，获取类的名字\n```javascript\nclass Me {\n    getClassName () {\n      return Me.name // 类名.name\n    }\n}\nlet m = new Me ()\nm.getClassName () // Me\n```\n#### Class表达式\n类可以用表达式的形式定义，在类外部调用时只能用表达式调用，如下面的例子，外部只能使用MyClass调用，但MyClass的实例还是属于Me\n```javascript\nlet MyClass = class Me {\n    getClassName() {\n        return Me.name\n    }\n}\nlet mc = new MyClass() //不能用new Me()\nmc.getClassName () //Me\n```\n#### 属性表达式\n类的属性名可以用表达式表示\n```javascript\nlet methodName = 'getString'\nlet MyClass = class Me {\n    [methodName]() {\n        return 'getString'\n    }\n}\nlet mc = new MyClass()\nmc.getString () //getString\n```\n####静态属性\n**静态属性定义在类上，不在实例上，所以只能用类名.属性名调用。**\n定义静态属性的方法是在class外部，用类名.属性定义该属性\n```javascript\n// 旧写法\nclass Foo {\n}\nFoo.prop = 1;\nFoo.prop // 1\n```\nes6的规定，class内只有静态方法，没有静态属性，但现在有个提案是用**static**在内部定义静态属性，所以也可以如下定义\n```javascript\n// 新写法\nclass Foo {\n    static fooString1 = 'string1'\n}\nlet foo = new Foo()\nfoo.fooString1 // undefined\nFoo.fooString1 // string1\n```\n**静态方法的定义：**\n```javascript\nclass Foo {\n    static pringString = function (str) {\n        return str\n    }\n}\nFoo.pringString('111') //111\n```\n私有方法和私有属性\n使用#定义私有属性。只能在类的内部使用(this.#count)，无法继承，无法在外部调用。\n**暂时没有提供私有方法。**\n```javascript\nclass MyClass {\n    #name = 'aaa'\n    constructor () {\n        this.name = this.#name\n    }\n}\nlet mc = new MyClass()\nmc.name // aaa\n```\n####静态块\n有时候在类内部有一部分代码，是不用每次创建实例时都去调用的，比如静态属性的赋值。\n所以es2022规定了静态块，在类生成时只执行一次，主要用于对静态属性的赋值，之后新建实例就不再运行了。\n```javascript\nclass C {\n  static x = ...;\n  static y;\n  static z;\n\n  static {\n    try {\n      const obj = doSomethingWith(this.x);\n      this.y = obj.y; // 或C.y\n      this.z = obj.z;   // 或C.z \n    }\n    catch {\n      this.y = ...;// 或C.y\n      this.z = ...;// 或C.z\n    }\n  }\n}\n```\n#### new.target\n该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令，new.target会返回undefined\n```javascript\n\n// 另一种写法\nfunction Person(name) {\n  if (new.target === Person) {\n    this.name = name;\n  } else {\n    throw new Error('必须使用 new 命令生成实例');\n  }\n}\n\nvar person = new Person('张三'); // 正确\nvar notAPerson = Person.call(person, '张三');  // 报错\n```\n##二、类的继承\n```javascript\nclass Person {\n  //...  \n}\nclass Student extends Person {\n  //...  \n}\n```\n#### super方法与super关键字\n###### 1. super方法\nsuper方法**可以且只能**在子类构造函数中调用，用来调用父类的constructor()，**在子类的构造函数中必须要调用一次super()**\n```javascript\nclass Person {\n    constructor (x,y) {\n        this.x = x\n        this.y = y\n    }\n}\nclass Student extends Person {\n    constructor (x1,y1,newstring) {\n        super(x1,y1)\n        this.newstring = newstring\n    }\n}\nlet s1 = new Student(1,2,'str')\ns1.x // 1\ns1.newstring // str\n```\n\n###### 2. super关键字\nsuper作为对象时，在普通方法中，指向父类的原型对象（Point.prototype）；在静态方法中，指向父类。\n由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。\n因为类中定义的方法本就是定义在原型链(prototype)上，所以super可以调用到类内的方法。但super没办法调用到类内的变量，因为类中定义的变量是存在于实例的。\n```javascript\nclass A {\n  constructor() {\n    this.p = 2;\n  }\n}\n\nclass B extends A {\n  get m() {\n    return super.p;\n  }\n}\n\nlet b = new B();\nb.m // undefined\n```\n在子类普通方法中通过super调用父类的方法时，方法内部的this**指向当前的子类实例**。\n```javascript\nclass A {\n  constructor() {\n    this.x = 1;\n  }\n  print() {\n    console.log(this.x);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  m() {\n    super.print();\n  }\n}\n\nlet b = new B();\nb.m() // 2\n```\n在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。\n```javascript\nclass A {\n  constructor() {\n    this.x = 1;\n  }\n  static print() {\n    console.log(this.x);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  static m() {\n    super.print();\n  }\n}\n\nB.x = 3;\nB.m() // 3\n```","source":"_posts/cxy/js/js-class.md","raw":"---\ntitle: 'class总结'\ndate: 2020-07-21 13:03:15\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、基本写法\n类的方法、属性、静态方法、静态属性、私有方法、私有属性\n继承、接口（没有）、抽象（没有）、final（这个有）\n\n```javascript\nclass Student {\n    constructor(name,age) {\n        this._name = name\n        this._age = age\n    }\n\n    toString() {\n        return `(姓名：${this._name},年龄${this._age})`\n    }\n}\n\nlet s1 = new Student('小明','12')\ns1.y // 12\n```\n#### 构造函数constuctor\n```javascript\nclass Student {\n    constructor(name,age) {\n        this._name = name\n        this._age = age\n    }\n    toString() {\n        return `(姓名：${this._name},年龄${this._age})`\n    }\n}\n```\n#### 实例属性\n可以使用this.xxx写在constructor方法中，也可以写在类的顶端。\n```javascript\nclass Student {\n    _age = 12;\n    constructor(name) {\n        this._name = name\n    }\n}\nlet s1 = new Student('小欧')\ns1._name //小欧\ns1._age // 12\n```\n实例属性不存在于原型链上，而是存在于单个实例中。如果constructor写了赋值，在创建实例时却没有赋值，那就会变成undefined拉\n```javascript\nclass Student {\n    _age = 12;\n    constructor(name,age) {\n        this._name = name\n        this._age = age\n    }\n}\nlet s1 = new Student('小欧')\ns1._name //小欧\ns1._age // undefined\n```\n原型属性（使用prototype赋值）存在于原型链，用“类.prototype.属性名”可以调用到。\n```javascript\nStudent.prototype.sex = '女'\ns1.sex // 女\ns2.sex // 女\n```\n类的方法是默认定义在原型链上，供所有实例共享的。但在类内部定义的变量是属于单个实例的，不存在与原型链上。\n如果想在类外通过赋值的方法，定义属于原型链的属性，当然所有实例也都可以共享，但一旦修改所有实例的该属性都会修改，其实没有什么意义还容易出问题。所以虽然可以在原型链上定义实例，但一般来说没必要。除非真的确定这个属性在所有的实例上都是相同的。\n\n#### getter、setter方法\n在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\nget/set方法定义的变量不需要提前定义。\nset方法必须要传入value\n```javascript\nclass JuniorStudent {\n    _name = '';\n    _age = 0;\n    _sex = ''\n    constructor (sex) {\n        this._sex = sex\n    }\n    get say () {\n        return 'hi!'\n    }\n    set say (value) {\n        console.log('say is'+value)\n    }\n}\n\nlet js = new JuniorStudent()\njs.say = '111'\n```\n#### name\n在类内部，可以使用类名.name去调用，获取类的名字\n```javascript\nclass Me {\n    getClassName () {\n      return Me.name // 类名.name\n    }\n}\nlet m = new Me ()\nm.getClassName () // Me\n```\n#### Class表达式\n类可以用表达式的形式定义，在类外部调用时只能用表达式调用，如下面的例子，外部只能使用MyClass调用，但MyClass的实例还是属于Me\n```javascript\nlet MyClass = class Me {\n    getClassName() {\n        return Me.name\n    }\n}\nlet mc = new MyClass() //不能用new Me()\nmc.getClassName () //Me\n```\n#### 属性表达式\n类的属性名可以用表达式表示\n```javascript\nlet methodName = 'getString'\nlet MyClass = class Me {\n    [methodName]() {\n        return 'getString'\n    }\n}\nlet mc = new MyClass()\nmc.getString () //getString\n```\n####静态属性\n**静态属性定义在类上，不在实例上，所以只能用类名.属性名调用。**\n定义静态属性的方法是在class外部，用类名.属性定义该属性\n```javascript\n// 旧写法\nclass Foo {\n}\nFoo.prop = 1;\nFoo.prop // 1\n```\nes6的规定，class内只有静态方法，没有静态属性，但现在有个提案是用**static**在内部定义静态属性，所以也可以如下定义\n```javascript\n// 新写法\nclass Foo {\n    static fooString1 = 'string1'\n}\nlet foo = new Foo()\nfoo.fooString1 // undefined\nFoo.fooString1 // string1\n```\n**静态方法的定义：**\n```javascript\nclass Foo {\n    static pringString = function (str) {\n        return str\n    }\n}\nFoo.pringString('111') //111\n```\n私有方法和私有属性\n使用#定义私有属性。只能在类的内部使用(this.#count)，无法继承，无法在外部调用。\n**暂时没有提供私有方法。**\n```javascript\nclass MyClass {\n    #name = 'aaa'\n    constructor () {\n        this.name = this.#name\n    }\n}\nlet mc = new MyClass()\nmc.name // aaa\n```\n####静态块\n有时候在类内部有一部分代码，是不用每次创建实例时都去调用的，比如静态属性的赋值。\n所以es2022规定了静态块，在类生成时只执行一次，主要用于对静态属性的赋值，之后新建实例就不再运行了。\n```javascript\nclass C {\n  static x = ...;\n  static y;\n  static z;\n\n  static {\n    try {\n      const obj = doSomethingWith(this.x);\n      this.y = obj.y; // 或C.y\n      this.z = obj.z;   // 或C.z \n    }\n    catch {\n      this.y = ...;// 或C.y\n      this.z = ...;// 或C.z\n    }\n  }\n}\n```\n#### new.target\n该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令，new.target会返回undefined\n```javascript\n\n// 另一种写法\nfunction Person(name) {\n  if (new.target === Person) {\n    this.name = name;\n  } else {\n    throw new Error('必须使用 new 命令生成实例');\n  }\n}\n\nvar person = new Person('张三'); // 正确\nvar notAPerson = Person.call(person, '张三');  // 报错\n```\n##二、类的继承\n```javascript\nclass Person {\n  //...  \n}\nclass Student extends Person {\n  //...  \n}\n```\n#### super方法与super关键字\n###### 1. super方法\nsuper方法**可以且只能**在子类构造函数中调用，用来调用父类的constructor()，**在子类的构造函数中必须要调用一次super()**\n```javascript\nclass Person {\n    constructor (x,y) {\n        this.x = x\n        this.y = y\n    }\n}\nclass Student extends Person {\n    constructor (x1,y1,newstring) {\n        super(x1,y1)\n        this.newstring = newstring\n    }\n}\nlet s1 = new Student(1,2,'str')\ns1.x // 1\ns1.newstring // str\n```\n\n###### 2. super关键字\nsuper作为对象时，在普通方法中，指向父类的原型对象（Point.prototype）；在静态方法中，指向父类。\n由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。\n因为类中定义的方法本就是定义在原型链(prototype)上，所以super可以调用到类内的方法。但super没办法调用到类内的变量，因为类中定义的变量是存在于实例的。\n```javascript\nclass A {\n  constructor() {\n    this.p = 2;\n  }\n}\n\nclass B extends A {\n  get m() {\n    return super.p;\n  }\n}\n\nlet b = new B();\nb.m // undefined\n```\n在子类普通方法中通过super调用父类的方法时，方法内部的this**指向当前的子类实例**。\n```javascript\nclass A {\n  constructor() {\n    this.x = 1;\n  }\n  print() {\n    console.log(this.x);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  m() {\n    super.print();\n  }\n}\n\nlet b = new B();\nb.m() // 2\n```\n在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。\n```javascript\nclass A {\n  constructor() {\n    this.x = 1;\n  }\n  static print() {\n    console.log(this.x);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  static m() {\n    super.print();\n  }\n}\n\nB.x = 3;\nB.m() // 3\n```","slug":"cxy/js/js-class","published":1,"updated":"2023-01-25T14:14:34.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbr7q3m0006zewi1af1gha4","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、基本写法\"><a href=\"#一、基本写法\" class=\"headerlink\" title=\"一、基本写法\"></a>一、基本写法</h2><p>类的方法、属性、静态方法、静态属性、私有方法、私有属性<br>继承、接口（没有）、抽象（没有）、final（这个有）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,age</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_age</span> = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`(姓名：<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._name&#125;</span>,年龄<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._age&#125;</span>)`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;小明&#x27;</span>,<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">s1.<span class=\"property\">y</span> <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构造函数constuctor\"><a href=\"#构造函数constuctor\" class=\"headerlink\" title=\"构造函数constuctor\"></a>构造函数constuctor</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,age</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_age</span> = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`(姓名：<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._name&#125;</span>,年龄<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._age&#125;</span>)`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h4><p>可以使用this.xxx写在constructor方法中，也可以写在类的顶端。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    _age = <span class=\"number\">12</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;小欧&#x27;</span>)</span><br><span class=\"line\">s1.<span class=\"property\">_name</span> <span class=\"comment\">//小欧</span></span><br><span class=\"line\">s1.<span class=\"property\">_age</span> <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n<p>实例属性不存在于原型链上，而是存在于单个实例中。如果constructor写了赋值，在创建实例时却没有赋值，那就会变成undefined拉</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    _age = <span class=\"number\">12</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,age</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_age</span> = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;小欧&#x27;</span>)</span><br><span class=\"line\">s1.<span class=\"property\">_name</span> <span class=\"comment\">//小欧</span></span><br><span class=\"line\">s1.<span class=\"property\">_age</span> <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>原型属性（使用prototype赋值）存在于原型链，用“类.prototype.属性名”可以调用到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sex</span> = <span class=\"string\">&#x27;女&#x27;</span></span><br><span class=\"line\">s1.<span class=\"property\">sex</span> <span class=\"comment\">// 女</span></span><br><span class=\"line\">s2.<span class=\"property\">sex</span> <span class=\"comment\">// 女</span></span><br></pre></td></tr></table></figure>\n<p>类的方法是默认定义在原型链上，供所有实例共享的。但在类内部定义的变量是属于单个实例的，不存在与原型链上。<br>如果想在类外通过赋值的方法，定义属于原型链的属性，当然所有实例也都可以共享，但一旦修改所有实例的该属性都会修改，其实没有什么意义还容易出问题。所以虽然可以在原型链上定义实例，但一般来说没必要。除非真的确定这个属性在所有的实例上都是相同的。</p>\n<h4 id=\"getter、setter方法\"><a href=\"#getter、setter方法\" class=\"headerlink\" title=\"getter、setter方法\"></a>getter、setter方法</h4><p>在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。<br>get/set方法定义的变量不需要提前定义。<br>set方法必须要传入value</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">JuniorStudent</span> &#123;</span><br><span class=\"line\">    _name = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    _age = <span class=\"number\">0</span>;</span><br><span class=\"line\">    _sex = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (sex) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_sex</span> = sex</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    get say () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hi!&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    set say (value) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;say is&#x27;</span>+value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> js = <span class=\"keyword\">new</span> <span class=\"title class_\">JuniorStudent</span>()</span><br><span class=\"line\">js.<span class=\"property\">say</span> = <span class=\"string\">&#x27;111&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h4><p>在类内部，可以使用类名.name去调用，获取类的名字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Me</span> &#123;</span><br><span class=\"line\">    getClassName () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Me</span>.<span class=\"property\">name</span> <span class=\"comment\">// 类名.name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> m = <span class=\"keyword\">new</span> <span class=\"title class_\">Me</span> ()</span><br><span class=\"line\">m.<span class=\"property\">getClassName</span> () <span class=\"comment\">// Me</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Class表达式\"><a href=\"#Class表达式\" class=\"headerlink\" title=\"Class表达式\"></a>Class表达式</h4><p>类可以用表达式的形式定义，在类外部调用时只能用表达式调用，如下面的例子，外部只能使用MyClass调用，但MyClass的实例还是属于Me</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">MyClass</span> = <span class=\"keyword\">class</span> <span class=\"title class_\">Me</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getClassName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Me</span>.<span class=\"property\">name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mc = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>() <span class=\"comment\">//不能用new Me()</span></span><br><span class=\"line\">mc.<span class=\"property\">getClassName</span> () <span class=\"comment\">//Me</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"属性表达式\"><a href=\"#属性表达式\" class=\"headerlink\" title=\"属性表达式\"></a>属性表达式</h4><p>类的属性名可以用表达式表示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> methodName = <span class=\"string\">&#x27;getString&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">MyClass</span> = <span class=\"keyword\">class</span> <span class=\"title class_\">Me</span> &#123;</span><br><span class=\"line\">    [methodName]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;getString&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mc = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>()</span><br><span class=\"line\">mc.<span class=\"property\">getString</span> () <span class=\"comment\">//getString</span></span><br></pre></td></tr></table></figure>\n<p>####静态属性<br><strong>静态属性定义在类上，不在实例上，所以只能用类名.属性名调用。</strong><br>定义静态属性的方法是在class外部，用类名.属性定义该属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 旧写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">prop</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">prop</span> <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>es6的规定，class内只有静态方法，没有静态属性，但现在有个提案是用<strong>static</strong>在内部定义静态属性，所以也可以如下定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> fooString1 = <span class=\"string\">&#x27;string1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>()</span><br><span class=\"line\">foo.<span class=\"property\">fooString1</span> <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">fooString1</span> <span class=\"comment\">// string1</span></span><br></pre></td></tr></table></figure>\n<p><strong>静态方法的定义：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> pringString = <span class=\"keyword\">function</span> (<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">pringString</span>(<span class=\"string\">&#x27;111&#x27;</span>) <span class=\"comment\">//111</span></span><br></pre></td></tr></table></figure>\n<p>私有方法和私有属性<br>使用#定义私有属性。只能在类的内部使用(this.#count)，无法继承，无法在外部调用。<br><strong>暂时没有提供私有方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    #name = <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.#name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mc = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>()</span><br><span class=\"line\">mc.<span class=\"property\">name</span> <span class=\"comment\">// aaa</span></span><br></pre></td></tr></table></figure>\n<p>####静态块<br>有时候在类内部有一部分代码，是不用每次创建实例时都去调用的，比如静态属性的赋值。<br>所以es2022规定了静态块，在类生成时只执行一次，主要用于对静态属性的赋值，之后新建实例就不再运行了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> x = ...;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> y;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> z;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> obj = <span class=\"title function_\">doSomethingWith</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">x</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = obj.<span class=\"property\">y</span>; <span class=\"comment\">// 或C.y</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">z</span> = obj.<span class=\"property\">z</span>;   <span class=\"comment\">// 或C.z </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = ...;<span class=\"comment\">// 或C.y</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">z</span> = ...;<span class=\"comment\">// 或C.z</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"new-target\"><a href=\"#new-target\" class=\"headerlink\" title=\"new.target\"></a>new.target</h4><p>该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令，new.target会返回undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另一种写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.<span class=\"property\">target</span> === <span class=\"title class_\">Person</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;必须使用 new 命令生成实例&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;张三&#x27;</span>); <span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> notAPerson = <span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(person, <span class=\"string\">&#x27;张三&#x27;</span>);  <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<p>##二、类的继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"super方法与super关键字\"><a href=\"#super方法与super关键字\" class=\"headerlink\" title=\"super方法与super关键字\"></a>super方法与super关键字</h4><h6 id=\"1-super方法\"><a href=\"#1-super方法\" class=\"headerlink\" title=\"1. super方法\"></a>1. super方法</h6><p>super方法<strong>可以且只能</strong>在子类构造函数中调用，用来调用父类的constructor()，<strong>在子类的构造函数中必须要调用一次super()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (x,y) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (x1,y1,newstring) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(x1,y1)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">newstring</span> = newstring</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;str&#x27;</span>)</span><br><span class=\"line\">s1.<span class=\"property\">x</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">s1.<span class=\"property\">newstring</span> <span class=\"comment\">// str</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-super关键字\"><a href=\"#2-super关键字\" class=\"headerlink\" title=\"2. super关键字\"></a>2. super关键字</h6><p>super作为对象时，在普通方法中，指向父类的原型对象（Point.prototype）；在静态方法中，指向父类。<br>由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。<br>因为类中定义的方法本就是定义在原型链(prototype)上，所以super可以调用到类内的方法。但super没办法调用到类内的变量，因为类中定义的变量是存在于实例的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">p</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">m</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">super</span>.<span class=\"property\">p</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">B</span>();</span><br><span class=\"line\">b.<span class=\"property\">m</span> <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>在子类普通方法中通过super调用父类的方法时，方法内部的this<strong>指向当前的子类实例</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">x</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">m</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">print</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">B</span>();</span><br><span class=\"line\">b.<span class=\"title function_\">m</span>() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">x</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">m</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">print</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">B.<span class=\"property\">x</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">B.<span class=\"title function_\">m</span>() <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、基本写法\"><a href=\"#一、基本写法\" class=\"headerlink\" title=\"一、基本写法\"></a>一、基本写法</h2><p>类的方法、属性、静态方法、静态属性、私有方法、私有属性<br>继承、接口（没有）、抽象（没有）、final（这个有）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,age</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_age</span> = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`(姓名：<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._name&#125;</span>,年龄<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._age&#125;</span>)`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;小明&#x27;</span>,<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">s1.<span class=\"property\">y</span> <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构造函数constuctor\"><a href=\"#构造函数constuctor\" class=\"headerlink\" title=\"构造函数constuctor\"></a>构造函数constuctor</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,age</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_age</span> = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`(姓名：<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._name&#125;</span>,年龄<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._age&#125;</span>)`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h4><p>可以使用this.xxx写在constructor方法中，也可以写在类的顶端。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    _age = <span class=\"number\">12</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;小欧&#x27;</span>)</span><br><span class=\"line\">s1.<span class=\"property\">_name</span> <span class=\"comment\">//小欧</span></span><br><span class=\"line\">s1.<span class=\"property\">_age</span> <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n<p>实例属性不存在于原型链上，而是存在于单个实例中。如果constructor写了赋值，在创建实例时却没有赋值，那就会变成undefined拉</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    _age = <span class=\"number\">12</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,age</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_age</span> = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;小欧&#x27;</span>)</span><br><span class=\"line\">s1.<span class=\"property\">_name</span> <span class=\"comment\">//小欧</span></span><br><span class=\"line\">s1.<span class=\"property\">_age</span> <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>原型属性（使用prototype赋值）存在于原型链，用“类.prototype.属性名”可以调用到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sex</span> = <span class=\"string\">&#x27;女&#x27;</span></span><br><span class=\"line\">s1.<span class=\"property\">sex</span> <span class=\"comment\">// 女</span></span><br><span class=\"line\">s2.<span class=\"property\">sex</span> <span class=\"comment\">// 女</span></span><br></pre></td></tr></table></figure>\n<p>类的方法是默认定义在原型链上，供所有实例共享的。但在类内部定义的变量是属于单个实例的，不存在与原型链上。<br>如果想在类外通过赋值的方法，定义属于原型链的属性，当然所有实例也都可以共享，但一旦修改所有实例的该属性都会修改，其实没有什么意义还容易出问题。所以虽然可以在原型链上定义实例，但一般来说没必要。除非真的确定这个属性在所有的实例上都是相同的。</p>\n<h4 id=\"getter、setter方法\"><a href=\"#getter、setter方法\" class=\"headerlink\" title=\"getter、setter方法\"></a>getter、setter方法</h4><p>在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。<br>get/set方法定义的变量不需要提前定义。<br>set方法必须要传入value</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">JuniorStudent</span> &#123;</span><br><span class=\"line\">    _name = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    _age = <span class=\"number\">0</span>;</span><br><span class=\"line\">    _sex = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (sex) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_sex</span> = sex</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    get say () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hi!&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    set say (value) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;say is&#x27;</span>+value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> js = <span class=\"keyword\">new</span> <span class=\"title class_\">JuniorStudent</span>()</span><br><span class=\"line\">js.<span class=\"property\">say</span> = <span class=\"string\">&#x27;111&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h4><p>在类内部，可以使用类名.name去调用，获取类的名字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Me</span> &#123;</span><br><span class=\"line\">    getClassName () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Me</span>.<span class=\"property\">name</span> <span class=\"comment\">// 类名.name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> m = <span class=\"keyword\">new</span> <span class=\"title class_\">Me</span> ()</span><br><span class=\"line\">m.<span class=\"property\">getClassName</span> () <span class=\"comment\">// Me</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Class表达式\"><a href=\"#Class表达式\" class=\"headerlink\" title=\"Class表达式\"></a>Class表达式</h4><p>类可以用表达式的形式定义，在类外部调用时只能用表达式调用，如下面的例子，外部只能使用MyClass调用，但MyClass的实例还是属于Me</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">MyClass</span> = <span class=\"keyword\">class</span> <span class=\"title class_\">Me</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getClassName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Me</span>.<span class=\"property\">name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mc = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>() <span class=\"comment\">//不能用new Me()</span></span><br><span class=\"line\">mc.<span class=\"property\">getClassName</span> () <span class=\"comment\">//Me</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"属性表达式\"><a href=\"#属性表达式\" class=\"headerlink\" title=\"属性表达式\"></a>属性表达式</h4><p>类的属性名可以用表达式表示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> methodName = <span class=\"string\">&#x27;getString&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">MyClass</span> = <span class=\"keyword\">class</span> <span class=\"title class_\">Me</span> &#123;</span><br><span class=\"line\">    [methodName]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;getString&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mc = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>()</span><br><span class=\"line\">mc.<span class=\"property\">getString</span> () <span class=\"comment\">//getString</span></span><br></pre></td></tr></table></figure>\n<p>####静态属性<br><strong>静态属性定义在类上，不在实例上，所以只能用类名.属性名调用。</strong><br>定义静态属性的方法是在class外部，用类名.属性定义该属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 旧写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">prop</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">prop</span> <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>es6的规定，class内只有静态方法，没有静态属性，但现在有个提案是用<strong>static</strong>在内部定义静态属性，所以也可以如下定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> fooString1 = <span class=\"string\">&#x27;string1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>()</span><br><span class=\"line\">foo.<span class=\"property\">fooString1</span> <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">fooString1</span> <span class=\"comment\">// string1</span></span><br></pre></td></tr></table></figure>\n<p><strong>静态方法的定义：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> pringString = <span class=\"keyword\">function</span> (<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">pringString</span>(<span class=\"string\">&#x27;111&#x27;</span>) <span class=\"comment\">//111</span></span><br></pre></td></tr></table></figure>\n<p>私有方法和私有属性<br>使用#定义私有属性。只能在类的内部使用(this.#count)，无法继承，无法在外部调用。<br><strong>暂时没有提供私有方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    #name = <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.#name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mc = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>()</span><br><span class=\"line\">mc.<span class=\"property\">name</span> <span class=\"comment\">// aaa</span></span><br></pre></td></tr></table></figure>\n<p>####静态块<br>有时候在类内部有一部分代码，是不用每次创建实例时都去调用的，比如静态属性的赋值。<br>所以es2022规定了静态块，在类生成时只执行一次，主要用于对静态属性的赋值，之后新建实例就不再运行了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> x = ...;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> y;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> z;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> obj = <span class=\"title function_\">doSomethingWith</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">x</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = obj.<span class=\"property\">y</span>; <span class=\"comment\">// 或C.y</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">z</span> = obj.<span class=\"property\">z</span>;   <span class=\"comment\">// 或C.z </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = ...;<span class=\"comment\">// 或C.y</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">z</span> = ...;<span class=\"comment\">// 或C.z</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"new-target\"><a href=\"#new-target\" class=\"headerlink\" title=\"new.target\"></a>new.target</h4><p>该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令，new.target会返回undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另一种写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.<span class=\"property\">target</span> === <span class=\"title class_\">Person</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;必须使用 new 命令生成实例&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;张三&#x27;</span>); <span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> notAPerson = <span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(person, <span class=\"string\">&#x27;张三&#x27;</span>);  <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<p>##二、类的继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"super方法与super关键字\"><a href=\"#super方法与super关键字\" class=\"headerlink\" title=\"super方法与super关键字\"></a>super方法与super关键字</h4><h6 id=\"1-super方法\"><a href=\"#1-super方法\" class=\"headerlink\" title=\"1. super方法\"></a>1. super方法</h6><p>super方法<strong>可以且只能</strong>在子类构造函数中调用，用来调用父类的constructor()，<strong>在子类的构造函数中必须要调用一次super()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (x,y) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (x1,y1,newstring) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(x1,y1)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">newstring</span> = newstring</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;str&#x27;</span>)</span><br><span class=\"line\">s1.<span class=\"property\">x</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">s1.<span class=\"property\">newstring</span> <span class=\"comment\">// str</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-super关键字\"><a href=\"#2-super关键字\" class=\"headerlink\" title=\"2. super关键字\"></a>2. super关键字</h6><p>super作为对象时，在普通方法中，指向父类的原型对象（Point.prototype）；在静态方法中，指向父类。<br>由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。<br>因为类中定义的方法本就是定义在原型链(prototype)上，所以super可以调用到类内的方法。但super没办法调用到类内的变量，因为类中定义的变量是存在于实例的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">p</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">m</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">super</span>.<span class=\"property\">p</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">B</span>();</span><br><span class=\"line\">b.<span class=\"property\">m</span> <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>在子类普通方法中通过super调用父类的方法时，方法内部的this<strong>指向当前的子类实例</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">x</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">m</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">print</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">B</span>();</span><br><span class=\"line\">b.<span class=\"title function_\">m</span>() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">x</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">m</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">print</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">B.<span class=\"property\">x</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">B.<span class=\"title function_\">m</span>() <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>"},{"title":"Proxy略略略略记","date":"2021-05-21T01:03:38.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、proxy\nproxy就是一个拦截器，拦截了原来的对象之后，可以对这个对象进行自己的更改，也可以防止别人对对象进行某种更改，然后可以输出修改后的monitor，且不影响原对象。\n```javascript\n{\n    let obj = {\n        time: '2017-03-11',\n        name: 'net',\n        _r: 123\n    }\n```\n### 1. proxy的声明\n#### （1）可以声明后直接在handler里面写对象\n```javascript\n        let proxy = new Proxy(obj,handler)\n        handler = {\n             get () {},\n             set () {},\n             has () {},\n         }\n```\n#### （2）下面这种声明方式\n```javascript\n\tlet proxy = new Proxy(obj,{\n\t\tget (target,key) {} // or get: function(target,key) {}\n\t})\n```\n## 2. get/set/has/等拦截方法\n```javascript\n    let monitor = new Proxy(obj,{\n   //2. get方法：拦截对象属性的读取\n        get (target,key) {\n            if(target[key].replace)\n                return target[key].replace('2017','2018')\n            else \n                return target[key]\n            // 一定要return\n        },\n        set (target,key,value) {\n    // 3. set方法：拦截对象属性的更改\n            if(key === 'name') {\n                return target[key] == value\n            }\n        },\n    // 4. has方法：对对象是否有该属性的拦截，拦截in 不拦截hasOwnProperty()\n    // hasOwnProperty():判断一个对象属性里是否包含某个key，key为字符串,此方法不会去判断原型\n    // in: key in obj //obj为对象 key为所要判断的字符串\n        has (target,key) {\n            if (key == '_r') {\n                return false\n            } else {\n                return key in target\n            }\n        }\n    // 5. construct() 拦截new命令\n    // 6. deleteProperty() 拦截delete\n    // 7. defineProperty() 拦截Object.defineProperty()\n    // 8. ownKeys(target) 拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。\n    // 9. apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。\n    })\n\n    console.log(monitor.time) // 2018-03-11\n    monitor._r = 'sdffsfsdfds'\n    console.log(monitor._r)\n    monitor.name = 'sdffsfsdfds'\n    console.log(monitor.name)\n    console.log('name' in monitor) // true\n    console.log('_r' in monitor) // false\n    console.log('_r' in monitor) // false\n}\n```\n## 二、 reflect\n#### （1） 名称和用法与proxy一样\n#### （2） ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。\n#### （3） Reflect 对象对某些方法的返回结果进行了修改，使其更合理。\n#### （4） Reflect 对象使用函数的方式实现了 Object 的命令式操作。\n 为什么用reflect，要尽量避免用原生的Object方法，通过Reflect方法调用会比较合理和方便。\n```javascript\n{\n    let obj = {\n        time: '2017-03-11',\n        name: 'net',\n        _r: 123\n    }\n\n}\n\nReflect.get(obj,'name')  // 'net'\n```\n\n在vue3的源码中，原先的数据驱动视图的方法Object.defineProperty被替换成了Proxy来实现，在Proxy内部操作数据时就用了Reflect去调用对象方法。","source":"_posts/cxy/js/js-proxy.md","raw":"---\ntitle: 'Proxy略略略略记'\ndate: 2021-05-21 09:03:38\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、proxy\nproxy就是一个拦截器，拦截了原来的对象之后，可以对这个对象进行自己的更改，也可以防止别人对对象进行某种更改，然后可以输出修改后的monitor，且不影响原对象。\n```javascript\n{\n    let obj = {\n        time: '2017-03-11',\n        name: 'net',\n        _r: 123\n    }\n```\n### 1. proxy的声明\n#### （1）可以声明后直接在handler里面写对象\n```javascript\n        let proxy = new Proxy(obj,handler)\n        handler = {\n             get () {},\n             set () {},\n             has () {},\n         }\n```\n#### （2）下面这种声明方式\n```javascript\n\tlet proxy = new Proxy(obj,{\n\t\tget (target,key) {} // or get: function(target,key) {}\n\t})\n```\n## 2. get/set/has/等拦截方法\n```javascript\n    let monitor = new Proxy(obj,{\n   //2. get方法：拦截对象属性的读取\n        get (target,key) {\n            if(target[key].replace)\n                return target[key].replace('2017','2018')\n            else \n                return target[key]\n            // 一定要return\n        },\n        set (target,key,value) {\n    // 3. set方法：拦截对象属性的更改\n            if(key === 'name') {\n                return target[key] == value\n            }\n        },\n    // 4. has方法：对对象是否有该属性的拦截，拦截in 不拦截hasOwnProperty()\n    // hasOwnProperty():判断一个对象属性里是否包含某个key，key为字符串,此方法不会去判断原型\n    // in: key in obj //obj为对象 key为所要判断的字符串\n        has (target,key) {\n            if (key == '_r') {\n                return false\n            } else {\n                return key in target\n            }\n        }\n    // 5. construct() 拦截new命令\n    // 6. deleteProperty() 拦截delete\n    // 7. defineProperty() 拦截Object.defineProperty()\n    // 8. ownKeys(target) 拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。\n    // 9. apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。\n    })\n\n    console.log(monitor.time) // 2018-03-11\n    monitor._r = 'sdffsfsdfds'\n    console.log(monitor._r)\n    monitor.name = 'sdffsfsdfds'\n    console.log(monitor.name)\n    console.log('name' in monitor) // true\n    console.log('_r' in monitor) // false\n    console.log('_r' in monitor) // false\n}\n```\n## 二、 reflect\n#### （1） 名称和用法与proxy一样\n#### （2） ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。\n#### （3） Reflect 对象对某些方法的返回结果进行了修改，使其更合理。\n#### （4） Reflect 对象使用函数的方式实现了 Object 的命令式操作。\n 为什么用reflect，要尽量避免用原生的Object方法，通过Reflect方法调用会比较合理和方便。\n```javascript\n{\n    let obj = {\n        time: '2017-03-11',\n        name: 'net',\n        _r: 123\n    }\n\n}\n\nReflect.get(obj,'name')  // 'net'\n```\n\n在vue3的源码中，原先的数据驱动视图的方法Object.defineProperty被替换成了Proxy来实现，在Proxy内部操作数据时就用了Reflect去调用对象方法。","slug":"cxy/js/js-proxy","published":1,"updated":"2023-01-25T14:08:39.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbr7q3n0008zewic8lvhw28","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、proxy\"><a href=\"#一、proxy\" class=\"headerlink\" title=\"一、proxy\"></a>一、proxy</h2><p>proxy就是一个拦截器，拦截了原来的对象之后，可以对这个对象进行自己的更改，也可以防止别人对对象进行某种更改，然后可以输出修改后的monitor，且不影响原对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">time</span>: <span class=\"string\">&#x27;2017-03-11&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;net&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">_r</span>: <span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-proxy的声明\"><a href=\"#1-proxy的声明\" class=\"headerlink\" title=\"1. proxy的声明\"></a>1. proxy的声明</h3><h4 id=\"（1）可以声明后直接在handler里面写对象\"><a href=\"#（1）可以声明后直接在handler里面写对象\" class=\"headerlink\" title=\"（1）可以声明后直接在handler里面写对象\"></a>（1）可以声明后直接在handler里面写对象</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj,handler)</span><br><span class=\"line\">handler = &#123;</span><br><span class=\"line\">     get () &#123;&#125;,</span><br><span class=\"line\">     set () &#123;&#125;,</span><br><span class=\"line\">     has () &#123;&#125;,</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"（2）下面这种声明方式\"><a href=\"#（2）下面这种声明方式\" class=\"headerlink\" title=\"（2）下面这种声明方式\"></a>（2）下面这种声明方式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj,&#123;</span><br><span class=\"line\">\tget (target,key) &#123;&#125; <span class=\"comment\">// or get: function(target,key) &#123;&#125;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-get-set-has-等拦截方法\"><a href=\"#2-get-set-has-等拦截方法\" class=\"headerlink\" title=\"2. get/set/has/等拦截方法\"></a>2. get/set/has/等拦截方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> monitor = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj,&#123;</span><br><span class=\"line\">   <span class=\"comment\">//2. get方法：拦截对象属性的读取</span></span><br><span class=\"line\">        get (target,key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target[key].<span class=\"property\">replace</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key].<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;2017&#x27;</span>,<span class=\"string\">&#x27;2018&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">            <span class=\"comment\">// 一定要return</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set (target,key,value) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3. set方法：拦截对象属性的更改</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(key === <span class=\"string\">&#x27;name&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key] == value</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 4. has方法：对对象是否有该属性的拦截，拦截in 不拦截hasOwnProperty()</span></span><br><span class=\"line\">    <span class=\"comment\">// hasOwnProperty():判断一个对象属性里是否包含某个key，key为字符串,此方法不会去判断原型</span></span><br><span class=\"line\">    <span class=\"comment\">// in: key in obj //obj为对象 key为所要判断的字符串</span></span><br><span class=\"line\">        has (target,key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == <span class=\"string\">&#x27;_r&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> target</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 5. construct() 拦截new命令</span></span><br><span class=\"line\">    <span class=\"comment\">// 6. deleteProperty() 拦截delete</span></span><br><span class=\"line\">    <span class=\"comment\">// 7. defineProperty() 拦截Object.defineProperty()</span></span><br><span class=\"line\">    <span class=\"comment\">// 8. ownKeys(target) 拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</span></span><br><span class=\"line\">    <span class=\"comment\">// 9. apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(monitor.<span class=\"property\">time</span>) <span class=\"comment\">// 2018-03-11</span></span><br><span class=\"line\">    monitor.<span class=\"property\">_r</span> = <span class=\"string\">&#x27;sdffsfsdfds&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(monitor.<span class=\"property\">_r</span>)</span><br><span class=\"line\">    monitor.<span class=\"property\">name</span> = <span class=\"string\">&#x27;sdffsfsdfds&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(monitor.<span class=\"property\">name</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> monitor) <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;_r&#x27;</span> <span class=\"keyword\">in</span> monitor) <span class=\"comment\">// false</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;_r&#x27;</span> <span class=\"keyword\">in</span> monitor) <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、-reflect\"><a href=\"#二、-reflect\" class=\"headerlink\" title=\"二、 reflect\"></a>二、 reflect</h2><h4 id=\"（1）-名称和用法与proxy一样\"><a href=\"#（1）-名称和用法与proxy一样\" class=\"headerlink\" title=\"（1） 名称和用法与proxy一样\"></a>（1） 名称和用法与proxy一样</h4><h4 id=\"（2）-ES6-中将-Object-的一些明显属于语言内部的方法移植到了-Reflect-对象上（当前某些方法会同时存在于-Object-和-Reflect-对象上），未来的新方法会只部署在-Reflect-对象上。\"><a href=\"#（2）-ES6-中将-Object-的一些明显属于语言内部的方法移植到了-Reflect-对象上（当前某些方法会同时存在于-Object-和-Reflect-对象上），未来的新方法会只部署在-Reflect-对象上。\" class=\"headerlink\" title=\"（2） ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。\"></a>（2） ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。</h4><h4 id=\"（3）-Reflect-对象对某些方法的返回结果进行了修改，使其更合理。\"><a href=\"#（3）-Reflect-对象对某些方法的返回结果进行了修改，使其更合理。\" class=\"headerlink\" title=\"（3） Reflect 对象对某些方法的返回结果进行了修改，使其更合理。\"></a>（3） Reflect 对象对某些方法的返回结果进行了修改，使其更合理。</h4><h4 id=\"（4）-Reflect-对象使用函数的方式实现了-Object-的命令式操作。\"><a href=\"#（4）-Reflect-对象使用函数的方式实现了-Object-的命令式操作。\" class=\"headerlink\" title=\"（4） Reflect 对象使用函数的方式实现了 Object 的命令式操作。\"></a>（4） Reflect 对象使用函数的方式实现了 Object 的命令式操作。</h4><p> 为什么用reflect，要尽量避免用原生的Object方法，通过Reflect方法调用会比较合理和方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">time</span>: <span class=\"string\">&#x27;2017-03-11&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;net&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">_r</span>: <span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Reflect</span>.<span class=\"title function_\">get</span>(obj,<span class=\"string\">&#x27;name&#x27;</span>)  <span class=\"comment\">// &#x27;net&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在vue3的源码中，原先的数据驱动视图的方法Object.defineProperty被替换成了Proxy来实现，在Proxy内部操作数据时就用了Reflect去调用对象方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、proxy\"><a href=\"#一、proxy\" class=\"headerlink\" title=\"一、proxy\"></a>一、proxy</h2><p>proxy就是一个拦截器，拦截了原来的对象之后，可以对这个对象进行自己的更改，也可以防止别人对对象进行某种更改，然后可以输出修改后的monitor，且不影响原对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">time</span>: <span class=\"string\">&#x27;2017-03-11&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;net&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">_r</span>: <span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-proxy的声明\"><a href=\"#1-proxy的声明\" class=\"headerlink\" title=\"1. proxy的声明\"></a>1. proxy的声明</h3><h4 id=\"（1）可以声明后直接在handler里面写对象\"><a href=\"#（1）可以声明后直接在handler里面写对象\" class=\"headerlink\" title=\"（1）可以声明后直接在handler里面写对象\"></a>（1）可以声明后直接在handler里面写对象</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj,handler)</span><br><span class=\"line\">handler = &#123;</span><br><span class=\"line\">     get () &#123;&#125;,</span><br><span class=\"line\">     set () &#123;&#125;,</span><br><span class=\"line\">     has () &#123;&#125;,</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"（2）下面这种声明方式\"><a href=\"#（2）下面这种声明方式\" class=\"headerlink\" title=\"（2）下面这种声明方式\"></a>（2）下面这种声明方式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj,&#123;</span><br><span class=\"line\">\tget (target,key) &#123;&#125; <span class=\"comment\">// or get: function(target,key) &#123;&#125;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-get-set-has-等拦截方法\"><a href=\"#2-get-set-has-等拦截方法\" class=\"headerlink\" title=\"2. get/set/has/等拦截方法\"></a>2. get/set/has/等拦截方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> monitor = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj,&#123;</span><br><span class=\"line\">   <span class=\"comment\">//2. get方法：拦截对象属性的读取</span></span><br><span class=\"line\">        get (target,key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target[key].<span class=\"property\">replace</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key].<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;2017&#x27;</span>,<span class=\"string\">&#x27;2018&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">            <span class=\"comment\">// 一定要return</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set (target,key,value) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3. set方法：拦截对象属性的更改</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(key === <span class=\"string\">&#x27;name&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key] == value</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 4. has方法：对对象是否有该属性的拦截，拦截in 不拦截hasOwnProperty()</span></span><br><span class=\"line\">    <span class=\"comment\">// hasOwnProperty():判断一个对象属性里是否包含某个key，key为字符串,此方法不会去判断原型</span></span><br><span class=\"line\">    <span class=\"comment\">// in: key in obj //obj为对象 key为所要判断的字符串</span></span><br><span class=\"line\">        has (target,key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == <span class=\"string\">&#x27;_r&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> target</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 5. construct() 拦截new命令</span></span><br><span class=\"line\">    <span class=\"comment\">// 6. deleteProperty() 拦截delete</span></span><br><span class=\"line\">    <span class=\"comment\">// 7. defineProperty() 拦截Object.defineProperty()</span></span><br><span class=\"line\">    <span class=\"comment\">// 8. ownKeys(target) 拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</span></span><br><span class=\"line\">    <span class=\"comment\">// 9. apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(monitor.<span class=\"property\">time</span>) <span class=\"comment\">// 2018-03-11</span></span><br><span class=\"line\">    monitor.<span class=\"property\">_r</span> = <span class=\"string\">&#x27;sdffsfsdfds&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(monitor.<span class=\"property\">_r</span>)</span><br><span class=\"line\">    monitor.<span class=\"property\">name</span> = <span class=\"string\">&#x27;sdffsfsdfds&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(monitor.<span class=\"property\">name</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> monitor) <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;_r&#x27;</span> <span class=\"keyword\">in</span> monitor) <span class=\"comment\">// false</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;_r&#x27;</span> <span class=\"keyword\">in</span> monitor) <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、-reflect\"><a href=\"#二、-reflect\" class=\"headerlink\" title=\"二、 reflect\"></a>二、 reflect</h2><h4 id=\"（1）-名称和用法与proxy一样\"><a href=\"#（1）-名称和用法与proxy一样\" class=\"headerlink\" title=\"（1） 名称和用法与proxy一样\"></a>（1） 名称和用法与proxy一样</h4><h4 id=\"（2）-ES6-中将-Object-的一些明显属于语言内部的方法移植到了-Reflect-对象上（当前某些方法会同时存在于-Object-和-Reflect-对象上），未来的新方法会只部署在-Reflect-对象上。\"><a href=\"#（2）-ES6-中将-Object-的一些明显属于语言内部的方法移植到了-Reflect-对象上（当前某些方法会同时存在于-Object-和-Reflect-对象上），未来的新方法会只部署在-Reflect-对象上。\" class=\"headerlink\" title=\"（2） ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。\"></a>（2） ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。</h4><h4 id=\"（3）-Reflect-对象对某些方法的返回结果进行了修改，使其更合理。\"><a href=\"#（3）-Reflect-对象对某些方法的返回结果进行了修改，使其更合理。\" class=\"headerlink\" title=\"（3） Reflect 对象对某些方法的返回结果进行了修改，使其更合理。\"></a>（3） Reflect 对象对某些方法的返回结果进行了修改，使其更合理。</h4><h4 id=\"（4）-Reflect-对象使用函数的方式实现了-Object-的命令式操作。\"><a href=\"#（4）-Reflect-对象使用函数的方式实现了-Object-的命令式操作。\" class=\"headerlink\" title=\"（4） Reflect 对象使用函数的方式实现了 Object 的命令式操作。\"></a>（4） Reflect 对象使用函数的方式实现了 Object 的命令式操作。</h4><p> 为什么用reflect，要尽量避免用原生的Object方法，通过Reflect方法调用会比较合理和方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        <span class=\"attr\">time</span>: <span class=\"string\">&#x27;2017-03-11&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;net&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">_r</span>: <span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Reflect</span>.<span class=\"title function_\">get</span>(obj,<span class=\"string\">&#x27;name&#x27;</span>)  <span class=\"comment\">// &#x27;net&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在vue3的源码中，原先的数据驱动视图的方法Object.defineProperty被替换成了Proxy来实现，在Proxy内部操作数据时就用了Reflect去调用对象方法。</p>\n"},{"title":"【vscode】vetur插件在vue3中报错","date":"2022-12-30T03:31:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\nvetur是vue2支持的插件，volar(vue language features)可以支持vue3。\n可以直接搜索安装\n![](https://upload-images.jianshu.io/upload_images/20892169-cc43f5ac6ad7cef6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后禁用vetur，重启vscode即可。\n\n<hr>\n\n如果不想禁用vetur，又想启用volar，可以在当前项目中的.vscode文件夹的settings.json文件中配置禁用如下：\n```javascript\n{\n    \"vetur.validation.template\": false,\n    \"vetur.validation.script\": false,\n    \"vetur.validation.style\": false,\n}\n```\n重启即可。","source":"_posts/cxy/other/vscode-vetur.md","raw":"---\ntitle: '【vscode】vetur插件在vue3中报错'\ndate: 2022-12-30 11:31:49\ntags: 开发效率\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\nvetur是vue2支持的插件，volar(vue language features)可以支持vue3。\n可以直接搜索安装\n![](https://upload-images.jianshu.io/upload_images/20892169-cc43f5ac6ad7cef6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后禁用vetur，重启vscode即可。\n\n<hr>\n\n如果不想禁用vetur，又想启用volar，可以在当前项目中的.vscode文件夹的settings.json文件中配置禁用如下：\n```javascript\n{\n    \"vetur.validation.template\": false,\n    \"vetur.validation.script\": false,\n    \"vetur.validation.style\": false,\n}\n```\n重启即可。","slug":"cxy/other/vscode-vetur","published":1,"updated":"2023-01-25T13:32:38.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbr7q3n000azewieg88bjy0","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>vetur是vue2支持的插件，volar(vue language features)可以支持vue3。<br>可以直接搜索安装<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cc43f5ac6ad7cef6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>然后禁用vetur，重启vscode即可。</p>\n<hr>\n\n<p>如果不想禁用vetur，又想启用volar，可以在当前项目中的.vscode文件夹的settings.json文件中配置禁用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;vetur.validation.template&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;vetur.validation.script&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;vetur.validation.style&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启即可。</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>vetur是vue2支持的插件，volar(vue language features)可以支持vue3。<br>可以直接搜索安装<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cc43f5ac6ad7cef6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>然后禁用vetur，重启vscode即可。</p>\n<hr>\n\n<p>如果不想禁用vetur，又想启用volar，可以在当前项目中的.vscode文件夹的settings.json文件中配置禁用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;vetur.validation.template&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;vetur.validation.script&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;vetur.validation.style&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启即可。</p>\n"},{"title":"axios的基本使用","date":"2019-11-12T07:20:18.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、axios的发送类型和restful api一样\naxios基于promise，它支持promiseapi\n\n### 1\\. 基本用法\n```javascript\naxios.post(url,{\n    param: {\n        // 请求参数\n    }\n}).then(function(res){\n    console.log(res)\n})\n```\n或\n```javascript\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n***注1：还有增（post）删（delete）改（patch/put）查（get）这些，以及head和option。***\n\n***注2：OPTIONS方法返回有关API 的信息（方法/内容类型）:***\n```javascript\nHTTP/1.1 200 OK\nAllow: GET,HEAD,POST,OPTIONS,TRACE\nContent-Type: text/html; charset=UTF-8\nDate: Wed, 08 May 2013 10:24:43 GMT\nContent-Length: 0\nHEAD方法返回有关资源的信息（版本/长度/类型）\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nContent-Type: text/html; charset=UTF-8\nDate: Wed, 08 May 2013 10:12:29 GMT\nETag: \"780602-4f6-4db31b2978ec0\"\nLast-Modified: Thu, 25 Apr 2013 16:13:23 GMT\nContent-Length: 1270\n```\n### 2\\. 并发\naxios.all(iterable)\n###3. axios.create()\n###4\\. axios可以拦截请求和响应\n在请求和响应被then或catch之前做某些操作。比如请求前加入token，响应时如果返回数据错误，可以跳转到登录页\n```javascript\naxios.interceptor.request.use(function(config){\n    // 在发送请求之前做些什么\n    return config\n},function(err) {\n    // 对请求错误做些什么\n})\n```\n```javascript\naxios.interceptor.response.use(function(response){\n    // 对响应数据做些什么\n    return response\n},function(err) {\n    // 对响应错误做些什么\n})\n```\nrequest的config里返回的，最后可以返回data以继续下面的请求\n![](https://upload-images.jianshu.io/upload_images/20892169-520f3d4d9a958c19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nresponse里面返回的，最后也是return以用于响应\n\n![](https://upload-images.jianshu.io/upload_images/20892169-d4bffc0347ccdf86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 5.客户端支持xsrf防御\n\n### 6.axios常见的配置：\n```javascript\naxios({\n    url: '/user'\n    method: 'post',\n    baseURL: 'https://www.xxx.html' // 自动加载url前面的\n    'transformRequest':[function (data) {\n    // 对 data 进行任意转换处理\n    return data;\n  }], //允许在向服务器发送前，修改请求数据，比如加入token。只能用在'PUT','POST'和'PATCH'这几个请求方法\n    transformResponse:[function (data) {\n    // 对 data 进行任意转换处理\n    return data;\n  }], // 在传递给 then/catch 前，允许修改响应数据\n    timeout: 1000, // 超过1000ms就不再请求了\n    headers: {\n        // 自定义请求头\n    },\n    params: {\n        // 发送请求数据\n    },\n}).then(function(res){\n})\n```","source":"_posts/cxy/other/axios.md","raw":"---\ntitle: 'axios的基本使用'\ndate: 2019-11-12 15:20:18\ntags: \n  - axios\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、axios的发送类型和restful api一样\naxios基于promise，它支持promiseapi\n\n### 1\\. 基本用法\n```javascript\naxios.post(url,{\n    param: {\n        // 请求参数\n    }\n}).then(function(res){\n    console.log(res)\n})\n```\n或\n```javascript\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n***注1：还有增（post）删（delete）改（patch/put）查（get）这些，以及head和option。***\n\n***注2：OPTIONS方法返回有关API 的信息（方法/内容类型）:***\n```javascript\nHTTP/1.1 200 OK\nAllow: GET,HEAD,POST,OPTIONS,TRACE\nContent-Type: text/html; charset=UTF-8\nDate: Wed, 08 May 2013 10:24:43 GMT\nContent-Length: 0\nHEAD方法返回有关资源的信息（版本/长度/类型）\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nContent-Type: text/html; charset=UTF-8\nDate: Wed, 08 May 2013 10:12:29 GMT\nETag: \"780602-4f6-4db31b2978ec0\"\nLast-Modified: Thu, 25 Apr 2013 16:13:23 GMT\nContent-Length: 1270\n```\n### 2\\. 并发\naxios.all(iterable)\n###3. axios.create()\n###4\\. axios可以拦截请求和响应\n在请求和响应被then或catch之前做某些操作。比如请求前加入token，响应时如果返回数据错误，可以跳转到登录页\n```javascript\naxios.interceptor.request.use(function(config){\n    // 在发送请求之前做些什么\n    return config\n},function(err) {\n    // 对请求错误做些什么\n})\n```\n```javascript\naxios.interceptor.response.use(function(response){\n    // 对响应数据做些什么\n    return response\n},function(err) {\n    // 对响应错误做些什么\n})\n```\nrequest的config里返回的，最后可以返回data以继续下面的请求\n![](https://upload-images.jianshu.io/upload_images/20892169-520f3d4d9a958c19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nresponse里面返回的，最后也是return以用于响应\n\n![](https://upload-images.jianshu.io/upload_images/20892169-d4bffc0347ccdf86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 5.客户端支持xsrf防御\n\n### 6.axios常见的配置：\n```javascript\naxios({\n    url: '/user'\n    method: 'post',\n    baseURL: 'https://www.xxx.html' // 自动加载url前面的\n    'transformRequest':[function (data) {\n    // 对 data 进行任意转换处理\n    return data;\n  }], //允许在向服务器发送前，修改请求数据，比如加入token。只能用在'PUT','POST'和'PATCH'这几个请求方法\n    transformResponse:[function (data) {\n    // 对 data 进行任意转换处理\n    return data;\n  }], // 在传递给 then/catch 前，允许修改响应数据\n    timeout: 1000, // 超过1000ms就不再请求了\n    headers: {\n        // 自定义请求头\n    },\n    params: {\n        // 发送请求数据\n    },\n}).then(function(res){\n})\n```","slug":"cxy/other/axios","published":1,"updated":"2023-01-25T15:29:17.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbtr6m90000yuwi41wx20pu","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、axios的发送类型和restful-api一样\"><a href=\"#一、axios的发送类型和restful-api一样\" class=\"headerlink\" title=\"一、axios的发送类型和restful api一样\"></a>一、axios的发送类型和restful api一样</h2><p>axios基于promise，它支持promiseapi</p>\n<h3 id=\"1-基本用法\"><a href=\"#1-基本用法\" class=\"headerlink\" title=\"1. 基本用法\"></a>1. 基本用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">post</span>(url,&#123;</span><br><span class=\"line\">    <span class=\"attr\">param</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求参数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/user/12345&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Fred&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Flintstone&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><em><strong>注1：还有增（post）删（delete）改（patch/put）查（get）这些，以及head和option。</strong></em></p>\n<p><em><strong>注2：OPTIONS方法返回有关API 的信息（方法/内容类型）:</strong></em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span> <span class=\"number\">200</span> <span class=\"variable constant_\">OK</span></span><br><span class=\"line\"><span class=\"title class_\">Allow</span>: <span class=\"variable constant_\">GET</span>,<span class=\"variable constant_\">HEAD</span>,<span class=\"variable constant_\">POST</span>,<span class=\"variable constant_\">OPTIONS</span>,<span class=\"variable constant_\">TRACE</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: text/html; charset=<span class=\"variable constant_\">UTF</span>-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"title class_\">Date</span>: <span class=\"title class_\">Wed</span>, <span class=\"number\">08</span> <span class=\"title class_\">May</span> <span class=\"number\">2013</span> <span class=\"number\">10</span>:<span class=\"number\">24</span>:<span class=\"number\">43</span> <span class=\"variable constant_\">GMT</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Length</span>: <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"variable constant_\">HEAD</span>方法返回有关资源的信息（版本/长度/类型）</span><br><span class=\"line\"><span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span> <span class=\"number\">200</span> <span class=\"variable constant_\">OK</span></span><br><span class=\"line\"><span class=\"title class_\">Accept</span>-<span class=\"title class_\">Ranges</span>: bytes</span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: text/html; charset=<span class=\"variable constant_\">UTF</span>-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"title class_\">Date</span>: <span class=\"title class_\">Wed</span>, <span class=\"number\">08</span> <span class=\"title class_\">May</span> <span class=\"number\">2013</span> <span class=\"number\">10</span>:<span class=\"number\">12</span>:<span class=\"number\">29</span> <span class=\"variable constant_\">GMT</span></span><br><span class=\"line\"><span class=\"title class_\">ETag</span>: <span class=\"string\">&quot;780602-4f6-4db31b2978ec0&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Last</span>-<span class=\"title class_\">Modified</span>: <span class=\"title class_\">Thu</span>, <span class=\"number\">25</span> <span class=\"title class_\">Apr</span> <span class=\"number\">2013</span> <span class=\"number\">16</span>:<span class=\"number\">13</span>:<span class=\"number\">23</span> <span class=\"variable constant_\">GMT</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Length</span>: <span class=\"number\">1270</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-并发\"><a href=\"#2-并发\" class=\"headerlink\" title=\"2. 并发\"></a>2. 并发</h3><p>axios.all(iterable)<br>###3. axios.create()<br>###4. axios可以拦截请求和响应<br>在请求和响应被then或catch之前做某些操作。比如请求前加入token，响应时如果返回数据错误，可以跳转到登录页</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"property\">interceptor</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span>(<span class=\"params\">config</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在发送请求之前做些什么</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;,<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对请求错误做些什么</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"property\">interceptor</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span>(<span class=\"params\">response</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对响应数据做些什么</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">&#125;,<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对响应错误做些什么</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>request的config里返回的，最后可以返回data以继续下面的请求<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-520f3d4d9a958c19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>response里面返回的，最后也是return以用于响应</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d4bffc0347ccdf86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"5-客户端支持xsrf防御\"><a href=\"#5-客户端支持xsrf防御\" class=\"headerlink\" title=\"5.客户端支持xsrf防御\"></a>5.客户端支持xsrf防御</h3><h3 id=\"6-axios常见的配置：\"><a href=\"#6-axios常见的配置：\" class=\"headerlink\" title=\"6.axios常见的配置：\"></a>6.axios常见的配置：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/user&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;https://www.xxx.html&#x27;</span> <span class=\"comment\">// 自动加载url前面的</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;transformRequest&#x27;</span>:[<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;], <span class=\"comment\">//允许在向服务器发送前，修改请求数据，比如加入token。只能用在&#x27;PUT&#x27;,&#x27;POST&#x27;和&#x27;PATCH&#x27;这几个请求方法</span></span><br><span class=\"line\">    <span class=\"attr\">transformResponse</span>:[<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;], <span class=\"comment\">// 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class=\"line\">    <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>, <span class=\"comment\">// 超过1000ms就不再请求了</span></span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自定义请求头</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送请求数据</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、axios的发送类型和restful-api一样\"><a href=\"#一、axios的发送类型和restful-api一样\" class=\"headerlink\" title=\"一、axios的发送类型和restful api一样\"></a>一、axios的发送类型和restful api一样</h2><p>axios基于promise，它支持promiseapi</p>\n<h3 id=\"1-基本用法\"><a href=\"#1-基本用法\" class=\"headerlink\" title=\"1. 基本用法\"></a>1. 基本用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">post</span>(url,&#123;</span><br><span class=\"line\">    <span class=\"attr\">param</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求参数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/user/12345&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Fred&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Flintstone&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><em><strong>注1：还有增（post）删（delete）改（patch/put）查（get）这些，以及head和option。</strong></em></p>\n<p><em><strong>注2：OPTIONS方法返回有关API 的信息（方法/内容类型）:</strong></em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span> <span class=\"number\">200</span> <span class=\"variable constant_\">OK</span></span><br><span class=\"line\"><span class=\"title class_\">Allow</span>: <span class=\"variable constant_\">GET</span>,<span class=\"variable constant_\">HEAD</span>,<span class=\"variable constant_\">POST</span>,<span class=\"variable constant_\">OPTIONS</span>,<span class=\"variable constant_\">TRACE</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: text/html; charset=<span class=\"variable constant_\">UTF</span>-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"title class_\">Date</span>: <span class=\"title class_\">Wed</span>, <span class=\"number\">08</span> <span class=\"title class_\">May</span> <span class=\"number\">2013</span> <span class=\"number\">10</span>:<span class=\"number\">24</span>:<span class=\"number\">43</span> <span class=\"variable constant_\">GMT</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Length</span>: <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"variable constant_\">HEAD</span>方法返回有关资源的信息（版本/长度/类型）</span><br><span class=\"line\"><span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span> <span class=\"number\">200</span> <span class=\"variable constant_\">OK</span></span><br><span class=\"line\"><span class=\"title class_\">Accept</span>-<span class=\"title class_\">Ranges</span>: bytes</span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: text/html; charset=<span class=\"variable constant_\">UTF</span>-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"title class_\">Date</span>: <span class=\"title class_\">Wed</span>, <span class=\"number\">08</span> <span class=\"title class_\">May</span> <span class=\"number\">2013</span> <span class=\"number\">10</span>:<span class=\"number\">12</span>:<span class=\"number\">29</span> <span class=\"variable constant_\">GMT</span></span><br><span class=\"line\"><span class=\"title class_\">ETag</span>: <span class=\"string\">&quot;780602-4f6-4db31b2978ec0&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Last</span>-<span class=\"title class_\">Modified</span>: <span class=\"title class_\">Thu</span>, <span class=\"number\">25</span> <span class=\"title class_\">Apr</span> <span class=\"number\">2013</span> <span class=\"number\">16</span>:<span class=\"number\">13</span>:<span class=\"number\">23</span> <span class=\"variable constant_\">GMT</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Length</span>: <span class=\"number\">1270</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-并发\"><a href=\"#2-并发\" class=\"headerlink\" title=\"2. 并发\"></a>2. 并发</h3><p>axios.all(iterable)<br>###3. axios.create()<br>###4. axios可以拦截请求和响应<br>在请求和响应被then或catch之前做某些操作。比如请求前加入token，响应时如果返回数据错误，可以跳转到登录页</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"property\">interceptor</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span>(<span class=\"params\">config</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在发送请求之前做些什么</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;,<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对请求错误做些什么</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"property\">interceptor</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span>(<span class=\"params\">response</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对响应数据做些什么</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">&#125;,<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对响应错误做些什么</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>request的config里返回的，最后可以返回data以继续下面的请求<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-520f3d4d9a958c19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>response里面返回的，最后也是return以用于响应</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d4bffc0347ccdf86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"5-客户端支持xsrf防御\"><a href=\"#5-客户端支持xsrf防御\" class=\"headerlink\" title=\"5.客户端支持xsrf防御\"></a>5.客户端支持xsrf防御</h3><h3 id=\"6-axios常见的配置：\"><a href=\"#6-axios常见的配置：\" class=\"headerlink\" title=\"6.axios常见的配置：\"></a>6.axios常见的配置：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/user&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;https://www.xxx.html&#x27;</span> <span class=\"comment\">// 自动加载url前面的</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;transformRequest&#x27;</span>:[<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;], <span class=\"comment\">//允许在向服务器发送前，修改请求数据，比如加入token。只能用在&#x27;PUT&#x27;,&#x27;POST&#x27;和&#x27;PATCH&#x27;这几个请求方法</span></span><br><span class=\"line\">    <span class=\"attr\">transformResponse</span>:[<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;], <span class=\"comment\">// 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class=\"line\">    <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>, <span class=\"comment\">// 超过1000ms就不再请求了</span></span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自定义请求头</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送请求数据</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"【webpack5】基础部分总结","date":"2021-05-24T22:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、五大核心概念\nmode：开发模式development/生产模式production\nentry：入口，从哪个文件开始编译\noutput：出口\nplugin：插件\nloader：写在module中，加载器\n## 二、基本配置\n固定在根目录，新建一个文件名为```webpack.config.js```内容如下：\n```javascript\nconst path = require(\"path\")\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/main.js', // 相对路径\n    output: {\n        path: path.resolve(__dirname, 'dist'),//输出路径，绝对路径\n        // __dirname: nodejs的变量，代表当前文件的文件夹目录\n        filename: 'main.js',//文件名\n    },\n    module: {\n        rules: [\n            // loader的配置\n        ]\n    },\n    plugins: [],\n    devServer: {\n        port: 8082,\n        compress: true,\n        static: path.join(__dirname,'dist','index.html')\n    }\n}\n```\n新建src文件夹，在src文件夹下建立main.js，然后执行npx webpack就会自动打包。\n## 三、处理资源\n**注：多个loader配合使用时，处理顺序是：从下到上，从右到左 的顺序**\n### 1. css\n因为webpack只能识别js资源，所以要处理css需要用loader\n如加一个css-loader，先安装css-loader在开发环境中，然后在module中加载rules\n```javascript\n    module: {\n        rules: [\n            // loader的配置\n            { test: /\\.css$/, use: 'css-loader' },\n        ]\n    },\n```\n对于一条规则，也可以使用多个loader，在use中配置。\n```javascript\n// 对后缀名为css的文件，使用多个loader处理\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          // [style-loader](/loaders/style-loader)\n          { loader: 'style-loader' },\n          // [css-loader](/loaders/css-loader)\n          {\n            loader: 'css-loader',\n            options: {\n              modules: true\n            }\n          },\n          // [sass-loader](/loaders/sass-loader)\n          { loader: 'sass-loader' }\n        ]\n      }\n    ]\n  }\n};\n```\n### 常见的处理样式文件的loader：\n`css-loader `：处理css文件\n`less-loader `\n`sass-loader `\n`style-loader`：处理style标签内的样式 \n`stylus-loader`：使用模块化的方法去写css代码\n[`stylus`](https://www.stylus-lang.cn/)：是一种写css的方式，没有花括号没有分号，用缩进的方式去代替大括号，后缀名为styl\n### 2. 图片资源\nwebpack4使用file-loader和url-loader处理图片\n`file-loader`:将图片转换为webpack能识别的资源。\n`url-loader`:将小于某个大小的图片转换为base64\n处理图片并不需要loader，webpack5自带默认处理图片，只需要在loader中配置\n### 3. 修改打包资源的路径\n像输出时，默认js、图片等等都会在一个目录中，现在想要配置成其他目录。\n```javascript\n    output: {\n        path: path.resolve(__dirname, 'dist'),//所有文件的输出路径，绝对路径\n        // __dirname: nodejs的变量，代表当前文件的文件夹目录\n        filename: 'js/main.js',//打包入口文件js的文件名，所以如果指定了js/xxx.js，那么入口js文件都会被打包到js目录下\n    },\n```\n重新npx webpack就变成了这样\n![](https://upload-images.jianshu.io/upload_images/20892169-d8351f778a8d920a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n######图片资源路径的修改：在module/rules的对应loader中配置generator\n```javascript\ngenerator: {\n    //输出图片名称及目录，hash：唯一id，10代表hash值只取前十位，ext：文件扩展名    \n    filename: 'static/images/[hash][ext]',\n},\n```\n打包效果：\n![](https://upload-images.jianshu.io/upload_images/20892169-6f01c6e5729878cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 4. 自动清空上次打包资源\nwebpack不会自动删除上次打包内容，可能会造成重叠，文件很多，可以配置每次打包自动删除之前的打包结果。\n配置方法：clean：true\n```javascript\n    output: {\n        path: path.resolve(__dirname, 'dist'),//所有文件的输出路径，绝对路径\n        // __dirname: nodejs的变量，代表当前文件的文件夹目录\n        filename: 'js/main.js',//打包入口文件js的文件名，所以如果指定了js/xxx.js，那么入口js文件都会被打包到js目录下\n        clean: true \n        // 自动清空上次打包的内容\n        // 原理：在打包前，将path整个目录清空，在进行打包输出\n    },\n```\n### 5.处理其他资源\n如视频、字体、excel等等，想统一处理的话，可以如下配置：\n```javascript\n{\n    test: /\\.(mp3?4|ttf|avi|doc|rmvb)/,\n    type: 'assert/resource',\n    generator: {\n        filename: 'static/images/[hash:10][ext]',\n     }\n},  \n```\n官网对于type: assert的几个值的介绍：\n\n>asset/resource 发送一个单独的文件到输入目录并导出 URL。之前通过使用 file-loader 实现。\nasset/inline 导出一个资源的 data URI（如，base64）。之前通过使用 url-loader 实现。\nasset/source 导出资源的源代码。之前通过使用 raw-loader 实现。\nasset 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 url-loader，并且配置资源体积限制实现。\n\n### 6. ESLINT\n**eslint**：用来检测js和jsx语法，可以管理缩进、规则是否正确，让代码更加健壮。\n**配置文件**：eslintrc.js\n在**webpack4**中使用`loader`处理。\n在**webpack5**中使用`plugins`去处理。\n#### 如何使用？\n根目录新建`eslintrc.js`，然后在`webpack.config.js`中配置`plugin`\n官网文档：[点击查看](https://webpack.docschina.org/plugins/eslint-webpack-plugin/#root)\nplugins要用require引入。\n```javascript\nconst ESLintPlugin = require('eslint-webpack-plugin');\n\n    plugins: [\n        new ESLintPlugin({\n            context: path.resolve(__dirname, 'src')\n// 开发时是只需要检查源代码，打包的dist代码是不用检查的。\n        })\n    ],\n```\n简单的eslintrc.js的配置\n```javascript\nmodule.exports = {\n    // 继承eslint规则\n    extends: [\"eslint: recommended\"],\n    env: {\n        node: true, // 启用node中的全局变量\n        browser: true, // 启用浏览器的全局变量\n    },\n    parserOptions: {\n        ecmaVersion: 6, // es6 模块\n        sourceType: 'module'\n    },\n    rules: {\n        \"no-var\": 2, //不能使用var定义变量\n    }\n}\n```\n如果有不需要检查的文件，新建`eslintignore`可以不检查。\n### 7. babel\n还是一样，webpack官网搜babel，就会出来babel-loader的配置，复制过来根据自己的需要做修改。\n根目录新建babel.config.json，其中配置babel\n```javascript\n{\n    \"presets\": [\n      [\n        \"@babel/preset-env\",\n        {\n          \"targets\": {\n            \"edge\": \"17\",\n            \"firefox\": \"60\",\n            \"chrome\": \"67\",\n            \"safari\": \"11.1\"\n          },\n          \"useBuiltIns\": \"usage\",\n          \"corejs\": \"3.6.5\"\n        }\n      ]\n    ]\n  }\n```\n```javascript\n{\n      test: /\\.m?js$/,\n      exclude: /(node_modules|bower_components)/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: ['@babel/preset-env']\n        }\n      }\n}\n```\n如果不写上面的options，那么会用babel.config.json中的配置去转换代码的。\n`@babel/preset-env`：智能预设，允许使用最新的js\n`@babel/preset-react`：用来编译jsx\n`@babel/preset-typescript`：用来编译ts。\n\ntargets：需要兼容的浏览器版本，可以用这些属性 ：\n`\nandroid, chrome, deno, edge, electron, firefox, ie, ios, node, opera, rhino, safari, samsung`\n也可以设置成一个string，比如` > 0.5%, last 2 versions, not dead` 意思是有大于百分之零点五的人使用，前两个版本，并且没有废弃\n\n`useBuiltIns`有几个值\n`false`：默认值，不做任何语法转换\n`usage Babel`：将检查你的所有代码，以便查找targets环境中缺失的功能，然后只把必须的 polyfill 包含进来\n`entry`：引入所有的polyfill包，必须在入口文件加入 import \"core-js/stable\" 才会生效\n\n`useBuiltIns` 需要搭配 `core-js`，并且需要在配置文件里面声明。目前`core-js`最新版本是`3.x`，也可以指定`2.x`。\nnpm i core-js -S\n \"corejs\": \"3.6.5\"\n\n### 8. 处理html\n[点击查看](https://webpack.docschina.org/plugins/html-webpack-plugin/#root)\n首先js打包文件可能名字是动态生成的，需要自动引入js到html，才会确保不出错的\n所以可以自动生成index.html文件，插件为`HtmlWebpackPlugin`\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst path = require('path');\n\nmodule.exports = {\n  entry: 'index.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'index_bundle.js',\n  },\n  plugins: [new HtmlWebpackPlugin({\n            template: path.resolve(__dirname,'index.html')\n        })],\n};\n```\n首先插件会自动生成一个index.html，template中写的index.html意思是通过template里的这个index.html生成一个index.html到dist目录中，所以两个不是一个意思。\n## 三、搭建开发服务器\n安装```webpack-dev-server```\n```javascript\n    devServer: {\n        port: 8082,\n        compress: true,\n        static: path.join(__dirname,'dist','index.html')\n    }\n```\n## 四、生产模式的搭建\n生产模式也就是线上实际使用的代码，会被压缩。因为体积小，加载就快。\n一般会新建一个`config/webpack.dev.js`做开发环境的搭建。\n一般会新建一个`config/webpack.prod.js`做线上环境的搭建。\n然后建立`webpack.config.js`，将两个配置引入。\n#### 改动的主要地方\n1、如果配置文件新建一个文件夹放起来，那么需要将所有绝对路径改为上层路径。\n2、mode的更改\n3、开发模式删除output，生产模式删除devServer\n#### 常见打包命令：\n`npx webpack`：自动打包命令\n`npx webpack serve --config ./config/webpack.dev.js`  ：运行./config/目录下的`webpack.dev.js`配置文件，并启动服务\n`npx webpack --config ./config/webpack.prod.js` ： 运行./config/目录下的`webpack.prod.js`配置文件\n## 五、css处理\n### 1. css单独提取\n#### 之前处理css的方法：\n是将css用`css-loader`变为webpack可识别的文件后\n在入口文件`main.js`使用`imort`引入css\n再使用`style-loader`将css转换为网页中的style内联标签\n####使用`MiniCssExtractPlugin`：\n将`style-loader`生成的style标签内的css单独提取为css文件，注意必须要安装`style-loader`\n```javascript\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nmodule.exports = {\n  plugins: [new MiniCssExtractPlugin()],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [MiniCssExtractPlugin.loader, \"css-loader\"],\n      },\n    ],\n  },\n};\n```\n入口文件main.js中：\n```javascript\nimport \"./style.css\";\n```\n**注：**\n+ 要生成页面内style标签的形式，那么`css-loader`和`style-loader`要同时使用。\n+ 要生成单独的css文件，那`css-loader`和`miniCssExtractPlugin.loader`要同时使用。（不用style-loader）\n### 2. 兼容性处理\n`postcss-loader`：兼容性处理，需要安装`postcss`与`postcss-loader`，配置在css-loader和style-loader之后，在less和sass的前面，这个是固定的噢\n在package.json中，配置\n```javascript\n  \"browserslist\": [\n    \"ie >= 8\" // 需要兼容ie8以上的兼容\n\n  ]\n```\n然后按照官网去配置loader\n```javascript\nuse: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            options: {\n              postcssOptions: {\n                plugins: [\n                  [\n                    'postcss-preset-env',\n                    {\n                      // 其他选项\n                    },\n                  ],\n                ],\n              },\n            },\n          },\n        ],\n```\n```javascript\n  \"browserslist\": [\n    \"last 2 version\", // 兼容所有浏览器厂商的最近两个版本\n    \"> 1%\", // 覆盖99%浏览器\n    \"not dead\" // 已经kill的版本\n  ]\n```\n### 3.CssMinimizerPlugin压缩css\n一般来说，压缩操作在webpack5中都放进optimization中，虽然放在plugins中也可以，不太规范拉。~\n```javascript\nconst CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\n\nmodule.exports = {\noptimization: {\n        minimizer: [\n          // 在 webpack@5 中，你可以使用 `...` 语法来扩展现有的 minimizer（即 `terser-webpack-plugin`），将下一行取消注释\n          // `...`,\n          new CssMinimizerPlugin(),\n        ],\n    },\n}\n```\n<hr>\n\n## 常见的loader总结：\n\n*   [`raw-loader`](https://v4.webpack.js.org/loaders/raw-loader/) 将文件导入为字符串\n*   [`url-loader`](https://v4.webpack.js.org/loaders/url-loader/) 将文件作为 data URI 内联到 bundle 中\n*   [`file-loader`](https://v4.webpack.js.org/loaders/file-loader/) 发送一个单独的文件并导出 URL\n*   各种`css-loader`\n*  `postcss-loader`：兼容性处理，需要安装`postcss`与`postcss-loader`，配置在css-loader和style-loader之后，在less和sass的前面，这个是固定的噢\n##常见的plugin总结：\n* `MiniCssExtractPlugin`：将style-loader生成的style标签内的css单独提取为文件，注意必须要安装style-loader\n* `CssMinimizerWebpackPlugin`: 压缩css\n* `ESLintPlugin`：eslint检查\n* `terserWebpackPlugin`：压缩代码\n<hr>\n","source":"_posts/cxy/webpack/webpack1.md","raw":"---\ntitle: '【webpack5】基础部分总结'\ndate: 2021-05-25 06:21:49\ntags: webpack\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、五大核心概念\nmode：开发模式development/生产模式production\nentry：入口，从哪个文件开始编译\noutput：出口\nplugin：插件\nloader：写在module中，加载器\n## 二、基本配置\n固定在根目录，新建一个文件名为```webpack.config.js```内容如下：\n```javascript\nconst path = require(\"path\")\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/main.js', // 相对路径\n    output: {\n        path: path.resolve(__dirname, 'dist'),//输出路径，绝对路径\n        // __dirname: nodejs的变量，代表当前文件的文件夹目录\n        filename: 'main.js',//文件名\n    },\n    module: {\n        rules: [\n            // loader的配置\n        ]\n    },\n    plugins: [],\n    devServer: {\n        port: 8082,\n        compress: true,\n        static: path.join(__dirname,'dist','index.html')\n    }\n}\n```\n新建src文件夹，在src文件夹下建立main.js，然后执行npx webpack就会自动打包。\n## 三、处理资源\n**注：多个loader配合使用时，处理顺序是：从下到上，从右到左 的顺序**\n### 1. css\n因为webpack只能识别js资源，所以要处理css需要用loader\n如加一个css-loader，先安装css-loader在开发环境中，然后在module中加载rules\n```javascript\n    module: {\n        rules: [\n            // loader的配置\n            { test: /\\.css$/, use: 'css-loader' },\n        ]\n    },\n```\n对于一条规则，也可以使用多个loader，在use中配置。\n```javascript\n// 对后缀名为css的文件，使用多个loader处理\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          // [style-loader](/loaders/style-loader)\n          { loader: 'style-loader' },\n          // [css-loader](/loaders/css-loader)\n          {\n            loader: 'css-loader',\n            options: {\n              modules: true\n            }\n          },\n          // [sass-loader](/loaders/sass-loader)\n          { loader: 'sass-loader' }\n        ]\n      }\n    ]\n  }\n};\n```\n### 常见的处理样式文件的loader：\n`css-loader `：处理css文件\n`less-loader `\n`sass-loader `\n`style-loader`：处理style标签内的样式 \n`stylus-loader`：使用模块化的方法去写css代码\n[`stylus`](https://www.stylus-lang.cn/)：是一种写css的方式，没有花括号没有分号，用缩进的方式去代替大括号，后缀名为styl\n### 2. 图片资源\nwebpack4使用file-loader和url-loader处理图片\n`file-loader`:将图片转换为webpack能识别的资源。\n`url-loader`:将小于某个大小的图片转换为base64\n处理图片并不需要loader，webpack5自带默认处理图片，只需要在loader中配置\n### 3. 修改打包资源的路径\n像输出时，默认js、图片等等都会在一个目录中，现在想要配置成其他目录。\n```javascript\n    output: {\n        path: path.resolve(__dirname, 'dist'),//所有文件的输出路径，绝对路径\n        // __dirname: nodejs的变量，代表当前文件的文件夹目录\n        filename: 'js/main.js',//打包入口文件js的文件名，所以如果指定了js/xxx.js，那么入口js文件都会被打包到js目录下\n    },\n```\n重新npx webpack就变成了这样\n![](https://upload-images.jianshu.io/upload_images/20892169-d8351f778a8d920a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n######图片资源路径的修改：在module/rules的对应loader中配置generator\n```javascript\ngenerator: {\n    //输出图片名称及目录，hash：唯一id，10代表hash值只取前十位，ext：文件扩展名    \n    filename: 'static/images/[hash][ext]',\n},\n```\n打包效果：\n![](https://upload-images.jianshu.io/upload_images/20892169-6f01c6e5729878cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 4. 自动清空上次打包资源\nwebpack不会自动删除上次打包内容，可能会造成重叠，文件很多，可以配置每次打包自动删除之前的打包结果。\n配置方法：clean：true\n```javascript\n    output: {\n        path: path.resolve(__dirname, 'dist'),//所有文件的输出路径，绝对路径\n        // __dirname: nodejs的变量，代表当前文件的文件夹目录\n        filename: 'js/main.js',//打包入口文件js的文件名，所以如果指定了js/xxx.js，那么入口js文件都会被打包到js目录下\n        clean: true \n        // 自动清空上次打包的内容\n        // 原理：在打包前，将path整个目录清空，在进行打包输出\n    },\n```\n### 5.处理其他资源\n如视频、字体、excel等等，想统一处理的话，可以如下配置：\n```javascript\n{\n    test: /\\.(mp3?4|ttf|avi|doc|rmvb)/,\n    type: 'assert/resource',\n    generator: {\n        filename: 'static/images/[hash:10][ext]',\n     }\n},  \n```\n官网对于type: assert的几个值的介绍：\n\n>asset/resource 发送一个单独的文件到输入目录并导出 URL。之前通过使用 file-loader 实现。\nasset/inline 导出一个资源的 data URI（如，base64）。之前通过使用 url-loader 实现。\nasset/source 导出资源的源代码。之前通过使用 raw-loader 实现。\nasset 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 url-loader，并且配置资源体积限制实现。\n\n### 6. ESLINT\n**eslint**：用来检测js和jsx语法，可以管理缩进、规则是否正确，让代码更加健壮。\n**配置文件**：eslintrc.js\n在**webpack4**中使用`loader`处理。\n在**webpack5**中使用`plugins`去处理。\n#### 如何使用？\n根目录新建`eslintrc.js`，然后在`webpack.config.js`中配置`plugin`\n官网文档：[点击查看](https://webpack.docschina.org/plugins/eslint-webpack-plugin/#root)\nplugins要用require引入。\n```javascript\nconst ESLintPlugin = require('eslint-webpack-plugin');\n\n    plugins: [\n        new ESLintPlugin({\n            context: path.resolve(__dirname, 'src')\n// 开发时是只需要检查源代码，打包的dist代码是不用检查的。\n        })\n    ],\n```\n简单的eslintrc.js的配置\n```javascript\nmodule.exports = {\n    // 继承eslint规则\n    extends: [\"eslint: recommended\"],\n    env: {\n        node: true, // 启用node中的全局变量\n        browser: true, // 启用浏览器的全局变量\n    },\n    parserOptions: {\n        ecmaVersion: 6, // es6 模块\n        sourceType: 'module'\n    },\n    rules: {\n        \"no-var\": 2, //不能使用var定义变量\n    }\n}\n```\n如果有不需要检查的文件，新建`eslintignore`可以不检查。\n### 7. babel\n还是一样，webpack官网搜babel，就会出来babel-loader的配置，复制过来根据自己的需要做修改。\n根目录新建babel.config.json，其中配置babel\n```javascript\n{\n    \"presets\": [\n      [\n        \"@babel/preset-env\",\n        {\n          \"targets\": {\n            \"edge\": \"17\",\n            \"firefox\": \"60\",\n            \"chrome\": \"67\",\n            \"safari\": \"11.1\"\n          },\n          \"useBuiltIns\": \"usage\",\n          \"corejs\": \"3.6.5\"\n        }\n      ]\n    ]\n  }\n```\n```javascript\n{\n      test: /\\.m?js$/,\n      exclude: /(node_modules|bower_components)/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: ['@babel/preset-env']\n        }\n      }\n}\n```\n如果不写上面的options，那么会用babel.config.json中的配置去转换代码的。\n`@babel/preset-env`：智能预设，允许使用最新的js\n`@babel/preset-react`：用来编译jsx\n`@babel/preset-typescript`：用来编译ts。\n\ntargets：需要兼容的浏览器版本，可以用这些属性 ：\n`\nandroid, chrome, deno, edge, electron, firefox, ie, ios, node, opera, rhino, safari, samsung`\n也可以设置成一个string，比如` > 0.5%, last 2 versions, not dead` 意思是有大于百分之零点五的人使用，前两个版本，并且没有废弃\n\n`useBuiltIns`有几个值\n`false`：默认值，不做任何语法转换\n`usage Babel`：将检查你的所有代码，以便查找targets环境中缺失的功能，然后只把必须的 polyfill 包含进来\n`entry`：引入所有的polyfill包，必须在入口文件加入 import \"core-js/stable\" 才会生效\n\n`useBuiltIns` 需要搭配 `core-js`，并且需要在配置文件里面声明。目前`core-js`最新版本是`3.x`，也可以指定`2.x`。\nnpm i core-js -S\n \"corejs\": \"3.6.5\"\n\n### 8. 处理html\n[点击查看](https://webpack.docschina.org/plugins/html-webpack-plugin/#root)\n首先js打包文件可能名字是动态生成的，需要自动引入js到html，才会确保不出错的\n所以可以自动生成index.html文件，插件为`HtmlWebpackPlugin`\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst path = require('path');\n\nmodule.exports = {\n  entry: 'index.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'index_bundle.js',\n  },\n  plugins: [new HtmlWebpackPlugin({\n            template: path.resolve(__dirname,'index.html')\n        })],\n};\n```\n首先插件会自动生成一个index.html，template中写的index.html意思是通过template里的这个index.html生成一个index.html到dist目录中，所以两个不是一个意思。\n## 三、搭建开发服务器\n安装```webpack-dev-server```\n```javascript\n    devServer: {\n        port: 8082,\n        compress: true,\n        static: path.join(__dirname,'dist','index.html')\n    }\n```\n## 四、生产模式的搭建\n生产模式也就是线上实际使用的代码，会被压缩。因为体积小，加载就快。\n一般会新建一个`config/webpack.dev.js`做开发环境的搭建。\n一般会新建一个`config/webpack.prod.js`做线上环境的搭建。\n然后建立`webpack.config.js`，将两个配置引入。\n#### 改动的主要地方\n1、如果配置文件新建一个文件夹放起来，那么需要将所有绝对路径改为上层路径。\n2、mode的更改\n3、开发模式删除output，生产模式删除devServer\n#### 常见打包命令：\n`npx webpack`：自动打包命令\n`npx webpack serve --config ./config/webpack.dev.js`  ：运行./config/目录下的`webpack.dev.js`配置文件，并启动服务\n`npx webpack --config ./config/webpack.prod.js` ： 运行./config/目录下的`webpack.prod.js`配置文件\n## 五、css处理\n### 1. css单独提取\n#### 之前处理css的方法：\n是将css用`css-loader`变为webpack可识别的文件后\n在入口文件`main.js`使用`imort`引入css\n再使用`style-loader`将css转换为网页中的style内联标签\n####使用`MiniCssExtractPlugin`：\n将`style-loader`生成的style标签内的css单独提取为css文件，注意必须要安装`style-loader`\n```javascript\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nmodule.exports = {\n  plugins: [new MiniCssExtractPlugin()],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [MiniCssExtractPlugin.loader, \"css-loader\"],\n      },\n    ],\n  },\n};\n```\n入口文件main.js中：\n```javascript\nimport \"./style.css\";\n```\n**注：**\n+ 要生成页面内style标签的形式，那么`css-loader`和`style-loader`要同时使用。\n+ 要生成单独的css文件，那`css-loader`和`miniCssExtractPlugin.loader`要同时使用。（不用style-loader）\n### 2. 兼容性处理\n`postcss-loader`：兼容性处理，需要安装`postcss`与`postcss-loader`，配置在css-loader和style-loader之后，在less和sass的前面，这个是固定的噢\n在package.json中，配置\n```javascript\n  \"browserslist\": [\n    \"ie >= 8\" // 需要兼容ie8以上的兼容\n\n  ]\n```\n然后按照官网去配置loader\n```javascript\nuse: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            options: {\n              postcssOptions: {\n                plugins: [\n                  [\n                    'postcss-preset-env',\n                    {\n                      // 其他选项\n                    },\n                  ],\n                ],\n              },\n            },\n          },\n        ],\n```\n```javascript\n  \"browserslist\": [\n    \"last 2 version\", // 兼容所有浏览器厂商的最近两个版本\n    \"> 1%\", // 覆盖99%浏览器\n    \"not dead\" // 已经kill的版本\n  ]\n```\n### 3.CssMinimizerPlugin压缩css\n一般来说，压缩操作在webpack5中都放进optimization中，虽然放在plugins中也可以，不太规范拉。~\n```javascript\nconst CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\n\nmodule.exports = {\noptimization: {\n        minimizer: [\n          // 在 webpack@5 中，你可以使用 `...` 语法来扩展现有的 minimizer（即 `terser-webpack-plugin`），将下一行取消注释\n          // `...`,\n          new CssMinimizerPlugin(),\n        ],\n    },\n}\n```\n<hr>\n\n## 常见的loader总结：\n\n*   [`raw-loader`](https://v4.webpack.js.org/loaders/raw-loader/) 将文件导入为字符串\n*   [`url-loader`](https://v4.webpack.js.org/loaders/url-loader/) 将文件作为 data URI 内联到 bundle 中\n*   [`file-loader`](https://v4.webpack.js.org/loaders/file-loader/) 发送一个单独的文件并导出 URL\n*   各种`css-loader`\n*  `postcss-loader`：兼容性处理，需要安装`postcss`与`postcss-loader`，配置在css-loader和style-loader之后，在less和sass的前面，这个是固定的噢\n##常见的plugin总结：\n* `MiniCssExtractPlugin`：将style-loader生成的style标签内的css单独提取为文件，注意必须要安装style-loader\n* `CssMinimizerWebpackPlugin`: 压缩css\n* `ESLintPlugin`：eslint检查\n* `terserWebpackPlugin`：压缩代码\n<hr>\n","slug":"cxy/webpack/webpack1","published":1,"updated":"2023-01-25T16:08:17.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbvzzd60000nfwigm421hdd","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、五大核心概念\"><a href=\"#一、五大核心概念\" class=\"headerlink\" title=\"一、五大核心概念\"></a>一、五大核心概念</h2><p>mode：开发模式development/生产模式production<br>entry：入口，从哪个文件开始编译<br>output：出口<br>plugin：插件<br>loader：写在module中，加载器</p>\n<h2 id=\"二、基本配置\"><a href=\"#二、基本配置\" class=\"headerlink\" title=\"二、基本配置\"></a>二、基本配置</h2><p>固定在根目录，新建一个文件名为<code>webpack.config.js</code>内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>, <span class=\"comment\">// 相对路径</span></span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),<span class=\"comment\">//输出路径，绝对路径</span></span><br><span class=\"line\">        <span class=\"comment\">// __dirname: nodejs的变量，代表当前文件的文件夹目录</span></span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;main.js&#x27;</span>,<span class=\"comment\">//文件名</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            <span class=\"comment\">// loader的配置</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">port</span>: <span class=\"number\">8082</span>,</span><br><span class=\"line\">        <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">static</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;dist&#x27;</span>,<span class=\"string\">&#x27;index.html&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建src文件夹，在src文件夹下建立main.js，然后执行npx webpack就会自动打包。</p>\n<h2 id=\"三、处理资源\"><a href=\"#三、处理资源\" class=\"headerlink\" title=\"三、处理资源\"></a>三、处理资源</h2><p><strong>注：多个loader配合使用时，处理顺序是：从下到上，从右到左 的顺序</strong></p>\n<h3 id=\"1-css\"><a href=\"#1-css\" class=\"headerlink\" title=\"1. css\"></a>1. css</h3><p>因为webpack只能识别js资源，所以要处理css需要用loader<br>如加一个css-loader，先安装css-loader在开发环境中，然后在module中加载rules</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">        <span class=\"comment\">// loader的配置</span></span><br><span class=\"line\">        &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">&#x27;css-loader&#x27;</span> &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>对于一条规则，也可以使用多个loader，在use中配置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对后缀名为css的文件，使用多个loader处理</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"comment\">// [style-loader](/loaders/style-loader)</span></span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// [css-loader](/loaders/css-loader)</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">modules</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// [sass-loader](/loaders/sass-loader)</span></span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;sass-loader&#x27;</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常见的处理样式文件的loader：\"><a href=\"#常见的处理样式文件的loader：\" class=\"headerlink\" title=\"常见的处理样式文件的loader：\"></a>常见的处理样式文件的loader：</h3><p><code>css-loader </code>：处理css文件<br><code>less-loader </code><br><code>sass-loader </code><br><code>style-loader</code>：处理style标签内的样式<br><code>stylus-loader</code>：使用模块化的方法去写css代码<br><a href=\"https://www.stylus-lang.cn/\"><code>stylus</code></a>：是一种写css的方式，没有花括号没有分号，用缩进的方式去代替大括号，后缀名为styl</p>\n<h3 id=\"2-图片资源\"><a href=\"#2-图片资源\" class=\"headerlink\" title=\"2. 图片资源\"></a>2. 图片资源</h3><p>webpack4使用file-loader和url-loader处理图片<br><code>file-loader</code>:将图片转换为webpack能识别的资源。<br><code>url-loader</code>:将小于某个大小的图片转换为base64<br>处理图片并不需要loader，webpack5自带默认处理图片，只需要在loader中配置</p>\n<h3 id=\"3-修改打包资源的路径\"><a href=\"#3-修改打包资源的路径\" class=\"headerlink\" title=\"3. 修改打包资源的路径\"></a>3. 修改打包资源的路径</h3><p>像输出时，默认js、图片等等都会在一个目录中，现在想要配置成其他目录。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),<span class=\"comment\">//所有文件的输出路径，绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\">// __dirname: nodejs的变量，代表当前文件的文件夹目录</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/main.js&#x27;</span>,<span class=\"comment\">//打包入口文件js的文件名，所以如果指定了js/xxx.js，那么入口js文件都会被打包到js目录下</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>重新npx webpack就变成了这样<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d8351f778a8d920a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>######图片资源路径的修改：在module/rules的对应loader中配置generator</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//输出图片名称及目录，hash：唯一id，10代表hash值只取前十位，ext：文件扩展名    </span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;static/images/[hash][ext]&#x27;</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>打包效果：<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6f01c6e5729878cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"4-自动清空上次打包资源\"><a href=\"#4-自动清空上次打包资源\" class=\"headerlink\" title=\"4. 自动清空上次打包资源\"></a>4. 自动清空上次打包资源</h3><p>webpack不会自动删除上次打包内容，可能会造成重叠，文件很多，可以配置每次打包自动删除之前的打包结果。<br>配置方法：clean：true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),<span class=\"comment\">//所有文件的输出路径，绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\">// __dirname: nodejs的变量，代表当前文件的文件夹目录</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/main.js&#x27;</span>,<span class=\"comment\">//打包入口文件js的文件名，所以如果指定了js/xxx.js，那么入口js文件都会被打包到js目录下</span></span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span> </span><br><span class=\"line\">    <span class=\"comment\">// 自动清空上次打包的内容</span></span><br><span class=\"line\">    <span class=\"comment\">// 原理：在打包前，将path整个目录清空，在进行打包输出</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-处理其他资源\"><a href=\"#5-处理其他资源\" class=\"headerlink\" title=\"5.处理其他资源\"></a>5.处理其他资源</h3><p>如视频、字体、excel等等，想统一处理的话，可以如下配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(mp3?4|ttf|avi|doc|rmvb)/</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;assert/resource&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;static/images/[hash:10][ext]&#x27;</span>,</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;,  </span><br></pre></td></tr></table></figure>\n<p>官网对于type: assert的几个值的介绍：</p>\n<blockquote>\n<p>asset/resource 发送一个单独的文件到输入目录并导出 URL。之前通过使用 file-loader 实现。<br>asset/inline 导出一个资源的 data URI（如，base64）。之前通过使用 url-loader 实现。<br>asset/source 导出资源的源代码。之前通过使用 raw-loader 实现。<br>asset 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 url-loader，并且配置资源体积限制实现。</p>\n</blockquote>\n<h3 id=\"6-ESLINT\"><a href=\"#6-ESLINT\" class=\"headerlink\" title=\"6. ESLINT\"></a>6. ESLINT</h3><p><strong>eslint</strong>：用来检测js和jsx语法，可以管理缩进、规则是否正确，让代码更加健壮。<br><strong>配置文件</strong>：eslintrc.js<br>在<strong>webpack4</strong>中使用<code>loader</code>处理。<br>在<strong>webpack5</strong>中使用<code>plugins</code>去处理。</p>\n<h4 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h4><p>根目录新建<code>eslintrc.js</code>，然后在<code>webpack.config.js</code>中配置<code>plugin</code><br>官网文档：<a href=\"https://webpack.docschina.org/plugins/eslint-webpack-plugin/#root\">点击查看</a><br>plugins要用require引入。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ESLintPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;eslint-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ESLintPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 开发时是只需要检查源代码，打包的dist代码是不用检查的。</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n<p>简单的eslintrc.js的配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 继承eslint规则</span></span><br><span class=\"line\">    <span class=\"attr\">extends</span>: [<span class=\"string\">&quot;eslint: recommended&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">env</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">node</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 启用node中的全局变量</span></span><br><span class=\"line\">        <span class=\"attr\">browser</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 启用浏览器的全局变量</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">ecmaVersion</span>: <span class=\"number\">6</span>, <span class=\"comment\">// es6 模块</span></span><br><span class=\"line\">        <span class=\"attr\">sourceType</span>: <span class=\"string\">&#x27;module&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;no-var&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">//不能使用var定义变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果有不需要检查的文件，新建<code>eslintignore</code>可以不检查。</p>\n<h3 id=\"7-babel\"><a href=\"#7-babel\" class=\"headerlink\" title=\"7. babel\"></a>7. babel</h3><p>还是一样，webpack官网搜babel，就会出来babel-loader的配置，复制过来根据自己的需要做修改。<br>根目录新建babel.config.json，其中配置babel</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;targets&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;edge&quot;</span>: <span class=\"string\">&quot;17&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;firefox&quot;</span>: <span class=\"string\">&quot;60&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;chrome&quot;</span>: <span class=\"string\">&quot;67&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;safari&quot;</span>: <span class=\"string\">&quot;11.1&quot;</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;useBuiltIns&quot;</span>: <span class=\"string\">&quot;usage&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;corejs&quot;</span>: <span class=\"string\">&quot;3.6.5&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.m?js$/</span>,</span><br><span class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">      <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不写上面的options，那么会用babel.config.json中的配置去转换代码的。<br><code>@babel/preset-env</code>：智能预设，允许使用最新的js<br><code>@babel/preset-react</code>：用来编译jsx<br><code>@babel/preset-typescript</code>：用来编译ts。</p>\n<p>targets：需要兼容的浏览器版本，可以用这些属性 ：<br><code> android, chrome, deno, edge, electron, firefox, ie, ios, node, opera, rhino, safari, samsung</code><br>也可以设置成一个string，比如<code> &gt; 0.5%, last 2 versions, not dead</code> 意思是有大于百分之零点五的人使用，前两个版本，并且没有废弃</p>\n<p><code>useBuiltIns</code>有几个值<br><code>false</code>：默认值，不做任何语法转换<br><code>usage Babel</code>：将检查你的所有代码，以便查找targets环境中缺失的功能，然后只把必须的 polyfill 包含进来<br><code>entry</code>：引入所有的polyfill包，必须在入口文件加入 import “core-js/stable” 才会生效</p>\n<p><code>useBuiltIns</code> 需要搭配 <code>core-js</code>，并且需要在配置文件里面声明。目前<code>core-js</code>最新版本是<code>3.x</code>，也可以指定<code>2.x</code>。<br>npm i core-js -S<br> “corejs”: “3.6.5”</p>\n<h3 id=\"8-处理html\"><a href=\"#8-处理html\" class=\"headerlink\" title=\"8. 处理html\"></a>8. 处理html</h3><p><a href=\"https://webpack.docschina.org/plugins/html-webpack-plugin/#root\">点击查看</a><br>首先js打包文件可能名字是动态生成的，需要自动引入js到html，才会确保不出错的<br>所以可以自动生成index.html文件，插件为<code>HtmlWebpackPlugin</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class=\"line\">const path = require(&#x27;path&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &#x27;index.js&#x27;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, &#x27;./dist&#x27;),</span><br><span class=\"line\">    filename: &#x27;index_bundle.js&#x27;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: path.resolve(__dirname,&#x27;index.html&#x27;)</span><br><span class=\"line\">        &#125;)],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>首先插件会自动生成一个index.html，template中写的index.html意思是通过template里的这个index.html生成一个index.html到dist目录中，所以两个不是一个意思。</p>\n<h2 id=\"三、搭建开发服务器\"><a href=\"#三、搭建开发服务器\" class=\"headerlink\" title=\"三、搭建开发服务器\"></a>三、搭建开发服务器</h2><p>安装<code>webpack-dev-server</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8082</span>,</span><br><span class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">static</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;dist&#x27;</span>,<span class=\"string\">&#x27;index.html&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、生产模式的搭建\"><a href=\"#四、生产模式的搭建\" class=\"headerlink\" title=\"四、生产模式的搭建\"></a>四、生产模式的搭建</h2><p>生产模式也就是线上实际使用的代码，会被压缩。因为体积小，加载就快。<br>一般会新建一个<code>config/webpack.dev.js</code>做开发环境的搭建。<br>一般会新建一个<code>config/webpack.prod.js</code>做线上环境的搭建。<br>然后建立<code>webpack.config.js</code>，将两个配置引入。</p>\n<h4 id=\"改动的主要地方\"><a href=\"#改动的主要地方\" class=\"headerlink\" title=\"改动的主要地方\"></a>改动的主要地方</h4><p>1、如果配置文件新建一个文件夹放起来，那么需要将所有绝对路径改为上层路径。<br>2、mode的更改<br>3、开发模式删除output，生产模式删除devServer</p>\n<h4 id=\"常见打包命令：\"><a href=\"#常见打包命令：\" class=\"headerlink\" title=\"常见打包命令：\"></a>常见打包命令：</h4><p><code>npx webpack</code>：自动打包命令<br><code>npx webpack serve --config ./config/webpack.dev.js</code>  ：运行./config/目录下的<code>webpack.dev.js</code>配置文件，并启动服务<br><code>npx webpack --config ./config/webpack.prod.js</code> ： 运行./config/目录下的<code>webpack.prod.js</code>配置文件</p>\n<h2 id=\"五、css处理\"><a href=\"#五、css处理\" class=\"headerlink\" title=\"五、css处理\"></a>五、css处理</h2><h3 id=\"1-css单独提取\"><a href=\"#1-css单独提取\" class=\"headerlink\" title=\"1. css单独提取\"></a>1. css单独提取</h3><h4 id=\"之前处理css的方法：\"><a href=\"#之前处理css的方法：\" class=\"headerlink\" title=\"之前处理css的方法：\"></a>之前处理css的方法：</h4><p>是将css用<code>css-loader</code>变为webpack可识别的文件后<br>在入口文件<code>main.js</code>使用<code>imort</code>引入css<br>再使用<code>style-loader</code>将css转换为网页中的style内联标签<br>####使用<code>MiniCssExtractPlugin</code>：<br>将<code>style-loader</code>生成的style标签内的css单独提取为css文件，注意必须要安装<code>style-loader</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>()],</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>入口文件main.js中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./style.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>注：</strong></p>\n<ul>\n<li>要生成页面内style标签的形式，那么<code>css-loader</code>和<code>style-loader</code>要同时使用。</li>\n<li>要生成单独的css文件，那<code>css-loader</code>和<code>miniCssExtractPlugin.loader</code>要同时使用。（不用style-loader）<h3 id=\"2-兼容性处理\"><a href=\"#2-兼容性处理\" class=\"headerlink\" title=\"2. 兼容性处理\"></a>2. 兼容性处理</h3><code>postcss-loader</code>：兼容性处理，需要安装<code>postcss</code>与<code>postcss-loader</code>，配置在css-loader和style-loader之后，在less和sass的前面，这个是固定的噢<br>在package.json中，配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;browserslist&quot;</span>: [</span><br><span class=\"line\">  <span class=\"string\">&quot;ie &gt;= 8&quot;</span> <span class=\"comment\">// 需要兼容ie8以上的兼容</span></span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n然后按照官网去配置loader<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;postcss-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">postcssOptions</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">                  [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;postcss-preset-env&#x27;</span>,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      <span class=\"comment\">// 其他选项</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                ],</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;browserslist&quot;</span>: [</span><br><span class=\"line\">  <span class=\"string\">&quot;last 2 version&quot;</span>, <span class=\"comment\">// 兼容所有浏览器厂商的最近两个版本</span></span><br><span class=\"line\">  <span class=\"string\">&quot;&gt; 1%&quot;</span>, <span class=\"comment\">// 覆盖99%浏览器</span></span><br><span class=\"line\">  <span class=\"string\">&quot;not dead&quot;</span> <span class=\"comment\">// 已经kill的版本</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-CssMinimizerPlugin压缩css\"><a href=\"#3-CssMinimizerPlugin压缩css\" class=\"headerlink\" title=\"3.CssMinimizerPlugin压缩css\"></a>3.CssMinimizerPlugin压缩css</h3>一般来说，压缩操作在webpack5中都放进optimization中，虽然放在plugins中也可以，不太规范拉。~<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CssMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">          <span class=\"comment\">// 在 webpack@5 中，你可以使用 `...` 语法来扩展现有的 minimizer（即 `terser-webpack-plugin`），将下一行取消注释</span></span><br><span class=\"line\">          <span class=\"comment\">// `...`,</span></span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"title class_\">CssMinimizerPlugin</span>(),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr></li>\n</ul>\n<h2 id=\"常见的loader总结：\"><a href=\"#常见的loader总结：\" class=\"headerlink\" title=\"常见的loader总结：\"></a>常见的loader总结：</h2><ul>\n<li>  <a href=\"https://v4.webpack.js.org/loaders/raw-loader/\"><code>raw-loader</code></a> 将文件导入为字符串</li>\n<li>  <a href=\"https://v4.webpack.js.org/loaders/url-loader/\"><code>url-loader</code></a> 将文件作为 data URI 内联到 bundle 中</li>\n<li>  <a href=\"https://v4.webpack.js.org/loaders/file-loader/\"><code>file-loader</code></a> 发送一个单独的文件并导出 URL</li>\n<li>  各种<code>css-loader</code></li>\n<li> <code>postcss-loader</code>：兼容性处理，需要安装<code>postcss</code>与<code>postcss-loader</code>，配置在css-loader和style-loader之后，在less和sass的前面，这个是固定的噢<br>##常见的plugin总结：</li>\n<li><code>MiniCssExtractPlugin</code>：将style-loader生成的style标签内的css单独提取为文件，注意必须要安装style-loader</li>\n<li><code>CssMinimizerWebpackPlugin</code>: 压缩css</li>\n<li><code>ESLintPlugin</code>：eslint检查</li>\n<li><code>terserWebpackPlugin</code>：压缩代码<hr></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、五大核心概念\"><a href=\"#一、五大核心概念\" class=\"headerlink\" title=\"一、五大核心概念\"></a>一、五大核心概念</h2><p>mode：开发模式development/生产模式production<br>entry：入口，从哪个文件开始编译<br>output：出口<br>plugin：插件<br>loader：写在module中，加载器</p>\n<h2 id=\"二、基本配置\"><a href=\"#二、基本配置\" class=\"headerlink\" title=\"二、基本配置\"></a>二、基本配置</h2><p>固定在根目录，新建一个文件名为<code>webpack.config.js</code>内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>, <span class=\"comment\">// 相对路径</span></span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),<span class=\"comment\">//输出路径，绝对路径</span></span><br><span class=\"line\">        <span class=\"comment\">// __dirname: nodejs的变量，代表当前文件的文件夹目录</span></span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;main.js&#x27;</span>,<span class=\"comment\">//文件名</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            <span class=\"comment\">// loader的配置</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">port</span>: <span class=\"number\">8082</span>,</span><br><span class=\"line\">        <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">static</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;dist&#x27;</span>,<span class=\"string\">&#x27;index.html&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建src文件夹，在src文件夹下建立main.js，然后执行npx webpack就会自动打包。</p>\n<h2 id=\"三、处理资源\"><a href=\"#三、处理资源\" class=\"headerlink\" title=\"三、处理资源\"></a>三、处理资源</h2><p><strong>注：多个loader配合使用时，处理顺序是：从下到上，从右到左 的顺序</strong></p>\n<h3 id=\"1-css\"><a href=\"#1-css\" class=\"headerlink\" title=\"1. css\"></a>1. css</h3><p>因为webpack只能识别js资源，所以要处理css需要用loader<br>如加一个css-loader，先安装css-loader在开发环境中，然后在module中加载rules</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">        <span class=\"comment\">// loader的配置</span></span><br><span class=\"line\">        &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">&#x27;css-loader&#x27;</span> &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>对于一条规则，也可以使用多个loader，在use中配置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对后缀名为css的文件，使用多个loader处理</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"comment\">// [style-loader](/loaders/style-loader)</span></span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// [css-loader](/loaders/css-loader)</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">modules</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// [sass-loader](/loaders/sass-loader)</span></span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;sass-loader&#x27;</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常见的处理样式文件的loader：\"><a href=\"#常见的处理样式文件的loader：\" class=\"headerlink\" title=\"常见的处理样式文件的loader：\"></a>常见的处理样式文件的loader：</h3><p><code>css-loader </code>：处理css文件<br><code>less-loader </code><br><code>sass-loader </code><br><code>style-loader</code>：处理style标签内的样式<br><code>stylus-loader</code>：使用模块化的方法去写css代码<br><a href=\"https://www.stylus-lang.cn/\"><code>stylus</code></a>：是一种写css的方式，没有花括号没有分号，用缩进的方式去代替大括号，后缀名为styl</p>\n<h3 id=\"2-图片资源\"><a href=\"#2-图片资源\" class=\"headerlink\" title=\"2. 图片资源\"></a>2. 图片资源</h3><p>webpack4使用file-loader和url-loader处理图片<br><code>file-loader</code>:将图片转换为webpack能识别的资源。<br><code>url-loader</code>:将小于某个大小的图片转换为base64<br>处理图片并不需要loader，webpack5自带默认处理图片，只需要在loader中配置</p>\n<h3 id=\"3-修改打包资源的路径\"><a href=\"#3-修改打包资源的路径\" class=\"headerlink\" title=\"3. 修改打包资源的路径\"></a>3. 修改打包资源的路径</h3><p>像输出时，默认js、图片等等都会在一个目录中，现在想要配置成其他目录。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),<span class=\"comment\">//所有文件的输出路径，绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\">// __dirname: nodejs的变量，代表当前文件的文件夹目录</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/main.js&#x27;</span>,<span class=\"comment\">//打包入口文件js的文件名，所以如果指定了js/xxx.js，那么入口js文件都会被打包到js目录下</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>重新npx webpack就变成了这样<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d8351f778a8d920a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>######图片资源路径的修改：在module/rules的对应loader中配置generator</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//输出图片名称及目录，hash：唯一id，10代表hash值只取前十位，ext：文件扩展名    </span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;static/images/[hash][ext]&#x27;</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>打包效果：<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6f01c6e5729878cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"4-自动清空上次打包资源\"><a href=\"#4-自动清空上次打包资源\" class=\"headerlink\" title=\"4. 自动清空上次打包资源\"></a>4. 自动清空上次打包资源</h3><p>webpack不会自动删除上次打包内容，可能会造成重叠，文件很多，可以配置每次打包自动删除之前的打包结果。<br>配置方法：clean：true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),<span class=\"comment\">//所有文件的输出路径，绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\">// __dirname: nodejs的变量，代表当前文件的文件夹目录</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/main.js&#x27;</span>,<span class=\"comment\">//打包入口文件js的文件名，所以如果指定了js/xxx.js，那么入口js文件都会被打包到js目录下</span></span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span> </span><br><span class=\"line\">    <span class=\"comment\">// 自动清空上次打包的内容</span></span><br><span class=\"line\">    <span class=\"comment\">// 原理：在打包前，将path整个目录清空，在进行打包输出</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-处理其他资源\"><a href=\"#5-处理其他资源\" class=\"headerlink\" title=\"5.处理其他资源\"></a>5.处理其他资源</h3><p>如视频、字体、excel等等，想统一处理的话，可以如下配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(mp3?4|ttf|avi|doc|rmvb)/</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;assert/resource&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;static/images/[hash:10][ext]&#x27;</span>,</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;,  </span><br></pre></td></tr></table></figure>\n<p>官网对于type: assert的几个值的介绍：</p>\n<blockquote>\n<p>asset/resource 发送一个单独的文件到输入目录并导出 URL。之前通过使用 file-loader 实现。<br>asset/inline 导出一个资源的 data URI（如，base64）。之前通过使用 url-loader 实现。<br>asset/source 导出资源的源代码。之前通过使用 raw-loader 实现。<br>asset 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 url-loader，并且配置资源体积限制实现。</p>\n</blockquote>\n<h3 id=\"6-ESLINT\"><a href=\"#6-ESLINT\" class=\"headerlink\" title=\"6. ESLINT\"></a>6. ESLINT</h3><p><strong>eslint</strong>：用来检测js和jsx语法，可以管理缩进、规则是否正确，让代码更加健壮。<br><strong>配置文件</strong>：eslintrc.js<br>在<strong>webpack4</strong>中使用<code>loader</code>处理。<br>在<strong>webpack5</strong>中使用<code>plugins</code>去处理。</p>\n<h4 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h4><p>根目录新建<code>eslintrc.js</code>，然后在<code>webpack.config.js</code>中配置<code>plugin</code><br>官网文档：<a href=\"https://webpack.docschina.org/plugins/eslint-webpack-plugin/#root\">点击查看</a><br>plugins要用require引入。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ESLintPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;eslint-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ESLintPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 开发时是只需要检查源代码，打包的dist代码是不用检查的。</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n<p>简单的eslintrc.js的配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 继承eslint规则</span></span><br><span class=\"line\">    <span class=\"attr\">extends</span>: [<span class=\"string\">&quot;eslint: recommended&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">env</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">node</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 启用node中的全局变量</span></span><br><span class=\"line\">        <span class=\"attr\">browser</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 启用浏览器的全局变量</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">ecmaVersion</span>: <span class=\"number\">6</span>, <span class=\"comment\">// es6 模块</span></span><br><span class=\"line\">        <span class=\"attr\">sourceType</span>: <span class=\"string\">&#x27;module&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;no-var&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">//不能使用var定义变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果有不需要检查的文件，新建<code>eslintignore</code>可以不检查。</p>\n<h3 id=\"7-babel\"><a href=\"#7-babel\" class=\"headerlink\" title=\"7. babel\"></a>7. babel</h3><p>还是一样，webpack官网搜babel，就会出来babel-loader的配置，复制过来根据自己的需要做修改。<br>根目录新建babel.config.json，其中配置babel</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;targets&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;edge&quot;</span>: <span class=\"string\">&quot;17&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;firefox&quot;</span>: <span class=\"string\">&quot;60&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;chrome&quot;</span>: <span class=\"string\">&quot;67&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;safari&quot;</span>: <span class=\"string\">&quot;11.1&quot;</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;useBuiltIns&quot;</span>: <span class=\"string\">&quot;usage&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;corejs&quot;</span>: <span class=\"string\">&quot;3.6.5&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.m?js$/</span>,</span><br><span class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">      <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不写上面的options，那么会用babel.config.json中的配置去转换代码的。<br><code>@babel/preset-env</code>：智能预设，允许使用最新的js<br><code>@babel/preset-react</code>：用来编译jsx<br><code>@babel/preset-typescript</code>：用来编译ts。</p>\n<p>targets：需要兼容的浏览器版本，可以用这些属性 ：<br><code> android, chrome, deno, edge, electron, firefox, ie, ios, node, opera, rhino, safari, samsung</code><br>也可以设置成一个string，比如<code> &gt; 0.5%, last 2 versions, not dead</code> 意思是有大于百分之零点五的人使用，前两个版本，并且没有废弃</p>\n<p><code>useBuiltIns</code>有几个值<br><code>false</code>：默认值，不做任何语法转换<br><code>usage Babel</code>：将检查你的所有代码，以便查找targets环境中缺失的功能，然后只把必须的 polyfill 包含进来<br><code>entry</code>：引入所有的polyfill包，必须在入口文件加入 import “core-js/stable” 才会生效</p>\n<p><code>useBuiltIns</code> 需要搭配 <code>core-js</code>，并且需要在配置文件里面声明。目前<code>core-js</code>最新版本是<code>3.x</code>，也可以指定<code>2.x</code>。<br>npm i core-js -S<br> “corejs”: “3.6.5”</p>\n<h3 id=\"8-处理html\"><a href=\"#8-处理html\" class=\"headerlink\" title=\"8. 处理html\"></a>8. 处理html</h3><p><a href=\"https://webpack.docschina.org/plugins/html-webpack-plugin/#root\">点击查看</a><br>首先js打包文件可能名字是动态生成的，需要自动引入js到html，才会确保不出错的<br>所以可以自动生成index.html文件，插件为<code>HtmlWebpackPlugin</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class=\"line\">const path = require(&#x27;path&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &#x27;index.js&#x27;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, &#x27;./dist&#x27;),</span><br><span class=\"line\">    filename: &#x27;index_bundle.js&#x27;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: path.resolve(__dirname,&#x27;index.html&#x27;)</span><br><span class=\"line\">        &#125;)],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>首先插件会自动生成一个index.html，template中写的index.html意思是通过template里的这个index.html生成一个index.html到dist目录中，所以两个不是一个意思。</p>\n<h2 id=\"三、搭建开发服务器\"><a href=\"#三、搭建开发服务器\" class=\"headerlink\" title=\"三、搭建开发服务器\"></a>三、搭建开发服务器</h2><p>安装<code>webpack-dev-server</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8082</span>,</span><br><span class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">static</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;dist&#x27;</span>,<span class=\"string\">&#x27;index.html&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、生产模式的搭建\"><a href=\"#四、生产模式的搭建\" class=\"headerlink\" title=\"四、生产模式的搭建\"></a>四、生产模式的搭建</h2><p>生产模式也就是线上实际使用的代码，会被压缩。因为体积小，加载就快。<br>一般会新建一个<code>config/webpack.dev.js</code>做开发环境的搭建。<br>一般会新建一个<code>config/webpack.prod.js</code>做线上环境的搭建。<br>然后建立<code>webpack.config.js</code>，将两个配置引入。</p>\n<h4 id=\"改动的主要地方\"><a href=\"#改动的主要地方\" class=\"headerlink\" title=\"改动的主要地方\"></a>改动的主要地方</h4><p>1、如果配置文件新建一个文件夹放起来，那么需要将所有绝对路径改为上层路径。<br>2、mode的更改<br>3、开发模式删除output，生产模式删除devServer</p>\n<h4 id=\"常见打包命令：\"><a href=\"#常见打包命令：\" class=\"headerlink\" title=\"常见打包命令：\"></a>常见打包命令：</h4><p><code>npx webpack</code>：自动打包命令<br><code>npx webpack serve --config ./config/webpack.dev.js</code>  ：运行./config/目录下的<code>webpack.dev.js</code>配置文件，并启动服务<br><code>npx webpack --config ./config/webpack.prod.js</code> ： 运行./config/目录下的<code>webpack.prod.js</code>配置文件</p>\n<h2 id=\"五、css处理\"><a href=\"#五、css处理\" class=\"headerlink\" title=\"五、css处理\"></a>五、css处理</h2><h3 id=\"1-css单独提取\"><a href=\"#1-css单独提取\" class=\"headerlink\" title=\"1. css单独提取\"></a>1. css单独提取</h3><h4 id=\"之前处理css的方法：\"><a href=\"#之前处理css的方法：\" class=\"headerlink\" title=\"之前处理css的方法：\"></a>之前处理css的方法：</h4><p>是将css用<code>css-loader</code>变为webpack可识别的文件后<br>在入口文件<code>main.js</code>使用<code>imort</code>引入css<br>再使用<code>style-loader</code>将css转换为网页中的style内联标签<br>####使用<code>MiniCssExtractPlugin</code>：<br>将<code>style-loader</code>生成的style标签内的css单独提取为css文件，注意必须要安装<code>style-loader</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>()],</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>入口文件main.js中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./style.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>注：</strong></p>\n<ul>\n<li>要生成页面内style标签的形式，那么<code>css-loader</code>和<code>style-loader</code>要同时使用。</li>\n<li>要生成单独的css文件，那<code>css-loader</code>和<code>miniCssExtractPlugin.loader</code>要同时使用。（不用style-loader）<h3 id=\"2-兼容性处理\"><a href=\"#2-兼容性处理\" class=\"headerlink\" title=\"2. 兼容性处理\"></a>2. 兼容性处理</h3><code>postcss-loader</code>：兼容性处理，需要安装<code>postcss</code>与<code>postcss-loader</code>，配置在css-loader和style-loader之后，在less和sass的前面，这个是固定的噢<br>在package.json中，配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;browserslist&quot;</span>: [</span><br><span class=\"line\">  <span class=\"string\">&quot;ie &gt;= 8&quot;</span> <span class=\"comment\">// 需要兼容ie8以上的兼容</span></span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n然后按照官网去配置loader<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;postcss-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">postcssOptions</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">                  [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;postcss-preset-env&#x27;</span>,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      <span class=\"comment\">// 其他选项</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                ],</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;browserslist&quot;</span>: [</span><br><span class=\"line\">  <span class=\"string\">&quot;last 2 version&quot;</span>, <span class=\"comment\">// 兼容所有浏览器厂商的最近两个版本</span></span><br><span class=\"line\">  <span class=\"string\">&quot;&gt; 1%&quot;</span>, <span class=\"comment\">// 覆盖99%浏览器</span></span><br><span class=\"line\">  <span class=\"string\">&quot;not dead&quot;</span> <span class=\"comment\">// 已经kill的版本</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-CssMinimizerPlugin压缩css\"><a href=\"#3-CssMinimizerPlugin压缩css\" class=\"headerlink\" title=\"3.CssMinimizerPlugin压缩css\"></a>3.CssMinimizerPlugin压缩css</h3>一般来说，压缩操作在webpack5中都放进optimization中，虽然放在plugins中也可以，不太规范拉。~<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CssMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">          <span class=\"comment\">// 在 webpack@5 中，你可以使用 `...` 语法来扩展现有的 minimizer（即 `terser-webpack-plugin`），将下一行取消注释</span></span><br><span class=\"line\">          <span class=\"comment\">// `...`,</span></span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"title class_\">CssMinimizerPlugin</span>(),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr></li>\n</ul>\n<h2 id=\"常见的loader总结：\"><a href=\"#常见的loader总结：\" class=\"headerlink\" title=\"常见的loader总结：\"></a>常见的loader总结：</h2><ul>\n<li>  <a href=\"https://v4.webpack.js.org/loaders/raw-loader/\"><code>raw-loader</code></a> 将文件导入为字符串</li>\n<li>  <a href=\"https://v4.webpack.js.org/loaders/url-loader/\"><code>url-loader</code></a> 将文件作为 data URI 内联到 bundle 中</li>\n<li>  <a href=\"https://v4.webpack.js.org/loaders/file-loader/\"><code>file-loader</code></a> 发送一个单独的文件并导出 URL</li>\n<li>  各种<code>css-loader</code></li>\n<li> <code>postcss-loader</code>：兼容性处理，需要安装<code>postcss</code>与<code>postcss-loader</code>，配置在css-loader和style-loader之后，在less和sass的前面，这个是固定的噢<br>##常见的plugin总结：</li>\n<li><code>MiniCssExtractPlugin</code>：将style-loader生成的style标签内的css单独提取为文件，注意必须要安装style-loader</li>\n<li><code>CssMinimizerWebpackPlugin</code>: 压缩css</li>\n<li><code>ESLintPlugin</code>：eslint检查</li>\n<li><code>terserWebpackPlugin</code>：压缩代码<hr></li>\n</ul>\n"},{"title":"【webpack5】进阶部分总结（一）","date":"2021-05-31T00:31:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n## SourceMap\n#### 1. 解决问题：\n报错时，报错的是编译后的代码，不好调试。\n#### 2. SourceMap是什么：\n**源代码映射**，包含源代码和构建后代码每一行每一列的代码映射关系。\n它会生成一个```xxx.map```，当构建后代码出错了，会通过```xxx.map```从构建后代码出错位置，找到映射后源代码出错位置。\n#### 3. 使用方法：\n在webpack的devTool文档中，souceMap的值有很多种情况，但实际开发只关心两种情况\n##### · 开发环境：cheap-module-source-map\n只包含行映射，打包编译速度快。\n```javascript\nmodule.exports = {\n  mode: 'development',\n  devtool: 'cheap-module-source-map'\n}\n```\n##### · 生产环境：source-map\n包含行列映射，打包编译速度慢\n```javascript\nmodule.exports = {\n  mode: 'production',\n  devtool: 'source-map'\n}\n```\n生产环境下必须得关注列，因为生成模式下代码就压缩成一行了，不关注列根本不知道在哪里报错。\n![生成的map文件](https://upload-images.jianshu.io/upload_images/20892169-d58c436d3e0b7a24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## HMR：热模块替换\n**hot module replacement**：提升打包构建速度\n**解决痛点**：如果只修改了某个模块代码，webpack会将所有模块重新打包，那会很慢。当项目很大的时候，打包速度会越来越慢，所以需要更快些。\n配置方法：其实是默认的，不需要去写hot:true也可以。\n\n```javascript\n    devServer: {\n        hot:true\n    },\n```\n\n当设置了hot: false时，那么在修改文件时（css），其实整个文件是会重新打包的（浏览器会刷新）。\njs即使开启了热模块替换（HMR），修改了还是会整个重新加载\n## one of：每个文件只能被其中一个loader处理\nwebpack的loader会被每个文件匹配一遍，性能会很慢。当确认某个文件只会被一种loader处理时，那么设置匹配到一个loader之后，就不再处理下面的loader。这样也可以提升性能。\n写法：\n```javascript\nmodule: {\n        rules: [\n            // loader的配置\n            { \n                oneOf: {\n                  { test: /\\.ts$/, use: 'ts-loader' },\n                }\n             }\n        ]\n}\n```\n## include exclude\n开发时会使用第三方的库或插件，比如echarts、lodash等。他们是已经编译好的，在node_modules中，所以处理js文件时，要排除node_modules的文件。\n```javascript\n            {\n                test: /\\.m?js$/,\n                exclude: /(node_modules|bower_components)/, // 排除什么文件夹不处理\n              // include: path.resolve(__dirname,'../src') // 只处理src下的文件。include和exclude不能并存。\n                use: {\n                  loader: 'babel-loader',\n                //   options: {\n                //     presets: ['@babel/preset-env']\n                //   }\n                }\n            }   \n```\n## ESlint和Babel的缓存：\n每次打包都要重新检查eslint和babel编译会损耗性能，所以可以开启缓存。只有第一次打包需要检查eslint和编译babel，之后再次修改只检查和编译修改过的文件即可了。\n```javascript\n           \n                use: {\n                  loader: 'babel-loader',\n                  options: {\n                    presets: ['@babel/preset-env']\n                  },\n                  cacheDirectory: true, // 开启babel缓存\n                  cacheCompression: false // 关闭缓存文件压缩\n```\n```javascript\n  new ESLintPlugin({\n      context: path.resolve(__dirname, '../src'),\n      exclude: 'node_modules', //不处理node_modules下的文件\n      cache: true, // 是否开启缓存\n      cacheLocation: path.resolve(__dirname,'../node_modules/.cache/eslintcache') // 缓存到哪里\n  }),\n```\n## Thread 多进程\n现在处理js文件，基本都是用eslint先检查，在用babel编译，再用terser压缩。文件大的时候会比较慢。\n现在的cpu都是多核的，可以启动多进程。\n###1. 安装thread\nsudo cnpm i thread-loader\n###2. 引入thread-loader\n位置放在需要处理的loader的前面，比如babel-loader前面。\nworks: threads\n```javascript\nconst os = require(\"os\")\nconst threads = os.cpus().length; //cpu核数```\n```\n```javascript\n          use: [\n                  {\n                    loader: 'thread-loader',\n                    options: {\n                      works: threads\n                    }\n                  },\n                  {\n                    loader: 'babel-loader',\n                    options: {\n                      presets: ['@babel/preset-env'],\n                      cacheDirectory: true, // 开启babel缓存\n                      cacheCompression: false // 关闭缓存文件压缩\n                    },\n                  }\n                ]\n```\neslint 中\n```javascript\n        new ESLintPlugin({\n            context: path.resolve(__dirname, '../src'),\n            exclude: 'node_modules', //不处理node_modules下的文件\n            cache: true, // 是否开启缓存\n            cacheLocation: path.resolve(__dirname,'../node_modules/.cache/eslintcache'), // 缓存到哪里\n            threads // 开启多进程和设置进程数量\n        }),\n```\n压缩代码使用的terser虽然是默认的，但如果想用多线程处理，就也需要写出来\n```javascript\n        const terserWebpackPlugin = require('tearser-webpack-plugin')\n```\noptimization中（or plugins中）\n```javascript\n        new terserWebpackPlugin({\n          parallel: threads // 开启多进程和设置进程数量\n        })\n```\n文件少的时候没有必要开启，反而更慢的。因为进程启动也是需要时间的。\n### Tree Shaking\ntree shaking依赖js模块化，不能用于commonjs，**用于描述和移除没有用到的js代码**\n自动配置，无需手动配置。\n\n## 减少Babel生成文件的体积 babel-runtime\n[点击查看](https://zhuanlan.zhihu.com/p/394783228)\nbabel对一些公共方法使用了辅助代码，默认情况下辅助代码会被添加到每一个需要它的文件中，这样会使打包体积非常大。\n为了避免这样的情况，可以将这些辅助函数提出到一个npm包中，然后在用到的时候，再单独引入，这样就做到了复用。\n这个包就是@babel/runtime，之后每次需要用辅助代码转换时，require进去这个包，就可以减少代码体积。\n\n如：\n下面这段代码是class语法被转译时加入的辅助代码，如果每个需要转译的class就这么长，代码体积就会很大。\n```javascript\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n```\n下面是使用@babel/runtime包后，用require引入的方式，替代了上面的辅助代码片段，可以看到使用这种方式代码比较简洁。\n```javascript\n  var _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n  var _defineProperties = require(\"@babel/runtime/helpers/defineProperties\");\n  var _createClass = require(\"@babel/runtime/helpers/createClass\");\n```\n但如果每个用到的地方都去手动替换这个包引入，出错几率大，所以就有了`@babel/plugin-transform-runtime`这个包。可以帮我们自动在需要的地方引入。\n`@babel/plugin-transform-runtime`：禁用了babel自动对每个文件的runtime注入，并且使所有辅助代码从这个包引入\n\n## 压缩图片\n一个插件。\n## CodeSplit多入口\n### 1. 配置方法\n`entry`改为对象，`output`的`filename`换成`[name].js`\n```javascript\n    entry: {\n        app: './src/js/app.js',\n        main: './src/js/main.js'\n    },\n    output: {\n        path: path.resolve(__dirname,'./dist'),\n        filename: '[name].js',\n        clean: true\n    },\n```\n### 2. 提取公共模块\n如果所有的js都在一个文件中，体积太大了。如果只需要渲染首页js，其他文件不应该加载。\n所以进行代码分割，生成多个js文件，渲染哪个文件就用哪个js。\n\n单入口：\n```javascript\n        // 单入口时候的配置，影响的只有node_modules引入的第三方代码和动态加载的代码会单独生成\n        optimization: {\n          splitChunks: {\n              chunks: 'all', // all/async/initial, \n              // all: 既处理动态引入的模块 import('')，也处理直接引入的模块 import xxx from ''\n              // async: 只处理动态引入的模块\n              // initial: 这个值表示项目中被直接引入的模块将会被用于优化。\n\n\n          }\n        }\n```\n多入口：\n```javascript\n    optimization: {\n        splitChunks: {\n            chunks: 'async', // all/async\n            minSize: 20000, // 分割代码最小的大小\n            minRemainingSize: 0, // minSize，最后确保读取的文件大小不为零 \n            minChunks: 1, // 至少被引用的次数\n            maxAsyncRequests: 30, // 按需加载时并行加载的最大数量\n            maxInitialRequests: 30, // 入口js文件最大并行请求数量\n            enforceSizeThreshold: 50000, // 超过该值一定会单独打包（此时忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）\n            cacheGroups: { // 哪些模块打包到一个组\n              defaultVendors: { // 组名\n                test: /[\\\\/]node_modules[\\\\/]/,  // 需要打包到一起的模块\n                priority: -10, // 权重（越大越优先）\n                reuseExistingChunk: true, // 如果当时chunk已经包含从主bundle中拆分出的模块，则被重用而不是生成新模块\n              },\n              default: {    // 其他没有写的配置会使用上面的默认值\n                minChunks: 2, // 这里的minchunks权重更大\n                priority: -20,\n                reuseExistingChunk: true,\n              },\n            },\n          },\n    },\n```\n打包出来如图：\n![](https://upload-images.jianshu.io/upload_images/20892169-6c2bf3132c984613.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 3. 按需加载js\n有些暂时不需要加载的文件，如果一出来就加载，会阻塞之后的资源。\n所以可以在需要的时候再加载。\n\n#### 我新建了一个count文件，内容如下：\n```javascript\nexport let count = 1\n```\n在入口文件中动态加载count。\n```javascript\ndocument.querySelector('.button').addEventListener('click',function(){\n    import('./count') // 动态加载的模块会单独打包\n    .then((res)=>{ \n        console.log('succeed!',res.count)\n    })\n    .catch((res)=>{\n        console.log('failed!',res)\n    })\n    console.log(count)\n})\n```\n#### 效果：原本是七个js文件\n\n![](https://upload-images.jianshu.io/upload_images/20892169-2f048649a96409b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####点击后加载第八个js文件\n\n![](https://upload-images.jianshu.io/upload_images/20892169-e7790e6714154eee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####内容是`count`\n![](https://upload-images.jianshu.io/upload_images/20892169-03618487580c249a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 如果动态导入的是函数的话，用`res.函数名`调用\n### 4. 为动态导入的模块在编译时重命名\nwebpack默认是可以给动态模块命名的，但有点丑。\n![](https://upload-images.jianshu.io/upload_images/20892169-f383556105a961a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果想自己命名的话可以使用**内联注释**\n```javascript\n /* webpackChunkName: \"my-chunk-name\" */\n```\n#### 具体的方法：\n##### （1） 动态引入的时候这样写\n```javascript\n  import(/* webpackChunkName: \"printString\" */'./printString')\n\n```\n##### （2） 在output中配置`chunkFilename`\n```javascript\n    output: {\n        path: path.resolve(__dirname,'./dist'),\n        filename: '[name].js',\n        // 为打包输出的其他文件命名\n        chunkFilename: 'static/js/[name].js',\n        clean: true\n    },\n```\n##### （3）再次打包，名字就会变成自己的命名了\n![](https://upload-images.jianshu.io/upload_images/20892169-5bd94dae34918b27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 5. codesplit 统一命名\n对入口文件来说，可以叫main.js，为了方便开发，像chunk文件可以加一个.chunk.js，然后所有的媒体文件，如果每一个loader里面都去单独指定一遍，会比较麻烦。\n此时可以在output中配置\n```javascript\nassetModuleFilename: 'static/media/[hash:10][ext][query]',  // 所有loader编译的静态资源的打包名字\n\n```\n### 6. preload与prefetch\n#### 共同点：\n* 两者的概念都是预加载，缓存下来资源\n* 只加载不执行\n* 都有缓存\n* 兼容性都很差\n####区别：\n* preload：告诉浏览器立即加载资源\n* prefetch：告诉浏览器在空闲时加载资源\n* preload优先级高，prefetch优先级低。\n* preload只能加载当前页面用的，prefetch可以加载之后页面用的。\n现阶段使用[`preload-webpack-plugin`](https://www.npmjs.com/package/preload-webpack-plugin)插件\n\n## 7. network cache\n\n## 8. Core.js\nbabel可以转箭头函数、...这样的，但无法转换async、await、promise，这时就需要core.js。\n### 1. 什么是corejs?\ncore-js 它是JavaScript标准库的 polyfill（垫片/补丁）, 新功能的es'api'转换为大部分现代浏览器都可以支持\n运行的一个'api' 补丁包集合。\n### 2. 使用方法\n#### （1）直接引进\n首先安装corejs\n```javascript\nsudo cnpm install core-js\n```\n然后在入口引入\nimport 'core-js'\n这种方法的坏处是会将core-js全部引入，会使得包体积很大。所以一般不会这样引。\n#### （2）按需引进\n将需要的引进去即可。\n比如用promise，那么就写\n```javascript\nimport 'core-js/es6/promise'\n```\n安装后是有提示的，不用背。\n![](https://upload-images.jianshu.io/upload_images/20892169-3d7e0d3573d23bac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### （3）智能引进\n配合babel使用。\n在babel.config.js中配置\n```javascript\n  {\n    \"presets\": [\n      [\n        \"@babel/preset-env\",\n        {\n          \"useBuiltIns\": \"entry\",\n          \"corejs\": 3,\n          \"targets\": {\n            \"edge\": \"17\",\n            \"firefox\": \"60\",\n            \"chrome\": \"67\",\n            \"safari\": \"11.1\"\n          },\n          \"useBuiltIns\": \"usage\",\n          \"corejs\": \"3.6.5\"\n        }\n      ]\n    ]\n  }\n```\n## PWA 渐进式网络应用程序\n基于serviceworker实现，但也有很严重的兼容性问题\n点击访问[官网](https://webpack.docschina.org/guides/progressive-web-application/#conclusion)\n项目离线时候也可以访问。\n\n### 1. 安装\n```javascript\nsudo cnpm install workbox-webpack-plugin --save-dev\n```\n### 2. 在入口文件引入\n```javascript\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker.register('/service-worker.js').then(registration => {\n        console.log('SW registered: ', registration);\n      }).catch(registrationError => {\n        console.log('SW registration failed: ', registrationError);\n      });\n    });\n  }\n```\n### 3. 配置webpack插件\n```javascript\nconst WorkboxPlugin = require('workbox-webpack-plugin');\nplugins: [\n\n        new WorkboxPlugin.GenerateSW({\n          // 这些选项帮助快速启用 ServiceWorkers\n          // 不允许遗留任何“旧的” ServiceWorkers\n          clientsClaim: true,\n          skipWaiting: true,\n        }),\n]\n```\n### 4. 重新打包\n会自动在dist目录下生成service相关文件如图\n![](https://upload-images.jianshu.io/upload_images/20892169-2bd8bf911730ed27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 5. 看效果\n（1）由于service在dist目录下，所以需要在dist目录部署时才能使用。\n（2）使用http-server在dist目录下可以模拟启动一个服务器。\n![](https://upload-images.jianshu.io/upload_images/20892169-86b0852d67b1ab18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n（3）在network这里调成ofline，可以模拟断网，刷新后，会发现页面还是会加载。\n![](https://upload-images.jianshu.io/upload_images/20892169-fc5a5c47b69b013d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n由于兼容性差，所以现在的普及率不大。\n\n## module chunk bundle的区别\nModule：能被import的文件，都是模块，无论是js、图片或者别的。在webpack中一切都是模块。\nChunk：是多个模块组合而成的，如entry、splitChunk。\nentry是入口文件，入口文件中import的模块可能不止一个，所以是多个模块组合而成。\nsplitChunk是提取公共代码，很多需要提取的代码被import，所以是多个模块组合而成的。\nBundle：最终的输出文件。\n","source":"_posts/cxy/webpack/webpack2.md","raw":"---\ntitle: '【webpack5】进阶部分总结（一）'\ndate: 2021-05-31 08:31:49\ntags: webpack\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## SourceMap\n#### 1. 解决问题：\n报错时，报错的是编译后的代码，不好调试。\n#### 2. SourceMap是什么：\n**源代码映射**，包含源代码和构建后代码每一行每一列的代码映射关系。\n它会生成一个```xxx.map```，当构建后代码出错了，会通过```xxx.map```从构建后代码出错位置，找到映射后源代码出错位置。\n#### 3. 使用方法：\n在webpack的devTool文档中，souceMap的值有很多种情况，但实际开发只关心两种情况\n##### · 开发环境：cheap-module-source-map\n只包含行映射，打包编译速度快。\n```javascript\nmodule.exports = {\n  mode: 'development',\n  devtool: 'cheap-module-source-map'\n}\n```\n##### · 生产环境：source-map\n包含行列映射，打包编译速度慢\n```javascript\nmodule.exports = {\n  mode: 'production',\n  devtool: 'source-map'\n}\n```\n生产环境下必须得关注列，因为生成模式下代码就压缩成一行了，不关注列根本不知道在哪里报错。\n![生成的map文件](https://upload-images.jianshu.io/upload_images/20892169-d58c436d3e0b7a24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## HMR：热模块替换\n**hot module replacement**：提升打包构建速度\n**解决痛点**：如果只修改了某个模块代码，webpack会将所有模块重新打包，那会很慢。当项目很大的时候，打包速度会越来越慢，所以需要更快些。\n配置方法：其实是默认的，不需要去写hot:true也可以。\n\n```javascript\n    devServer: {\n        hot:true\n    },\n```\n\n当设置了hot: false时，那么在修改文件时（css），其实整个文件是会重新打包的（浏览器会刷新）。\njs即使开启了热模块替换（HMR），修改了还是会整个重新加载\n## one of：每个文件只能被其中一个loader处理\nwebpack的loader会被每个文件匹配一遍，性能会很慢。当确认某个文件只会被一种loader处理时，那么设置匹配到一个loader之后，就不再处理下面的loader。这样也可以提升性能。\n写法：\n```javascript\nmodule: {\n        rules: [\n            // loader的配置\n            { \n                oneOf: {\n                  { test: /\\.ts$/, use: 'ts-loader' },\n                }\n             }\n        ]\n}\n```\n## include exclude\n开发时会使用第三方的库或插件，比如echarts、lodash等。他们是已经编译好的，在node_modules中，所以处理js文件时，要排除node_modules的文件。\n```javascript\n            {\n                test: /\\.m?js$/,\n                exclude: /(node_modules|bower_components)/, // 排除什么文件夹不处理\n              // include: path.resolve(__dirname,'../src') // 只处理src下的文件。include和exclude不能并存。\n                use: {\n                  loader: 'babel-loader',\n                //   options: {\n                //     presets: ['@babel/preset-env']\n                //   }\n                }\n            }   \n```\n## ESlint和Babel的缓存：\n每次打包都要重新检查eslint和babel编译会损耗性能，所以可以开启缓存。只有第一次打包需要检查eslint和编译babel，之后再次修改只检查和编译修改过的文件即可了。\n```javascript\n           \n                use: {\n                  loader: 'babel-loader',\n                  options: {\n                    presets: ['@babel/preset-env']\n                  },\n                  cacheDirectory: true, // 开启babel缓存\n                  cacheCompression: false // 关闭缓存文件压缩\n```\n```javascript\n  new ESLintPlugin({\n      context: path.resolve(__dirname, '../src'),\n      exclude: 'node_modules', //不处理node_modules下的文件\n      cache: true, // 是否开启缓存\n      cacheLocation: path.resolve(__dirname,'../node_modules/.cache/eslintcache') // 缓存到哪里\n  }),\n```\n## Thread 多进程\n现在处理js文件，基本都是用eslint先检查，在用babel编译，再用terser压缩。文件大的时候会比较慢。\n现在的cpu都是多核的，可以启动多进程。\n###1. 安装thread\nsudo cnpm i thread-loader\n###2. 引入thread-loader\n位置放在需要处理的loader的前面，比如babel-loader前面。\nworks: threads\n```javascript\nconst os = require(\"os\")\nconst threads = os.cpus().length; //cpu核数```\n```\n```javascript\n          use: [\n                  {\n                    loader: 'thread-loader',\n                    options: {\n                      works: threads\n                    }\n                  },\n                  {\n                    loader: 'babel-loader',\n                    options: {\n                      presets: ['@babel/preset-env'],\n                      cacheDirectory: true, // 开启babel缓存\n                      cacheCompression: false // 关闭缓存文件压缩\n                    },\n                  }\n                ]\n```\neslint 中\n```javascript\n        new ESLintPlugin({\n            context: path.resolve(__dirname, '../src'),\n            exclude: 'node_modules', //不处理node_modules下的文件\n            cache: true, // 是否开启缓存\n            cacheLocation: path.resolve(__dirname,'../node_modules/.cache/eslintcache'), // 缓存到哪里\n            threads // 开启多进程和设置进程数量\n        }),\n```\n压缩代码使用的terser虽然是默认的，但如果想用多线程处理，就也需要写出来\n```javascript\n        const terserWebpackPlugin = require('tearser-webpack-plugin')\n```\noptimization中（or plugins中）\n```javascript\n        new terserWebpackPlugin({\n          parallel: threads // 开启多进程和设置进程数量\n        })\n```\n文件少的时候没有必要开启，反而更慢的。因为进程启动也是需要时间的。\n### Tree Shaking\ntree shaking依赖js模块化，不能用于commonjs，**用于描述和移除没有用到的js代码**\n自动配置，无需手动配置。\n\n## 减少Babel生成文件的体积 babel-runtime\n[点击查看](https://zhuanlan.zhihu.com/p/394783228)\nbabel对一些公共方法使用了辅助代码，默认情况下辅助代码会被添加到每一个需要它的文件中，这样会使打包体积非常大。\n为了避免这样的情况，可以将这些辅助函数提出到一个npm包中，然后在用到的时候，再单独引入，这样就做到了复用。\n这个包就是@babel/runtime，之后每次需要用辅助代码转换时，require进去这个包，就可以减少代码体积。\n\n如：\n下面这段代码是class语法被转译时加入的辅助代码，如果每个需要转译的class就这么长，代码体积就会很大。\n```javascript\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n```\n下面是使用@babel/runtime包后，用require引入的方式，替代了上面的辅助代码片段，可以看到使用这种方式代码比较简洁。\n```javascript\n  var _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n  var _defineProperties = require(\"@babel/runtime/helpers/defineProperties\");\n  var _createClass = require(\"@babel/runtime/helpers/createClass\");\n```\n但如果每个用到的地方都去手动替换这个包引入，出错几率大，所以就有了`@babel/plugin-transform-runtime`这个包。可以帮我们自动在需要的地方引入。\n`@babel/plugin-transform-runtime`：禁用了babel自动对每个文件的runtime注入，并且使所有辅助代码从这个包引入\n\n## 压缩图片\n一个插件。\n## CodeSplit多入口\n### 1. 配置方法\n`entry`改为对象，`output`的`filename`换成`[name].js`\n```javascript\n    entry: {\n        app: './src/js/app.js',\n        main: './src/js/main.js'\n    },\n    output: {\n        path: path.resolve(__dirname,'./dist'),\n        filename: '[name].js',\n        clean: true\n    },\n```\n### 2. 提取公共模块\n如果所有的js都在一个文件中，体积太大了。如果只需要渲染首页js，其他文件不应该加载。\n所以进行代码分割，生成多个js文件，渲染哪个文件就用哪个js。\n\n单入口：\n```javascript\n        // 单入口时候的配置，影响的只有node_modules引入的第三方代码和动态加载的代码会单独生成\n        optimization: {\n          splitChunks: {\n              chunks: 'all', // all/async/initial, \n              // all: 既处理动态引入的模块 import('')，也处理直接引入的模块 import xxx from ''\n              // async: 只处理动态引入的模块\n              // initial: 这个值表示项目中被直接引入的模块将会被用于优化。\n\n\n          }\n        }\n```\n多入口：\n```javascript\n    optimization: {\n        splitChunks: {\n            chunks: 'async', // all/async\n            minSize: 20000, // 分割代码最小的大小\n            minRemainingSize: 0, // minSize，最后确保读取的文件大小不为零 \n            minChunks: 1, // 至少被引用的次数\n            maxAsyncRequests: 30, // 按需加载时并行加载的最大数量\n            maxInitialRequests: 30, // 入口js文件最大并行请求数量\n            enforceSizeThreshold: 50000, // 超过该值一定会单独打包（此时忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）\n            cacheGroups: { // 哪些模块打包到一个组\n              defaultVendors: { // 组名\n                test: /[\\\\/]node_modules[\\\\/]/,  // 需要打包到一起的模块\n                priority: -10, // 权重（越大越优先）\n                reuseExistingChunk: true, // 如果当时chunk已经包含从主bundle中拆分出的模块，则被重用而不是生成新模块\n              },\n              default: {    // 其他没有写的配置会使用上面的默认值\n                minChunks: 2, // 这里的minchunks权重更大\n                priority: -20,\n                reuseExistingChunk: true,\n              },\n            },\n          },\n    },\n```\n打包出来如图：\n![](https://upload-images.jianshu.io/upload_images/20892169-6c2bf3132c984613.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 3. 按需加载js\n有些暂时不需要加载的文件，如果一出来就加载，会阻塞之后的资源。\n所以可以在需要的时候再加载。\n\n#### 我新建了一个count文件，内容如下：\n```javascript\nexport let count = 1\n```\n在入口文件中动态加载count。\n```javascript\ndocument.querySelector('.button').addEventListener('click',function(){\n    import('./count') // 动态加载的模块会单独打包\n    .then((res)=>{ \n        console.log('succeed!',res.count)\n    })\n    .catch((res)=>{\n        console.log('failed!',res)\n    })\n    console.log(count)\n})\n```\n#### 效果：原本是七个js文件\n\n![](https://upload-images.jianshu.io/upload_images/20892169-2f048649a96409b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####点击后加载第八个js文件\n\n![](https://upload-images.jianshu.io/upload_images/20892169-e7790e6714154eee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####内容是`count`\n![](https://upload-images.jianshu.io/upload_images/20892169-03618487580c249a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 如果动态导入的是函数的话，用`res.函数名`调用\n### 4. 为动态导入的模块在编译时重命名\nwebpack默认是可以给动态模块命名的，但有点丑。\n![](https://upload-images.jianshu.io/upload_images/20892169-f383556105a961a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果想自己命名的话可以使用**内联注释**\n```javascript\n /* webpackChunkName: \"my-chunk-name\" */\n```\n#### 具体的方法：\n##### （1） 动态引入的时候这样写\n```javascript\n  import(/* webpackChunkName: \"printString\" */'./printString')\n\n```\n##### （2） 在output中配置`chunkFilename`\n```javascript\n    output: {\n        path: path.resolve(__dirname,'./dist'),\n        filename: '[name].js',\n        // 为打包输出的其他文件命名\n        chunkFilename: 'static/js/[name].js',\n        clean: true\n    },\n```\n##### （3）再次打包，名字就会变成自己的命名了\n![](https://upload-images.jianshu.io/upload_images/20892169-5bd94dae34918b27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 5. codesplit 统一命名\n对入口文件来说，可以叫main.js，为了方便开发，像chunk文件可以加一个.chunk.js，然后所有的媒体文件，如果每一个loader里面都去单独指定一遍，会比较麻烦。\n此时可以在output中配置\n```javascript\nassetModuleFilename: 'static/media/[hash:10][ext][query]',  // 所有loader编译的静态资源的打包名字\n\n```\n### 6. preload与prefetch\n#### 共同点：\n* 两者的概念都是预加载，缓存下来资源\n* 只加载不执行\n* 都有缓存\n* 兼容性都很差\n####区别：\n* preload：告诉浏览器立即加载资源\n* prefetch：告诉浏览器在空闲时加载资源\n* preload优先级高，prefetch优先级低。\n* preload只能加载当前页面用的，prefetch可以加载之后页面用的。\n现阶段使用[`preload-webpack-plugin`](https://www.npmjs.com/package/preload-webpack-plugin)插件\n\n## 7. network cache\n\n## 8. Core.js\nbabel可以转箭头函数、...这样的，但无法转换async、await、promise，这时就需要core.js。\n### 1. 什么是corejs?\ncore-js 它是JavaScript标准库的 polyfill（垫片/补丁）, 新功能的es'api'转换为大部分现代浏览器都可以支持\n运行的一个'api' 补丁包集合。\n### 2. 使用方法\n#### （1）直接引进\n首先安装corejs\n```javascript\nsudo cnpm install core-js\n```\n然后在入口引入\nimport 'core-js'\n这种方法的坏处是会将core-js全部引入，会使得包体积很大。所以一般不会这样引。\n#### （2）按需引进\n将需要的引进去即可。\n比如用promise，那么就写\n```javascript\nimport 'core-js/es6/promise'\n```\n安装后是有提示的，不用背。\n![](https://upload-images.jianshu.io/upload_images/20892169-3d7e0d3573d23bac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### （3）智能引进\n配合babel使用。\n在babel.config.js中配置\n```javascript\n  {\n    \"presets\": [\n      [\n        \"@babel/preset-env\",\n        {\n          \"useBuiltIns\": \"entry\",\n          \"corejs\": 3,\n          \"targets\": {\n            \"edge\": \"17\",\n            \"firefox\": \"60\",\n            \"chrome\": \"67\",\n            \"safari\": \"11.1\"\n          },\n          \"useBuiltIns\": \"usage\",\n          \"corejs\": \"3.6.5\"\n        }\n      ]\n    ]\n  }\n```\n## PWA 渐进式网络应用程序\n基于serviceworker实现，但也有很严重的兼容性问题\n点击访问[官网](https://webpack.docschina.org/guides/progressive-web-application/#conclusion)\n项目离线时候也可以访问。\n\n### 1. 安装\n```javascript\nsudo cnpm install workbox-webpack-plugin --save-dev\n```\n### 2. 在入口文件引入\n```javascript\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker.register('/service-worker.js').then(registration => {\n        console.log('SW registered: ', registration);\n      }).catch(registrationError => {\n        console.log('SW registration failed: ', registrationError);\n      });\n    });\n  }\n```\n### 3. 配置webpack插件\n```javascript\nconst WorkboxPlugin = require('workbox-webpack-plugin');\nplugins: [\n\n        new WorkboxPlugin.GenerateSW({\n          // 这些选项帮助快速启用 ServiceWorkers\n          // 不允许遗留任何“旧的” ServiceWorkers\n          clientsClaim: true,\n          skipWaiting: true,\n        }),\n]\n```\n### 4. 重新打包\n会自动在dist目录下生成service相关文件如图\n![](https://upload-images.jianshu.io/upload_images/20892169-2bd8bf911730ed27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 5. 看效果\n（1）由于service在dist目录下，所以需要在dist目录部署时才能使用。\n（2）使用http-server在dist目录下可以模拟启动一个服务器。\n![](https://upload-images.jianshu.io/upload_images/20892169-86b0852d67b1ab18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n（3）在network这里调成ofline，可以模拟断网，刷新后，会发现页面还是会加载。\n![](https://upload-images.jianshu.io/upload_images/20892169-fc5a5c47b69b013d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n由于兼容性差，所以现在的普及率不大。\n\n## module chunk bundle的区别\nModule：能被import的文件，都是模块，无论是js、图片或者别的。在webpack中一切都是模块。\nChunk：是多个模块组合而成的，如entry、splitChunk。\nentry是入口文件，入口文件中import的模块可能不止一个，所以是多个模块组合而成。\nsplitChunk是提取公共代码，很多需要提取的代码被import，所以是多个模块组合而成的。\nBundle：最终的输出文件。\n","slug":"cxy/webpack/webpack2","published":1,"updated":"2023-01-25T16:11:22.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbvzzda0001nfwi4aql7xgy","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"SourceMap\"><a href=\"#SourceMap\" class=\"headerlink\" title=\"SourceMap\"></a>SourceMap</h2><h4 id=\"1-解决问题：\"><a href=\"#1-解决问题：\" class=\"headerlink\" title=\"1. 解决问题：\"></a>1. 解决问题：</h4><p>报错时，报错的是编译后的代码，不好调试。</p>\n<h4 id=\"2-SourceMap是什么：\"><a href=\"#2-SourceMap是什么：\" class=\"headerlink\" title=\"2. SourceMap是什么：\"></a>2. SourceMap是什么：</h4><p><strong>源代码映射</strong>，包含源代码和构建后代码每一行每一列的代码映射关系。<br>它会生成一个<code>xxx.map</code>，当构建后代码出错了，会通过<code>xxx.map</code>从构建后代码出错位置，找到映射后源代码出错位置。</p>\n<h4 id=\"3-使用方法：\"><a href=\"#3-使用方法：\" class=\"headerlink\" title=\"3. 使用方法：\"></a>3. 使用方法：</h4><p>在webpack的devTool文档中，souceMap的值有很多种情况，但实际开发只关心两种情况</p>\n<h5 id=\"·-开发环境：cheap-module-source-map\"><a href=\"#·-开发环境：cheap-module-source-map\" class=\"headerlink\" title=\"· 开发环境：cheap-module-source-map\"></a>· 开发环境：cheap-module-source-map</h5><p>只包含行映射，打包编译速度快。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;cheap-module-source-map&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"·-生产环境：source-map\"><a href=\"#·-生产环境：source-map\" class=\"headerlink\" title=\"· 生产环境：source-map\"></a>· 生产环境：source-map</h5><p>包含行列映射，打包编译速度慢</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;source-map&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生产环境下必须得关注列，因为生成模式下代码就压缩成一行了，不关注列根本不知道在哪里报错。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d58c436d3e0b7a24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"生成的map文件\"></p>\n<h2 id=\"HMR：热模块替换\"><a href=\"#HMR：热模块替换\" class=\"headerlink\" title=\"HMR：热模块替换\"></a>HMR：热模块替换</h2><p><strong>hot module replacement</strong>：提升打包构建速度<br><strong>解决痛点</strong>：如果只修改了某个模块代码，webpack会将所有模块重新打包，那会很慢。当项目很大的时候，打包速度会越来越慢，所以需要更快些。<br>配置方法：其实是默认的，不需要去写hot:true也可以。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">hot</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>当设置了hot: false时，那么在修改文件时（css），其实整个文件是会重新打包的（浏览器会刷新）。<br>js即使开启了热模块替换（HMR），修改了还是会整个重新加载</p>\n<h2 id=\"one-of：每个文件只能被其中一个loader处理\"><a href=\"#one-of：每个文件只能被其中一个loader处理\" class=\"headerlink\" title=\"one of：每个文件只能被其中一个loader处理\"></a>one of：每个文件只能被其中一个loader处理</h2><p>webpack的loader会被每个文件匹配一遍，性能会很慢。当确认某个文件只会被一种loader处理时，那么设置匹配到一个loader之后，就不再处理下面的loader。这样也可以提升性能。<br>写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            <span class=\"comment\">// loader的配置</span></span><br><span class=\"line\">            &#123; </span><br><span class=\"line\">                <span class=\"attr\">oneOf</span>: &#123;</span><br><span class=\"line\">                  &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ts$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">&#x27;ts-loader&#x27;</span> &#125;,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"include-exclude\"><a href=\"#include-exclude\" class=\"headerlink\" title=\"include exclude\"></a>include exclude</h2><p>开发时会使用第三方的库或插件，比如echarts、lodash等。他们是已经编译好的，在node_modules中，所以处理js文件时，要排除node_modules的文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.m?js$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: <span class=\"regexp\">/(node_modules|bower_components)/</span>, <span class=\"comment\">// 排除什么文件夹不处理</span></span><br><span class=\"line\">  <span class=\"comment\">// include: path.resolve(__dirname,&#x27;../src&#x27;) // 只处理src下的文件。include和exclude不能并存。</span></span><br><span class=\"line\">    <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//   options: &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     presets: [&#x27;@babel/preset-env&#x27;]</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n<h2 id=\"ESlint和Babel的缓存：\"><a href=\"#ESlint和Babel的缓存：\" class=\"headerlink\" title=\"ESlint和Babel的缓存：\"></a>ESlint和Babel的缓存：</h2><p>每次打包都要重新检查eslint和babel编译会损耗性能，所以可以开启缓存。只有第一次打包需要检查eslint和编译babel，之后再次修改只检查和编译修改过的文件即可了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           </span><br><span class=\"line\"><span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启babel缓存</span></span><br><span class=\"line\">  <span class=\"attr\">cacheCompression</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 关闭缓存文件压缩</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ESLintPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../src&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: <span class=\"string\">&#x27;node_modules&#x27;</span>, <span class=\"comment\">//不处理node_modules下的文件</span></span><br><span class=\"line\">    <span class=\"attr\">cache</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否开启缓存</span></span><br><span class=\"line\">    <span class=\"attr\">cacheLocation</span>: path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;../node_modules/.cache/eslintcache&#x27;</span>) <span class=\"comment\">// 缓存到哪里</span></span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<h2 id=\"Thread-多进程\"><a href=\"#Thread-多进程\" class=\"headerlink\" title=\"Thread 多进程\"></a>Thread 多进程</h2><p>现在处理js文件，基本都是用eslint先检查，在用babel编译，再用terser压缩。文件大的时候会比较慢。<br>现在的cpu都是多核的，可以启动多进程。<br>###1. 安装thread<br>sudo cnpm i thread-loader<br>###2. 引入thread-loader<br>位置放在需要处理的loader的前面，比如babel-loader前面。<br>works: threads</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> threads = os.<span class=\"title function_\">cpus</span>().<span class=\"property\">length</span>; <span class=\"comment\">//cpu核数```</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">use</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;thread-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">works</span>: threads</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class=\"line\">            <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启babel缓存</span></span><br><span class=\"line\">            <span class=\"attr\">cacheCompression</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 关闭缓存文件压缩</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br></pre></td></tr></table></figure>\n<p>eslint 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ESLintPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../src&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: <span class=\"string\">&#x27;node_modules&#x27;</span>, <span class=\"comment\">//不处理node_modules下的文件</span></span><br><span class=\"line\">    <span class=\"attr\">cache</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否开启缓存</span></span><br><span class=\"line\">    <span class=\"attr\">cacheLocation</span>: path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;../node_modules/.cache/eslintcache&#x27;</span>), <span class=\"comment\">// 缓存到哪里</span></span><br><span class=\"line\">    threads <span class=\"comment\">// 开启多进程和设置进程数量</span></span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<p>压缩代码使用的terser虽然是默认的，但如果想用多线程处理，就也需要写出来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> terserWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tearser-webpack-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>optimization中（or plugins中）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">terserWebpackPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">parallel</span>: threads <span class=\"comment\">// 开启多进程和设置进程数量</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>文件少的时候没有必要开启，反而更慢的。因为进程启动也是需要时间的。</p>\n<h3 id=\"Tree-Shaking\"><a href=\"#Tree-Shaking\" class=\"headerlink\" title=\"Tree Shaking\"></a>Tree Shaking</h3><p>tree shaking依赖js模块化，不能用于commonjs，<strong>用于描述和移除没有用到的js代码</strong><br>自动配置，无需手动配置。</p>\n<h2 id=\"减少Babel生成文件的体积-babel-runtime\"><a href=\"#减少Babel生成文件的体积-babel-runtime\" class=\"headerlink\" title=\"减少Babel生成文件的体积 babel-runtime\"></a>减少Babel生成文件的体积 babel-runtime</h2><p><a href=\"https://zhuanlan.zhihu.com/p/394783228\">点击查看</a><br>babel对一些公共方法使用了辅助代码，默认情况下辅助代码会被添加到每一个需要它的文件中，这样会使打包体积非常大。<br>为了避免这样的情况，可以将这些辅助函数提出到一个npm包中，然后在用到的时候，再单独引入，这样就做到了复用。<br>这个包就是@babel/runtime，之后每次需要用辅助代码转换时，require进去这个包，就可以减少代码体积。</p>\n<p>如：<br>下面这段代码是class语法被转译时加入的辅助代码，如果每个需要转译的class就这么长，代码体积就会很大。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_classCallCheck</span>(<span class=\"params\">instance, Constructor</span>) &#123; <span class=\"keyword\">if</span> (!(instance <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Constructor</span>)) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Cannot call a class as a function&quot;</span>); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_defineProperties</span>(<span class=\"params\">target, props</span>) &#123; <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; props.<span class=\"property\">length</span>; i++) &#123; <span class=\"keyword\">var</span> descriptor = props[i]; descriptor.<span class=\"property\">enumerable</span> = descriptor.<span class=\"property\">enumerable</span> || <span class=\"literal\">false</span>; descriptor.<span class=\"property\">configurable</span> = <span class=\"literal\">true</span>; <span class=\"keyword\">if</span> (<span class=\"string\">&quot;value&quot;</span> <span class=\"keyword\">in</span> descriptor) descriptor.<span class=\"property\">writable</span> = <span class=\"literal\">true</span>; <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, descriptor.<span class=\"property\">key</span>, descriptor); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_createClass</span>(<span class=\"params\">Constructor, protoProps, staticProps</span>) &#123; <span class=\"keyword\">if</span> (protoProps) <span class=\"title function_\">_defineProperties</span>(<span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, protoProps); <span class=\"keyword\">if</span> (staticProps) <span class=\"title function_\">_defineProperties</span>(<span class=\"title class_\">Constructor</span>, staticProps); <span class=\"keyword\">return</span> <span class=\"title class_\">Constructor</span>; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>下面是使用@babel/runtime包后，用require引入的方式，替代了上面的辅助代码片段，可以看到使用这种方式代码比较简洁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _classCallCheck = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/runtime/helpers/classCallCheck&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> _defineProperties = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/runtime/helpers/defineProperties&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> _createClass = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/runtime/helpers/createClass&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>但如果每个用到的地方都去手动替换这个包引入，出错几率大，所以就有了<code>@babel/plugin-transform-runtime</code>这个包。可以帮我们自动在需要的地方引入。<br><code>@babel/plugin-transform-runtime</code>：禁用了babel自动对每个文件的runtime注入，并且使所有辅助代码从这个包引入</p>\n<h2 id=\"压缩图片\"><a href=\"#压缩图片\" class=\"headerlink\" title=\"压缩图片\"></a>压缩图片</h2><p>一个插件。</p>\n<h2 id=\"CodeSplit多入口\"><a href=\"#CodeSplit多入口\" class=\"headerlink\" title=\"CodeSplit多入口\"></a>CodeSplit多入口</h2><h3 id=\"1-配置方法\"><a href=\"#1-配置方法\" class=\"headerlink\" title=\"1. 配置方法\"></a>1. 配置方法</h3><p><code>entry</code>改为对象，<code>output</code>的<code>filename</code>换成<code>[name].js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/js/app.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/js/main.js&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-提取公共模块\"><a href=\"#2-提取公共模块\" class=\"headerlink\" title=\"2. 提取公共模块\"></a>2. 提取公共模块</h3><p>如果所有的js都在一个文件中，体积太大了。如果只需要渲染首页js，其他文件不应该加载。<br>所以进行代码分割，生成多个js文件，渲染哪个文件就用哪个js。</p>\n<p>单入口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单入口时候的配置，影响的只有node_modules引入的第三方代码和动态加载的代码会单独生成</span></span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;all&#x27;</span>, <span class=\"comment\">// all/async/initial, </span></span><br><span class=\"line\">      <span class=\"comment\">// all: 既处理动态引入的模块 import(&#x27;&#x27;)，也处理直接引入的模块 import xxx from &#x27;&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// async: 只处理动态引入的模块</span></span><br><span class=\"line\">      <span class=\"comment\">// initial: 这个值表示项目中被直接引入的模块将会被用于优化。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多入口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;async&#x27;</span>, <span class=\"comment\">// all/async</span></span><br><span class=\"line\">        <span class=\"attr\">minSize</span>: <span class=\"number\">20000</span>, <span class=\"comment\">// 分割代码最小的大小</span></span><br><span class=\"line\">        <span class=\"attr\">minRemainingSize</span>: <span class=\"number\">0</span>, <span class=\"comment\">// minSize，最后确保读取的文件大小不为零 </span></span><br><span class=\"line\">        <span class=\"attr\">minChunks</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 至少被引用的次数</span></span><br><span class=\"line\">        <span class=\"attr\">maxAsyncRequests</span>: <span class=\"number\">30</span>, <span class=\"comment\">// 按需加载时并行加载的最大数量</span></span><br><span class=\"line\">        <span class=\"attr\">maxInitialRequests</span>: <span class=\"number\">30</span>, <span class=\"comment\">// 入口js文件最大并行请求数量</span></span><br><span class=\"line\">        <span class=\"attr\">enforceSizeThreshold</span>: <span class=\"number\">50000</span>, <span class=\"comment\">// 超过该值一定会单独打包（此时忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span><br><span class=\"line\">        <span class=\"attr\">cacheGroups</span>: &#123; <span class=\"comment\">// 哪些模块打包到一个组</span></span><br><span class=\"line\">          <span class=\"attr\">defaultVendors</span>: &#123; <span class=\"comment\">// 组名</span></span><br><span class=\"line\">            <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,  <span class=\"comment\">// 需要打包到一起的模块</span></span><br><span class=\"line\">            <span class=\"attr\">priority</span>: -<span class=\"number\">10</span>, <span class=\"comment\">// 权重（越大越优先）</span></span><br><span class=\"line\">            <span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 如果当时chunk已经包含从主bundle中拆分出的模块，则被重用而不是生成新模块</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">default</span>: &#123;    <span class=\"comment\">// 其他没有写的配置会使用上面的默认值</span></span><br><span class=\"line\">            <span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 这里的minchunks权重更大</span></span><br><span class=\"line\">            <span class=\"attr\">priority</span>: -<span class=\"number\">20</span>,</span><br><span class=\"line\">            <span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>打包出来如图：<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6c2bf3132c984613.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"3-按需加载js\"><a href=\"#3-按需加载js\" class=\"headerlink\" title=\"3. 按需加载js\"></a>3. 按需加载js</h3><p>有些暂时不需要加载的文件，如果一出来就加载，会阻塞之后的资源。<br>所以可以在需要的时候再加载。</p>\n<h4 id=\"我新建了一个count文件，内容如下：\"><a href=\"#我新建了一个count文件，内容如下：\" class=\"headerlink\" title=\"我新建了一个count文件，内容如下：\"></a>我新建了一个count文件，内容如下：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> count = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>在入口文件中动态加载count。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.button&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./count&#x27;</span>) <span class=\"comment\">// 动态加载的模块会单独打包</span></span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123; </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;succeed!&#x27;</span>,res.<span class=\"property\">count</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;failed!&#x27;</span>,res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果：原本是七个js文件\"><a href=\"#效果：原本是七个js文件\" class=\"headerlink\" title=\"效果：原本是七个js文件\"></a>效果：原本是七个js文件</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2f048649a96409b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>####点击后加载第八个js文件</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e7790e6714154eee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>####内容是<code>count</code><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-03618487580c249a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"如果动态导入的是函数的话，用res-函数名调用\"><a href=\"#如果动态导入的是函数的话，用res-函数名调用\" class=\"headerlink\" title=\"如果动态导入的是函数的话，用res.函数名调用\"></a>如果动态导入的是函数的话，用<code>res.函数名</code>调用</h4><h3 id=\"4-为动态导入的模块在编译时重命名\"><a href=\"#4-为动态导入的模块在编译时重命名\" class=\"headerlink\" title=\"4. 为动态导入的模块在编译时重命名\"></a>4. 为动态导入的模块在编译时重命名</h3><p>webpack默认是可以给动态模块命名的，但有点丑。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f383556105a961a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>如果想自己命名的话可以使用<strong>内联注释</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* webpackChunkName: &quot;my-chunk-name&quot; */</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"具体的方法：\"><a href=\"#具体的方法：\" class=\"headerlink\" title=\"具体的方法：\"></a>具体的方法：</h4><h5 id=\"（1）-动态引入的时候这样写\"><a href=\"#（1）-动态引入的时候这样写\" class=\"headerlink\" title=\"（1） 动态引入的时候这样写\"></a>（1） 动态引入的时候这样写</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;printString&quot; */</span><span class=\"string\">&#x27;./printString&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"（2）-在output中配置chunkFilename\"><a href=\"#（2）-在output中配置chunkFilename\" class=\"headerlink\" title=\"（2） 在output中配置chunkFilename\"></a>（2） 在output中配置<code>chunkFilename</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 为打包输出的其他文件命名</span></span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;static/js/[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h5 id=\"（3）再次打包，名字就会变成自己的命名了\"><a href=\"#（3）再次打包，名字就会变成自己的命名了\" class=\"headerlink\" title=\"（3）再次打包，名字就会变成自己的命名了\"></a>（3）再次打包，名字就会变成自己的命名了</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5bd94dae34918b27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"5-codesplit-统一命名\"><a href=\"#5-codesplit-统一命名\" class=\"headerlink\" title=\"5. codesplit 统一命名\"></a>5. codesplit 统一命名</h3><p>对入口文件来说，可以叫main.js，为了方便开发，像chunk文件可以加一个.chunk.js，然后所有的媒体文件，如果每一个loader里面都去单独指定一遍，会比较麻烦。<br>此时可以在output中配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">assetModuleFilename</span>: <span class=\"string\">&#x27;static/media/[hash:10][ext][query]&#x27;</span>,  <span class=\"comment\">// 所有loader编译的静态资源的打包名字</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-preload与prefetch\"><a href=\"#6-preload与prefetch\" class=\"headerlink\" title=\"6. preload与prefetch\"></a>6. preload与prefetch</h3><h4 id=\"共同点：\"><a href=\"#共同点：\" class=\"headerlink\" title=\"共同点：\"></a>共同点：</h4><ul>\n<li>两者的概念都是预加载，缓存下来资源</li>\n<li>只加载不执行</li>\n<li>都有缓存</li>\n<li>兼容性都很差<br>####区别：</li>\n<li>preload：告诉浏览器立即加载资源</li>\n<li>prefetch：告诉浏览器在空闲时加载资源</li>\n<li>preload优先级高，prefetch优先级低。</li>\n<li>preload只能加载当前页面用的，prefetch可以加载之后页面用的。<br>现阶段使用<a href=\"https://www.npmjs.com/package/preload-webpack-plugin\"><code>preload-webpack-plugin</code></a>插件</li>\n</ul>\n<h2 id=\"7-network-cache\"><a href=\"#7-network-cache\" class=\"headerlink\" title=\"7. network cache\"></a>7. network cache</h2><h2 id=\"8-Core-js\"><a href=\"#8-Core-js\" class=\"headerlink\" title=\"8. Core.js\"></a>8. Core.js</h2><p>babel可以转箭头函数、…这样的，但无法转换async、await、promise，这时就需要core.js。</p>\n<h3 id=\"1-什么是corejs\"><a href=\"#1-什么是corejs\" class=\"headerlink\" title=\"1. 什么是corejs?\"></a>1. 什么是corejs?</h3><p>core-js 它是JavaScript标准库的 polyfill（垫片/补丁）, 新功能的es’api’转换为大部分现代浏览器都可以支持<br>运行的一个’api’ 补丁包集合。</p>\n<h3 id=\"2-使用方法\"><a href=\"#2-使用方法\" class=\"headerlink\" title=\"2. 使用方法\"></a>2. 使用方法</h3><h4 id=\"（1）直接引进\"><a href=\"#（1）直接引进\" class=\"headerlink\" title=\"（1）直接引进\"></a>（1）直接引进</h4><p>首先安装corejs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cnpm install core-js</span><br></pre></td></tr></table></figure>\n<p>然后在入口引入<br>import ‘core-js’<br>这种方法的坏处是会将core-js全部引入，会使得包体积很大。所以一般不会这样引。</p>\n<h4 id=\"（2）按需引进\"><a href=\"#（2）按需引进\" class=\"headerlink\" title=\"（2）按需引进\"></a>（2）按需引进</h4><p>将需要的引进去即可。<br>比如用promise，那么就写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;core-js/es6/promise&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>安装后是有提示的，不用背。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3d7e0d3573d23bac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"（3）智能引进\"><a href=\"#（3）智能引进\" class=\"headerlink\" title=\"（3）智能引进\"></a>（3）智能引进</h4><p>配合babel使用。<br>在babel.config.js中配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;useBuiltIns&quot;</span>: <span class=\"string\">&quot;entry&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;corejs&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;targets&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;edge&quot;</span>: <span class=\"string\">&quot;17&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;firefox&quot;</span>: <span class=\"string\">&quot;60&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;chrome&quot;</span>: <span class=\"string\">&quot;67&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;safari&quot;</span>: <span class=\"string\">&quot;11.1&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;useBuiltIns&quot;</span>: <span class=\"string\">&quot;usage&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;corejs&quot;</span>: <span class=\"string\">&quot;3.6.5&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"PWA-渐进式网络应用程序\"><a href=\"#PWA-渐进式网络应用程序\" class=\"headerlink\" title=\"PWA 渐进式网络应用程序\"></a>PWA 渐进式网络应用程序</h2><p>基于serviceworker实现，但也有很严重的兼容性问题<br>点击访问<a href=\"https://webpack.docschina.org/guides/progressive-web-application/#conclusion\">官网</a><br>项目离线时候也可以访问。</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cnpm install workbox-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-在入口文件引入\"><a href=\"#2-在入口文件引入\" class=\"headerlink\" title=\"2. 在入口文件引入\"></a>2. 在入口文件引入</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;serviceWorker&#x27;</span> <span class=\"keyword\">in</span> navigator) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      navigator.<span class=\"property\">serviceWorker</span>.<span class=\"title function_\">register</span>(<span class=\"string\">&#x27;/service-worker.js&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">registration</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;SW registered: &#x27;</span>, registration);</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">registrationError</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;SW registration failed: &#x27;</span>, registrationError);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-配置webpack插件\"><a href=\"#3-配置webpack插件\" class=\"headerlink\" title=\"3. 配置webpack插件\"></a>3. 配置webpack插件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">WorkboxPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;workbox-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">WorkboxPlugin</span>.<span class=\"title class_\">GenerateSW</span>(&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 这些选项帮助快速启用 ServiceWorkers</span></span><br><span class=\"line\">          <span class=\"comment\">// 不允许遗留任何“旧的” ServiceWorkers</span></span><br><span class=\"line\">          <span class=\"attr\">clientsClaim</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">skipWaiting</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-重新打包\"><a href=\"#4-重新打包\" class=\"headerlink\" title=\"4. 重新打包\"></a>4. 重新打包</h3><p>会自动在dist目录下生成service相关文件如图<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2bd8bf911730ed27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"5-看效果\"><a href=\"#5-看效果\" class=\"headerlink\" title=\"5. 看效果\"></a>5. 看效果</h3><p>（1）由于service在dist目录下，所以需要在dist目录部署时才能使用。<br>（2）使用http-server在dist目录下可以模拟启动一个服务器。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-86b0852d67b1ab18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>（3）在network这里调成ofline，可以模拟断网，刷新后，会发现页面还是会加载。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fc5a5c47b69b013d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>由于兼容性差，所以现在的普及率不大。</p>\n<h2 id=\"module-chunk-bundle的区别\"><a href=\"#module-chunk-bundle的区别\" class=\"headerlink\" title=\"module chunk bundle的区别\"></a>module chunk bundle的区别</h2><p>Module：能被import的文件，都是模块，无论是js、图片或者别的。在webpack中一切都是模块。<br>Chunk：是多个模块组合而成的，如entry、splitChunk。<br>entry是入口文件，入口文件中import的模块可能不止一个，所以是多个模块组合而成。<br>splitChunk是提取公共代码，很多需要提取的代码被import，所以是多个模块组合而成的。<br>Bundle：最终的输出文件。</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"SourceMap\"><a href=\"#SourceMap\" class=\"headerlink\" title=\"SourceMap\"></a>SourceMap</h2><h4 id=\"1-解决问题：\"><a href=\"#1-解决问题：\" class=\"headerlink\" title=\"1. 解决问题：\"></a>1. 解决问题：</h4><p>报错时，报错的是编译后的代码，不好调试。</p>\n<h4 id=\"2-SourceMap是什么：\"><a href=\"#2-SourceMap是什么：\" class=\"headerlink\" title=\"2. SourceMap是什么：\"></a>2. SourceMap是什么：</h4><p><strong>源代码映射</strong>，包含源代码和构建后代码每一行每一列的代码映射关系。<br>它会生成一个<code>xxx.map</code>，当构建后代码出错了，会通过<code>xxx.map</code>从构建后代码出错位置，找到映射后源代码出错位置。</p>\n<h4 id=\"3-使用方法：\"><a href=\"#3-使用方法：\" class=\"headerlink\" title=\"3. 使用方法：\"></a>3. 使用方法：</h4><p>在webpack的devTool文档中，souceMap的值有很多种情况，但实际开发只关心两种情况</p>\n<h5 id=\"·-开发环境：cheap-module-source-map\"><a href=\"#·-开发环境：cheap-module-source-map\" class=\"headerlink\" title=\"· 开发环境：cheap-module-source-map\"></a>· 开发环境：cheap-module-source-map</h5><p>只包含行映射，打包编译速度快。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;cheap-module-source-map&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"·-生产环境：source-map\"><a href=\"#·-生产环境：source-map\" class=\"headerlink\" title=\"· 生产环境：source-map\"></a>· 生产环境：source-map</h5><p>包含行列映射，打包编译速度慢</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;source-map&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生产环境下必须得关注列，因为生成模式下代码就压缩成一行了，不关注列根本不知道在哪里报错。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d58c436d3e0b7a24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"生成的map文件\"></p>\n<h2 id=\"HMR：热模块替换\"><a href=\"#HMR：热模块替换\" class=\"headerlink\" title=\"HMR：热模块替换\"></a>HMR：热模块替换</h2><p><strong>hot module replacement</strong>：提升打包构建速度<br><strong>解决痛点</strong>：如果只修改了某个模块代码，webpack会将所有模块重新打包，那会很慢。当项目很大的时候，打包速度会越来越慢，所以需要更快些。<br>配置方法：其实是默认的，不需要去写hot:true也可以。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">hot</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>当设置了hot: false时，那么在修改文件时（css），其实整个文件是会重新打包的（浏览器会刷新）。<br>js即使开启了热模块替换（HMR），修改了还是会整个重新加载</p>\n<h2 id=\"one-of：每个文件只能被其中一个loader处理\"><a href=\"#one-of：每个文件只能被其中一个loader处理\" class=\"headerlink\" title=\"one of：每个文件只能被其中一个loader处理\"></a>one of：每个文件只能被其中一个loader处理</h2><p>webpack的loader会被每个文件匹配一遍，性能会很慢。当确认某个文件只会被一种loader处理时，那么设置匹配到一个loader之后，就不再处理下面的loader。这样也可以提升性能。<br>写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            <span class=\"comment\">// loader的配置</span></span><br><span class=\"line\">            &#123; </span><br><span class=\"line\">                <span class=\"attr\">oneOf</span>: &#123;</span><br><span class=\"line\">                  &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ts$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">&#x27;ts-loader&#x27;</span> &#125;,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"include-exclude\"><a href=\"#include-exclude\" class=\"headerlink\" title=\"include exclude\"></a>include exclude</h2><p>开发时会使用第三方的库或插件，比如echarts、lodash等。他们是已经编译好的，在node_modules中，所以处理js文件时，要排除node_modules的文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.m?js$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: <span class=\"regexp\">/(node_modules|bower_components)/</span>, <span class=\"comment\">// 排除什么文件夹不处理</span></span><br><span class=\"line\">  <span class=\"comment\">// include: path.resolve(__dirname,&#x27;../src&#x27;) // 只处理src下的文件。include和exclude不能并存。</span></span><br><span class=\"line\">    <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//   options: &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     presets: [&#x27;@babel/preset-env&#x27;]</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n<h2 id=\"ESlint和Babel的缓存：\"><a href=\"#ESlint和Babel的缓存：\" class=\"headerlink\" title=\"ESlint和Babel的缓存：\"></a>ESlint和Babel的缓存：</h2><p>每次打包都要重新检查eslint和babel编译会损耗性能，所以可以开启缓存。只有第一次打包需要检查eslint和编译babel，之后再次修改只检查和编译修改过的文件即可了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           </span><br><span class=\"line\"><span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启babel缓存</span></span><br><span class=\"line\">  <span class=\"attr\">cacheCompression</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 关闭缓存文件压缩</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ESLintPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../src&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: <span class=\"string\">&#x27;node_modules&#x27;</span>, <span class=\"comment\">//不处理node_modules下的文件</span></span><br><span class=\"line\">    <span class=\"attr\">cache</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否开启缓存</span></span><br><span class=\"line\">    <span class=\"attr\">cacheLocation</span>: path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;../node_modules/.cache/eslintcache&#x27;</span>) <span class=\"comment\">// 缓存到哪里</span></span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<h2 id=\"Thread-多进程\"><a href=\"#Thread-多进程\" class=\"headerlink\" title=\"Thread 多进程\"></a>Thread 多进程</h2><p>现在处理js文件，基本都是用eslint先检查，在用babel编译，再用terser压缩。文件大的时候会比较慢。<br>现在的cpu都是多核的，可以启动多进程。<br>###1. 安装thread<br>sudo cnpm i thread-loader<br>###2. 引入thread-loader<br>位置放在需要处理的loader的前面，比如babel-loader前面。<br>works: threads</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> threads = os.<span class=\"title function_\">cpus</span>().<span class=\"property\">length</span>; <span class=\"comment\">//cpu核数```</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">use</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;thread-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">works</span>: threads</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class=\"line\">            <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启babel缓存</span></span><br><span class=\"line\">            <span class=\"attr\">cacheCompression</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 关闭缓存文件压缩</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br></pre></td></tr></table></figure>\n<p>eslint 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ESLintPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../src&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: <span class=\"string\">&#x27;node_modules&#x27;</span>, <span class=\"comment\">//不处理node_modules下的文件</span></span><br><span class=\"line\">    <span class=\"attr\">cache</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否开启缓存</span></span><br><span class=\"line\">    <span class=\"attr\">cacheLocation</span>: path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;../node_modules/.cache/eslintcache&#x27;</span>), <span class=\"comment\">// 缓存到哪里</span></span><br><span class=\"line\">    threads <span class=\"comment\">// 开启多进程和设置进程数量</span></span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<p>压缩代码使用的terser虽然是默认的，但如果想用多线程处理，就也需要写出来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> terserWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tearser-webpack-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>optimization中（or plugins中）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">terserWebpackPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">parallel</span>: threads <span class=\"comment\">// 开启多进程和设置进程数量</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>文件少的时候没有必要开启，反而更慢的。因为进程启动也是需要时间的。</p>\n<h3 id=\"Tree-Shaking\"><a href=\"#Tree-Shaking\" class=\"headerlink\" title=\"Tree Shaking\"></a>Tree Shaking</h3><p>tree shaking依赖js模块化，不能用于commonjs，<strong>用于描述和移除没有用到的js代码</strong><br>自动配置，无需手动配置。</p>\n<h2 id=\"减少Babel生成文件的体积-babel-runtime\"><a href=\"#减少Babel生成文件的体积-babel-runtime\" class=\"headerlink\" title=\"减少Babel生成文件的体积 babel-runtime\"></a>减少Babel生成文件的体积 babel-runtime</h2><p><a href=\"https://zhuanlan.zhihu.com/p/394783228\">点击查看</a><br>babel对一些公共方法使用了辅助代码，默认情况下辅助代码会被添加到每一个需要它的文件中，这样会使打包体积非常大。<br>为了避免这样的情况，可以将这些辅助函数提出到一个npm包中，然后在用到的时候，再单独引入，这样就做到了复用。<br>这个包就是@babel/runtime，之后每次需要用辅助代码转换时，require进去这个包，就可以减少代码体积。</p>\n<p>如：<br>下面这段代码是class语法被转译时加入的辅助代码，如果每个需要转译的class就这么长，代码体积就会很大。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_classCallCheck</span>(<span class=\"params\">instance, Constructor</span>) &#123; <span class=\"keyword\">if</span> (!(instance <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Constructor</span>)) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Cannot call a class as a function&quot;</span>); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_defineProperties</span>(<span class=\"params\">target, props</span>) &#123; <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; props.<span class=\"property\">length</span>; i++) &#123; <span class=\"keyword\">var</span> descriptor = props[i]; descriptor.<span class=\"property\">enumerable</span> = descriptor.<span class=\"property\">enumerable</span> || <span class=\"literal\">false</span>; descriptor.<span class=\"property\">configurable</span> = <span class=\"literal\">true</span>; <span class=\"keyword\">if</span> (<span class=\"string\">&quot;value&quot;</span> <span class=\"keyword\">in</span> descriptor) descriptor.<span class=\"property\">writable</span> = <span class=\"literal\">true</span>; <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, descriptor.<span class=\"property\">key</span>, descriptor); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_createClass</span>(<span class=\"params\">Constructor, protoProps, staticProps</span>) &#123; <span class=\"keyword\">if</span> (protoProps) <span class=\"title function_\">_defineProperties</span>(<span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, protoProps); <span class=\"keyword\">if</span> (staticProps) <span class=\"title function_\">_defineProperties</span>(<span class=\"title class_\">Constructor</span>, staticProps); <span class=\"keyword\">return</span> <span class=\"title class_\">Constructor</span>; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>下面是使用@babel/runtime包后，用require引入的方式，替代了上面的辅助代码片段，可以看到使用这种方式代码比较简洁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _classCallCheck = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/runtime/helpers/classCallCheck&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> _defineProperties = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/runtime/helpers/defineProperties&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> _createClass = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/runtime/helpers/createClass&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>但如果每个用到的地方都去手动替换这个包引入，出错几率大，所以就有了<code>@babel/plugin-transform-runtime</code>这个包。可以帮我们自动在需要的地方引入。<br><code>@babel/plugin-transform-runtime</code>：禁用了babel自动对每个文件的runtime注入，并且使所有辅助代码从这个包引入</p>\n<h2 id=\"压缩图片\"><a href=\"#压缩图片\" class=\"headerlink\" title=\"压缩图片\"></a>压缩图片</h2><p>一个插件。</p>\n<h2 id=\"CodeSplit多入口\"><a href=\"#CodeSplit多入口\" class=\"headerlink\" title=\"CodeSplit多入口\"></a>CodeSplit多入口</h2><h3 id=\"1-配置方法\"><a href=\"#1-配置方法\" class=\"headerlink\" title=\"1. 配置方法\"></a>1. 配置方法</h3><p><code>entry</code>改为对象，<code>output</code>的<code>filename</code>换成<code>[name].js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/js/app.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/js/main.js&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-提取公共模块\"><a href=\"#2-提取公共模块\" class=\"headerlink\" title=\"2. 提取公共模块\"></a>2. 提取公共模块</h3><p>如果所有的js都在一个文件中，体积太大了。如果只需要渲染首页js，其他文件不应该加载。<br>所以进行代码分割，生成多个js文件，渲染哪个文件就用哪个js。</p>\n<p>单入口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单入口时候的配置，影响的只有node_modules引入的第三方代码和动态加载的代码会单独生成</span></span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;all&#x27;</span>, <span class=\"comment\">// all/async/initial, </span></span><br><span class=\"line\">      <span class=\"comment\">// all: 既处理动态引入的模块 import(&#x27;&#x27;)，也处理直接引入的模块 import xxx from &#x27;&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// async: 只处理动态引入的模块</span></span><br><span class=\"line\">      <span class=\"comment\">// initial: 这个值表示项目中被直接引入的模块将会被用于优化。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多入口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;async&#x27;</span>, <span class=\"comment\">// all/async</span></span><br><span class=\"line\">        <span class=\"attr\">minSize</span>: <span class=\"number\">20000</span>, <span class=\"comment\">// 分割代码最小的大小</span></span><br><span class=\"line\">        <span class=\"attr\">minRemainingSize</span>: <span class=\"number\">0</span>, <span class=\"comment\">// minSize，最后确保读取的文件大小不为零 </span></span><br><span class=\"line\">        <span class=\"attr\">minChunks</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 至少被引用的次数</span></span><br><span class=\"line\">        <span class=\"attr\">maxAsyncRequests</span>: <span class=\"number\">30</span>, <span class=\"comment\">// 按需加载时并行加载的最大数量</span></span><br><span class=\"line\">        <span class=\"attr\">maxInitialRequests</span>: <span class=\"number\">30</span>, <span class=\"comment\">// 入口js文件最大并行请求数量</span></span><br><span class=\"line\">        <span class=\"attr\">enforceSizeThreshold</span>: <span class=\"number\">50000</span>, <span class=\"comment\">// 超过该值一定会单独打包（此时忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span><br><span class=\"line\">        <span class=\"attr\">cacheGroups</span>: &#123; <span class=\"comment\">// 哪些模块打包到一个组</span></span><br><span class=\"line\">          <span class=\"attr\">defaultVendors</span>: &#123; <span class=\"comment\">// 组名</span></span><br><span class=\"line\">            <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,  <span class=\"comment\">// 需要打包到一起的模块</span></span><br><span class=\"line\">            <span class=\"attr\">priority</span>: -<span class=\"number\">10</span>, <span class=\"comment\">// 权重（越大越优先）</span></span><br><span class=\"line\">            <span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 如果当时chunk已经包含从主bundle中拆分出的模块，则被重用而不是生成新模块</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">default</span>: &#123;    <span class=\"comment\">// 其他没有写的配置会使用上面的默认值</span></span><br><span class=\"line\">            <span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 这里的minchunks权重更大</span></span><br><span class=\"line\">            <span class=\"attr\">priority</span>: -<span class=\"number\">20</span>,</span><br><span class=\"line\">            <span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>打包出来如图：<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-6c2bf3132c984613.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"3-按需加载js\"><a href=\"#3-按需加载js\" class=\"headerlink\" title=\"3. 按需加载js\"></a>3. 按需加载js</h3><p>有些暂时不需要加载的文件，如果一出来就加载，会阻塞之后的资源。<br>所以可以在需要的时候再加载。</p>\n<h4 id=\"我新建了一个count文件，内容如下：\"><a href=\"#我新建了一个count文件，内容如下：\" class=\"headerlink\" title=\"我新建了一个count文件，内容如下：\"></a>我新建了一个count文件，内容如下：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> count = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>在入口文件中动态加载count。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.button&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./count&#x27;</span>) <span class=\"comment\">// 动态加载的模块会单独打包</span></span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123; </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;succeed!&#x27;</span>,res.<span class=\"property\">count</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;failed!&#x27;</span>,res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果：原本是七个js文件\"><a href=\"#效果：原本是七个js文件\" class=\"headerlink\" title=\"效果：原本是七个js文件\"></a>效果：原本是七个js文件</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2f048649a96409b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>####点击后加载第八个js文件</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e7790e6714154eee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>####内容是<code>count</code><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-03618487580c249a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"如果动态导入的是函数的话，用res-函数名调用\"><a href=\"#如果动态导入的是函数的话，用res-函数名调用\" class=\"headerlink\" title=\"如果动态导入的是函数的话，用res.函数名调用\"></a>如果动态导入的是函数的话，用<code>res.函数名</code>调用</h4><h3 id=\"4-为动态导入的模块在编译时重命名\"><a href=\"#4-为动态导入的模块在编译时重命名\" class=\"headerlink\" title=\"4. 为动态导入的模块在编译时重命名\"></a>4. 为动态导入的模块在编译时重命名</h3><p>webpack默认是可以给动态模块命名的，但有点丑。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f383556105a961a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>如果想自己命名的话可以使用<strong>内联注释</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* webpackChunkName: &quot;my-chunk-name&quot; */</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"具体的方法：\"><a href=\"#具体的方法：\" class=\"headerlink\" title=\"具体的方法：\"></a>具体的方法：</h4><h5 id=\"（1）-动态引入的时候这样写\"><a href=\"#（1）-动态引入的时候这样写\" class=\"headerlink\" title=\"（1） 动态引入的时候这样写\"></a>（1） 动态引入的时候这样写</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;printString&quot; */</span><span class=\"string\">&#x27;./printString&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"（2）-在output中配置chunkFilename\"><a href=\"#（2）-在output中配置chunkFilename\" class=\"headerlink\" title=\"（2） 在output中配置chunkFilename\"></a>（2） 在output中配置<code>chunkFilename</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 为打包输出的其他文件命名</span></span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;static/js/[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h5 id=\"（3）再次打包，名字就会变成自己的命名了\"><a href=\"#（3）再次打包，名字就会变成自己的命名了\" class=\"headerlink\" title=\"（3）再次打包，名字就会变成自己的命名了\"></a>（3）再次打包，名字就会变成自己的命名了</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5bd94dae34918b27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"5-codesplit-统一命名\"><a href=\"#5-codesplit-统一命名\" class=\"headerlink\" title=\"5. codesplit 统一命名\"></a>5. codesplit 统一命名</h3><p>对入口文件来说，可以叫main.js，为了方便开发，像chunk文件可以加一个.chunk.js，然后所有的媒体文件，如果每一个loader里面都去单独指定一遍，会比较麻烦。<br>此时可以在output中配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">assetModuleFilename</span>: <span class=\"string\">&#x27;static/media/[hash:10][ext][query]&#x27;</span>,  <span class=\"comment\">// 所有loader编译的静态资源的打包名字</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-preload与prefetch\"><a href=\"#6-preload与prefetch\" class=\"headerlink\" title=\"6. preload与prefetch\"></a>6. preload与prefetch</h3><h4 id=\"共同点：\"><a href=\"#共同点：\" class=\"headerlink\" title=\"共同点：\"></a>共同点：</h4><ul>\n<li>两者的概念都是预加载，缓存下来资源</li>\n<li>只加载不执行</li>\n<li>都有缓存</li>\n<li>兼容性都很差<br>####区别：</li>\n<li>preload：告诉浏览器立即加载资源</li>\n<li>prefetch：告诉浏览器在空闲时加载资源</li>\n<li>preload优先级高，prefetch优先级低。</li>\n<li>preload只能加载当前页面用的，prefetch可以加载之后页面用的。<br>现阶段使用<a href=\"https://www.npmjs.com/package/preload-webpack-plugin\"><code>preload-webpack-plugin</code></a>插件</li>\n</ul>\n<h2 id=\"7-network-cache\"><a href=\"#7-network-cache\" class=\"headerlink\" title=\"7. network cache\"></a>7. network cache</h2><h2 id=\"8-Core-js\"><a href=\"#8-Core-js\" class=\"headerlink\" title=\"8. Core.js\"></a>8. Core.js</h2><p>babel可以转箭头函数、…这样的，但无法转换async、await、promise，这时就需要core.js。</p>\n<h3 id=\"1-什么是corejs\"><a href=\"#1-什么是corejs\" class=\"headerlink\" title=\"1. 什么是corejs?\"></a>1. 什么是corejs?</h3><p>core-js 它是JavaScript标准库的 polyfill（垫片/补丁）, 新功能的es’api’转换为大部分现代浏览器都可以支持<br>运行的一个’api’ 补丁包集合。</p>\n<h3 id=\"2-使用方法\"><a href=\"#2-使用方法\" class=\"headerlink\" title=\"2. 使用方法\"></a>2. 使用方法</h3><h4 id=\"（1）直接引进\"><a href=\"#（1）直接引进\" class=\"headerlink\" title=\"（1）直接引进\"></a>（1）直接引进</h4><p>首先安装corejs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cnpm install core-js</span><br></pre></td></tr></table></figure>\n<p>然后在入口引入<br>import ‘core-js’<br>这种方法的坏处是会将core-js全部引入，会使得包体积很大。所以一般不会这样引。</p>\n<h4 id=\"（2）按需引进\"><a href=\"#（2）按需引进\" class=\"headerlink\" title=\"（2）按需引进\"></a>（2）按需引进</h4><p>将需要的引进去即可。<br>比如用promise，那么就写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;core-js/es6/promise&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>安装后是有提示的，不用背。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3d7e0d3573d23bac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"（3）智能引进\"><a href=\"#（3）智能引进\" class=\"headerlink\" title=\"（3）智能引进\"></a>（3）智能引进</h4><p>配合babel使用。<br>在babel.config.js中配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;useBuiltIns&quot;</span>: <span class=\"string\">&quot;entry&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;corejs&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;targets&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;edge&quot;</span>: <span class=\"string\">&quot;17&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;firefox&quot;</span>: <span class=\"string\">&quot;60&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;chrome&quot;</span>: <span class=\"string\">&quot;67&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;safari&quot;</span>: <span class=\"string\">&quot;11.1&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;useBuiltIns&quot;</span>: <span class=\"string\">&quot;usage&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;corejs&quot;</span>: <span class=\"string\">&quot;3.6.5&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"PWA-渐进式网络应用程序\"><a href=\"#PWA-渐进式网络应用程序\" class=\"headerlink\" title=\"PWA 渐进式网络应用程序\"></a>PWA 渐进式网络应用程序</h2><p>基于serviceworker实现，但也有很严重的兼容性问题<br>点击访问<a href=\"https://webpack.docschina.org/guides/progressive-web-application/#conclusion\">官网</a><br>项目离线时候也可以访问。</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cnpm install workbox-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-在入口文件引入\"><a href=\"#2-在入口文件引入\" class=\"headerlink\" title=\"2. 在入口文件引入\"></a>2. 在入口文件引入</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;serviceWorker&#x27;</span> <span class=\"keyword\">in</span> navigator) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      navigator.<span class=\"property\">serviceWorker</span>.<span class=\"title function_\">register</span>(<span class=\"string\">&#x27;/service-worker.js&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">registration</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;SW registered: &#x27;</span>, registration);</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">registrationError</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;SW registration failed: &#x27;</span>, registrationError);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-配置webpack插件\"><a href=\"#3-配置webpack插件\" class=\"headerlink\" title=\"3. 配置webpack插件\"></a>3. 配置webpack插件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">WorkboxPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;workbox-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">WorkboxPlugin</span>.<span class=\"title class_\">GenerateSW</span>(&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 这些选项帮助快速启用 ServiceWorkers</span></span><br><span class=\"line\">          <span class=\"comment\">// 不允许遗留任何“旧的” ServiceWorkers</span></span><br><span class=\"line\">          <span class=\"attr\">clientsClaim</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">skipWaiting</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-重新打包\"><a href=\"#4-重新打包\" class=\"headerlink\" title=\"4. 重新打包\"></a>4. 重新打包</h3><p>会自动在dist目录下生成service相关文件如图<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2bd8bf911730ed27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"5-看效果\"><a href=\"#5-看效果\" class=\"headerlink\" title=\"5. 看效果\"></a>5. 看效果</h3><p>（1）由于service在dist目录下，所以需要在dist目录部署时才能使用。<br>（2）使用http-server在dist目录下可以模拟启动一个服务器。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-86b0852d67b1ab18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>（3）在network这里调成ofline，可以模拟断网，刷新后，会发现页面还是会加载。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fc5a5c47b69b013d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>由于兼容性差，所以现在的普及率不大。</p>\n<h2 id=\"module-chunk-bundle的区别\"><a href=\"#module-chunk-bundle的区别\" class=\"headerlink\" title=\"module chunk bundle的区别\"></a>module chunk bundle的区别</h2><p>Module：能被import的文件，都是模块，无论是js、图片或者别的。在webpack中一切都是模块。<br>Chunk：是多个模块组合而成的，如entry、splitChunk。<br>entry是入口文件，入口文件中import的模块可能不止一个，所以是多个模块组合而成。<br>splitChunk是提取公共代码，很多需要提取的代码被import，所以是多个模块组合而成的。<br>Bundle：最终的输出文件。</p>\n"},{"title":"restfulAPI设计规范","date":"2019-07-10T07:20:18.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n1.协议遵守https协议\n2.api应该有单独域名\n3.加上版本号\n4.由于restfulapi中url表示一种资源的集合，而不再是一个功能一个url，所以网址中不能有动词，应该全是名词，且与数据库的表名一一对应，也由于是一种集合，所以api的名词尽量为复数\n5.用http动词去表示资源的具体操作类型，如put/patch/post/get/delete/增删改查等\n6.如果涉及分页这种返回结果相当多的情况，api也可以提供一些参数，如?limit=10&page=2\n7.有单独的状态码","source":"_posts/cxy/other/restfulApi.md","raw":"---\ntitle: 'restfulAPI设计规范'\ndate: 2019-07-10 15:20:18\ntags: \n  - api\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n1.协议遵守https协议\n2.api应该有单独域名\n3.加上版本号\n4.由于restfulapi中url表示一种资源的集合，而不再是一个功能一个url，所以网址中不能有动词，应该全是名词，且与数据库的表名一一对应，也由于是一种集合，所以api的名词尽量为复数\n5.用http动词去表示资源的具体操作类型，如put/patch/post/get/delete/增删改查等\n6.如果涉及分页这种返回结果相当多的情况，api也可以提供一些参数，如?limit=10&page=2\n7.有单独的状态码","slug":"cxy/other/restfulApi","published":1,"updated":"2023-01-25T16:12:50.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldbvzzdf0003nfwid3afc3qh","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>1.协议遵守https协议<br>2.api应该有单独域名<br>3.加上版本号<br>4.由于restfulapi中url表示一种资源的集合，而不再是一个功能一个url，所以网址中不能有动词，应该全是名词，且与数据库的表名一一对应，也由于是一种集合，所以api的名词尽量为复数<br>5.用http动词去表示资源的具体操作类型，如put/patch/post/get/delete/增删改查等<br>6.如果涉及分页这种返回结果相当多的情况，api也可以提供一些参数，如?limit=10&amp;page=2<br>7.有单独的状态码</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>1.协议遵守https协议<br>2.api应该有单独域名<br>3.加上版本号<br>4.由于restfulapi中url表示一种资源的集合，而不再是一个功能一个url，所以网址中不能有动词，应该全是名词，且与数据库的表名一一对应，也由于是一种集合，所以api的名词尽量为复数<br>5.用http动词去表示资源的具体操作类型，如put/patch/post/get/delete/增删改查等<br>6.如果涉及分页这种返回结果相当多的情况，api也可以提供一些参数，如?limit=10&amp;page=2<br>7.有单独的状态码</p>\n"},{"title":"微信小程序相关","date":"2019-07-21T11:39:12.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 初始化项目文件\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-236fc1b747f54b96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 根目录：\n`app.json`：项目配置文件，可以配置页面\n包括：page、tabbar、window、plugin等等\napp.js：每个页面都会去处理的方法。比如判断当前版本是否最新，还有是否有登录信息等等。\n`app.wxss`：全局的样式文件\n`project.config.json`：项目配置文件。可以设置一些编辑器的样式，设置一些js编译为es5是否禁用严格模式、上传时是否压缩、分包分不分等，是开发时的设置，在小程序侧边可以直接打钩设置。\n`project.private.config.json`：\n很多时候我们需要进行开发调试，利用微信开发者工具的预览功能在真机上查看实现效果。为了方便调试，我们会设置编译模式。但是编译模式的改动会写入 project.config.json 文件的 condition 字段中，而项目只有一份 project.config.json 文件。所以在团队协作的时候，每个人都在往里加入自己的编译模式，这给团队造成了一点麻烦。解决方案如下：\n\n1. 在 .gitignore 文件中添加 project.config.json、project.private.config.json\n2. 为项目引入 project.config.json.example 文件作为项目配置文件统一模板\n3. 团队成员使用 project.private.config.json 作为个人配置（此配置文件会优先使用）\n\n`sitemap.json`：是否允许微信索引（爬虫相关）\npages文件夹：存储页面。\n## wxss wxml js\nskyline WXSS和webview：skyline的性能更好些，不支持css animation\n### wxss的常用组件\n#### 视图容器\nswiper\nswiper-item\n\n<hr>\n\nmoveable-area\nmoveable-view\n\n<hr>\n\nscroll-view\nmatch-media\nroot-portal（position: fixed）\nview\nblock\n#### 基础内容\ngrid-view\nlist-view\nicon\nprogress\nrich-text\ntext\n#### 表单组件\nbutton\ncheckbox\ncheckbox-group\nform\ninput\nslide\npicker\npicker-view\nradio\nradio-group\nswitch\ntextarea\nimage\nmap\n## 小程序框架\n### 小程序生命周期\n[点击查看文档](https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onHide)\n`onLaunch`：全局app.js中的，他的触发比`page`中的`onLoad`要高\n`onLoad`：页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数。\n`onShow`：页面显示/切入前台时触发。\n`onReady`：页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。\n`onHide`：页面隐藏/切入后台时触发。如 [wx.navigateTo](https://developers.weixin.qq.com/miniprogram/dev/  api/route/wx.navigateTo.html) 或底部 `tab` 切换到其他页面，小程序切入后台等。[](https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onUnload)\n`onUnload`：页面卸载时触发。如[wx.redirectTo](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html)或[wx.navigateBack](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html)到其他页面时。\n\n## [](https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#%E9%A1%B5%E9%9D%A2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0)\n\n### 其他page内的事件\nonPullDownRefresh\nonReachBottom\nonShareAppMessage\nonPageScroll\n##事件\n用bind或catch绑定（catch阻止向上冒泡）\ncapture-bind（捕获）\nbindtap\nbind:touchstart\nbind: longpress\n还有一些单独组件的事件可以看看文档，比如swiper的\nbindtransition\nbindanimationfinish\n等等等吖吖吖\n##常用api整理\nthis.setData\nwx.request\n```javascript\nwx.request({\n      url: _this.data.host + '/mobile/singleFeed?feedId=' + feedId,\n      method: 'GET',\n      header: {\n        'Content-Type': 'application/json'\n      },\n      data: {\n        orderPrice: _this.data.totalFee\n      },\n      success: function (res) {\n        console.log(res);\n        _this.setData({\n          feedInfo: res.data.data\n        })\n      }\n    })\n```\nwx.navigateTo：保留当前页面，跳转到应用内的某个页面。使用 [wx.navigateBack](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html) 可以返回到原页面。小程序中页面栈最多十层。\n\n```javascript\nwx.navigateTo({\n  url: 'test?id=1',\n  events: {\n    // 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据\n    acceptDataFromOpenedPage: function(data) {\n      console.log(data)\n    },\n    someEvent: function(data) {\n      console.log(data)\n    }\n    ...\n  },\n  success: function(res) {\n    // 通过 eventChannel 向被打开页面传送数据\n    res.eventChannel.emit('acceptDataFromOpenerPage', { data: 'test' })\n  }\n})\n```\nwx.redirectTo：重定向。使用 [wx.navigateBack](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html) 不可以返回到原页面\n```javascript\nwx.redirectTo({\n  url: 'test?id=1'\n})\n```\nwx.createVideoContext('xxx');\nxxx是video标签的id\n```javascript\n    <video \n        id='feedVideo'\n        src='{{feedInfo.feedVod.videoUrl}}' poster='{{feedInfo.feedVod.coverUrl}}'\n    ></video>\n```\n```javascript\n    const VideoContext = wx.createVideoContext('feedVideo');\n    VideoContext.play(); // 播放\n    VideoContext.pause(); // 暂停\n```\nwx.showToast\n```javascript\nwx.showToast({\n      title: '视频播放异常，请稍后重试',\n      icon: 'none',\n      duration: 2000\n    })\n```\nwx.getStorage\nwx.setStorage\nwx.clearStorage()\n```javascript\n    wx.getStorage({   //获取提示分享气泡是否显示过\n      key: 'showShareTip',\n      success(res) {\n        console.log('success');\n        console.log(res);\n        _this.setData({\n          showShareTip: res.data\n        })\n      }\n    })\n```\nwx.showShareMenu\n```javascript\nwx.showShareMenu({\n      withShareTicket: true\n    })\n```\nwx.canIUse\n```javascript\nupDataApp: function () {//版本更新\n    if (wx.canIUse('getUpdateManager')) {//判断当前微信版本是否支持版本更新\n      const updateManager = wx.getUpdateManager();\n      updateManager.onCheckForUpdate(function (res) {\n        if (res.hasUpdate) { // 请求完新版本信息的回调\n          updateManager.onUpdateReady(function () {\n            wx.showModal({\n              title: '更新提示',\n              content: '新版本已经准备好，是否重启应用？',\n              success: function (res) {\n                if (res.confirm) {// 新的版本已经下载好，调用 applyUpdate 应用新版本并重启\n                  updateManager.applyUpdate()\n                }\n              }\n            })\n          });\n          updateManager.onUpdateFailed(function () {\n            wx.showModal({// 新的版本下载失败\n              title: '已经有新版本了哟~',\n              content: '新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~',\n            })\n          })\n        }\n      })\n    } else {\n      wx.showModal({// 如果希望用户在最新版本的客户端上体验您的小程序，可以这样子提示\n        title: '提示',\n        content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'\n      })\n    }\n  },\n```\nwx.hideNavigationBarLoading() //在当前页面隐藏导航条加载动画\nwx.stopPullDownRefresh() //停止下拉刷新\n\n<hr>\n\n## 面试题\n### 1、简单描述下微信小程序的相关文件类型?\n### 2、小程序的双向绑定和vue哪里不一样?\n### 3、小程序页面间有哪些传递数据的方法?\n#### 使用全局变量实现数据传递\napp.js中定义globalData，然后在单独的文件中使用\n```javascript\nconst app = getApp()\napp.globalData.xxx\n```\n#### 使用navigateTo\nnavigateTo的url后面跟?参数也可以实现数据传递，在新页面onLoad方法中使用\n```javascript\nwx.navigateTo({\n  url: 'aaaa?name=xxx'\n})\n```\n在新页面中\n```javascript\nonLoad(option) {\n  console.log(option) // {name:xxx}\n}\n```\n### wxs\n定义公共工具类，比如叫utils，可以使用import引入\n```javascript\nimport base64 from '../../utils/base64';\n```\nwxs也可以导出模块\n```javascript\n<wxs module=\"utils\">\nvar judgeHttp = function(str){\n  return str.indexOf('http')\n}\nmodule.exports = {\n  judgeHttp: judgeHttp\n}\n</wxs>\n```\n#### 使用getStorage\n本地缓存的清理时机跟代码包一样，只有在代码包被清理的时候本地缓存才会被清理。\n### 4、小程序的生命周期\n\n### 5、如何下拉刷新\n在`app.json`中，或者在对应的json中设置\n```\nenablePullDownRefresh: true\n```\n在钩子函数`onPullDownRefresh`中，监听下拉刷新，调用setData去更新数据，设置flag，让更新不会多次给重复触发中。\n请求成功后，调用wx.stopPullDownRefresh去停止下拉刷新。\n### 6、bindtap和catchtap\n停止冒泡\n### 7、wx.navigateTo(), wx.redirectTo(), wx.switchTab(), wx.navigateBack(), wx.reLaunch()的区别?\nwx.navigateTo()：保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面\nwx.redirectTo()：关闭当前页面，跳转到新的页面（类似重定向）。但是不允许跳转到 tabbar 页面\nwx.switchTab()：跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面\nwx.navigateBack():关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层\nwx.reLaunch()：关闭所有页面，打开到应用内的某个页面\n###8、登录的流程\n点击查看：[登录流程描述](https://cloud.tencent.com/developer/article/1797514\n)\n### 9、app.json  全局配置文件描述\npages  :  用于存放当前小程序的所有页面路径\nwindow : 小程序所有页面的顶部背景颜色，文字颜色配置。\ntabBar  :  小程序底部的Tab ,最多5个，最少2个。\n### 10、小程序运行机制\n热启动 ：假如用户已经打开了某个小程序，在一定时间内再次打开小程序的话，这个时候我们就不再需要重新启动了，这需要把我们的后台打开的小程序切换到前台来使用。\n冷启动：用户首次打开小程序或被微信主动销毁再次打开的情况，此时小程序需要重新加载启动。\n### 11、小程序什么时候会主动销毁？\n小程序在进入后台之后，客户端会帮我们在一定时间内维持我们的一个状态，超过五分钟后，会被微信主动销毁.\n\n官方也没有明确说明 什么时候销毁， 在不同机型表现也不一样，\n\n2019年开发时：时间官方文档没有说明，但是经过询问一般指5分钟内\n\n2020年开发时：时间官方文档没有说明，实测安卓没有固定时间，内存足够情况下，有时候一天了还在，有时候几分钟就没了。\n### 12、小程序怎么跟随事件传值\n在  页面标签上通过 绑定 dataset-key = value ， 然后绑定点击通过e.currentTarget.dataset.key   来获取标签上绑定的值。 \n\n### 13、小程序支付\n小程序有一个统一下单的api接口。\n[点击查看：微信支付](https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_8_0.shtml)\n[点击查看：云支付](https://developers.weixin.qq.com/miniprogram/dev/wxcloudrun/src/development/pay/order/)\n1.  小程序或公众号调用微信云托管，在微信云托管中调用统一下单接口，参数中带上接收异步支付结果的服务名称和其所在云环境ID\n2.  统一下单接口返回的成功结果对象中有 payment 字段，该字段即是小程序端发起支付的接口（wx.requestPayment）所需的所有信息\n3.  小程序端拿到后端结果，调用 wx. requestPayment 发起支付\n4.  支付完成后，在统一下单接口中配置的云托管服务将收到支付结果通知，具体详见[结果回调](https://developers.weixin.qq.com/miniprogram/dev/wxcloudrun/src/development/pay/callback/)\n## 开发中遇到的问题\n热启动和冷启动的问题。\nhttp://qiutianaimeili.com/html/page/2021/04/20347wh9zpbtkre.html","source":"_posts/cxy/review/wechat.md","raw":"---\ntitle: '微信小程序相关'\ndate: 2019-07-21 19:39:12\ntags: 微信小程序\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 初始化项目文件\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-236fc1b747f54b96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 根目录：\n`app.json`：项目配置文件，可以配置页面\n包括：page、tabbar、window、plugin等等\napp.js：每个页面都会去处理的方法。比如判断当前版本是否最新，还有是否有登录信息等等。\n`app.wxss`：全局的样式文件\n`project.config.json`：项目配置文件。可以设置一些编辑器的样式，设置一些js编译为es5是否禁用严格模式、上传时是否压缩、分包分不分等，是开发时的设置，在小程序侧边可以直接打钩设置。\n`project.private.config.json`：\n很多时候我们需要进行开发调试，利用微信开发者工具的预览功能在真机上查看实现效果。为了方便调试，我们会设置编译模式。但是编译模式的改动会写入 project.config.json 文件的 condition 字段中，而项目只有一份 project.config.json 文件。所以在团队协作的时候，每个人都在往里加入自己的编译模式，这给团队造成了一点麻烦。解决方案如下：\n\n1. 在 .gitignore 文件中添加 project.config.json、project.private.config.json\n2. 为项目引入 project.config.json.example 文件作为项目配置文件统一模板\n3. 团队成员使用 project.private.config.json 作为个人配置（此配置文件会优先使用）\n\n`sitemap.json`：是否允许微信索引（爬虫相关）\npages文件夹：存储页面。\n## wxss wxml js\nskyline WXSS和webview：skyline的性能更好些，不支持css animation\n### wxss的常用组件\n#### 视图容器\nswiper\nswiper-item\n\n<hr>\n\nmoveable-area\nmoveable-view\n\n<hr>\n\nscroll-view\nmatch-media\nroot-portal（position: fixed）\nview\nblock\n#### 基础内容\ngrid-view\nlist-view\nicon\nprogress\nrich-text\ntext\n#### 表单组件\nbutton\ncheckbox\ncheckbox-group\nform\ninput\nslide\npicker\npicker-view\nradio\nradio-group\nswitch\ntextarea\nimage\nmap\n## 小程序框架\n### 小程序生命周期\n[点击查看文档](https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onHide)\n`onLaunch`：全局app.js中的，他的触发比`page`中的`onLoad`要高\n`onLoad`：页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数。\n`onShow`：页面显示/切入前台时触发。\n`onReady`：页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。\n`onHide`：页面隐藏/切入后台时触发。如 [wx.navigateTo](https://developers.weixin.qq.com/miniprogram/dev/  api/route/wx.navigateTo.html) 或底部 `tab` 切换到其他页面，小程序切入后台等。[](https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onUnload)\n`onUnload`：页面卸载时触发。如[wx.redirectTo](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html)或[wx.navigateBack](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html)到其他页面时。\n\n## [](https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#%E9%A1%B5%E9%9D%A2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0)\n\n### 其他page内的事件\nonPullDownRefresh\nonReachBottom\nonShareAppMessage\nonPageScroll\n##事件\n用bind或catch绑定（catch阻止向上冒泡）\ncapture-bind（捕获）\nbindtap\nbind:touchstart\nbind: longpress\n还有一些单独组件的事件可以看看文档，比如swiper的\nbindtransition\nbindanimationfinish\n等等等吖吖吖\n##常用api整理\nthis.setData\nwx.request\n```javascript\nwx.request({\n      url: _this.data.host + '/mobile/singleFeed?feedId=' + feedId,\n      method: 'GET',\n      header: {\n        'Content-Type': 'application/json'\n      },\n      data: {\n        orderPrice: _this.data.totalFee\n      },\n      success: function (res) {\n        console.log(res);\n        _this.setData({\n          feedInfo: res.data.data\n        })\n      }\n    })\n```\nwx.navigateTo：保留当前页面，跳转到应用内的某个页面。使用 [wx.navigateBack](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html) 可以返回到原页面。小程序中页面栈最多十层。\n\n```javascript\nwx.navigateTo({\n  url: 'test?id=1',\n  events: {\n    // 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据\n    acceptDataFromOpenedPage: function(data) {\n      console.log(data)\n    },\n    someEvent: function(data) {\n      console.log(data)\n    }\n    ...\n  },\n  success: function(res) {\n    // 通过 eventChannel 向被打开页面传送数据\n    res.eventChannel.emit('acceptDataFromOpenerPage', { data: 'test' })\n  }\n})\n```\nwx.redirectTo：重定向。使用 [wx.navigateBack](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html) 不可以返回到原页面\n```javascript\nwx.redirectTo({\n  url: 'test?id=1'\n})\n```\nwx.createVideoContext('xxx');\nxxx是video标签的id\n```javascript\n    <video \n        id='feedVideo'\n        src='{{feedInfo.feedVod.videoUrl}}' poster='{{feedInfo.feedVod.coverUrl}}'\n    ></video>\n```\n```javascript\n    const VideoContext = wx.createVideoContext('feedVideo');\n    VideoContext.play(); // 播放\n    VideoContext.pause(); // 暂停\n```\nwx.showToast\n```javascript\nwx.showToast({\n      title: '视频播放异常，请稍后重试',\n      icon: 'none',\n      duration: 2000\n    })\n```\nwx.getStorage\nwx.setStorage\nwx.clearStorage()\n```javascript\n    wx.getStorage({   //获取提示分享气泡是否显示过\n      key: 'showShareTip',\n      success(res) {\n        console.log('success');\n        console.log(res);\n        _this.setData({\n          showShareTip: res.data\n        })\n      }\n    })\n```\nwx.showShareMenu\n```javascript\nwx.showShareMenu({\n      withShareTicket: true\n    })\n```\nwx.canIUse\n```javascript\nupDataApp: function () {//版本更新\n    if (wx.canIUse('getUpdateManager')) {//判断当前微信版本是否支持版本更新\n      const updateManager = wx.getUpdateManager();\n      updateManager.onCheckForUpdate(function (res) {\n        if (res.hasUpdate) { // 请求完新版本信息的回调\n          updateManager.onUpdateReady(function () {\n            wx.showModal({\n              title: '更新提示',\n              content: '新版本已经准备好，是否重启应用？',\n              success: function (res) {\n                if (res.confirm) {// 新的版本已经下载好，调用 applyUpdate 应用新版本并重启\n                  updateManager.applyUpdate()\n                }\n              }\n            })\n          });\n          updateManager.onUpdateFailed(function () {\n            wx.showModal({// 新的版本下载失败\n              title: '已经有新版本了哟~',\n              content: '新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~',\n            })\n          })\n        }\n      })\n    } else {\n      wx.showModal({// 如果希望用户在最新版本的客户端上体验您的小程序，可以这样子提示\n        title: '提示',\n        content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'\n      })\n    }\n  },\n```\nwx.hideNavigationBarLoading() //在当前页面隐藏导航条加载动画\nwx.stopPullDownRefresh() //停止下拉刷新\n\n<hr>\n\n## 面试题\n### 1、简单描述下微信小程序的相关文件类型?\n### 2、小程序的双向绑定和vue哪里不一样?\n### 3、小程序页面间有哪些传递数据的方法?\n#### 使用全局变量实现数据传递\napp.js中定义globalData，然后在单独的文件中使用\n```javascript\nconst app = getApp()\napp.globalData.xxx\n```\n#### 使用navigateTo\nnavigateTo的url后面跟?参数也可以实现数据传递，在新页面onLoad方法中使用\n```javascript\nwx.navigateTo({\n  url: 'aaaa?name=xxx'\n})\n```\n在新页面中\n```javascript\nonLoad(option) {\n  console.log(option) // {name:xxx}\n}\n```\n### wxs\n定义公共工具类，比如叫utils，可以使用import引入\n```javascript\nimport base64 from '../../utils/base64';\n```\nwxs也可以导出模块\n```javascript\n<wxs module=\"utils\">\nvar judgeHttp = function(str){\n  return str.indexOf('http')\n}\nmodule.exports = {\n  judgeHttp: judgeHttp\n}\n</wxs>\n```\n#### 使用getStorage\n本地缓存的清理时机跟代码包一样，只有在代码包被清理的时候本地缓存才会被清理。\n### 4、小程序的生命周期\n\n### 5、如何下拉刷新\n在`app.json`中，或者在对应的json中设置\n```\nenablePullDownRefresh: true\n```\n在钩子函数`onPullDownRefresh`中，监听下拉刷新，调用setData去更新数据，设置flag，让更新不会多次给重复触发中。\n请求成功后，调用wx.stopPullDownRefresh去停止下拉刷新。\n### 6、bindtap和catchtap\n停止冒泡\n### 7、wx.navigateTo(), wx.redirectTo(), wx.switchTab(), wx.navigateBack(), wx.reLaunch()的区别?\nwx.navigateTo()：保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面\nwx.redirectTo()：关闭当前页面，跳转到新的页面（类似重定向）。但是不允许跳转到 tabbar 页面\nwx.switchTab()：跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面\nwx.navigateBack():关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层\nwx.reLaunch()：关闭所有页面，打开到应用内的某个页面\n###8、登录的流程\n点击查看：[登录流程描述](https://cloud.tencent.com/developer/article/1797514\n)\n### 9、app.json  全局配置文件描述\npages  :  用于存放当前小程序的所有页面路径\nwindow : 小程序所有页面的顶部背景颜色，文字颜色配置。\ntabBar  :  小程序底部的Tab ,最多5个，最少2个。\n### 10、小程序运行机制\n热启动 ：假如用户已经打开了某个小程序，在一定时间内再次打开小程序的话，这个时候我们就不再需要重新启动了，这需要把我们的后台打开的小程序切换到前台来使用。\n冷启动：用户首次打开小程序或被微信主动销毁再次打开的情况，此时小程序需要重新加载启动。\n### 11、小程序什么时候会主动销毁？\n小程序在进入后台之后，客户端会帮我们在一定时间内维持我们的一个状态，超过五分钟后，会被微信主动销毁.\n\n官方也没有明确说明 什么时候销毁， 在不同机型表现也不一样，\n\n2019年开发时：时间官方文档没有说明，但是经过询问一般指5分钟内\n\n2020年开发时：时间官方文档没有说明，实测安卓没有固定时间，内存足够情况下，有时候一天了还在，有时候几分钟就没了。\n### 12、小程序怎么跟随事件传值\n在  页面标签上通过 绑定 dataset-key = value ， 然后绑定点击通过e.currentTarget.dataset.key   来获取标签上绑定的值。 \n\n### 13、小程序支付\n小程序有一个统一下单的api接口。\n[点击查看：微信支付](https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_8_0.shtml)\n[点击查看：云支付](https://developers.weixin.qq.com/miniprogram/dev/wxcloudrun/src/development/pay/order/)\n1.  小程序或公众号调用微信云托管，在微信云托管中调用统一下单接口，参数中带上接收异步支付结果的服务名称和其所在云环境ID\n2.  统一下单接口返回的成功结果对象中有 payment 字段，该字段即是小程序端发起支付的接口（wx.requestPayment）所需的所有信息\n3.  小程序端拿到后端结果，调用 wx. requestPayment 发起支付\n4.  支付完成后，在统一下单接口中配置的云托管服务将收到支付结果通知，具体详见[结果回调](https://developers.weixin.qq.com/miniprogram/dev/wxcloudrun/src/development/pay/callback/)\n## 开发中遇到的问题\n热启动和冷启动的问题。\nhttp://qiutianaimeili.com/html/page/2021/04/20347wh9zpbtkre.html","slug":"cxy/review/wechat","published":1,"updated":"2023-03-08T03:23:16.847Z","_id":"cldbvzzdh000bnfwid9rq8vvt","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"初始化项目文件\"><a href=\"#初始化项目文件\" class=\"headerlink\" title=\"初始化项目文件\"></a>初始化项目文件</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-236fc1b747f54b96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"根目录：\"><a href=\"#根目录：\" class=\"headerlink\" title=\"根目录：\"></a>根目录：</h3><p><code>app.json</code>：项目配置文件，可以配置页面<br>包括：page、tabbar、window、plugin等等<br>app.js：每个页面都会去处理的方法。比如判断当前版本是否最新，还有是否有登录信息等等。<br><code>app.wxss</code>：全局的样式文件<br><code>project.config.json</code>：项目配置文件。可以设置一些编辑器的样式，设置一些js编译为es5是否禁用严格模式、上传时是否压缩、分包分不分等，是开发时的设置，在小程序侧边可以直接打钩设置。<br><code>project.private.config.json</code>：<br>很多时候我们需要进行开发调试，利用微信开发者工具的预览功能在真机上查看实现效果。为了方便调试，我们会设置编译模式。但是编译模式的改动会写入 project.config.json 文件的 condition 字段中，而项目只有一份 project.config.json 文件。所以在团队协作的时候，每个人都在往里加入自己的编译模式，这给团队造成了一点麻烦。解决方案如下：</p>\n<ol>\n<li>在 .gitignore 文件中添加 project.config.json、project.private.config.json</li>\n<li>为项目引入 project.config.json.example 文件作为项目配置文件统一模板</li>\n<li>团队成员使用 project.private.config.json 作为个人配置（此配置文件会优先使用）</li>\n</ol>\n<p><code>sitemap.json</code>：是否允许微信索引（爬虫相关）<br>pages文件夹：存储页面。</p>\n<h2 id=\"wxss-wxml-js\"><a href=\"#wxss-wxml-js\" class=\"headerlink\" title=\"wxss wxml js\"></a>wxss wxml js</h2><p>skyline WXSS和webview：skyline的性能更好些，不支持css animation</p>\n<h3 id=\"wxss的常用组件\"><a href=\"#wxss的常用组件\" class=\"headerlink\" title=\"wxss的常用组件\"></a>wxss的常用组件</h3><h4 id=\"视图容器\"><a href=\"#视图容器\" class=\"headerlink\" title=\"视图容器\"></a>视图容器</h4><p>swiper<br>swiper-item</p>\n<hr>\n\n<p>moveable-area<br>moveable-view</p>\n<hr>\n\n<p>scroll-view<br>match-media<br>root-portal（position: fixed）<br>view<br>block</p>\n<h4 id=\"基础内容\"><a href=\"#基础内容\" class=\"headerlink\" title=\"基础内容\"></a>基础内容</h4><p>grid-view<br>list-view<br>icon<br>progress<br>rich-text<br>text</p>\n<h4 id=\"表单组件\"><a href=\"#表单组件\" class=\"headerlink\" title=\"表单组件\"></a>表单组件</h4><p>button<br>checkbox<br>checkbox-group<br>form<br>input<br>slide<br>picker<br>picker-view<br>radio<br>radio-group<br>switch<br>textarea<br>image<br>map</p>\n<h2 id=\"小程序框架\"><a href=\"#小程序框架\" class=\"headerlink\" title=\"小程序框架\"></a>小程序框架</h2><h3 id=\"小程序生命周期\"><a href=\"#小程序生命周期\" class=\"headerlink\" title=\"小程序生命周期\"></a>小程序生命周期</h3><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onHide\">点击查看文档</a><br><code>onLaunch</code>：全局app.js中的，他的触发比<code>page</code>中的<code>onLoad</code>要高<br><code>onLoad</code>：页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数。<br><code>onShow</code>：页面显示/切入前台时触发。<br><code>onReady</code>：页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。<br><code>onHide</code>：页面隐藏/切入后台时触发。如 [wx.navigateTo](<a href=\"https://developers.weixin.qq.com/miniprogram/dev/\">https://developers.weixin.qq.com/miniprogram/dev/</a>  api/route/wx.navigateTo.html) 或底部 <code>tab</code> 切换到其他页面，小程序切入后台等。<a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onUnload\"></a><br><code>onUnload</code>：页面卸载时触发。如<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html\">wx.redirectTo</a>或<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">wx.navigateBack</a>到其他页面时。</p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#%E9%A1%B5%E9%9D%A2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0\"></a></h2><h3 id=\"其他page内的事件\"><a href=\"#其他page内的事件\" class=\"headerlink\" title=\"其他page内的事件\"></a>其他page内的事件</h3><p>onPullDownRefresh<br>onReachBottom<br>onShareAppMessage<br>onPageScroll<br>##事件<br>用bind或catch绑定（catch阻止向上冒泡）<br>capture-bind（捕获）<br>bindtap<br>bind:touchstart<br>bind: longpress<br>还有一些单独组件的事件可以看看文档，比如swiper的<br>bindtransition<br>bindanimationfinish<br>等等等吖吖吖<br>##常用api整理<br>this.setData<br>wx.request</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: _this.<span class=\"property\">data</span>.<span class=\"property\">host</span> + <span class=\"string\">&#x27;/mobile/singleFeed?feedId=&#x27;</span> + feedId,</span><br><span class=\"line\">      <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">header</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">orderPrice</span>: _this.<span class=\"property\">data</span>.<span class=\"property\">totalFee</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">        _this.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">feedInfo</span>: res.<span class=\"property\">data</span>.<span class=\"property\">data</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.navigateTo：保留当前页面，跳转到应用内的某个页面。使用 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">wx.navigateBack</a> 可以返回到原页面。小程序中页面栈最多十层。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;test?id=1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">events</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据</span></span><br><span class=\"line\">    <span class=\"attr\">acceptDataFromOpenedPage</span>: <span class=\"keyword\">function</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">someEvent</span>: <span class=\"keyword\">function</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">success</span>: <span class=\"keyword\">function</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 eventChannel 向被打开页面传送数据</span></span><br><span class=\"line\">    res.<span class=\"property\">eventChannel</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;acceptDataFromOpenerPage&#x27;</span>, &#123; <span class=\"attr\">data</span>: <span class=\"string\">&#x27;test&#x27;</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.redirectTo：重定向。使用 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">wx.navigateBack</a> 不可以返回到原页面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">redirectTo</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;test?id=1&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.createVideoContext(‘xxx’);<br>xxx是video标签的id</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video </span><br><span class=\"line\">    id=<span class=\"string\">&#x27;feedVideo&#x27;</span></span><br><span class=\"line\">    src=<span class=\"string\">&#x27;&#123;&#123;feedInfo.feedVod.videoUrl&#125;&#125;&#x27;</span> poster=<span class=\"string\">&#x27;&#123;&#123;feedInfo.feedVod.coverUrl&#125;&#125;&#x27;</span></span><br><span class=\"line\">&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">VideoContext</span> = wx.<span class=\"title function_\">createVideoContext</span>(<span class=\"string\">&#x27;feedVideo&#x27;</span>);</span><br><span class=\"line\"><span class=\"title class_\">VideoContext</span>.<span class=\"title function_\">play</span>(); <span class=\"comment\">// 播放</span></span><br><span class=\"line\"><span class=\"title class_\">VideoContext</span>.<span class=\"title function_\">pause</span>(); <span class=\"comment\">// 暂停</span></span><br></pre></td></tr></table></figure>\n<p>wx.showToast</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;视频播放异常，请稍后重试&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">duration</span>: <span class=\"number\">2000</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.getStorage<br>wx.setStorage<br>wx.clearStorage()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">getStorage</span>(&#123;   <span class=\"comment\">//获取提示分享气泡是否显示过</span></span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"string\">&#x27;showShareTip&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">success</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">    _this.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">showShareTip</span>: res.<span class=\"property\">data</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.showShareMenu</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">showShareMenu</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">withShareTicket</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.canIUse</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">upDataApp</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"comment\">//版本更新</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wx.<span class=\"title function_\">canIUse</span>(<span class=\"string\">&#x27;getUpdateManager&#x27;</span>)) &#123;<span class=\"comment\">//判断当前微信版本是否支持版本更新</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> updateManager = wx.<span class=\"title function_\">getUpdateManager</span>();</span><br><span class=\"line\">      updateManager.<span class=\"title function_\">onCheckForUpdate</span>(<span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">hasUpdate</span>) &#123; <span class=\"comment\">// 请求完新版本信息的回调</span></span><br><span class=\"line\">          updateManager.<span class=\"title function_\">onUpdateReady</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            wx.<span class=\"title function_\">showModal</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">title</span>: <span class=\"string\">&#x27;更新提示&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">content</span>: <span class=\"string\">&#x27;新版本已经准备好，是否重启应用？&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (res.<span class=\"property\">confirm</span>) &#123;<span class=\"comment\">// 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span></span><br><span class=\"line\">                  updateManager.<span class=\"title function_\">applyUpdate</span>()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          updateManager.<span class=\"title function_\">onUpdateFailed</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            wx.<span class=\"title function_\">showModal</span>(&#123;<span class=\"comment\">// 新的版本下载失败</span></span><br><span class=\"line\">              <span class=\"attr\">title</span>: <span class=\"string\">&#x27;已经有新版本了哟~&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">content</span>: <span class=\"string\">&#x27;新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~&#x27;</span>,</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      wx.<span class=\"title function_\">showModal</span>(&#123;<span class=\"comment\">// 如果希望用户在最新版本的客户端上体验您的小程序，可以这样子提示</span></span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&#x27;提示&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">content</span>: <span class=\"string\">&#x27;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#x27;</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>wx.hideNavigationBarLoading() //在当前页面隐藏导航条加载动画<br>wx.stopPullDownRefresh() //停止下拉刷新</p>\n<hr>\n\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><h3 id=\"1、简单描述下微信小程序的相关文件类型\"><a href=\"#1、简单描述下微信小程序的相关文件类型\" class=\"headerlink\" title=\"1、简单描述下微信小程序的相关文件类型?\"></a>1、简单描述下微信小程序的相关文件类型?</h3><h3 id=\"2、小程序的双向绑定和vue哪里不一样\"><a href=\"#2、小程序的双向绑定和vue哪里不一样\" class=\"headerlink\" title=\"2、小程序的双向绑定和vue哪里不一样?\"></a>2、小程序的双向绑定和vue哪里不一样?</h3><h3 id=\"3、小程序页面间有哪些传递数据的方法\"><a href=\"#3、小程序页面间有哪些传递数据的方法\" class=\"headerlink\" title=\"3、小程序页面间有哪些传递数据的方法?\"></a>3、小程序页面间有哪些传递数据的方法?</h3><h4 id=\"使用全局变量实现数据传递\"><a href=\"#使用全局变量实现数据传递\" class=\"headerlink\" title=\"使用全局变量实现数据传递\"></a>使用全局变量实现数据传递</h4><p>app.js中定义globalData，然后在单独的文件中使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">getApp</span>()</span><br><span class=\"line\">app.<span class=\"property\">globalData</span>.<span class=\"property\">xxx</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用navigateTo\"><a href=\"#使用navigateTo\" class=\"headerlink\" title=\"使用navigateTo\"></a>使用navigateTo</h4><p>navigateTo的url后面跟?参数也可以实现数据传递，在新页面onLoad方法中使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;aaaa?name=xxx&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在新页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onLoad</span>(<span class=\"params\">option</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(option) <span class=\"comment\">// &#123;name:xxx&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"wxs\"><a href=\"#wxs\" class=\"headerlink\" title=\"wxs\"></a>wxs</h3><p>定义公共工具类，比如叫utils，可以使用import引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64 <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../utils/base64&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>wxs也可以导出模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;wxs <span class=\"variable language_\">module</span>=<span class=\"string\">&quot;utils&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> judgeHttp = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">judgeHttp</span>: judgeHttp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/wxs&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用getStorage\"><a href=\"#使用getStorage\" class=\"headerlink\" title=\"使用getStorage\"></a>使用getStorage</h4><p>本地缓存的清理时机跟代码包一样，只有在代码包被清理的时候本地缓存才会被清理。</p>\n<h3 id=\"4、小程序的生命周期\"><a href=\"#4、小程序的生命周期\" class=\"headerlink\" title=\"4、小程序的生命周期\"></a>4、小程序的生命周期</h3><h3 id=\"5、如何下拉刷新\"><a href=\"#5、如何下拉刷新\" class=\"headerlink\" title=\"5、如何下拉刷新\"></a>5、如何下拉刷新</h3><p>在<code>app.json</code>中，或者在对应的json中设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enablePullDownRefresh: true</span><br></pre></td></tr></table></figure>\n<p>在钩子函数<code>onPullDownRefresh</code>中，监听下拉刷新，调用setData去更新数据，设置flag，让更新不会多次给重复触发中。<br>请求成功后，调用wx.stopPullDownRefresh去停止下拉刷新。</p>\n<h3 id=\"6、bindtap和catchtap\"><a href=\"#6、bindtap和catchtap\" class=\"headerlink\" title=\"6、bindtap和catchtap\"></a>6、bindtap和catchtap</h3><p>停止冒泡</p>\n<h3 id=\"7、wx-navigateTo-wx-redirectTo-wx-switchTab-wx-navigateBack-wx-reLaunch-的区别\"><a href=\"#7、wx-navigateTo-wx-redirectTo-wx-switchTab-wx-navigateBack-wx-reLaunch-的区别\" class=\"headerlink\" title=\"7、wx.navigateTo(), wx.redirectTo(), wx.switchTab(), wx.navigateBack(), wx.reLaunch()的区别?\"></a>7、wx.navigateTo(), wx.redirectTo(), wx.switchTab(), wx.navigateBack(), wx.reLaunch()的区别?</h3><p>wx.navigateTo()：保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面<br>wx.redirectTo()：关闭当前页面，跳转到新的页面（类似重定向）。但是不允许跳转到 tabbar 页面<br>wx.switchTab()：跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面<br>wx.navigateBack():关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层<br>wx.reLaunch()：关闭所有页面，打开到应用内的某个页面<br>###8、登录的流程<br>点击查看：<a href=\"https://cloud.tencent.com/developer/article/1797514\">登录流程描述</a></p>\n<h3 id=\"9、app-json-全局配置文件描述\"><a href=\"#9、app-json-全局配置文件描述\" class=\"headerlink\" title=\"9、app.json  全局配置文件描述\"></a>9、app.json  全局配置文件描述</h3><p>pages  :  用于存放当前小程序的所有页面路径<br>window : 小程序所有页面的顶部背景颜色，文字颜色配置。<br>tabBar  :  小程序底部的Tab ,最多5个，最少2个。</p>\n<h3 id=\"10、小程序运行机制\"><a href=\"#10、小程序运行机制\" class=\"headerlink\" title=\"10、小程序运行机制\"></a>10、小程序运行机制</h3><p>热启动 ：假如用户已经打开了某个小程序，在一定时间内再次打开小程序的话，这个时候我们就不再需要重新启动了，这需要把我们的后台打开的小程序切换到前台来使用。<br>冷启动：用户首次打开小程序或被微信主动销毁再次打开的情况，此时小程序需要重新加载启动。</p>\n<h3 id=\"11、小程序什么时候会主动销毁？\"><a href=\"#11、小程序什么时候会主动销毁？\" class=\"headerlink\" title=\"11、小程序什么时候会主动销毁？\"></a>11、小程序什么时候会主动销毁？</h3><p>小程序在进入后台之后，客户端会帮我们在一定时间内维持我们的一个状态，超过五分钟后，会被微信主动销毁.</p>\n<p>官方也没有明确说明 什么时候销毁， 在不同机型表现也不一样，</p>\n<p>2019年开发时：时间官方文档没有说明，但是经过询问一般指5分钟内</p>\n<p>2020年开发时：时间官方文档没有说明，实测安卓没有固定时间，内存足够情况下，有时候一天了还在，有时候几分钟就没了。</p>\n<h3 id=\"12、小程序怎么跟随事件传值\"><a href=\"#12、小程序怎么跟随事件传值\" class=\"headerlink\" title=\"12、小程序怎么跟随事件传值\"></a>12、小程序怎么跟随事件传值</h3><p>在  页面标签上通过 绑定 dataset-key = value ， 然后绑定点击通过e.currentTarget.dataset.key   来获取标签上绑定的值。 </p>\n<h3 id=\"13、小程序支付\"><a href=\"#13、小程序支付\" class=\"headerlink\" title=\"13、小程序支付\"></a>13、小程序支付</h3><p>小程序有一个统一下单的api接口。<br><a href=\"https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_8_0.shtml\">点击查看：微信支付</a><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloudrun/src/development/pay/order/\">点击查看：云支付</a></p>\n<ol>\n<li> 小程序或公众号调用微信云托管，在微信云托管中调用统一下单接口，参数中带上接收异步支付结果的服务名称和其所在云环境ID</li>\n<li> 统一下单接口返回的成功结果对象中有 payment 字段，该字段即是小程序端发起支付的接口（wx.requestPayment）所需的所有信息</li>\n<li> 小程序端拿到后端结果，调用 wx. requestPayment 发起支付</li>\n<li> 支付完成后，在统一下单接口中配置的云托管服务将收到支付结果通知，具体详见<a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloudrun/src/development/pay/callback/\">结果回调</a><h2 id=\"开发中遇到的问题\"><a href=\"#开发中遇到的问题\" class=\"headerlink\" title=\"开发中遇到的问题\"></a>开发中遇到的问题</h2>热启动和冷启动的问题。<br><a href=\"http://qiutianaimeili.com/html/page/2021/04/20347wh9zpbtkre.html\">http://qiutianaimeili.com/html/page/2021/04/20347wh9zpbtkre.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"初始化项目文件\"><a href=\"#初始化项目文件\" class=\"headerlink\" title=\"初始化项目文件\"></a>初始化项目文件</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-236fc1b747f54b96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"根目录：\"><a href=\"#根目录：\" class=\"headerlink\" title=\"根目录：\"></a>根目录：</h3><p><code>app.json</code>：项目配置文件，可以配置页面<br>包括：page、tabbar、window、plugin等等<br>app.js：每个页面都会去处理的方法。比如判断当前版本是否最新，还有是否有登录信息等等。<br><code>app.wxss</code>：全局的样式文件<br><code>project.config.json</code>：项目配置文件。可以设置一些编辑器的样式，设置一些js编译为es5是否禁用严格模式、上传时是否压缩、分包分不分等，是开发时的设置，在小程序侧边可以直接打钩设置。<br><code>project.private.config.json</code>：<br>很多时候我们需要进行开发调试，利用微信开发者工具的预览功能在真机上查看实现效果。为了方便调试，我们会设置编译模式。但是编译模式的改动会写入 project.config.json 文件的 condition 字段中，而项目只有一份 project.config.json 文件。所以在团队协作的时候，每个人都在往里加入自己的编译模式，这给团队造成了一点麻烦。解决方案如下：</p>\n<ol>\n<li>在 .gitignore 文件中添加 project.config.json、project.private.config.json</li>\n<li>为项目引入 project.config.json.example 文件作为项目配置文件统一模板</li>\n<li>团队成员使用 project.private.config.json 作为个人配置（此配置文件会优先使用）</li>\n</ol>\n<p><code>sitemap.json</code>：是否允许微信索引（爬虫相关）<br>pages文件夹：存储页面。</p>\n<h2 id=\"wxss-wxml-js\"><a href=\"#wxss-wxml-js\" class=\"headerlink\" title=\"wxss wxml js\"></a>wxss wxml js</h2><p>skyline WXSS和webview：skyline的性能更好些，不支持css animation</p>\n<h3 id=\"wxss的常用组件\"><a href=\"#wxss的常用组件\" class=\"headerlink\" title=\"wxss的常用组件\"></a>wxss的常用组件</h3><h4 id=\"视图容器\"><a href=\"#视图容器\" class=\"headerlink\" title=\"视图容器\"></a>视图容器</h4><p>swiper<br>swiper-item</p>\n<hr>\n\n<p>moveable-area<br>moveable-view</p>\n<hr>\n\n<p>scroll-view<br>match-media<br>root-portal（position: fixed）<br>view<br>block</p>\n<h4 id=\"基础内容\"><a href=\"#基础内容\" class=\"headerlink\" title=\"基础内容\"></a>基础内容</h4><p>grid-view<br>list-view<br>icon<br>progress<br>rich-text<br>text</p>\n<h4 id=\"表单组件\"><a href=\"#表单组件\" class=\"headerlink\" title=\"表单组件\"></a>表单组件</h4><p>button<br>checkbox<br>checkbox-group<br>form<br>input<br>slide<br>picker<br>picker-view<br>radio<br>radio-group<br>switch<br>textarea<br>image<br>map</p>\n<h2 id=\"小程序框架\"><a href=\"#小程序框架\" class=\"headerlink\" title=\"小程序框架\"></a>小程序框架</h2><h3 id=\"小程序生命周期\"><a href=\"#小程序生命周期\" class=\"headerlink\" title=\"小程序生命周期\"></a>小程序生命周期</h3><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onHide\">点击查看文档</a><br><code>onLaunch</code>：全局app.js中的，他的触发比<code>page</code>中的<code>onLoad</code>要高<br><code>onLoad</code>：页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数。<br><code>onShow</code>：页面显示/切入前台时触发。<br><code>onReady</code>：页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。<br><code>onHide</code>：页面隐藏/切入后台时触发。如 [wx.navigateTo](<a href=\"https://developers.weixin.qq.com/miniprogram/dev/\">https://developers.weixin.qq.com/miniprogram/dev/</a>  api/route/wx.navigateTo.html) 或底部 <code>tab</code> 切换到其他页面，小程序切入后台等。<a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onUnload\"></a><br><code>onUnload</code>：页面卸载时触发。如<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html\">wx.redirectTo</a>或<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">wx.navigateBack</a>到其他页面时。</p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#%E9%A1%B5%E9%9D%A2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0\"></a></h2><h3 id=\"其他page内的事件\"><a href=\"#其他page内的事件\" class=\"headerlink\" title=\"其他page内的事件\"></a>其他page内的事件</h3><p>onPullDownRefresh<br>onReachBottom<br>onShareAppMessage<br>onPageScroll<br>##事件<br>用bind或catch绑定（catch阻止向上冒泡）<br>capture-bind（捕获）<br>bindtap<br>bind:touchstart<br>bind: longpress<br>还有一些单独组件的事件可以看看文档，比如swiper的<br>bindtransition<br>bindanimationfinish<br>等等等吖吖吖<br>##常用api整理<br>this.setData<br>wx.request</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: _this.<span class=\"property\">data</span>.<span class=\"property\">host</span> + <span class=\"string\">&#x27;/mobile/singleFeed?feedId=&#x27;</span> + feedId,</span><br><span class=\"line\">      <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">header</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">orderPrice</span>: _this.<span class=\"property\">data</span>.<span class=\"property\">totalFee</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">        _this.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">feedInfo</span>: res.<span class=\"property\">data</span>.<span class=\"property\">data</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.navigateTo：保留当前页面，跳转到应用内的某个页面。使用 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">wx.navigateBack</a> 可以返回到原页面。小程序中页面栈最多十层。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;test?id=1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">events</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据</span></span><br><span class=\"line\">    <span class=\"attr\">acceptDataFromOpenedPage</span>: <span class=\"keyword\">function</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">someEvent</span>: <span class=\"keyword\">function</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">success</span>: <span class=\"keyword\">function</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 eventChannel 向被打开页面传送数据</span></span><br><span class=\"line\">    res.<span class=\"property\">eventChannel</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;acceptDataFromOpenerPage&#x27;</span>, &#123; <span class=\"attr\">data</span>: <span class=\"string\">&#x27;test&#x27;</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.redirectTo：重定向。使用 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">wx.navigateBack</a> 不可以返回到原页面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">redirectTo</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;test?id=1&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.createVideoContext(‘xxx’);<br>xxx是video标签的id</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video </span><br><span class=\"line\">    id=<span class=\"string\">&#x27;feedVideo&#x27;</span></span><br><span class=\"line\">    src=<span class=\"string\">&#x27;&#123;&#123;feedInfo.feedVod.videoUrl&#125;&#125;&#x27;</span> poster=<span class=\"string\">&#x27;&#123;&#123;feedInfo.feedVod.coverUrl&#125;&#125;&#x27;</span></span><br><span class=\"line\">&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">VideoContext</span> = wx.<span class=\"title function_\">createVideoContext</span>(<span class=\"string\">&#x27;feedVideo&#x27;</span>);</span><br><span class=\"line\"><span class=\"title class_\">VideoContext</span>.<span class=\"title function_\">play</span>(); <span class=\"comment\">// 播放</span></span><br><span class=\"line\"><span class=\"title class_\">VideoContext</span>.<span class=\"title function_\">pause</span>(); <span class=\"comment\">// 暂停</span></span><br></pre></td></tr></table></figure>\n<p>wx.showToast</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;视频播放异常，请稍后重试&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">duration</span>: <span class=\"number\">2000</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.getStorage<br>wx.setStorage<br>wx.clearStorage()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">getStorage</span>(&#123;   <span class=\"comment\">//获取提示分享气泡是否显示过</span></span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"string\">&#x27;showShareTip&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">success</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">    _this.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">showShareTip</span>: res.<span class=\"property\">data</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.showShareMenu</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">showShareMenu</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">withShareTicket</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>wx.canIUse</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">upDataApp</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"comment\">//版本更新</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wx.<span class=\"title function_\">canIUse</span>(<span class=\"string\">&#x27;getUpdateManager&#x27;</span>)) &#123;<span class=\"comment\">//判断当前微信版本是否支持版本更新</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> updateManager = wx.<span class=\"title function_\">getUpdateManager</span>();</span><br><span class=\"line\">      updateManager.<span class=\"title function_\">onCheckForUpdate</span>(<span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">hasUpdate</span>) &#123; <span class=\"comment\">// 请求完新版本信息的回调</span></span><br><span class=\"line\">          updateManager.<span class=\"title function_\">onUpdateReady</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            wx.<span class=\"title function_\">showModal</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">title</span>: <span class=\"string\">&#x27;更新提示&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">content</span>: <span class=\"string\">&#x27;新版本已经准备好，是否重启应用？&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (res.<span class=\"property\">confirm</span>) &#123;<span class=\"comment\">// 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span></span><br><span class=\"line\">                  updateManager.<span class=\"title function_\">applyUpdate</span>()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          updateManager.<span class=\"title function_\">onUpdateFailed</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            wx.<span class=\"title function_\">showModal</span>(&#123;<span class=\"comment\">// 新的版本下载失败</span></span><br><span class=\"line\">              <span class=\"attr\">title</span>: <span class=\"string\">&#x27;已经有新版本了哟~&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">content</span>: <span class=\"string\">&#x27;新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~&#x27;</span>,</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      wx.<span class=\"title function_\">showModal</span>(&#123;<span class=\"comment\">// 如果希望用户在最新版本的客户端上体验您的小程序，可以这样子提示</span></span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&#x27;提示&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">content</span>: <span class=\"string\">&#x27;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#x27;</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>wx.hideNavigationBarLoading() //在当前页面隐藏导航条加载动画<br>wx.stopPullDownRefresh() //停止下拉刷新</p>\n<hr>\n\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><h3 id=\"1、简单描述下微信小程序的相关文件类型\"><a href=\"#1、简单描述下微信小程序的相关文件类型\" class=\"headerlink\" title=\"1、简单描述下微信小程序的相关文件类型?\"></a>1、简单描述下微信小程序的相关文件类型?</h3><h3 id=\"2、小程序的双向绑定和vue哪里不一样\"><a href=\"#2、小程序的双向绑定和vue哪里不一样\" class=\"headerlink\" title=\"2、小程序的双向绑定和vue哪里不一样?\"></a>2、小程序的双向绑定和vue哪里不一样?</h3><h3 id=\"3、小程序页面间有哪些传递数据的方法\"><a href=\"#3、小程序页面间有哪些传递数据的方法\" class=\"headerlink\" title=\"3、小程序页面间有哪些传递数据的方法?\"></a>3、小程序页面间有哪些传递数据的方法?</h3><h4 id=\"使用全局变量实现数据传递\"><a href=\"#使用全局变量实现数据传递\" class=\"headerlink\" title=\"使用全局变量实现数据传递\"></a>使用全局变量实现数据传递</h4><p>app.js中定义globalData，然后在单独的文件中使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">getApp</span>()</span><br><span class=\"line\">app.<span class=\"property\">globalData</span>.<span class=\"property\">xxx</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用navigateTo\"><a href=\"#使用navigateTo\" class=\"headerlink\" title=\"使用navigateTo\"></a>使用navigateTo</h4><p>navigateTo的url后面跟?参数也可以实现数据传递，在新页面onLoad方法中使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;aaaa?name=xxx&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在新页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onLoad</span>(<span class=\"params\">option</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(option) <span class=\"comment\">// &#123;name:xxx&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"wxs\"><a href=\"#wxs\" class=\"headerlink\" title=\"wxs\"></a>wxs</h3><p>定义公共工具类，比如叫utils，可以使用import引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64 <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../utils/base64&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>wxs也可以导出模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;wxs <span class=\"variable language_\">module</span>=<span class=\"string\">&quot;utils&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> judgeHttp = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">judgeHttp</span>: judgeHttp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/wxs&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用getStorage\"><a href=\"#使用getStorage\" class=\"headerlink\" title=\"使用getStorage\"></a>使用getStorage</h4><p>本地缓存的清理时机跟代码包一样，只有在代码包被清理的时候本地缓存才会被清理。</p>\n<h3 id=\"4、小程序的生命周期\"><a href=\"#4、小程序的生命周期\" class=\"headerlink\" title=\"4、小程序的生命周期\"></a>4、小程序的生命周期</h3><h3 id=\"5、如何下拉刷新\"><a href=\"#5、如何下拉刷新\" class=\"headerlink\" title=\"5、如何下拉刷新\"></a>5、如何下拉刷新</h3><p>在<code>app.json</code>中，或者在对应的json中设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enablePullDownRefresh: true</span><br></pre></td></tr></table></figure>\n<p>在钩子函数<code>onPullDownRefresh</code>中，监听下拉刷新，调用setData去更新数据，设置flag，让更新不会多次给重复触发中。<br>请求成功后，调用wx.stopPullDownRefresh去停止下拉刷新。</p>\n<h3 id=\"6、bindtap和catchtap\"><a href=\"#6、bindtap和catchtap\" class=\"headerlink\" title=\"6、bindtap和catchtap\"></a>6、bindtap和catchtap</h3><p>停止冒泡</p>\n<h3 id=\"7、wx-navigateTo-wx-redirectTo-wx-switchTab-wx-navigateBack-wx-reLaunch-的区别\"><a href=\"#7、wx-navigateTo-wx-redirectTo-wx-switchTab-wx-navigateBack-wx-reLaunch-的区别\" class=\"headerlink\" title=\"7、wx.navigateTo(), wx.redirectTo(), wx.switchTab(), wx.navigateBack(), wx.reLaunch()的区别?\"></a>7、wx.navigateTo(), wx.redirectTo(), wx.switchTab(), wx.navigateBack(), wx.reLaunch()的区别?</h3><p>wx.navigateTo()：保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面<br>wx.redirectTo()：关闭当前页面，跳转到新的页面（类似重定向）。但是不允许跳转到 tabbar 页面<br>wx.switchTab()：跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面<br>wx.navigateBack():关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层<br>wx.reLaunch()：关闭所有页面，打开到应用内的某个页面<br>###8、登录的流程<br>点击查看：<a href=\"https://cloud.tencent.com/developer/article/1797514\">登录流程描述</a></p>\n<h3 id=\"9、app-json-全局配置文件描述\"><a href=\"#9、app-json-全局配置文件描述\" class=\"headerlink\" title=\"9、app.json  全局配置文件描述\"></a>9、app.json  全局配置文件描述</h3><p>pages  :  用于存放当前小程序的所有页面路径<br>window : 小程序所有页面的顶部背景颜色，文字颜色配置。<br>tabBar  :  小程序底部的Tab ,最多5个，最少2个。</p>\n<h3 id=\"10、小程序运行机制\"><a href=\"#10、小程序运行机制\" class=\"headerlink\" title=\"10、小程序运行机制\"></a>10、小程序运行机制</h3><p>热启动 ：假如用户已经打开了某个小程序，在一定时间内再次打开小程序的话，这个时候我们就不再需要重新启动了，这需要把我们的后台打开的小程序切换到前台来使用。<br>冷启动：用户首次打开小程序或被微信主动销毁再次打开的情况，此时小程序需要重新加载启动。</p>\n<h3 id=\"11、小程序什么时候会主动销毁？\"><a href=\"#11、小程序什么时候会主动销毁？\" class=\"headerlink\" title=\"11、小程序什么时候会主动销毁？\"></a>11、小程序什么时候会主动销毁？</h3><p>小程序在进入后台之后，客户端会帮我们在一定时间内维持我们的一个状态，超过五分钟后，会被微信主动销毁.</p>\n<p>官方也没有明确说明 什么时候销毁， 在不同机型表现也不一样，</p>\n<p>2019年开发时：时间官方文档没有说明，但是经过询问一般指5分钟内</p>\n<p>2020年开发时：时间官方文档没有说明，实测安卓没有固定时间，内存足够情况下，有时候一天了还在，有时候几分钟就没了。</p>\n<h3 id=\"12、小程序怎么跟随事件传值\"><a href=\"#12、小程序怎么跟随事件传值\" class=\"headerlink\" title=\"12、小程序怎么跟随事件传值\"></a>12、小程序怎么跟随事件传值</h3><p>在  页面标签上通过 绑定 dataset-key = value ， 然后绑定点击通过e.currentTarget.dataset.key   来获取标签上绑定的值。 </p>\n<h3 id=\"13、小程序支付\"><a href=\"#13、小程序支付\" class=\"headerlink\" title=\"13、小程序支付\"></a>13、小程序支付</h3><p>小程序有一个统一下单的api接口。<br><a href=\"https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_8_0.shtml\">点击查看：微信支付</a><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloudrun/src/development/pay/order/\">点击查看：云支付</a></p>\n<ol>\n<li> 小程序或公众号调用微信云托管，在微信云托管中调用统一下单接口，参数中带上接收异步支付结果的服务名称和其所在云环境ID</li>\n<li> 统一下单接口返回的成功结果对象中有 payment 字段，该字段即是小程序端发起支付的接口（wx.requestPayment）所需的所有信息</li>\n<li> 小程序端拿到后端结果，调用 wx. requestPayment 发起支付</li>\n<li> 支付完成后，在统一下单接口中配置的云托管服务将收到支付结果通知，具体详见<a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloudrun/src/development/pay/callback/\">结果回调</a><h2 id=\"开发中遇到的问题\"><a href=\"#开发中遇到的问题\" class=\"headerlink\" title=\"开发中遇到的问题\"></a>开发中遇到的问题</h2>热启动和冷启动的问题。<br><a href=\"http://qiutianaimeili.com/html/page/2021/04/20347wh9zpbtkre.html\">http://qiutianaimeili.com/html/page/2021/04/20347wh9zpbtkre.html</a></li>\n</ol>\n"},{"title":"blender的cycles引擎如何使用辉光效果","date":"2022-07-01T08:23:04.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n一般辉光是只在eevee引擎下<br />\n如果cycles下也想用的话<br />\n照我下面这样设置就可以拉<br />\n![](https://upload-images.jianshu.io/upload_images/20892169-b47d0c576b517b7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/jianmo/bl-cycles.md","raw":"---\ntitle: 'blender的cycles引擎如何使用辉光效果'\ndate: 2022-07-01 16:23:04\ntags: blender\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n一般辉光是只在eevee引擎下<br />\n如果cycles下也想用的话<br />\n照我下面这样设置就可以拉<br />\n![](https://upload-images.jianshu.io/upload_images/20892169-b47d0c576b517b7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"jianmo/bl-cycles","published":1,"updated":"2023-01-25T17:25:01.878Z","_id":"cldbwvppa00002bwi0cte4l38","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>一般辉光是只在eevee引擎下<br /><br>如果cycles下也想用的话<br /><br>照我下面这样设置就可以拉<br /><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b47d0c576b517b7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>一般辉光是只在eevee引擎下<br /><br>如果cycles下也想用的话<br /><br>照我下面这样设置就可以拉<br /><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b47d0c576b517b7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"github pages 自定义域名","date":"2022-01-26T07:01:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n1. ping xxx.github.io找到域名\n\n![](https://upload-images.jianshu.io/upload_images/20892169-3ce08b36d4dfba50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2. 在购买域名的提供商为域名添加解析，如下设置（[阿里云的](https://dc.console.aliyun.com/next/index?spm=5176.12818093.ProductAndResource--ali--widget-product-recent.dre1.513c16d0ydgl0R#/overview)）\n![](https://upload-images.jianshu.io/upload_images/20892169-ea05d319fba1f524.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3. 在Github中，找到托管博客的xxx.github.io项目：\nsetting - pages中，在Custom Domain填上刚刚添加解析的域名并保存即可。\n![](https://upload-images.jianshu.io/upload_images/20892169-4854abf46add27bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n完成，[请点击](https://bbdcsg.love/)","source":"_posts/cxy/other/dns.md","raw":"---\ntitle: 'github pages 自定义域名'\ndate: 2022-01-26 15:01:49\ntags: 实用开源代码or工具\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n1. ping xxx.github.io找到域名\n\n![](https://upload-images.jianshu.io/upload_images/20892169-3ce08b36d4dfba50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2. 在购买域名的提供商为域名添加解析，如下设置（[阿里云的](https://dc.console.aliyun.com/next/index?spm=5176.12818093.ProductAndResource--ali--widget-product-recent.dre1.513c16d0ydgl0R#/overview)）\n![](https://upload-images.jianshu.io/upload_images/20892169-ea05d319fba1f524.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3. 在Github中，找到托管博客的xxx.github.io项目：\nsetting - pages中，在Custom Domain填上刚刚添加解析的域名并保存即可。\n![](https://upload-images.jianshu.io/upload_images/20892169-4854abf46add27bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n完成，[请点击](https://bbdcsg.love/)","slug":"cxy/other/dns","published":1,"updated":"2023-02-01T11:19:41.196Z","_id":"cldc119730000mywi1vv77we0","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<ol>\n<li>ping xxx.github.io找到域名</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3ce08b36d4dfba50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ol start=\"2\">\n<li><p>在购买域名的提供商为域名添加解析，如下设置（<a href=\"https://dc.console.aliyun.com/next/index?spm=5176.12818093.ProductAndResource--ali--widget-product-recent.dre1.513c16d0ydgl0R#/overview\">阿里云的</a>）<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ea05d319fba1f524.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n</li>\n<li><p>在Github中，找到托管博客的xxx.github.io项目：<br>setting - pages中，在Custom Domain填上刚刚添加解析的域名并保存即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4854abf46add27bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n</li>\n</ol>\n<p>完成，<a href=\"https://bbdcsg.love/\">请点击</a></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<ol>\n<li>ping xxx.github.io找到域名</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3ce08b36d4dfba50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ol start=\"2\">\n<li><p>在购买域名的提供商为域名添加解析，如下设置（<a href=\"https://dc.console.aliyun.com/next/index?spm=5176.12818093.ProductAndResource--ali--widget-product-recent.dre1.513c16d0ydgl0R#/overview\">阿里云的</a>）<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ea05d319fba1f524.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n</li>\n<li><p>在Github中，找到托管博客的xxx.github.io项目：<br>setting - pages中，在Custom Domain填上刚刚添加解析的域名并保存即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4854abf46add27bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n</li>\n</ol>\n<p>完成，<a href=\"https://bbdcsg.love/\">请点击</a></p>\n"},{"title":"我的喵有时候超级聪明,有时候又超级笨","date":"2021-09-23T04:00:38.000Z","_content":"\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n可撸可抱可亲亲。怎么样都不生气。\n通人性，很多情况下知道我在说什么。\n很粘人，我上厕所因为要在浴室，总担心我淹死，只要不让它进来在我脚边蹲着，它就叫的相当凄惨。\n然后我站起来冲水的时候，它听见冲水的声音，就站起来往外走。\n明明自己超级害怕浴室。\n\n对人如春风般和睦，对其他物种们如饿狼般凶残。\n我养了喵之后，屋里再也没有虫了。。自从我亲眼见到。。。算了，有些东西不能细想。\n\n喜欢撒娇娇，我睡觉手摊在旁边，第二天起来手掌上一定会多个喵头。\n可以明白我的指令，如果我把它摆成一个姿势，它不喜欢就喵喵的反抗，但如果我重复五六次，它就明白了我是想让它保持这个姿势。\n\n熟悉我的说话口气，知道我什么时候生气什么时候不生气。\n我普通生气的时候赶紧卖萌撒娇娇打滚滚，我生大气的时候就躲起来，可是它不知道我很生气的时候它越躲起来我越生气，特别是往特别脏的床底下钻的时候。\n\n每天喜欢和我玩捉迷藏，它的捉迷藏理念就是我看不见你，那你肯定也看不见我。\n所以它总是把头藏起来，把身子露在外面，就当藏好了。\n唔\n\n![](https://upload-images.jianshu.io/upload_images/20892169-d11253cf93ec86ab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n还有笨的情况就是可能因为从没出过门，是个路痴。\n我住在七楼左边，如果把它放六楼，或者五楼，或者四楼，它就会对着四五六楼左边一直喵。\n\n每天我回来喜欢在门口迎接，以至于有一次太久不见，我半夜回来之后提着大包小包的行李，它窜到门口来接我，结果不小心给它关外面了。。我还没有意识到，然后收拾东西到四五点，听见外面一直有喵在凄惨的叫，我还想这谁家的喵大半夜的搁这儿叫，结果又收拾了一会儿才发现，吖！原来是大喵在叫。\n\n大喵年纪比较大了，有时候我会很害怕，它的后槽牙也开始出问题了，感觉眼睛好像最近会过敏。\n<hr>\n\n因为断网玩这个东西玩了半个多小时\n\n![](https://upload-images.jianshu.io/upload_images/20892169-cebbc0c132c41456.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/diary/diary-sxh copy.md","raw":"---\ntitle: '我的喵有时候超级聪明,有时候又超级笨'\ndate: 2021-09-23 12:00:38\ntags: \ncategories: 生活\n---\n\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n可撸可抱可亲亲。怎么样都不生气。\n通人性，很多情况下知道我在说什么。\n很粘人，我上厕所因为要在浴室，总担心我淹死，只要不让它进来在我脚边蹲着，它就叫的相当凄惨。\n然后我站起来冲水的时候，它听见冲水的声音，就站起来往外走。\n明明自己超级害怕浴室。\n\n对人如春风般和睦，对其他物种们如饿狼般凶残。\n我养了喵之后，屋里再也没有虫了。。自从我亲眼见到。。。算了，有些东西不能细想。\n\n喜欢撒娇娇，我睡觉手摊在旁边，第二天起来手掌上一定会多个喵头。\n可以明白我的指令，如果我把它摆成一个姿势，它不喜欢就喵喵的反抗，但如果我重复五六次，它就明白了我是想让它保持这个姿势。\n\n熟悉我的说话口气，知道我什么时候生气什么时候不生气。\n我普通生气的时候赶紧卖萌撒娇娇打滚滚，我生大气的时候就躲起来，可是它不知道我很生气的时候它越躲起来我越生气，特别是往特别脏的床底下钻的时候。\n\n每天喜欢和我玩捉迷藏，它的捉迷藏理念就是我看不见你，那你肯定也看不见我。\n所以它总是把头藏起来，把身子露在外面，就当藏好了。\n唔\n\n![](https://upload-images.jianshu.io/upload_images/20892169-d11253cf93ec86ab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n还有笨的情况就是可能因为从没出过门，是个路痴。\n我住在七楼左边，如果把它放六楼，或者五楼，或者四楼，它就会对着四五六楼左边一直喵。\n\n每天我回来喜欢在门口迎接，以至于有一次太久不见，我半夜回来之后提着大包小包的行李，它窜到门口来接我，结果不小心给它关外面了。。我还没有意识到，然后收拾东西到四五点，听见外面一直有喵在凄惨的叫，我还想这谁家的喵大半夜的搁这儿叫，结果又收拾了一会儿才发现，吖！原来是大喵在叫。\n\n大喵年纪比较大了，有时候我会很害怕，它的后槽牙也开始出问题了，感觉眼睛好像最近会过敏。\n<hr>\n\n因为断网玩这个东西玩了半个多小时\n\n![](https://upload-images.jianshu.io/upload_images/20892169-cebbc0c132c41456.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"diary/diary-sxh copy","published":1,"updated":"2023-01-25T19:47:52.599Z","_id":"cldc2n9sd0000ogwi3u7x9bcz","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>可撸可抱可亲亲。怎么样都不生气。<br>通人性，很多情况下知道我在说什么。<br>很粘人，我上厕所因为要在浴室，总担心我淹死，只要不让它进来在我脚边蹲着，它就叫的相当凄惨。<br>然后我站起来冲水的时候，它听见冲水的声音，就站起来往外走。<br>明明自己超级害怕浴室。</p>\n<p>对人如春风般和睦，对其他物种们如饿狼般凶残。<br>我养了喵之后，屋里再也没有虫了。。自从我亲眼见到。。。算了，有些东西不能细想。</p>\n<p>喜欢撒娇娇，我睡觉手摊在旁边，第二天起来手掌上一定会多个喵头。<br>可以明白我的指令，如果我把它摆成一个姿势，它不喜欢就喵喵的反抗，但如果我重复五六次，它就明白了我是想让它保持这个姿势。</p>\n<p>熟悉我的说话口气，知道我什么时候生气什么时候不生气。<br>我普通生气的时候赶紧卖萌撒娇娇打滚滚，我生大气的时候就躲起来，可是它不知道我很生气的时候它越躲起来我越生气，特别是往特别脏的床底下钻的时候。</p>\n<p>每天喜欢和我玩捉迷藏，它的捉迷藏理念就是我看不见你，那你肯定也看不见我。<br>所以它总是把头藏起来，把身子露在外面，就当藏好了。<br>唔</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d11253cf93ec86ab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>还有笨的情况就是可能因为从没出过门，是个路痴。<br>我住在七楼左边，如果把它放六楼，或者五楼，或者四楼，它就会对着四五六楼左边一直喵。</p>\n<p>每天我回来喜欢在门口迎接，以至于有一次太久不见，我半夜回来之后提着大包小包的行李，它窜到门口来接我，结果不小心给它关外面了。。我还没有意识到，然后收拾东西到四五点，听见外面一直有喵在凄惨的叫，我还想这谁家的喵大半夜的搁这儿叫，结果又收拾了一会儿才发现，吖！原来是大喵在叫。</p>\n<p>大喵年纪比较大了，有时候我会很害怕，它的后槽牙也开始出问题了，感觉眼睛好像最近会过敏。</p>\n<hr>\n\n<p>因为断网玩这个东西玩了半个多小时</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cebbc0c132c41456.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>可撸可抱可亲亲。怎么样都不生气。<br>通人性，很多情况下知道我在说什么。<br>很粘人，我上厕所因为要在浴室，总担心我淹死，只要不让它进来在我脚边蹲着，它就叫的相当凄惨。<br>然后我站起来冲水的时候，它听见冲水的声音，就站起来往外走。<br>明明自己超级害怕浴室。</p>\n<p>对人如春风般和睦，对其他物种们如饿狼般凶残。<br>我养了喵之后，屋里再也没有虫了。。自从我亲眼见到。。。算了，有些东西不能细想。</p>\n<p>喜欢撒娇娇，我睡觉手摊在旁边，第二天起来手掌上一定会多个喵头。<br>可以明白我的指令，如果我把它摆成一个姿势，它不喜欢就喵喵的反抗，但如果我重复五六次，它就明白了我是想让它保持这个姿势。</p>\n<p>熟悉我的说话口气，知道我什么时候生气什么时候不生气。<br>我普通生气的时候赶紧卖萌撒娇娇打滚滚，我生大气的时候就躲起来，可是它不知道我很生气的时候它越躲起来我越生气，特别是往特别脏的床底下钻的时候。</p>\n<p>每天喜欢和我玩捉迷藏，它的捉迷藏理念就是我看不见你，那你肯定也看不见我。<br>所以它总是把头藏起来，把身子露在外面，就当藏好了。<br>唔</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-d11253cf93ec86ab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>还有笨的情况就是可能因为从没出过门，是个路痴。<br>我住在七楼左边，如果把它放六楼，或者五楼，或者四楼，它就会对着四五六楼左边一直喵。</p>\n<p>每天我回来喜欢在门口迎接，以至于有一次太久不见，我半夜回来之后提着大包小包的行李，它窜到门口来接我，结果不小心给它关外面了。。我还没有意识到，然后收拾东西到四五点，听见外面一直有喵在凄惨的叫，我还想这谁家的喵大半夜的搁这儿叫，结果又收拾了一会儿才发现，吖！原来是大喵在叫。</p>\n<p>大喵年纪比较大了，有时候我会很害怕，它的后槽牙也开始出问题了，感觉眼睛好像最近会过敏。</p>\n<hr>\n\n<p>因为断网玩这个东西玩了半个多小时</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cebbc0c132c41456.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"npm相关","date":"2019-06-03T03:11:11.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### -S和-D的区别\nnpm i --save-dev xxx\n同npm i -D xxx安装到开发环境\n在package.json中：\n```javascript\n\"devDependencies\": {\n    \"snabbdom\": \"^3.5.1\"\n  }\n```\nnpm i --save xxx\n同npm i -S xxx\n安装到正式环境\n在package.json中：\n```javascript\n \"dependencies\": {\n    \"snabbdom\": \"^3.5.1\"\n  }\n```\n#### package-lock.json的作用\n比如你的packgae.json的依赖是\"react\": \"^17.0.2\"，因为有标识符^，所以如果react模块有在17大版本下更新的小版本17.0.3，npm install时候会自动安装17下的最新版本17.0.3\n现象：\n在前景情况下，你本地是\"react\": \"^17.0.2\"，如果这时候react更新\"react\": \"^17.0.3\"，别人npm install的时候，安装就是\"react\": \"^17.0.3\"。这样导致你们版本不一致，可能引起一些相关错误。\n解决：\npackage-lock.json：简单来说就是锁定安装模块的版本号。\n就是在npm install的时候，记录各个模块的版本信息和下载路径，这样别人拉项目npm install时候， 就会依据packgae-lock.json去安装\"react\": \"^17.0.2\"，保证大家依赖一致并且安装模块速度也能提高。","source":"_posts/cxy/other/node-n.md","raw":"---\ntitle: 'npm相关'\ndate: 2019-06-03 11:11:11\ntags: \n  - npm\n  - node\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n#### -S和-D的区别\nnpm i --save-dev xxx\n同npm i -D xxx安装到开发环境\n在package.json中：\n```javascript\n\"devDependencies\": {\n    \"snabbdom\": \"^3.5.1\"\n  }\n```\nnpm i --save xxx\n同npm i -S xxx\n安装到正式环境\n在package.json中：\n```javascript\n \"dependencies\": {\n    \"snabbdom\": \"^3.5.1\"\n  }\n```\n#### package-lock.json的作用\n比如你的packgae.json的依赖是\"react\": \"^17.0.2\"，因为有标识符^，所以如果react模块有在17大版本下更新的小版本17.0.3，npm install时候会自动安装17下的最新版本17.0.3\n现象：\n在前景情况下，你本地是\"react\": \"^17.0.2\"，如果这时候react更新\"react\": \"^17.0.3\"，别人npm install的时候，安装就是\"react\": \"^17.0.3\"。这样导致你们版本不一致，可能引起一些相关错误。\n解决：\npackage-lock.json：简单来说就是锁定安装模块的版本号。\n就是在npm install的时候，记录各个模块的版本信息和下载路径，这样别人拉项目npm install时候， 就会依据packgae-lock.json去安装\"react\": \"^17.0.2\"，保证大家依赖一致并且安装模块速度也能提高。","slug":"cxy/other/node-n","published":1,"updated":"2023-01-25T19:57:33.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc3bju800006awidwgo8ey1","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"S和-D的区别\"><a href=\"#S和-D的区别\" class=\"headerlink\" title=\"-S和-D的区别\"></a>-S和-D的区别</h4><p>npm i –save-dev xxx<br>同npm i -D xxx安装到开发环境<br>在package.json中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;snabbdom&quot;</span>: <span class=\"string\">&quot;^3.5.1&quot;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>npm i –save xxx<br>同npm i -S xxx<br>安装到正式环境<br>在package.json中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dependencies&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;snabbdom&quot;</span>: <span class=\"string\">&quot;^3.5.1&quot;</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"package-lock-json的作用\"><a href=\"#package-lock-json的作用\" class=\"headerlink\" title=\"package-lock.json的作用\"></a>package-lock.json的作用</h4><p>比如你的packgae.json的依赖是”react”: “^17.0.2”，因为有标识符^，所以如果react模块有在17大版本下更新的小版本17.0.3，npm install时候会自动安装17下的最新版本17.0.3<br>现象：<br>在前景情况下，你本地是”react”: “^17.0.2”，如果这时候react更新”react”: “^17.0.3”，别人npm install的时候，安装就是”react”: “^17.0.3”。这样导致你们版本不一致，可能引起一些相关错误。<br>解决：<br>package-lock.json：简单来说就是锁定安装模块的版本号。<br>就是在npm install的时候，记录各个模块的版本信息和下载路径，这样别人拉项目npm install时候， 就会依据packgae-lock.json去安装”react”: “^17.0.2”，保证大家依赖一致并且安装模块速度也能提高。</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h4 id=\"S和-D的区别\"><a href=\"#S和-D的区别\" class=\"headerlink\" title=\"-S和-D的区别\"></a>-S和-D的区别</h4><p>npm i –save-dev xxx<br>同npm i -D xxx安装到开发环境<br>在package.json中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;snabbdom&quot;</span>: <span class=\"string\">&quot;^3.5.1&quot;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>npm i –save xxx<br>同npm i -S xxx<br>安装到正式环境<br>在package.json中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dependencies&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;snabbdom&quot;</span>: <span class=\"string\">&quot;^3.5.1&quot;</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"package-lock-json的作用\"><a href=\"#package-lock-json的作用\" class=\"headerlink\" title=\"package-lock.json的作用\"></a>package-lock.json的作用</h4><p>比如你的packgae.json的依赖是”react”: “^17.0.2”，因为有标识符^，所以如果react模块有在17大版本下更新的小版本17.0.3，npm install时候会自动安装17下的最新版本17.0.3<br>现象：<br>在前景情况下，你本地是”react”: “^17.0.2”，如果这时候react更新”react”: “^17.0.3”，别人npm install的时候，安装就是”react”: “^17.0.3”。这样导致你们版本不一致，可能引起一些相关错误。<br>解决：<br>package-lock.json：简单来说就是锁定安装模块的版本号。<br>就是在npm install的时候，记录各个模块的版本信息和下载路径，这样别人拉项目npm install时候， 就会依据packgae-lock.json去安装”react”: “^17.0.2”，保证大家依赖一致并且安装模块速度也能提高。</p>\n"},{"title":"[2021-04-04]水仙花观察日记","date":"2021-04-04T04:00:38.000Z","_content":"\n水仙花没有任何变化","source":"_posts/diary/diary-sxh/diary-sxh7.md","raw":"---\ntitle: '[2021-04-04]水仙花观察日记'\ndate: 2021-04-04 12:00:38\ntags:\ncategories:\n  - 水仙花观察日记\n---\n\n水仙花没有任何变化","slug":"diary/diary-sxh/diary-sxh7","published":1,"updated":"2023-01-25T19:58:22.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc3bju900016awic6xa6ts1","content":"<p>水仙花没有任何变化</p>\n","site":{"data":{}},"excerpt":"","more":"<p>水仙花没有任何变化</p>\n"},{"title":"【第7章】ajax","date":"2019-04-11T04:13:35.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、手写一个ajax\n```js\n// ajax发送请求的简单写法\nlet data = {\n    name: '小明',\n    age: '12'\n}\nlet url = './sendmsg'\n\nlet xml = new XMLHttpRequest()\nxml.onreadystatechange = function(xhr) {\n    if(xhr.readyState == 4) {\n        // readyState：0-->未调用send方法 1-->已调用send()，正在发送请求 2-->send()发送完成，已经接收到全部响应内容，3-->正在解析响应内容\n        if(xhr.state == 200) {\n            console.log(xhr.responseText)\n        }\n    }\n}\n// 上面的写好之后，下面的每次发送就直接写\n```\npromise ajax的写法\n```js\n// promise ajax写法\nfunction ajax(url,data){\n    return new Promise((res,rej)=>{\n        let xml = new XMLHttpRequest()\n        xml.onreadystatechange = function(xhr){\n            if(xhr.readyState == 4) {\n                if(xhr.state == 200) {\n                    res({url,data})\n                } else {\n                    rej()\n                }\n            } else {\n                rej()\n            }\n        }\n        xml.open('POST',url,true)\n        xml.send(data)\n    })\n}\najax(url,data).then(({url,data})=>{\n\n})\n```\n#### 二、跨域\n###### 1. 同源\n协议、域名、端口必须一致，叫做同源\n同源策略：ajax请求时，浏览器要求当前网页和服务器端必须同源\n###### 2. img、link、script 可以无视同源策略，即可以跨域\n由于img可以无视同源策略，所以可以用于使用第三方统计服务，如打点\nlink script 可使用cdn，cdn一般是外域服\nscript可以实现jsonp\n###### 3. 如何用jsonp实现跨域？\n上面说了**script可以实现jsonp。**<br>\n现在假设我需要在http://localhost:8081下访问http://localhost:8082的文件，由于端口不一致所以跨域了。\n（1）首先，需要服务器进行配合。因为服务器可以拼接任意字段返回给服务器，所以让服务器将数据包装为js函数返回。\n\n假设服务器给前端的数据为http://localhost:8082/index.js，该文件的内容让后端包装为callback方法，参数为真实要传递的数据，如：\n```js\ncallback({\n    name: '小明',\n    age: 12\n})\n```\n（2）然后，前端使用script标签引入该index文件\n```js\n<script src = \"http://localhost:8082/index.js\"></script>\n```\n这样，在页面中就引入了一个名为callback的函数，因为是script全局引入，所以该方法位于window下。<br>\n（3）再使用另一个script标签，处理数据：\n```js\nwindow.callback = function(data){\n   // 这个data就是后端传入callback的参数，即\n  {\n      name: '小明',\n      age: 12\n  }\n}\n```\n###### 4. cors实现跨域\nCORS 是纯服务器端操作，服务器端可以设置header根据下面方法设置响应头字段\n服务器端可以直接设置header，去允许某个地址的跨域访问。\n![](https://upload-images.jianshu.io/upload_images/20892169-efbefcbd891c78b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###### 5. 常用的ajax插件\nfetch() axios \n\n","source":"_posts/cxy/js/js-ajax.md","raw":"---\ntitle: '【第7章】ajax'\ndate: 2019-04-11 12:13:35\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、手写一个ajax\n```js\n// ajax发送请求的简单写法\nlet data = {\n    name: '小明',\n    age: '12'\n}\nlet url = './sendmsg'\n\nlet xml = new XMLHttpRequest()\nxml.onreadystatechange = function(xhr) {\n    if(xhr.readyState == 4) {\n        // readyState：0-->未调用send方法 1-->已调用send()，正在发送请求 2-->send()发送完成，已经接收到全部响应内容，3-->正在解析响应内容\n        if(xhr.state == 200) {\n            console.log(xhr.responseText)\n        }\n    }\n}\n// 上面的写好之后，下面的每次发送就直接写\n```\npromise ajax的写法\n```js\n// promise ajax写法\nfunction ajax(url,data){\n    return new Promise((res,rej)=>{\n        let xml = new XMLHttpRequest()\n        xml.onreadystatechange = function(xhr){\n            if(xhr.readyState == 4) {\n                if(xhr.state == 200) {\n                    res({url,data})\n                } else {\n                    rej()\n                }\n            } else {\n                rej()\n            }\n        }\n        xml.open('POST',url,true)\n        xml.send(data)\n    })\n}\najax(url,data).then(({url,data})=>{\n\n})\n```\n#### 二、跨域\n###### 1. 同源\n协议、域名、端口必须一致，叫做同源\n同源策略：ajax请求时，浏览器要求当前网页和服务器端必须同源\n###### 2. img、link、script 可以无视同源策略，即可以跨域\n由于img可以无视同源策略，所以可以用于使用第三方统计服务，如打点\nlink script 可使用cdn，cdn一般是外域服\nscript可以实现jsonp\n###### 3. 如何用jsonp实现跨域？\n上面说了**script可以实现jsonp。**<br>\n现在假设我需要在http://localhost:8081下访问http://localhost:8082的文件，由于端口不一致所以跨域了。\n（1）首先，需要服务器进行配合。因为服务器可以拼接任意字段返回给服务器，所以让服务器将数据包装为js函数返回。\n\n假设服务器给前端的数据为http://localhost:8082/index.js，该文件的内容让后端包装为callback方法，参数为真实要传递的数据，如：\n```js\ncallback({\n    name: '小明',\n    age: 12\n})\n```\n（2）然后，前端使用script标签引入该index文件\n```js\n<script src = \"http://localhost:8082/index.js\"></script>\n```\n这样，在页面中就引入了一个名为callback的函数，因为是script全局引入，所以该方法位于window下。<br>\n（3）再使用另一个script标签，处理数据：\n```js\nwindow.callback = function(data){\n   // 这个data就是后端传入callback的参数，即\n  {\n      name: '小明',\n      age: 12\n  }\n}\n```\n###### 4. cors实现跨域\nCORS 是纯服务器端操作，服务器端可以设置header根据下面方法设置响应头字段\n服务器端可以直接设置header，去允许某个地址的跨域访问。\n![](https://upload-images.jianshu.io/upload_images/20892169-efbefcbd891c78b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###### 5. 常用的ajax插件\nfetch() axios \n\n","slug":"cxy/js/js-ajax","published":1,"updated":"2023-01-25T20:37:04.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ife0000kdwifzao5bua","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、手写一个ajax\"><a href=\"#一、手写一个ajax\" class=\"headerlink\" title=\"一、手写一个ajax\"></a>一、手写一个ajax</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ajax发送请求的简单写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"string\">&#x27;12&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;./sendmsg&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> xml = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">xml.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// readyState：0--&gt;未调用send方法 1--&gt;已调用send()，正在发送请求 2--&gt;send()发送完成，已经接收到全部响应内容，3--&gt;正在解析响应内容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">state</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 上面的写好之后，下面的每次发送就直接写</span></span><br></pre></td></tr></table></figure>\n<p>promise ajax的写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise ajax写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ajax</span>(<span class=\"params\">url,data</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">res,rej</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> xml = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">        xml.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.<span class=\"property\">state</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">res</span>(&#123;url,data&#125;)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">rej</span>()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">rej</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        xml.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>,url,<span class=\"literal\">true</span>)</span><br><span class=\"line\">        xml.<span class=\"title function_\">send</span>(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">ajax</span>(url,data).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">&#123;url,data&#125;</span>)=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、跨域\"><a href=\"#二、跨域\" class=\"headerlink\" title=\"二、跨域\"></a>二、跨域</h4><h6 id=\"1-同源\"><a href=\"#1-同源\" class=\"headerlink\" title=\"1. 同源\"></a>1. 同源</h6><p>协议、域名、端口必须一致，叫做同源<br>同源策略：ajax请求时，浏览器要求当前网页和服务器端必须同源</p>\n<h6 id=\"2-img、link、script-可以无视同源策略，即可以跨域\"><a href=\"#2-img、link、script-可以无视同源策略，即可以跨域\" class=\"headerlink\" title=\"2. img、link、script 可以无视同源策略，即可以跨域\"></a>2. img、link、script 可以无视同源策略，即可以跨域</h6><p>由于img可以无视同源策略，所以可以用于使用第三方统计服务，如打点<br>link script 可使用cdn，cdn一般是外域服<br>script可以实现jsonp</p>\n<h6 id=\"3-如何用jsonp实现跨域？\"><a href=\"#3-如何用jsonp实现跨域？\" class=\"headerlink\" title=\"3. 如何用jsonp实现跨域？\"></a>3. 如何用jsonp实现跨域？</h6><p>上面说了<strong>script可以实现jsonp。</strong><br><br>现在假设我需要在<a href=\"http://localhost:8081下访问http://localhost:8082的文件，由于端口不一致所以跨域了。\">http://localhost:8081下访问http://localhost:8082的文件，由于端口不一致所以跨域了。</a><br>（1）首先，需要服务器进行配合。因为服务器可以拼接任意字段返回给服务器，所以让服务器将数据包装为js函数返回。</p>\n<p>假设服务器给前端的数据为<a href=\"http://localhost:8082/index.js%EF%BC%8C%E8%AF%A5%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9%E8%AE%A9%E5%90%8E%E7%AB%AF%E5%8C%85%E8%A3%85%E4%B8%BAcallback%E6%96%B9%E6%B3%95%EF%BC%8C%E5%8F%82%E6%95%B0%E4%B8%BA%E7%9C%9F%E5%AE%9E%E8%A6%81%E4%BC%A0%E9%80%92%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%EF%BC%9A\">http://localhost:8082/index.js，该文件的内容让后端包装为callback方法，参数为真实要传递的数据，如：</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">callback</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">12</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>（2）然后，前端使用script标签引入该index文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src = <span class=\"string\">&quot;http://localhost:8082/index.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这样，在页面中就引入了一个名为callback的函数，因为是script全局引入，所以该方法位于window下。<br><br>（3）再使用另一个script标签，处理数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">callback</span> = <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 这个data就是后端传入callback的参数，即</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">age</span>: <span class=\"number\">12</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-cors实现跨域\"><a href=\"#4-cors实现跨域\" class=\"headerlink\" title=\"4. cors实现跨域\"></a>4. cors实现跨域</h6><p>CORS 是纯服务器端操作，服务器端可以设置header根据下面方法设置响应头字段<br>服务器端可以直接设置header，去允许某个地址的跨域访问。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-efbefcbd891c78b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h6 id=\"5-常用的ajax插件\"><a href=\"#5-常用的ajax插件\" class=\"headerlink\" title=\"5. 常用的ajax插件\"></a>5. 常用的ajax插件</h6><p>fetch() axios </p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、手写一个ajax\"><a href=\"#一、手写一个ajax\" class=\"headerlink\" title=\"一、手写一个ajax\"></a>一、手写一个ajax</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ajax发送请求的简单写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"string\">&#x27;12&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;./sendmsg&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> xml = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">xml.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// readyState：0--&gt;未调用send方法 1--&gt;已调用send()，正在发送请求 2--&gt;send()发送完成，已经接收到全部响应内容，3--&gt;正在解析响应内容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">state</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 上面的写好之后，下面的每次发送就直接写</span></span><br></pre></td></tr></table></figure>\n<p>promise ajax的写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise ajax写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ajax</span>(<span class=\"params\">url,data</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">res,rej</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> xml = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">        xml.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.<span class=\"property\">state</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">res</span>(&#123;url,data&#125;)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">rej</span>()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">rej</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        xml.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>,url,<span class=\"literal\">true</span>)</span><br><span class=\"line\">        xml.<span class=\"title function_\">send</span>(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">ajax</span>(url,data).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">&#123;url,data&#125;</span>)=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、跨域\"><a href=\"#二、跨域\" class=\"headerlink\" title=\"二、跨域\"></a>二、跨域</h4><h6 id=\"1-同源\"><a href=\"#1-同源\" class=\"headerlink\" title=\"1. 同源\"></a>1. 同源</h6><p>协议、域名、端口必须一致，叫做同源<br>同源策略：ajax请求时，浏览器要求当前网页和服务器端必须同源</p>\n<h6 id=\"2-img、link、script-可以无视同源策略，即可以跨域\"><a href=\"#2-img、link、script-可以无视同源策略，即可以跨域\" class=\"headerlink\" title=\"2. img、link、script 可以无视同源策略，即可以跨域\"></a>2. img、link、script 可以无视同源策略，即可以跨域</h6><p>由于img可以无视同源策略，所以可以用于使用第三方统计服务，如打点<br>link script 可使用cdn，cdn一般是外域服<br>script可以实现jsonp</p>\n<h6 id=\"3-如何用jsonp实现跨域？\"><a href=\"#3-如何用jsonp实现跨域？\" class=\"headerlink\" title=\"3. 如何用jsonp实现跨域？\"></a>3. 如何用jsonp实现跨域？</h6><p>上面说了<strong>script可以实现jsonp。</strong><br><br>现在假设我需要在<a href=\"http://localhost:8081下访问http://localhost:8082的文件，由于端口不一致所以跨域了。\">http://localhost:8081下访问http://localhost:8082的文件，由于端口不一致所以跨域了。</a><br>（1）首先，需要服务器进行配合。因为服务器可以拼接任意字段返回给服务器，所以让服务器将数据包装为js函数返回。</p>\n<p>假设服务器给前端的数据为<a href=\"http://localhost:8082/index.js%EF%BC%8C%E8%AF%A5%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9%E8%AE%A9%E5%90%8E%E7%AB%AF%E5%8C%85%E8%A3%85%E4%B8%BAcallback%E6%96%B9%E6%B3%95%EF%BC%8C%E5%8F%82%E6%95%B0%E4%B8%BA%E7%9C%9F%E5%AE%9E%E8%A6%81%E4%BC%A0%E9%80%92%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%EF%BC%9A\">http://localhost:8082/index.js，该文件的内容让后端包装为callback方法，参数为真实要传递的数据，如：</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">callback</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">12</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>（2）然后，前端使用script标签引入该index文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src = <span class=\"string\">&quot;http://localhost:8082/index.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这样，在页面中就引入了一个名为callback的函数，因为是script全局引入，所以该方法位于window下。<br><br>（3）再使用另一个script标签，处理数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">callback</span> = <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 这个data就是后端传入callback的参数，即</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">age</span>: <span class=\"number\">12</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-cors实现跨域\"><a href=\"#4-cors实现跨域\" class=\"headerlink\" title=\"4. cors实现跨域\"></a>4. cors实现跨域</h6><p>CORS 是纯服务器端操作，服务器端可以设置header根据下面方法设置响应头字段<br>服务器端可以直接设置header，去允许某个地址的跨域访问。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-efbefcbd891c78b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h6 id=\"5-常用的ajax插件\"><a href=\"#5-常用的ajax插件\" class=\"headerlink\" title=\"5. 常用的ajax插件\"></a>5. 常用的ajax插件</h6><p>fetch() axios </p>\n"},{"title":"【第4-3章】async await","date":"2019-04-06T09:01:05.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n## 一、generator的基本用法\n```javascript\nfunction* generator(a) {\n    yield console.log(a);\n    let b = 111+222;\n    yield a+b;\n    let d = yield 765+3\n    console.log(`d=${d}`)\n    return 1234567\n}\nlet gen = generator(333)\ngen.next() // value:333,done:false,\ngen.next() // value:666,done:false\ngen.next() // value:768,done:false\ngen.next(123) // d = 123 value:1234567(return为1234567，若函数没有return返回值则返回值为undefined),done:true\n//next()函数的参数当做上一个yield语句的返回值。\n```\n**1. for...of循环可以自动遍历generator函数运行时生成的iterator对象，且此时不需要调用next()方法。**\n```javascript\nfunction* foo() {\n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    yield 5;\n}\n\nfor(let v of foo()) {\n    console.log(v)\n}\n// 1 2 3 4 5 \n```\n\n**3. g.throw(err) 在generator函数内部排除一个错误**\n**4. g.return() 可以返回特定的值，并且终结generator函数。**\n**5. yield\\* gen() 若是在generator函数内部需要调用其他generator函数，需要手动遍历，或直接使用yield\\*表达式。**\n**6. 如果一个对象的属性是generator函数，则可以简写，generator的返回值是iterator遍历器**\n```javascript\nlet obj = {\n    fun:function() {\n\n    },\n    fun1: function* () {\n\n    }\n}\n// 等同于\nlet obj = {\n    fun () {\n\n    },\n    *fun1 () {\n\n    }\n}\n```\n\n## 二、async、await\n**· async 可以用同步的方式写异步的代码，async返回的是`promise`对象，如果返回了普通变量则会被包装成promise**\n**· await后面一般追加异步操作，相当于`promise.then()`，如`promise`对象、其他async函数**\n\n#### 1. async/await和Promise的关系，为什么要使用async\n async/await是消灭异步回调的方法，有了async/await，就可以使用同步的写法去写异步的程序，不需要再用回调函数，写起来也比promise简便。\n相当于promise.then promise.catch，但二者并不冲突\npromise捕获错误只能用promise.catch的方法，没办法用try...catch，但async/await可以，写法上会规范许多\n ```javascript\nasync function fn1 () {\n    let a = Promise.reject(100)\n    // Uncaught (in promise) 100\n    const res = await a \n// 不执行，await相当于promise.then，\n// 所以上面代码变为Promise.reject(100).then(()=>{})无法处理上面的reject，直接报错\n    console.log(res)  \n}\nfn1() // Uncaught (in promise) 100\n```\n\n```javascript\nasync function fn1 () {\n    let a = Promise.reject(100)\n    // Uncaught (in promise) 100\n    try{\n        const res = await a // 不执行，await相当于promise.then，所以无法处理上面的reject，直接报错\n        console.log(res)  \n    }\n    catch(e) {\n        console.log(`e=${e}`) // e=100\n    }\n}\nfn1() // e=100\n```\n\n#### 2. async返回一个promise，可以用.then方法，await相当于promise.then(重点！)，但用法又有所不同\nasync函数内部return语句返回的值，***会成为then方法回调函数的参数。***\nasync自动执行、async函数返回一个 Promise 对象，可以使用then方法添加回调函数。\nawait 后面跟promise对象或一个一个async 函数，相当于promise.then()\nasync函数返回的  Promise 对象，**必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。**也就是说，**只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。**\n```javascript\nasync function fn1 () {\n    return 100 // 相当于 return Promise.resolve(100)\n}\nfn1 == 100 // false，async返回一个promise，所以写值相当于promise.resolve(100)\nfn1().then((n)=>{ // async方法因为返回的是promise所以可以加then\n    console.log(`n=${n}`) // 100\n})\n```\n#### 3. 正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。async函数return的则是一个promise对象\n```javascript\nasync function fn1 () {\n    let a = await 100 // 正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。\n   // a.then()报错\n   // await虽然跟着一个promise对象，但返回结果可不一定是promise。\n    console.log(a) // 100\n}\n```\n```javascript\n// await如果赋值了，这个值返回的then中的参数\nasync function fna() {\n    let a = await Promise.resolve(100) \n// 理解为Promise.resolve(100).then()中then的参数\n// then中参数为100，所以a为100\n}\n```\n\n### 4. await后面可以跟promise或async函数，如果跟的是一个普通函数，那加不加await都是一样的\n```javascript\nfunction timeout(ms) {\n    return new Promise((resolve) => {\n      console.log('resolve=',resolve)\n      setTimeout(()=>{resolve(100)}, ms);\n    });\n  }\n  \n  async function asyncPrint(value, ms) {\n    let a = await timeout(ms);\n    console.log('a='+a)\n    console.log(value);\n  }  //a =100\n```\n\n###5. async内的catch相当于promise.catch()\n```\nasync function fn1() {\n    try {\n        const p4 = Promise.reject('err1')\n        const res = await p4\n        console.log(res)\n    }\n    catch(err) {\n        console.log(err)\n    }\n}\nfn1() // err1\n```\n### 若await后面的promise状态为reject，则之后代码均不执行\n```javascript\nasync function fn1() {\n    const p4 = Promise.reject('err1')\n    const res = await p4\n    console.log(res)\n}\nfn1() // Uncaught (in promise) err1\n// 解决方法： 加try catch捕获\n```\n\n### 5.异步的本质：遵循event-loop\nasync/await只是语法糖，从语法层面将代码变为同步的写法，但实质是异步的，依旧基于event-loop去执行\nawait 后面的内容全部都理解为放在回调函数中，所以他们都是异步操作，所以要放在同步操作的后面去执行（event-loop原理）\n```javascript\nasync function fn1() {\n    console.log(1)\n    await console.log(2)\n\n        await console.log(3)\n\n            await setTimeout(()=>{console.log(4)},3000)\n            console.log(5)\n\n                await console.log(6)\n                console.log(7)\n}\nfn1() \nconsole.log(8) // 1 2 8 3 5 6 7 4\n// 先执行fn1() \n// 执行console.log(1)\n// 执行console.log(2)\n// 执行第一个 await ,await后面部分为回调（异步操作），所以函数执行完毕，退出执行同步代码\n// 执行console.log(8)\n// 同步代码执行完毕，执行回调函数，即第一个await后面部分\n// 执行console.log(3)\n// 执行第二个 await\n// 后面的部分为第二个await的回调，执行回调\n// 执行setTimeout(()=>{console.log(3)},3000) ，定时器三秒启动\n// 执行第三个await ，同样后面部分是第三个await的回调\n// 执行console.log(5)\n// 后面和上面同理，执行console.log(6)\n// 执行第四个await，后面内容一样是它的回调\n// 执行console.log(7)\n```\n\n### 6.await后面加不加promise，很很很重要\n不加promise相当于一个同步函数，后面的代码也是同步代码了。\n```\n function timeout(ms) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n    });\n  }\n  \n  async function asyncPrint(value, ms) {\n    await timeout(ms);\n    console.log(value);\n  }\n  \n  asyncPrint('hello world', 5000);\n  console.log(1)\n// 打1，5秒后hello world\n// 若不加promise，会先启动定时器，立即打印1和value的值，不会等待定时器完毕再打印value\n// 加上promise，会先启动定时器，然后立刻打印1（同步操作），定时器结束打印value！\n\n// 声明 new Promise的时候,promise里面的函数会立马被执行，声明是同步\n// 声明之后.then.catch的内容才会被放到micro task queue中\n```\n```javascript\nfunction timeout(ms) {\n    return setTimeout(()=>{}, ms);\n  }\n  \n  async function asyncPrint(value, ms) {\n    await timeout(ms);\n    console.log(value);\n  }\n  asyncPrint('hello world', 5000);\n  console.log(1)\n// 立刻打1 hello world","source":"_posts/cxy/js/js-await.md","raw":"---\ntitle: '【第4-3章】async await'\ndate: 2019-04-06 17:01:05\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n## 一、generator的基本用法\n```javascript\nfunction* generator(a) {\n    yield console.log(a);\n    let b = 111+222;\n    yield a+b;\n    let d = yield 765+3\n    console.log(`d=${d}`)\n    return 1234567\n}\nlet gen = generator(333)\ngen.next() // value:333,done:false,\ngen.next() // value:666,done:false\ngen.next() // value:768,done:false\ngen.next(123) // d = 123 value:1234567(return为1234567，若函数没有return返回值则返回值为undefined),done:true\n//next()函数的参数当做上一个yield语句的返回值。\n```\n**1. for...of循环可以自动遍历generator函数运行时生成的iterator对象，且此时不需要调用next()方法。**\n```javascript\nfunction* foo() {\n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    yield 5;\n}\n\nfor(let v of foo()) {\n    console.log(v)\n}\n// 1 2 3 4 5 \n```\n\n**3. g.throw(err) 在generator函数内部排除一个错误**\n**4. g.return() 可以返回特定的值，并且终结generator函数。**\n**5. yield\\* gen() 若是在generator函数内部需要调用其他generator函数，需要手动遍历，或直接使用yield\\*表达式。**\n**6. 如果一个对象的属性是generator函数，则可以简写，generator的返回值是iterator遍历器**\n```javascript\nlet obj = {\n    fun:function() {\n\n    },\n    fun1: function* () {\n\n    }\n}\n// 等同于\nlet obj = {\n    fun () {\n\n    },\n    *fun1 () {\n\n    }\n}\n```\n\n## 二、async、await\n**· async 可以用同步的方式写异步的代码，async返回的是`promise`对象，如果返回了普通变量则会被包装成promise**\n**· await后面一般追加异步操作，相当于`promise.then()`，如`promise`对象、其他async函数**\n\n#### 1. async/await和Promise的关系，为什么要使用async\n async/await是消灭异步回调的方法，有了async/await，就可以使用同步的写法去写异步的程序，不需要再用回调函数，写起来也比promise简便。\n相当于promise.then promise.catch，但二者并不冲突\npromise捕获错误只能用promise.catch的方法，没办法用try...catch，但async/await可以，写法上会规范许多\n ```javascript\nasync function fn1 () {\n    let a = Promise.reject(100)\n    // Uncaught (in promise) 100\n    const res = await a \n// 不执行，await相当于promise.then，\n// 所以上面代码变为Promise.reject(100).then(()=>{})无法处理上面的reject，直接报错\n    console.log(res)  \n}\nfn1() // Uncaught (in promise) 100\n```\n\n```javascript\nasync function fn1 () {\n    let a = Promise.reject(100)\n    // Uncaught (in promise) 100\n    try{\n        const res = await a // 不执行，await相当于promise.then，所以无法处理上面的reject，直接报错\n        console.log(res)  \n    }\n    catch(e) {\n        console.log(`e=${e}`) // e=100\n    }\n}\nfn1() // e=100\n```\n\n#### 2. async返回一个promise，可以用.then方法，await相当于promise.then(重点！)，但用法又有所不同\nasync函数内部return语句返回的值，***会成为then方法回调函数的参数。***\nasync自动执行、async函数返回一个 Promise 对象，可以使用then方法添加回调函数。\nawait 后面跟promise对象或一个一个async 函数，相当于promise.then()\nasync函数返回的  Promise 对象，**必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。**也就是说，**只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。**\n```javascript\nasync function fn1 () {\n    return 100 // 相当于 return Promise.resolve(100)\n}\nfn1 == 100 // false，async返回一个promise，所以写值相当于promise.resolve(100)\nfn1().then((n)=>{ // async方法因为返回的是promise所以可以加then\n    console.log(`n=${n}`) // 100\n})\n```\n#### 3. 正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。async函数return的则是一个promise对象\n```javascript\nasync function fn1 () {\n    let a = await 100 // 正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。\n   // a.then()报错\n   // await虽然跟着一个promise对象，但返回结果可不一定是promise。\n    console.log(a) // 100\n}\n```\n```javascript\n// await如果赋值了，这个值返回的then中的参数\nasync function fna() {\n    let a = await Promise.resolve(100) \n// 理解为Promise.resolve(100).then()中then的参数\n// then中参数为100，所以a为100\n}\n```\n\n### 4. await后面可以跟promise或async函数，如果跟的是一个普通函数，那加不加await都是一样的\n```javascript\nfunction timeout(ms) {\n    return new Promise((resolve) => {\n      console.log('resolve=',resolve)\n      setTimeout(()=>{resolve(100)}, ms);\n    });\n  }\n  \n  async function asyncPrint(value, ms) {\n    let a = await timeout(ms);\n    console.log('a='+a)\n    console.log(value);\n  }  //a =100\n```\n\n###5. async内的catch相当于promise.catch()\n```\nasync function fn1() {\n    try {\n        const p4 = Promise.reject('err1')\n        const res = await p4\n        console.log(res)\n    }\n    catch(err) {\n        console.log(err)\n    }\n}\nfn1() // err1\n```\n### 若await后面的promise状态为reject，则之后代码均不执行\n```javascript\nasync function fn1() {\n    const p4 = Promise.reject('err1')\n    const res = await p4\n    console.log(res)\n}\nfn1() // Uncaught (in promise) err1\n// 解决方法： 加try catch捕获\n```\n\n### 5.异步的本质：遵循event-loop\nasync/await只是语法糖，从语法层面将代码变为同步的写法，但实质是异步的，依旧基于event-loop去执行\nawait 后面的内容全部都理解为放在回调函数中，所以他们都是异步操作，所以要放在同步操作的后面去执行（event-loop原理）\n```javascript\nasync function fn1() {\n    console.log(1)\n    await console.log(2)\n\n        await console.log(3)\n\n            await setTimeout(()=>{console.log(4)},3000)\n            console.log(5)\n\n                await console.log(6)\n                console.log(7)\n}\nfn1() \nconsole.log(8) // 1 2 8 3 5 6 7 4\n// 先执行fn1() \n// 执行console.log(1)\n// 执行console.log(2)\n// 执行第一个 await ,await后面部分为回调（异步操作），所以函数执行完毕，退出执行同步代码\n// 执行console.log(8)\n// 同步代码执行完毕，执行回调函数，即第一个await后面部分\n// 执行console.log(3)\n// 执行第二个 await\n// 后面的部分为第二个await的回调，执行回调\n// 执行setTimeout(()=>{console.log(3)},3000) ，定时器三秒启动\n// 执行第三个await ，同样后面部分是第三个await的回调\n// 执行console.log(5)\n// 后面和上面同理，执行console.log(6)\n// 执行第四个await，后面内容一样是它的回调\n// 执行console.log(7)\n```\n\n### 6.await后面加不加promise，很很很重要\n不加promise相当于一个同步函数，后面的代码也是同步代码了。\n```\n function timeout(ms) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n    });\n  }\n  \n  async function asyncPrint(value, ms) {\n    await timeout(ms);\n    console.log(value);\n  }\n  \n  asyncPrint('hello world', 5000);\n  console.log(1)\n// 打1，5秒后hello world\n// 若不加promise，会先启动定时器，立即打印1和value的值，不会等待定时器完毕再打印value\n// 加上promise，会先启动定时器，然后立刻打印1（同步操作），定时器结束打印value！\n\n// 声明 new Promise的时候,promise里面的函数会立马被执行，声明是同步\n// 声明之后.then.catch的内容才会被放到micro task queue中\n```\n```javascript\nfunction timeout(ms) {\n    return setTimeout(()=>{}, ms);\n  }\n  \n  async function asyncPrint(value, ms) {\n    await timeout(ms);\n    console.log(value);\n  }\n  asyncPrint('hello world', 5000);\n  console.log(1)\n// 立刻打1 hello world","slug":"cxy/js/js-await","published":1,"updated":"2023-01-25T20:30:56.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifg0001kdwi68bp7let","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n<h2 id=\"一、generator的基本用法\"><a href=\"#一、generator的基本用法\" class=\"headerlink\" title=\"一、generator的基本用法\"></a>一、generator的基本用法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">generator</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">111</span>+<span class=\"number\">222</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a+b;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> d = <span class=\"keyword\">yield</span> <span class=\"number\">765</span>+<span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`d=<span class=\"subst\">$&#123;d&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1234567</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> gen = <span class=\"title function_\">generator</span>(<span class=\"number\">333</span>)</span><br><span class=\"line\">gen.<span class=\"title function_\">next</span>() <span class=\"comment\">// value:333,done:false,</span></span><br><span class=\"line\">gen.<span class=\"title function_\">next</span>() <span class=\"comment\">// value:666,done:false</span></span><br><span class=\"line\">gen.<span class=\"title function_\">next</span>() <span class=\"comment\">// value:768,done:false</span></span><br><span class=\"line\">gen.<span class=\"title function_\">next</span>(<span class=\"number\">123</span>) <span class=\"comment\">// d = 123 value:1234567(return为1234567，若函数没有return返回值则返回值为undefined),done:true</span></span><br><span class=\"line\"><span class=\"comment\">//next()函数的参数当做上一个yield语句的返回值。</span></span><br></pre></td></tr></table></figure>\n<p><strong>1. for…of循环可以自动遍历generator函数运行时生成的iterator对象，且此时不需要调用next()方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> <span class=\"title function_\">foo</span>()) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5 </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3. g.throw(err) 在generator函数内部排除一个错误</strong><br><strong>4. g.return() 可以返回特定的值，并且终结generator函数。</strong><br><strong>5. yield* gen() 若是在generator函数内部需要调用其他generator函数，需要手动遍历，或直接使用yield*表达式。</strong><br><strong>6. 如果一个对象的属性是generator函数，则可以简写，generator的返回值是iterator遍历器</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">fun</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">fun1</span>: <span class=\"keyword\">function</span>* () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    fun () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    *fun1 () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、async、await\"><a href=\"#二、async、await\" class=\"headerlink\" title=\"二、async、await\"></a>二、async、await</h2><p><strong>· async 可以用同步的方式写异步的代码，async返回的是<code>promise</code>对象，如果返回了普通变量则会被包装成promise</strong><br><strong>· await后面一般追加异步操作，相当于<code>promise.then()</code>，如<code>promise</code>对象、其他async函数</strong></p>\n<h4 id=\"1-async-await和Promise的关系，为什么要使用async\"><a href=\"#1-async-await和Promise的关系，为什么要使用async\" class=\"headerlink\" title=\"1. async/await和Promise的关系，为什么要使用async\"></a>1. async/await和Promise的关系，为什么要使用async</h4><p> async/await是消灭异步回调的方法，有了async/await，就可以使用同步的写法去写异步的程序，不需要再用回调函数，写起来也比promise简便。<br>相当于promise.then promise.catch，但二者并不冲突<br>promise捕获错误只能用promise.catch的方法，没办法用try…catch，但async/await可以，写法上会规范许多<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Uncaught (in promise) 100</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> a </span><br><span class=\"line\"><span class=\"comment\">// 不执行，await相当于promise.then，</span></span><br><span class=\"line\"><span class=\"comment\">// 所以上面代码变为Promise.reject(100).then(()=&gt;&#123;&#125;)无法处理上面的reject，直接报错</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() <span class=\"comment\">// Uncaught (in promise) 100</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Uncaught (in promise) 100</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> a <span class=\"comment\">// 不执行，await相当于promise.then，所以无法处理上面的reject，直接报错</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`e=<span class=\"subst\">$&#123;e&#125;</span>`</span>) <span class=\"comment\">// e=100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() <span class=\"comment\">// e=100</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-async返回一个promise，可以用-then方法，await相当于promise-then-重点！-，但用法又有所不同\"><a href=\"#2-async返回一个promise，可以用-then方法，await相当于promise-then-重点！-，但用法又有所不同\" class=\"headerlink\" title=\"2. async返回一个promise，可以用.then方法，await相当于promise.then(重点！)，但用法又有所不同\"></a>2. async返回一个promise，可以用.then方法，await相当于promise.then(重点！)，但用法又有所不同</h4><p>async函数内部return语句返回的值，<em><strong>会成为then方法回调函数的参数。</strong></em><br>async自动执行、async函数返回一个 Promise 对象，可以使用then方法添加回调函数。<br>await 后面跟promise对象或一个一个async 函数，相当于promise.then()<br>async函数返回的  Promise 对象，<strong>必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。</strong>也就是说，<strong>只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">100</span> <span class=\"comment\">// 相当于 return Promise.resolve(100)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1 == <span class=\"number\">100</span> <span class=\"comment\">// false，async返回一个promise，所以写值相当于promise.resolve(100)</span></span><br><span class=\"line\"><span class=\"title function_\">fn1</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">n</span>)=&gt;</span>&#123; <span class=\"comment\">// async方法因为返回的是promise所以可以加then</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`n=<span class=\"subst\">$&#123;n&#125;</span>`</span>) <span class=\"comment\">// 100</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-正常情况下，await命令后面是一个-Promise-对象，返回该对象的结果。如果不是-Promise-对象，就直接返回对应的值。async函数return的则是一个promise对象\"><a href=\"#3-正常情况下，await命令后面是一个-Promise-对象，返回该对象的结果。如果不是-Promise-对象，就直接返回对应的值。async函数return的则是一个promise对象\" class=\"headerlink\" title=\"3. 正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。async函数return的则是一个promise对象\"></a>3. 正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。async函数return的则是一个promise对象</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">await</span> <span class=\"number\">100</span> <span class=\"comment\">// 正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。</span></span><br><span class=\"line\">   <span class=\"comment\">// a.then()报错</span></span><br><span class=\"line\">   <span class=\"comment\">// await虽然跟着一个promise对象，但返回结果可不一定是promise。</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// 100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// await如果赋值了，这个值返回的then中的参数</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fna</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">100</span>) </span><br><span class=\"line\"><span class=\"comment\">// 理解为Promise.resolve(100).then()中then的参数</span></span><br><span class=\"line\"><span class=\"comment\">// then中参数为100，所以a为100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-await后面可以跟promise或async函数，如果跟的是一个普通函数，那加不加await都是一样的\"><a href=\"#4-await后面可以跟promise或async函数，如果跟的是一个普通函数，那加不加await都是一样的\" class=\"headerlink\" title=\"4. await后面可以跟promise或async函数，如果跟的是一个普通函数，那加不加await都是一样的\"></a>4. await后面可以跟promise或async函数，如果跟的是一个普通函数，那加不加await都是一样的</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">timeout</span>(<span class=\"params\">ms</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolve=&#x27;</span>,resolve)</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;<span class=\"title function_\">resolve</span>(<span class=\"number\">100</span>)&#125;, ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">asyncPrint</span>(<span class=\"params\">value, ms</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">await</span> <span class=\"title function_\">timeout</span>(ms);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a=&#x27;</span>+a)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;  <span class=\"comment\">//a =100</span></span><br></pre></td></tr></table></figure>\n\n<p>###5. async内的catch相当于promise.catch()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function fn1() &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        const p4 = Promise.reject(&#x27;err1&#x27;)</span><br><span class=\"line\">        const res = await p4</span><br><span class=\"line\">        console.log(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch(err) &#123;</span><br><span class=\"line\">        console.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1() // err1</span><br></pre></td></tr></table></figure>\n<h3 id=\"若await后面的promise状态为reject，则之后代码均不执行\"><a href=\"#若await后面的promise状态为reject，则之后代码均不执行\" class=\"headerlink\" title=\"若await后面的promise状态为reject，则之后代码均不执行\"></a>若await后面的promise状态为reject，则之后代码均不执行</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> p4 = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;err1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> p4</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() <span class=\"comment\">// Uncaught (in promise) err1</span></span><br><span class=\"line\"><span class=\"comment\">// 解决方法： 加try catch捕获</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-异步的本质：遵循event-loop\"><a href=\"#5-异步的本质：遵循event-loop\" class=\"headerlink\" title=\"5.异步的本质：遵循event-loop\"></a>5.异步的本质：遵循event-loop</h3><p>async/await只是语法糖，从语法层面将代码变为同步的写法，但实质是异步的，依旧基于event-loop去执行<br>await 后面的内容全部都理解为放在回调函数中，所以他们都是异步操作，所以要放在同步操作的后面去执行（event-loop原理）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>)&#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">await</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">8</span>) <span class=\"comment\">// 1 2 8 3 5 6 7 4</span></span><br><span class=\"line\"><span class=\"comment\">// 先执行fn1() </span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(1)</span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(2)</span></span><br><span class=\"line\"><span class=\"comment\">// 执行第一个 await ,await后面部分为回调（异步操作），所以函数执行完毕，退出执行同步代码</span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(8)</span></span><br><span class=\"line\"><span class=\"comment\">// 同步代码执行完毕，执行回调函数，即第一个await后面部分</span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(3)</span></span><br><span class=\"line\"><span class=\"comment\">// 执行第二个 await</span></span><br><span class=\"line\"><span class=\"comment\">// 后面的部分为第二个await的回调，执行回调</span></span><br><span class=\"line\"><span class=\"comment\">// 执行setTimeout(()=&gt;&#123;console.log(3)&#125;,3000) ，定时器三秒启动</span></span><br><span class=\"line\"><span class=\"comment\">// 执行第三个await ，同样后面部分是第三个await的回调</span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(5)</span></span><br><span class=\"line\"><span class=\"comment\">// 后面和上面同理，执行console.log(6)</span></span><br><span class=\"line\"><span class=\"comment\">// 执行第四个await，后面内容一样是它的回调</span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(7)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-await后面加不加promise，很很很重要\"><a href=\"#6-await后面加不加promise，很很很重要\" class=\"headerlink\" title=\"6.await后面加不加promise，很很很重要\"></a>6.await后面加不加promise，很很很重要</h3><p>不加promise相当于一个同步函数，后面的代码也是同步代码了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function timeout(ms) &#123;</span><br><span class=\"line\">    return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">      setTimeout(resolve, ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  async function asyncPrint(value, ms) &#123;</span><br><span class=\"line\">    await timeout(ms);</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  asyncPrint(&#x27;hello world&#x27;, 5000);</span><br><span class=\"line\">  console.log(1)</span><br><span class=\"line\">// 打1，5秒后hello world</span><br><span class=\"line\">// 若不加promise，会先启动定时器，立即打印1和value的值，不会等待定时器完毕再打印value</span><br><span class=\"line\">// 加上promise，会先启动定时器，然后立刻打印1（同步操作），定时器结束打印value！</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明 new Promise的时候,promise里面的函数会立马被执行，声明是同步</span><br><span class=\"line\">// 声明之后.then.catch的内容才会被放到micro task queue中</span><br></pre></td></tr></table></figure>\n<p>```javascript<br>function timeout(ms) {<br>    return setTimeout(()=&gt;{}, ms);<br>  }</p>\n<p>  async function asyncPrint(value, ms) {<br>    await timeout(ms);<br>    console.log(value);<br>  }<br>  asyncPrint(‘hello world’, 5000);<br>  console.log(1)<br>// 立刻打1 hello world</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n<h2 id=\"一、generator的基本用法\"><a href=\"#一、generator的基本用法\" class=\"headerlink\" title=\"一、generator的基本用法\"></a>一、generator的基本用法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">generator</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">111</span>+<span class=\"number\">222</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a+b;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> d = <span class=\"keyword\">yield</span> <span class=\"number\">765</span>+<span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`d=<span class=\"subst\">$&#123;d&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1234567</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> gen = <span class=\"title function_\">generator</span>(<span class=\"number\">333</span>)</span><br><span class=\"line\">gen.<span class=\"title function_\">next</span>() <span class=\"comment\">// value:333,done:false,</span></span><br><span class=\"line\">gen.<span class=\"title function_\">next</span>() <span class=\"comment\">// value:666,done:false</span></span><br><span class=\"line\">gen.<span class=\"title function_\">next</span>() <span class=\"comment\">// value:768,done:false</span></span><br><span class=\"line\">gen.<span class=\"title function_\">next</span>(<span class=\"number\">123</span>) <span class=\"comment\">// d = 123 value:1234567(return为1234567，若函数没有return返回值则返回值为undefined),done:true</span></span><br><span class=\"line\"><span class=\"comment\">//next()函数的参数当做上一个yield语句的返回值。</span></span><br></pre></td></tr></table></figure>\n<p><strong>1. for…of循环可以自动遍历generator函数运行时生成的iterator对象，且此时不需要调用next()方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> <span class=\"title function_\">foo</span>()) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5 </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3. g.throw(err) 在generator函数内部排除一个错误</strong><br><strong>4. g.return() 可以返回特定的值，并且终结generator函数。</strong><br><strong>5. yield* gen() 若是在generator函数内部需要调用其他generator函数，需要手动遍历，或直接使用yield*表达式。</strong><br><strong>6. 如果一个对象的属性是generator函数，则可以简写，generator的返回值是iterator遍历器</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">fun</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">fun1</span>: <span class=\"keyword\">function</span>* () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    fun () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    *fun1 () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、async、await\"><a href=\"#二、async、await\" class=\"headerlink\" title=\"二、async、await\"></a>二、async、await</h2><p><strong>· async 可以用同步的方式写异步的代码，async返回的是<code>promise</code>对象，如果返回了普通变量则会被包装成promise</strong><br><strong>· await后面一般追加异步操作，相当于<code>promise.then()</code>，如<code>promise</code>对象、其他async函数</strong></p>\n<h4 id=\"1-async-await和Promise的关系，为什么要使用async\"><a href=\"#1-async-await和Promise的关系，为什么要使用async\" class=\"headerlink\" title=\"1. async/await和Promise的关系，为什么要使用async\"></a>1. async/await和Promise的关系，为什么要使用async</h4><p> async/await是消灭异步回调的方法，有了async/await，就可以使用同步的写法去写异步的程序，不需要再用回调函数，写起来也比promise简便。<br>相当于promise.then promise.catch，但二者并不冲突<br>promise捕获错误只能用promise.catch的方法，没办法用try…catch，但async/await可以，写法上会规范许多<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Uncaught (in promise) 100</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> a </span><br><span class=\"line\"><span class=\"comment\">// 不执行，await相当于promise.then，</span></span><br><span class=\"line\"><span class=\"comment\">// 所以上面代码变为Promise.reject(100).then(()=&gt;&#123;&#125;)无法处理上面的reject，直接报错</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() <span class=\"comment\">// Uncaught (in promise) 100</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Uncaught (in promise) 100</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> a <span class=\"comment\">// 不执行，await相当于promise.then，所以无法处理上面的reject，直接报错</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`e=<span class=\"subst\">$&#123;e&#125;</span>`</span>) <span class=\"comment\">// e=100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() <span class=\"comment\">// e=100</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-async返回一个promise，可以用-then方法，await相当于promise-then-重点！-，但用法又有所不同\"><a href=\"#2-async返回一个promise，可以用-then方法，await相当于promise-then-重点！-，但用法又有所不同\" class=\"headerlink\" title=\"2. async返回一个promise，可以用.then方法，await相当于promise.then(重点！)，但用法又有所不同\"></a>2. async返回一个promise，可以用.then方法，await相当于promise.then(重点！)，但用法又有所不同</h4><p>async函数内部return语句返回的值，<em><strong>会成为then方法回调函数的参数。</strong></em><br>async自动执行、async函数返回一个 Promise 对象，可以使用then方法添加回调函数。<br>await 后面跟promise对象或一个一个async 函数，相当于promise.then()<br>async函数返回的  Promise 对象，<strong>必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。</strong>也就是说，<strong>只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">100</span> <span class=\"comment\">// 相当于 return Promise.resolve(100)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1 == <span class=\"number\">100</span> <span class=\"comment\">// false，async返回一个promise，所以写值相当于promise.resolve(100)</span></span><br><span class=\"line\"><span class=\"title function_\">fn1</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">n</span>)=&gt;</span>&#123; <span class=\"comment\">// async方法因为返回的是promise所以可以加then</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`n=<span class=\"subst\">$&#123;n&#125;</span>`</span>) <span class=\"comment\">// 100</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-正常情况下，await命令后面是一个-Promise-对象，返回该对象的结果。如果不是-Promise-对象，就直接返回对应的值。async函数return的则是一个promise对象\"><a href=\"#3-正常情况下，await命令后面是一个-Promise-对象，返回该对象的结果。如果不是-Promise-对象，就直接返回对应的值。async函数return的则是一个promise对象\" class=\"headerlink\" title=\"3. 正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。async函数return的则是一个promise对象\"></a>3. 正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。async函数return的则是一个promise对象</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">await</span> <span class=\"number\">100</span> <span class=\"comment\">// 正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。</span></span><br><span class=\"line\">   <span class=\"comment\">// a.then()报错</span></span><br><span class=\"line\">   <span class=\"comment\">// await虽然跟着一个promise对象，但返回结果可不一定是promise。</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// 100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// await如果赋值了，这个值返回的then中的参数</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fna</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">100</span>) </span><br><span class=\"line\"><span class=\"comment\">// 理解为Promise.resolve(100).then()中then的参数</span></span><br><span class=\"line\"><span class=\"comment\">// then中参数为100，所以a为100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-await后面可以跟promise或async函数，如果跟的是一个普通函数，那加不加await都是一样的\"><a href=\"#4-await后面可以跟promise或async函数，如果跟的是一个普通函数，那加不加await都是一样的\" class=\"headerlink\" title=\"4. await后面可以跟promise或async函数，如果跟的是一个普通函数，那加不加await都是一样的\"></a>4. await后面可以跟promise或async函数，如果跟的是一个普通函数，那加不加await都是一样的</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">timeout</span>(<span class=\"params\">ms</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolve=&#x27;</span>,resolve)</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;<span class=\"title function_\">resolve</span>(<span class=\"number\">100</span>)&#125;, ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">asyncPrint</span>(<span class=\"params\">value, ms</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">await</span> <span class=\"title function_\">timeout</span>(ms);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a=&#x27;</span>+a)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;  <span class=\"comment\">//a =100</span></span><br></pre></td></tr></table></figure>\n\n<p>###5. async内的catch相当于promise.catch()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function fn1() &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        const p4 = Promise.reject(&#x27;err1&#x27;)</span><br><span class=\"line\">        const res = await p4</span><br><span class=\"line\">        console.log(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch(err) &#123;</span><br><span class=\"line\">        console.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1() // err1</span><br></pre></td></tr></table></figure>\n<h3 id=\"若await后面的promise状态为reject，则之后代码均不执行\"><a href=\"#若await后面的promise状态为reject，则之后代码均不执行\" class=\"headerlink\" title=\"若await后面的promise状态为reject，则之后代码均不执行\"></a>若await后面的promise状态为reject，则之后代码均不执行</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> p4 = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;err1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> p4</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() <span class=\"comment\">// Uncaught (in promise) err1</span></span><br><span class=\"line\"><span class=\"comment\">// 解决方法： 加try catch捕获</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-异步的本质：遵循event-loop\"><a href=\"#5-异步的本质：遵循event-loop\" class=\"headerlink\" title=\"5.异步的本质：遵循event-loop\"></a>5.异步的本质：遵循event-loop</h3><p>async/await只是语法糖，从语法层面将代码变为同步的写法，但实质是异步的，依旧基于event-loop去执行<br>await 后面的内容全部都理解为放在回调函数中，所以他们都是异步操作，所以要放在同步操作的后面去执行（event-loop原理）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>)&#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">await</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">8</span>) <span class=\"comment\">// 1 2 8 3 5 6 7 4</span></span><br><span class=\"line\"><span class=\"comment\">// 先执行fn1() </span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(1)</span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(2)</span></span><br><span class=\"line\"><span class=\"comment\">// 执行第一个 await ,await后面部分为回调（异步操作），所以函数执行完毕，退出执行同步代码</span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(8)</span></span><br><span class=\"line\"><span class=\"comment\">// 同步代码执行完毕，执行回调函数，即第一个await后面部分</span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(3)</span></span><br><span class=\"line\"><span class=\"comment\">// 执行第二个 await</span></span><br><span class=\"line\"><span class=\"comment\">// 后面的部分为第二个await的回调，执行回调</span></span><br><span class=\"line\"><span class=\"comment\">// 执行setTimeout(()=&gt;&#123;console.log(3)&#125;,3000) ，定时器三秒启动</span></span><br><span class=\"line\"><span class=\"comment\">// 执行第三个await ，同样后面部分是第三个await的回调</span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(5)</span></span><br><span class=\"line\"><span class=\"comment\">// 后面和上面同理，执行console.log(6)</span></span><br><span class=\"line\"><span class=\"comment\">// 执行第四个await，后面内容一样是它的回调</span></span><br><span class=\"line\"><span class=\"comment\">// 执行console.log(7)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-await后面加不加promise，很很很重要\"><a href=\"#6-await后面加不加promise，很很很重要\" class=\"headerlink\" title=\"6.await后面加不加promise，很很很重要\"></a>6.await后面加不加promise，很很很重要</h3><p>不加promise相当于一个同步函数，后面的代码也是同步代码了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function timeout(ms) &#123;</span><br><span class=\"line\">    return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">      setTimeout(resolve, ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  async function asyncPrint(value, ms) &#123;</span><br><span class=\"line\">    await timeout(ms);</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  asyncPrint(&#x27;hello world&#x27;, 5000);</span><br><span class=\"line\">  console.log(1)</span><br><span class=\"line\">// 打1，5秒后hello world</span><br><span class=\"line\">// 若不加promise，会先启动定时器，立即打印1和value的值，不会等待定时器完毕再打印value</span><br><span class=\"line\">// 加上promise，会先启动定时器，然后立刻打印1（同步操作），定时器结束打印value！</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明 new Promise的时候,promise里面的函数会立马被执行，声明是同步</span><br><span class=\"line\">// 声明之后.then.catch的内容才会被放到micro task queue中</span><br></pre></td></tr></table></figure>\n<p>```javascript<br>function timeout(ms) {<br>    return setTimeout(()=&gt;{}, ms);<br>  }</p>\n<p>  async function asyncPrint(value, ms) {<br>    await timeout(ms);<br>    console.log(value);<br>  }<br>  asyncPrint(‘hello world’, 5000);<br>  console.log(1)<br>// 立刻打1 hello world</p>\n"},{"title":"【第3-2章】作用域和闭包","date":"2019-04-05T04:00:00.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、作用域和自由变量\n#### 作用域:\n作用域就是一个变量的合法使用范围。\n作用域分为全局作用域、函数作用域及块级作用域（es6新增）。\n#### 函数作用域\n```javascript\nfunction func () {\n    let a = 1\n}\n```\n#### 块级作用域（es6新增）\n```javascript\nif (true) {\n    let a = 1\n}\nconsole.log(a) //报错 let声明的块级作用域\n```\n```javascript\nif (true) {\n    var a = 1\n}\nconsole.log(a) // 1 全局作用域\n```\n\n#### 自由变量：\n一个变量在当前作用域没有定义，（注意是当前作用域，哪怕上级作用域定义了只要当前作用域没定义就不行）但被使用了，沿上级作用域一级一级找，若到全局作用域还没有找到，就报错。\n## 二、闭包\n·闭包就是作用域应用的一个特殊情况，闭包让**开发者可以从内部函数访问外部函数**的作用域，有两种情况：\n（1）函数作为参数被传递 \n（2）函数作为返回值\n·自由变量的查找是在函数定义的地方！（重点，函数定义的地方是指函数体在哪里），向上级作用域查找\n**注意：闭包中的变量会常驻在内存，得不到释放，因为判断不了闭包内的变量未来是否会用到**\n**闭包是由函数以及声明该函数的词法环境组合而成的。**\n#### （1）函数作为参数被传递 \n```javascript\nconst a = 100\nfunction print(fn) {\n    const a = 200\n    fn()\n}\nfunction fn() {\n    console.log(a)\n}\nprint(fn) // 100 fn定义是在全局作用域，所以a == 100\n```\n#### （2）函数作为返回值\n```javascript\nfunction create() {\n    const a = 100\n    return function() {\n        console.log(a)\n    }\n}\nconst a = 200 \nconst fn = create()\nfn() // 100\n```\n#### （3）自执行函数\n```javascript\nlet a = (function(i){console.log(i)})(1) // 1\na // undefined，此处的自执行函数没有设定返回值，所以a为undefined\n\n```\n```javascript\nvar data = [];\nfor (var i = 0; i < 3; i++) {\n  data[i] = function () {\n    console.log(i);\n  };\n}\n```\n![返回值全为3](https://upload-images.jianshu.io/upload_images/20892169-3d19c3d683e09a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**function 里可没传参数，看好了是data后面有参数，其实就算传了也没什么影响，因为i的值已经在调用时决定是3了，虽然函数定义时决定了变量所在的作用域，但调用时才能决定变量在该作用域实际的值。**\n\n### **重要！！！变量在定义时就确定了上级作用域，但需要在调用时才能确定变量定义时所在的上级作用域或当前作用域该变量的值，比如这里**\n\n**i在调用时的值为3，即使外部定义了i = 10，最终查找还是在定义时的当前作用域查找i，当前作用域的i为3，所以输出全为3**\n\n**改进方法**：形成自己的封闭的块级作用域。\n**改进方法1**：for内的var变为let，因为let具有块级作用域，它形成了三个私有作用域相互不会干扰。\n```javascript\nfor (let i = 0; i < 3; i++) {\n    data[i] = function () {\n      console.log(i);\n    }\n  }\n```\n**改进方法2**：自执行函数和闭包\n匿名函数定义也是在匿名函数声明的地方，这里即return后，有名字的函数定义就在有名字的函数那里，然后一层一层向上查找\n```javascript\nfor(var i = 0;i < 3; i ++) {\n    (function(j){\n        data[j] = function() {console.log(j)}\n    })(i)\n}\n```\n**自由变量的查找是在函数定义的地方，向上级作用域查找 ，而不是在执行的地方。**\n\n## 三、this\n详见3-1\nthis取值是在**函数执行**的时候决定的，而不是**函数定义**的时候决定的。\n\n箭头函数的this取值是**取他的上级作用域的值**（静态作用域），普通function的this取值是在**函数执行**时确认的。\n\n**分为以下几种情况：**\n（1）作为对象方法被执行，this指向该对象。\n（2）class的this表示它当前的实例，在构造函数（函数用new调用）中，this指向要被constructed的新对象。\n（3）普通函数的this，在调用时才知道this的作用域。\n（4）箭头函数的this固定指向上级作用域 \n（5）call apply\n函数内的this和函数在什么环境中定义没有关系，而只和自己的主体有关。\n\n####call、apply、bind的区别和使用：\n作用是在一个对象中调用另一个对象的方法和属性。\n\ncall、apply、bind的第一个参数均为需要调用属性或方法的对象，区别是apply的第二个参数为数组，而bind、apply参数不放入数组而是直接列出。\n\nbing会返回一个函数，执行函数后才改变this，而call、apply会立即执行。\n```javascript\nlet fullname = {\n    getFullName (city,country) {\n        return this.firstname+this.lastname+'from'+country+city\n    }\n}\nlet name = {\n    firstname: 'bai',\n    lastname:'xue'\n}\n```\n###### bind的执行：\n```javascript\nlet fullnamestring = fullname.getFullName.bind(name,'安康','陕西')\nfullnamestring() //'baixuefrom陕西安康'\n```\n###### call的执行：\n```\nlet fullnamestring = fullname.getFullName.call(name,'安康','陕西') //'baixuefrom陕西安康'\n```\n###### apply的执行：\n```\nlet fullnamestring = fullname.getFullName.apply(name,['安康','陕西']) //'baixuefrom陕西安康'\n```\n#### 面试题：\n###### 手写bind、call、apply\n###### 闭包的实际使用场景","source":"_posts/cxy/js/js-context.md","raw":"---\ntitle: '【第3-2章】作用域和闭包'\ndate: 2019-04-05 12:00:00\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、作用域和自由变量\n#### 作用域:\n作用域就是一个变量的合法使用范围。\n作用域分为全局作用域、函数作用域及块级作用域（es6新增）。\n#### 函数作用域\n```javascript\nfunction func () {\n    let a = 1\n}\n```\n#### 块级作用域（es6新增）\n```javascript\nif (true) {\n    let a = 1\n}\nconsole.log(a) //报错 let声明的块级作用域\n```\n```javascript\nif (true) {\n    var a = 1\n}\nconsole.log(a) // 1 全局作用域\n```\n\n#### 自由变量：\n一个变量在当前作用域没有定义，（注意是当前作用域，哪怕上级作用域定义了只要当前作用域没定义就不行）但被使用了，沿上级作用域一级一级找，若到全局作用域还没有找到，就报错。\n## 二、闭包\n·闭包就是作用域应用的一个特殊情况，闭包让**开发者可以从内部函数访问外部函数**的作用域，有两种情况：\n（1）函数作为参数被传递 \n（2）函数作为返回值\n·自由变量的查找是在函数定义的地方！（重点，函数定义的地方是指函数体在哪里），向上级作用域查找\n**注意：闭包中的变量会常驻在内存，得不到释放，因为判断不了闭包内的变量未来是否会用到**\n**闭包是由函数以及声明该函数的词法环境组合而成的。**\n#### （1）函数作为参数被传递 \n```javascript\nconst a = 100\nfunction print(fn) {\n    const a = 200\n    fn()\n}\nfunction fn() {\n    console.log(a)\n}\nprint(fn) // 100 fn定义是在全局作用域，所以a == 100\n```\n#### （2）函数作为返回值\n```javascript\nfunction create() {\n    const a = 100\n    return function() {\n        console.log(a)\n    }\n}\nconst a = 200 \nconst fn = create()\nfn() // 100\n```\n#### （3）自执行函数\n```javascript\nlet a = (function(i){console.log(i)})(1) // 1\na // undefined，此处的自执行函数没有设定返回值，所以a为undefined\n\n```\n```javascript\nvar data = [];\nfor (var i = 0; i < 3; i++) {\n  data[i] = function () {\n    console.log(i);\n  };\n}\n```\n![返回值全为3](https://upload-images.jianshu.io/upload_images/20892169-3d19c3d683e09a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**function 里可没传参数，看好了是data后面有参数，其实就算传了也没什么影响，因为i的值已经在调用时决定是3了，虽然函数定义时决定了变量所在的作用域，但调用时才能决定变量在该作用域实际的值。**\n\n### **重要！！！变量在定义时就确定了上级作用域，但需要在调用时才能确定变量定义时所在的上级作用域或当前作用域该变量的值，比如这里**\n\n**i在调用时的值为3，即使外部定义了i = 10，最终查找还是在定义时的当前作用域查找i，当前作用域的i为3，所以输出全为3**\n\n**改进方法**：形成自己的封闭的块级作用域。\n**改进方法1**：for内的var变为let，因为let具有块级作用域，它形成了三个私有作用域相互不会干扰。\n```javascript\nfor (let i = 0; i < 3; i++) {\n    data[i] = function () {\n      console.log(i);\n    }\n  }\n```\n**改进方法2**：自执行函数和闭包\n匿名函数定义也是在匿名函数声明的地方，这里即return后，有名字的函数定义就在有名字的函数那里，然后一层一层向上查找\n```javascript\nfor(var i = 0;i < 3; i ++) {\n    (function(j){\n        data[j] = function() {console.log(j)}\n    })(i)\n}\n```\n**自由变量的查找是在函数定义的地方，向上级作用域查找 ，而不是在执行的地方。**\n\n## 三、this\n详见3-1\nthis取值是在**函数执行**的时候决定的，而不是**函数定义**的时候决定的。\n\n箭头函数的this取值是**取他的上级作用域的值**（静态作用域），普通function的this取值是在**函数执行**时确认的。\n\n**分为以下几种情况：**\n（1）作为对象方法被执行，this指向该对象。\n（2）class的this表示它当前的实例，在构造函数（函数用new调用）中，this指向要被constructed的新对象。\n（3）普通函数的this，在调用时才知道this的作用域。\n（4）箭头函数的this固定指向上级作用域 \n（5）call apply\n函数内的this和函数在什么环境中定义没有关系，而只和自己的主体有关。\n\n####call、apply、bind的区别和使用：\n作用是在一个对象中调用另一个对象的方法和属性。\n\ncall、apply、bind的第一个参数均为需要调用属性或方法的对象，区别是apply的第二个参数为数组，而bind、apply参数不放入数组而是直接列出。\n\nbing会返回一个函数，执行函数后才改变this，而call、apply会立即执行。\n```javascript\nlet fullname = {\n    getFullName (city,country) {\n        return this.firstname+this.lastname+'from'+country+city\n    }\n}\nlet name = {\n    firstname: 'bai',\n    lastname:'xue'\n}\n```\n###### bind的执行：\n```javascript\nlet fullnamestring = fullname.getFullName.bind(name,'安康','陕西')\nfullnamestring() //'baixuefrom陕西安康'\n```\n###### call的执行：\n```\nlet fullnamestring = fullname.getFullName.call(name,'安康','陕西') //'baixuefrom陕西安康'\n```\n###### apply的执行：\n```\nlet fullnamestring = fullname.getFullName.apply(name,['安康','陕西']) //'baixuefrom陕西安康'\n```\n#### 面试题：\n###### 手写bind、call、apply\n###### 闭包的实际使用场景","slug":"cxy/js/js-context","published":1,"updated":"2023-01-25T20:26:00.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifh0003kdwi7e6ch6xf","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、作用域和自由变量\"><a href=\"#一、作用域和自由变量\" class=\"headerlink\" title=\"一、作用域和自由变量\"></a>一、作用域和自由变量</h2><h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域:\"></a>作用域:</h4><p>作用域就是一个变量的合法使用范围。<br>作用域分为全局作用域、函数作用域及块级作用域（es6新增）。</p>\n<h4 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"块级作用域（es6新增）\"><a href=\"#块级作用域（es6新增）\" class=\"headerlink\" title=\"块级作用域（es6新增）\"></a>块级作用域（es6新增）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">//报错 let声明的块级作用域</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// 1 全局作用域</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自由变量：\"><a href=\"#自由变量：\" class=\"headerlink\" title=\"自由变量：\"></a>自由变量：</h4><p>一个变量在当前作用域没有定义，（注意是当前作用域，哪怕上级作用域定义了只要当前作用域没定义就不行）但被使用了，沿上级作用域一级一级找，若到全局作用域还没有找到，就报错。</p>\n<h2 id=\"二、闭包\"><a href=\"#二、闭包\" class=\"headerlink\" title=\"二、闭包\"></a>二、闭包</h2><p>·闭包就是作用域应用的一个特殊情况，闭包让<strong>开发者可以从内部函数访问外部函数</strong>的作用域，有两种情况：<br>（1）函数作为参数被传递<br>（2）函数作为返回值<br>·自由变量的查找是在函数定义的地方！（重点，函数定义的地方是指函数体在哪里），向上级作用域查找<br><strong>注意：闭包中的变量会常驻在内存，得不到释放，因为判断不了闭包内的变量未来是否会用到</strong><br><strong>闭包是由函数以及声明该函数的词法环境组合而成的。</strong></p>\n<h4 id=\"（1）函数作为参数被传递\"><a href=\"#（1）函数作为参数被传递\" class=\"headerlink\" title=\"（1）函数作为参数被传递\"></a>（1）函数作为参数被传递</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">print</span>(fn) <span class=\"comment\">// 100 fn定义是在全局作用域，所以a == 100</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"（2）函数作为返回值\"><a href=\"#（2）函数作为返回值\" class=\"headerlink\" title=\"（2）函数作为返回值\"></a>（2）函数作为返回值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">create</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">200</span> </span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"title function_\">create</span>()</span><br><span class=\"line\"><span class=\"title function_\">fn</span>() <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"（3）自执行函数\"><a href=\"#（3）自执行函数\" class=\"headerlink\" title=\"（3）自执行函数\"></a>（3）自执行函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = (<span class=\"keyword\">function</span>(<span class=\"params\">i</span>)&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)&#125;)(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">a <span class=\"comment\">// undefined，此处的自执行函数没有设定返回值，所以a为undefined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  data[i] = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3d19c3d683e09a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"返回值全为3\"></p>\n<p><strong>function 里可没传参数，看好了是data后面有参数，其实就算传了也没什么影响，因为i的值已经在调用时决定是3了，虽然函数定义时决定了变量所在的作用域，但调用时才能决定变量在该作用域实际的值。</strong></p>\n<h3 id=\"重要！！！变量在定义时就确定了上级作用域，但需要在调用时才能确定变量定义时所在的上级作用域或当前作用域该变量的值，比如这里\"><a href=\"#重要！！！变量在定义时就确定了上级作用域，但需要在调用时才能确定变量定义时所在的上级作用域或当前作用域该变量的值，比如这里\" class=\"headerlink\" title=\"重要！！！变量在定义时就确定了上级作用域，但需要在调用时才能确定变量定义时所在的上级作用域或当前作用域该变量的值，比如这里\"></a><strong>重要！！！变量在定义时就确定了上级作用域，但需要在调用时才能确定变量定义时所在的上级作用域或当前作用域该变量的值，比如这里</strong></h3><p><strong>i在调用时的值为3，即使外部定义了i = 10，最终查找还是在定义时的当前作用域查找i，当前作用域的i为3，所以输出全为3</strong></p>\n<p><strong>改进方法</strong>：形成自己的封闭的块级作用域。<br><strong>改进方法1</strong>：for内的var变为let，因为let具有块级作用域，它形成了三个私有作用域相互不会干扰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    data[i] = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>改进方法2</strong>：自执行函数和闭包<br>匿名函数定义也是在匿名函数声明的地方，这里即return后，有名字的函数定义就在有名字的函数那里，然后一层一层向上查找</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>; i ++) &#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">j</span>)&#123;</span><br><span class=\"line\">        data[j] = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j)&#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>自由变量的查找是在函数定义的地方，向上级作用域查找 ，而不是在执行的地方。</strong></p>\n<h2 id=\"三、this\"><a href=\"#三、this\" class=\"headerlink\" title=\"三、this\"></a>三、this</h2><p>详见3-1<br>this取值是在<strong>函数执行</strong>的时候决定的，而不是<strong>函数定义</strong>的时候决定的。</p>\n<p>箭头函数的this取值是<strong>取他的上级作用域的值</strong>（静态作用域），普通function的this取值是在<strong>函数执行</strong>时确认的。</p>\n<p><strong>分为以下几种情况：</strong><br>（1）作为对象方法被执行，this指向该对象。<br>（2）class的this表示它当前的实例，在构造函数（函数用new调用）中，this指向要被constructed的新对象。<br>（3）普通函数的this，在调用时才知道this的作用域。<br>（4）箭头函数的this固定指向上级作用域<br>（5）call apply<br>函数内的this和函数在什么环境中定义没有关系，而只和自己的主体有关。</p>\n<p>####call、apply、bind的区别和使用：<br>作用是在一个对象中调用另一个对象的方法和属性。</p>\n<p>call、apply、bind的第一个参数均为需要调用属性或方法的对象，区别是apply的第二个参数为数组，而bind、apply参数不放入数组而是直接列出。</p>\n<p>bing会返回一个函数，执行函数后才改变this，而call、apply会立即执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullname = &#123;</span><br><span class=\"line\">    getFullName (city,country) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstname</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">lastname</span>+<span class=\"string\">&#x27;from&#x27;</span>+country+city</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> name = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstname</span>: <span class=\"string\">&#x27;bai&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastname</span>:<span class=\"string\">&#x27;xue&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"bind的执行：\"><a href=\"#bind的执行：\" class=\"headerlink\" title=\"bind的执行：\"></a>bind的执行：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullnamestring = fullname.<span class=\"property\">getFullName</span>.<span class=\"title function_\">bind</span>(name,<span class=\"string\">&#x27;安康&#x27;</span>,<span class=\"string\">&#x27;陕西&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">fullnamestring</span>() <span class=\"comment\">//&#x27;baixuefrom陕西安康&#x27;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"call的执行：\"><a href=\"#call的执行：\" class=\"headerlink\" title=\"call的执行：\"></a>call的执行：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fullnamestring = fullname.getFullName.call(name,&#x27;安康&#x27;,&#x27;陕西&#x27;) //&#x27;baixuefrom陕西安康&#x27;</span><br></pre></td></tr></table></figure>\n<h6 id=\"apply的执行：\"><a href=\"#apply的执行：\" class=\"headerlink\" title=\"apply的执行：\"></a>apply的执行：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fullnamestring = fullname.getFullName.apply(name,[&#x27;安康&#x27;,&#x27;陕西&#x27;]) //&#x27;baixuefrom陕西安康&#x27;</span><br></pre></td></tr></table></figure>\n<h4 id=\"面试题：\"><a href=\"#面试题：\" class=\"headerlink\" title=\"面试题：\"></a>面试题：</h4><h6 id=\"手写bind、call、apply\"><a href=\"#手写bind、call、apply\" class=\"headerlink\" title=\"手写bind、call、apply\"></a>手写bind、call、apply</h6><h6 id=\"闭包的实际使用场景\"><a href=\"#闭包的实际使用场景\" class=\"headerlink\" title=\"闭包的实际使用场景\"></a>闭包的实际使用场景</h6>","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、作用域和自由变量\"><a href=\"#一、作用域和自由变量\" class=\"headerlink\" title=\"一、作用域和自由变量\"></a>一、作用域和自由变量</h2><h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域:\"></a>作用域:</h4><p>作用域就是一个变量的合法使用范围。<br>作用域分为全局作用域、函数作用域及块级作用域（es6新增）。</p>\n<h4 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"块级作用域（es6新增）\"><a href=\"#块级作用域（es6新增）\" class=\"headerlink\" title=\"块级作用域（es6新增）\"></a>块级作用域（es6新增）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">//报错 let声明的块级作用域</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// 1 全局作用域</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自由变量：\"><a href=\"#自由变量：\" class=\"headerlink\" title=\"自由变量：\"></a>自由变量：</h4><p>一个变量在当前作用域没有定义，（注意是当前作用域，哪怕上级作用域定义了只要当前作用域没定义就不行）但被使用了，沿上级作用域一级一级找，若到全局作用域还没有找到，就报错。</p>\n<h2 id=\"二、闭包\"><a href=\"#二、闭包\" class=\"headerlink\" title=\"二、闭包\"></a>二、闭包</h2><p>·闭包就是作用域应用的一个特殊情况，闭包让<strong>开发者可以从内部函数访问外部函数</strong>的作用域，有两种情况：<br>（1）函数作为参数被传递<br>（2）函数作为返回值<br>·自由变量的查找是在函数定义的地方！（重点，函数定义的地方是指函数体在哪里），向上级作用域查找<br><strong>注意：闭包中的变量会常驻在内存，得不到释放，因为判断不了闭包内的变量未来是否会用到</strong><br><strong>闭包是由函数以及声明该函数的词法环境组合而成的。</strong></p>\n<h4 id=\"（1）函数作为参数被传递\"><a href=\"#（1）函数作为参数被传递\" class=\"headerlink\" title=\"（1）函数作为参数被传递\"></a>（1）函数作为参数被传递</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">print</span>(fn) <span class=\"comment\">// 100 fn定义是在全局作用域，所以a == 100</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"（2）函数作为返回值\"><a href=\"#（2）函数作为返回值\" class=\"headerlink\" title=\"（2）函数作为返回值\"></a>（2）函数作为返回值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">create</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">200</span> </span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"title function_\">create</span>()</span><br><span class=\"line\"><span class=\"title function_\">fn</span>() <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"（3）自执行函数\"><a href=\"#（3）自执行函数\" class=\"headerlink\" title=\"（3）自执行函数\"></a>（3）自执行函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = (<span class=\"keyword\">function</span>(<span class=\"params\">i</span>)&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)&#125;)(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">a <span class=\"comment\">// undefined，此处的自执行函数没有设定返回值，所以a为undefined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  data[i] = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-3d19c3d683e09a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"返回值全为3\"></p>\n<p><strong>function 里可没传参数，看好了是data后面有参数，其实就算传了也没什么影响，因为i的值已经在调用时决定是3了，虽然函数定义时决定了变量所在的作用域，但调用时才能决定变量在该作用域实际的值。</strong></p>\n<h3 id=\"重要！！！变量在定义时就确定了上级作用域，但需要在调用时才能确定变量定义时所在的上级作用域或当前作用域该变量的值，比如这里\"><a href=\"#重要！！！变量在定义时就确定了上级作用域，但需要在调用时才能确定变量定义时所在的上级作用域或当前作用域该变量的值，比如这里\" class=\"headerlink\" title=\"重要！！！变量在定义时就确定了上级作用域，但需要在调用时才能确定变量定义时所在的上级作用域或当前作用域该变量的值，比如这里\"></a><strong>重要！！！变量在定义时就确定了上级作用域，但需要在调用时才能确定变量定义时所在的上级作用域或当前作用域该变量的值，比如这里</strong></h3><p><strong>i在调用时的值为3，即使外部定义了i = 10，最终查找还是在定义时的当前作用域查找i，当前作用域的i为3，所以输出全为3</strong></p>\n<p><strong>改进方法</strong>：形成自己的封闭的块级作用域。<br><strong>改进方法1</strong>：for内的var变为let，因为let具有块级作用域，它形成了三个私有作用域相互不会干扰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    data[i] = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>改进方法2</strong>：自执行函数和闭包<br>匿名函数定义也是在匿名函数声明的地方，这里即return后，有名字的函数定义就在有名字的函数那里，然后一层一层向上查找</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>; i ++) &#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">j</span>)&#123;</span><br><span class=\"line\">        data[j] = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j)&#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>自由变量的查找是在函数定义的地方，向上级作用域查找 ，而不是在执行的地方。</strong></p>\n<h2 id=\"三、this\"><a href=\"#三、this\" class=\"headerlink\" title=\"三、this\"></a>三、this</h2><p>详见3-1<br>this取值是在<strong>函数执行</strong>的时候决定的，而不是<strong>函数定义</strong>的时候决定的。</p>\n<p>箭头函数的this取值是<strong>取他的上级作用域的值</strong>（静态作用域），普通function的this取值是在<strong>函数执行</strong>时确认的。</p>\n<p><strong>分为以下几种情况：</strong><br>（1）作为对象方法被执行，this指向该对象。<br>（2）class的this表示它当前的实例，在构造函数（函数用new调用）中，this指向要被constructed的新对象。<br>（3）普通函数的this，在调用时才知道this的作用域。<br>（4）箭头函数的this固定指向上级作用域<br>（5）call apply<br>函数内的this和函数在什么环境中定义没有关系，而只和自己的主体有关。</p>\n<p>####call、apply、bind的区别和使用：<br>作用是在一个对象中调用另一个对象的方法和属性。</p>\n<p>call、apply、bind的第一个参数均为需要调用属性或方法的对象，区别是apply的第二个参数为数组，而bind、apply参数不放入数组而是直接列出。</p>\n<p>bing会返回一个函数，执行函数后才改变this，而call、apply会立即执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullname = &#123;</span><br><span class=\"line\">    getFullName (city,country) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstname</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">lastname</span>+<span class=\"string\">&#x27;from&#x27;</span>+country+city</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> name = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstname</span>: <span class=\"string\">&#x27;bai&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastname</span>:<span class=\"string\">&#x27;xue&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"bind的执行：\"><a href=\"#bind的执行：\" class=\"headerlink\" title=\"bind的执行：\"></a>bind的执行：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullnamestring = fullname.<span class=\"property\">getFullName</span>.<span class=\"title function_\">bind</span>(name,<span class=\"string\">&#x27;安康&#x27;</span>,<span class=\"string\">&#x27;陕西&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">fullnamestring</span>() <span class=\"comment\">//&#x27;baixuefrom陕西安康&#x27;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"call的执行：\"><a href=\"#call的执行：\" class=\"headerlink\" title=\"call的执行：\"></a>call的执行：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fullnamestring = fullname.getFullName.call(name,&#x27;安康&#x27;,&#x27;陕西&#x27;) //&#x27;baixuefrom陕西安康&#x27;</span><br></pre></td></tr></table></figure>\n<h6 id=\"apply的执行：\"><a href=\"#apply的执行：\" class=\"headerlink\" title=\"apply的执行：\"></a>apply的执行：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fullnamestring = fullname.getFullName.apply(name,[&#x27;安康&#x27;,&#x27;陕西&#x27;]) //&#x27;baixuefrom陕西安康&#x27;</span><br></pre></td></tr></table></figure>\n<h4 id=\"面试题：\"><a href=\"#面试题：\" class=\"headerlink\" title=\"面试题：\"></a>面试题：</h4><h6 id=\"手写bind、call、apply\"><a href=\"#手写bind、call、apply\" class=\"headerlink\" title=\"手写bind、call、apply\"></a>手写bind、call、apply</h6><h6 id=\"闭包的实际使用场景\"><a href=\"#闭包的实际使用场景\" class=\"headerlink\" title=\"闭包的实际使用场景\"></a>闭包的实际使用场景</h6>"},{"title":"【第10章】运行环境","date":"2019-04-16T06:06:12.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 一、从输入url到渲染出页面的整个过程\n1. dns解析： 域名--->IP\n2. 浏览器根据IP地址向服务器发起http请求\n3. 服务器处理http请求，并返回给浏览器\n4. 根据HTML生成Domtree，根据Css生成cssom，再整合dom树和cssom整合的rendertree\n5. 根据render tree渲染页面\n6. 遇到script标签则暂停渲染，优先加载并执行js代码，完成再继续，直至渲染完成。\n## 二、window.onload 和DOMContentLoaded的区别\n```js\n    window.addEventListener('load',function() {\n        // 网页全部加载完之后运行（包括图片、视频、iframe）\n    }) \n```\n```js\n    window.addEventListener('DOMContentLoaded',function () {\n        // 网页dom渲染完即可运行，此时图片、视频可能没有加载完\n    })\n```\n```js\n    // 示例：\n    let img1 = document.getElementById('img')\n    console.log(img1)\n    img1.onload = function(){\n        console.log('img load') // 第2打印\n        console.log(img.complete) // true\n        alert(1)\n    }\n    img1.src = \"https://www.hellobi.com/images/avatar.png\"\n    \n    addEventListener('load',function(){\n        console.log('load') // 第3打印\n    })\n    addEventListener('DOMContentLoaded',function(){\n        console.log('DOMContentLoaded') // 第1打印\n    })\n\n```\n## 三、性能优化的方案\n比如防抖、节流、懒加载，可以把面试官往这个方向引入\n#### 1. 原则\n（1）.多使用内存、缓存或其他方法\n（2）减少CPU计算量，减少网络耗时（空间换时间）\n#### 2. 方法\n（1）让加载更快：压缩代码（webpack mode production）服务端可以做打包\n（2）减少访问次数：合并代码（利用webpack、雪碧图）、ssr服务器端渲染，缓存\n（3）使用更快的网络： cdn ，cdn 内容分发网络，根据区域去访问不同地点的服务器。。。这样就会更快些\n（4）让渲染更快： \n    css放在head js放在最下面\n    尽早开始执行js，用DOMContentLoaded触发事件\n    懒加载，图片上滑加载更多，如下7\n    对dom查询进行缓存，如下8\n    避免频繁DOM操作，合并到一起插入DOM结构\n    节流、防抖（体验性优化）\n<hr>\n\n下面几条是对上面四条的补充\n（5）缓存：5.1静态资源加hash后缀，根据文件内容计算hash 5.2文件内容不变，则hash不变，则url不变 5.3 url和文件不变，则会自动触发http缓存机制，返回304\n（6）ssr：服务器端渲染：将网页和数据一起加载，一起渲染 | 非ssr（前后端分离）：先加载网页，在加载数据，再渲染数据\n（7）懒加载\n```js\n    <img id = \"img1\" src = \"previeww.png\" data-realsrc = \"abc.png\"/>\n    <script>\n      var img1 = document.getElementById('img1')\n      img1.src = img1.getAttribute('data-realsrc')\n    </script>\n```\n（8）缓存dom查询\n\n#### 4.防抖debouce\n在频繁输入时，监听输入事件会频繁触发，像google搜索时，如果每一次输入都触发请求，请求量会很大，影响性能了。\n所以设置一个在输入停止一小段时长后，再触发请求。会大量的减少请求量。\n```js\n// 防抖\nlet timer = null\ninput1.addEventListener('keyup',function(e){\n    if(timer) {\n        clearTimeout(timer)\n    }\n    timer = setTimeout(()=>{\n        console.log(this.value)\n        clearTimeout(timer)\n    },300)\n})\n```\n```js\n// 封装\nlet input = document.querySelector('.input')\nfunction debounce(fun,time = 300) {\n    let timer = null\n    return function () {\n        if(timer) {\n            clearTimeout(timer)\n        }\n        timer = setTimeout(function() {\n            fun()\n            clearTimeout(timer)\n        },300)\n    }\n}\n\ninput.addEventListener('keyup',debounce(function(){\n\n},300))\n```\n#### 5.节流\n```js\nlet div = document.querySelector('.dragDemo')\nlet timer = null\ndiv.addEventListener('drag',function(e){\n    if(timer) {\n        return\n    }\n    timer = setTimeout(() => {\n        console.log(e.offsetX,e.offsetY)\n        timer = null\n        // 这里不能用cleartimeout，因为即使cleartimeout了，timer的值也不为null，而是停在了当前的计数不再递增\n    }, 300);\n})\n```\n封装这里用到了**闭包**，之前在作用域和闭包中说过：\n**闭包是由函数以及声明该函数的词法环境组合而成的**\n**闭包的变量不会得到释放**\n**闭包会随着函数的创建而被同时创建**\n所以下面的timer向外层查找到的是形成的闭包的词法环境中的timer\n```js\n// 封装\nfunction throttle (fun,time = 100) {\n    let timer = null\n    return function() {\n        if (timer) {\n            return\n        }\n        timer = setTimeout(()=>{\n            fun.apply(this,arguments)\n            timer = null\n        },time)\n    }\n}\ndocument.querySelector('.dragDemo').addEventListener('drag',throttle(function(e) {\n    console.log(e.offsetX,e.offsetY)\n},1000))\n```\n#### 6.xss\n（1）. 问题：常见的web前端攻击方式有哪些？\n比如我写了一篇博客，博客里面有script标签，该代码执行获取用户cookie的操作，任何用户访问该博客后，就会执行该代码。被获取到cookie之后，将cookie发送到我的服务器，这样就会拿到用户的敏感信息\n（2）. xss预防：\n//      替换特殊字符（< --> &lt; >  --> &gt;）前端后端都要替换。\n#### 7.xsrf\n（1）概念：\n用?带参数去访问服务器，得到服务器数据\n（2）预防方法：\n    使用post接口、增加验证：例如密码、短信验证码、指纹\n\n\n    ","source":"_posts/cxy/js/js-enviro.md","raw":"---\ntitle: '【第10章】运行环境'\ndate: 2019-04-16 14:06:12\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 一、从输入url到渲染出页面的整个过程\n1. dns解析： 域名--->IP\n2. 浏览器根据IP地址向服务器发起http请求\n3. 服务器处理http请求，并返回给浏览器\n4. 根据HTML生成Domtree，根据Css生成cssom，再整合dom树和cssom整合的rendertree\n5. 根据render tree渲染页面\n6. 遇到script标签则暂停渲染，优先加载并执行js代码，完成再继续，直至渲染完成。\n## 二、window.onload 和DOMContentLoaded的区别\n```js\n    window.addEventListener('load',function() {\n        // 网页全部加载完之后运行（包括图片、视频、iframe）\n    }) \n```\n```js\n    window.addEventListener('DOMContentLoaded',function () {\n        // 网页dom渲染完即可运行，此时图片、视频可能没有加载完\n    })\n```\n```js\n    // 示例：\n    let img1 = document.getElementById('img')\n    console.log(img1)\n    img1.onload = function(){\n        console.log('img load') // 第2打印\n        console.log(img.complete) // true\n        alert(1)\n    }\n    img1.src = \"https://www.hellobi.com/images/avatar.png\"\n    \n    addEventListener('load',function(){\n        console.log('load') // 第3打印\n    })\n    addEventListener('DOMContentLoaded',function(){\n        console.log('DOMContentLoaded') // 第1打印\n    })\n\n```\n## 三、性能优化的方案\n比如防抖、节流、懒加载，可以把面试官往这个方向引入\n#### 1. 原则\n（1）.多使用内存、缓存或其他方法\n（2）减少CPU计算量，减少网络耗时（空间换时间）\n#### 2. 方法\n（1）让加载更快：压缩代码（webpack mode production）服务端可以做打包\n（2）减少访问次数：合并代码（利用webpack、雪碧图）、ssr服务器端渲染，缓存\n（3）使用更快的网络： cdn ，cdn 内容分发网络，根据区域去访问不同地点的服务器。。。这样就会更快些\n（4）让渲染更快： \n    css放在head js放在最下面\n    尽早开始执行js，用DOMContentLoaded触发事件\n    懒加载，图片上滑加载更多，如下7\n    对dom查询进行缓存，如下8\n    避免频繁DOM操作，合并到一起插入DOM结构\n    节流、防抖（体验性优化）\n<hr>\n\n下面几条是对上面四条的补充\n（5）缓存：5.1静态资源加hash后缀，根据文件内容计算hash 5.2文件内容不变，则hash不变，则url不变 5.3 url和文件不变，则会自动触发http缓存机制，返回304\n（6）ssr：服务器端渲染：将网页和数据一起加载，一起渲染 | 非ssr（前后端分离）：先加载网页，在加载数据，再渲染数据\n（7）懒加载\n```js\n    <img id = \"img1\" src = \"previeww.png\" data-realsrc = \"abc.png\"/>\n    <script>\n      var img1 = document.getElementById('img1')\n      img1.src = img1.getAttribute('data-realsrc')\n    </script>\n```\n（8）缓存dom查询\n\n#### 4.防抖debouce\n在频繁输入时，监听输入事件会频繁触发，像google搜索时，如果每一次输入都触发请求，请求量会很大，影响性能了。\n所以设置一个在输入停止一小段时长后，再触发请求。会大量的减少请求量。\n```js\n// 防抖\nlet timer = null\ninput1.addEventListener('keyup',function(e){\n    if(timer) {\n        clearTimeout(timer)\n    }\n    timer = setTimeout(()=>{\n        console.log(this.value)\n        clearTimeout(timer)\n    },300)\n})\n```\n```js\n// 封装\nlet input = document.querySelector('.input')\nfunction debounce(fun,time = 300) {\n    let timer = null\n    return function () {\n        if(timer) {\n            clearTimeout(timer)\n        }\n        timer = setTimeout(function() {\n            fun()\n            clearTimeout(timer)\n        },300)\n    }\n}\n\ninput.addEventListener('keyup',debounce(function(){\n\n},300))\n```\n#### 5.节流\n```js\nlet div = document.querySelector('.dragDemo')\nlet timer = null\ndiv.addEventListener('drag',function(e){\n    if(timer) {\n        return\n    }\n    timer = setTimeout(() => {\n        console.log(e.offsetX,e.offsetY)\n        timer = null\n        // 这里不能用cleartimeout，因为即使cleartimeout了，timer的值也不为null，而是停在了当前的计数不再递增\n    }, 300);\n})\n```\n封装这里用到了**闭包**，之前在作用域和闭包中说过：\n**闭包是由函数以及声明该函数的词法环境组合而成的**\n**闭包的变量不会得到释放**\n**闭包会随着函数的创建而被同时创建**\n所以下面的timer向外层查找到的是形成的闭包的词法环境中的timer\n```js\n// 封装\nfunction throttle (fun,time = 100) {\n    let timer = null\n    return function() {\n        if (timer) {\n            return\n        }\n        timer = setTimeout(()=>{\n            fun.apply(this,arguments)\n            timer = null\n        },time)\n    }\n}\ndocument.querySelector('.dragDemo').addEventListener('drag',throttle(function(e) {\n    console.log(e.offsetX,e.offsetY)\n},1000))\n```\n#### 6.xss\n（1）. 问题：常见的web前端攻击方式有哪些？\n比如我写了一篇博客，博客里面有script标签，该代码执行获取用户cookie的操作，任何用户访问该博客后，就会执行该代码。被获取到cookie之后，将cookie发送到我的服务器，这样就会拿到用户的敏感信息\n（2）. xss预防：\n//      替换特殊字符（< --> &lt; >  --> &gt;）前端后端都要替换。\n#### 7.xsrf\n（1）概念：\n用?带参数去访问服务器，得到服务器数据\n（2）预防方法：\n    使用post接口、增加验证：例如密码、短信验证码、指纹\n\n\n    ","slug":"cxy/js/js-enviro","published":1,"updated":"2023-02-08T09:25:59.595Z","_id":"cldc53ifh0005kdwid99mcpgx","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"一、从输入url到渲染出页面的整个过程\"><a href=\"#一、从输入url到渲染出页面的整个过程\" class=\"headerlink\" title=\"一、从输入url到渲染出页面的整个过程\"></a>一、从输入url到渲染出页面的整个过程</h2><ol>\n<li>dns解析： 域名—&gt;IP</li>\n<li>浏览器根据IP地址向服务器发起http请求</li>\n<li>服务器处理http请求，并返回给浏览器</li>\n<li>根据HTML生成Domtree，根据Css生成cssom，再整合dom树和cssom整合的rendertree</li>\n<li>根据render tree渲染页面</li>\n<li>遇到script标签则暂停渲染，优先加载并执行js代码，完成再继续，直至渲染完成。<h2 id=\"二、window-onload-和DOMContentLoaded的区别\"><a href=\"#二、window-onload-和DOMContentLoaded的区别\" class=\"headerlink\" title=\"二、window.onload 和DOMContentLoaded的区别\"></a>二、window.onload 和DOMContentLoaded的区别</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 网页全部加载完之后运行（包括图片、视频、iframe）</span></span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>,<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 网页dom渲染完即可运行，此时图片、视频可能没有加载完</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> img1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(img1)</span><br><span class=\"line\">img1.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;img load&#x27;</span>) <span class=\"comment\">// 第2打印</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(img.<span class=\"property\">complete</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img1.<span class=\"property\">src</span> = <span class=\"string\">&quot;https://www.hellobi.com/images/avatar.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;load&#x27;</span>) <span class=\"comment\">// 第3打印</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>) <span class=\"comment\">// 第1打印</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、性能优化的方案\"><a href=\"#三、性能优化的方案\" class=\"headerlink\" title=\"三、性能优化的方案\"></a>三、性能优化的方案</h2>比如防抖、节流、懒加载，可以把面试官往这个方向引入<h4 id=\"1-原则\"><a href=\"#1-原则\" class=\"headerlink\" title=\"1. 原则\"></a>1. 原则</h4>（1）.多使用内存、缓存或其他方法<br>（2）减少CPU计算量，减少网络耗时（空间换时间）<h4 id=\"2-方法\"><a href=\"#2-方法\" class=\"headerlink\" title=\"2. 方法\"></a>2. 方法</h4>（1）让加载更快：压缩代码（webpack mode production）服务端可以做打包<br>（2）减少访问次数：合并代码（利用webpack、雪碧图）、ssr服务器端渲染，缓存<br>（3）使用更快的网络： cdn ，cdn 内容分发网络，根据区域去访问不同地点的服务器。。。这样就会更快些<br>（4）让渲染更快：<br> css放在head js放在最下面<br> 尽早开始执行js，用DOMContentLoaded触发事件<br> 懒加载，图片上滑加载更多，如下7<br> 对dom查询进行缓存，如下8<br> 避免频繁DOM操作，合并到一起插入DOM结构<br> 节流、防抖（体验性优化）<hr></li>\n</ol>\n<p>下面几条是对上面四条的补充<br>（5）缓存：5.1静态资源加hash后缀，根据文件内容计算hash 5.2文件内容不变，则hash不变，则url不变 5.3 url和文件不变，则会自动触发http缓存机制，返回304<br>（6）ssr：服务器端渲染：将网页和数据一起加载，一起渲染 | 非ssr（前后端分离）：先加载网页，在加载数据，再渲染数据<br>（7）懒加载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img id = <span class=\"string\">&quot;img1&quot;</span> src = <span class=\"string\">&quot;previeww.png&quot;</span> data-realsrc = <span class=\"string\">&quot;abc.png&quot;</span>/&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">var</span> img1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;img1&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  img1.<span class=\"property\">src</span> = img1.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;data-realsrc&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>（8）缓存dom查询</p>\n<h4 id=\"4-防抖debouce\"><a href=\"#4-防抖debouce\" class=\"headerlink\" title=\"4.防抖debouce\"></a>4.防抖debouce</h4><p>在频繁输入时，监听输入事件会频繁触发，像google搜索时，如果每一次输入都触发请求，请求量会很大，影响性能了。<br>所以设置一个在输入停止一小段时长后，再触发请求。会大量的减少请求量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 防抖</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">input1.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    &#125;,<span class=\"number\">300</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> input = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.input&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fun,time = <span class=\"number\">300</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">fun</span>()</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        &#125;,<span class=\"number\">300</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">input.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>,<span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,<span class=\"number\">300</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-节流\"><a href=\"#5-节流\" class=\"headerlink\" title=\"5.节流\"></a>5.节流</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.dragDemo&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">div.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;drag&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">offsetX</span>,e.<span class=\"property\">offsetY</span>)</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里不能用cleartimeout，因为即使cleartimeout了，timer的值也不为null，而是停在了当前的计数不再递增</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>封装这里用到了<strong>闭包</strong>，之前在作用域和闭包中说过：<br><strong>闭包是由函数以及声明该函数的词法环境组合而成的</strong><br><strong>闭包的变量不会得到释放</strong><br><strong>闭包会随着函数的创建而被同时创建</strong><br>所以下面的timer向外层查找到的是形成的闭包的词法环境中的timer</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span> (fun,time = <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            fun.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>,<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;,time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.dragDemo&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;drag&#x27;</span>,<span class=\"title function_\">throttle</span>(<span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">offsetX</span>,e.<span class=\"property\">offsetY</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-xss\"><a href=\"#6-xss\" class=\"headerlink\" title=\"6.xss\"></a>6.xss</h4><p>（1）. 问题：常见的web前端攻击方式有哪些？<br>比如我写了一篇博客，博客里面有script标签，该代码执行获取用户cookie的操作，任何用户访问该博客后，就会执行该代码。被获取到cookie之后，将cookie发送到我的服务器，这样就会拿到用户的敏感信息<br>（2）. xss预防：<br>//      替换特殊字符（&lt; –&gt; &lt; &gt;  –&gt; &gt;）前端后端都要替换。</p>\n<h4 id=\"7-xsrf\"><a href=\"#7-xsrf\" class=\"headerlink\" title=\"7.xsrf\"></a>7.xsrf</h4><p>（1）概念：<br>用?带参数去访问服务器，得到服务器数据<br>（2）预防方法：<br>    使用post接口、增加验证：例如密码、短信验证码、指纹</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"一、从输入url到渲染出页面的整个过程\"><a href=\"#一、从输入url到渲染出页面的整个过程\" class=\"headerlink\" title=\"一、从输入url到渲染出页面的整个过程\"></a>一、从输入url到渲染出页面的整个过程</h2><ol>\n<li>dns解析： 域名—&gt;IP</li>\n<li>浏览器根据IP地址向服务器发起http请求</li>\n<li>服务器处理http请求，并返回给浏览器</li>\n<li>根据HTML生成Domtree，根据Css生成cssom，再整合dom树和cssom整合的rendertree</li>\n<li>根据render tree渲染页面</li>\n<li>遇到script标签则暂停渲染，优先加载并执行js代码，完成再继续，直至渲染完成。<h2 id=\"二、window-onload-和DOMContentLoaded的区别\"><a href=\"#二、window-onload-和DOMContentLoaded的区别\" class=\"headerlink\" title=\"二、window.onload 和DOMContentLoaded的区别\"></a>二、window.onload 和DOMContentLoaded的区别</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 网页全部加载完之后运行（包括图片、视频、iframe）</span></span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>,<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 网页dom渲染完即可运行，此时图片、视频可能没有加载完</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> img1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(img1)</span><br><span class=\"line\">img1.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;img load&#x27;</span>) <span class=\"comment\">// 第2打印</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(img.<span class=\"property\">complete</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img1.<span class=\"property\">src</span> = <span class=\"string\">&quot;https://www.hellobi.com/images/avatar.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;load&#x27;</span>) <span class=\"comment\">// 第3打印</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>) <span class=\"comment\">// 第1打印</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、性能优化的方案\"><a href=\"#三、性能优化的方案\" class=\"headerlink\" title=\"三、性能优化的方案\"></a>三、性能优化的方案</h2>比如防抖、节流、懒加载，可以把面试官往这个方向引入<h4 id=\"1-原则\"><a href=\"#1-原则\" class=\"headerlink\" title=\"1. 原则\"></a>1. 原则</h4>（1）.多使用内存、缓存或其他方法<br>（2）减少CPU计算量，减少网络耗时（空间换时间）<h4 id=\"2-方法\"><a href=\"#2-方法\" class=\"headerlink\" title=\"2. 方法\"></a>2. 方法</h4>（1）让加载更快：压缩代码（webpack mode production）服务端可以做打包<br>（2）减少访问次数：合并代码（利用webpack、雪碧图）、ssr服务器端渲染，缓存<br>（3）使用更快的网络： cdn ，cdn 内容分发网络，根据区域去访问不同地点的服务器。。。这样就会更快些<br>（4）让渲染更快：<br> css放在head js放在最下面<br> 尽早开始执行js，用DOMContentLoaded触发事件<br> 懒加载，图片上滑加载更多，如下7<br> 对dom查询进行缓存，如下8<br> 避免频繁DOM操作，合并到一起插入DOM结构<br> 节流、防抖（体验性优化）<hr></li>\n</ol>\n<p>下面几条是对上面四条的补充<br>（5）缓存：5.1静态资源加hash后缀，根据文件内容计算hash 5.2文件内容不变，则hash不变，则url不变 5.3 url和文件不变，则会自动触发http缓存机制，返回304<br>（6）ssr：服务器端渲染：将网页和数据一起加载，一起渲染 | 非ssr（前后端分离）：先加载网页，在加载数据，再渲染数据<br>（7）懒加载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img id = <span class=\"string\">&quot;img1&quot;</span> src = <span class=\"string\">&quot;previeww.png&quot;</span> data-realsrc = <span class=\"string\">&quot;abc.png&quot;</span>/&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">var</span> img1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;img1&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  img1.<span class=\"property\">src</span> = img1.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;data-realsrc&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>（8）缓存dom查询</p>\n<h4 id=\"4-防抖debouce\"><a href=\"#4-防抖debouce\" class=\"headerlink\" title=\"4.防抖debouce\"></a>4.防抖debouce</h4><p>在频繁输入时，监听输入事件会频繁触发，像google搜索时，如果每一次输入都触发请求，请求量会很大，影响性能了。<br>所以设置一个在输入停止一小段时长后，再触发请求。会大量的减少请求量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 防抖</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">input1.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    &#125;,<span class=\"number\">300</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> input = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.input&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fun,time = <span class=\"number\">300</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">fun</span>()</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        &#125;,<span class=\"number\">300</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">input.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>,<span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,<span class=\"number\">300</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-节流\"><a href=\"#5-节流\" class=\"headerlink\" title=\"5.节流\"></a>5.节流</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.dragDemo&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">div.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;drag&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">offsetX</span>,e.<span class=\"property\">offsetY</span>)</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里不能用cleartimeout，因为即使cleartimeout了，timer的值也不为null，而是停在了当前的计数不再递增</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>封装这里用到了<strong>闭包</strong>，之前在作用域和闭包中说过：<br><strong>闭包是由函数以及声明该函数的词法环境组合而成的</strong><br><strong>闭包的变量不会得到释放</strong><br><strong>闭包会随着函数的创建而被同时创建</strong><br>所以下面的timer向外层查找到的是形成的闭包的词法环境中的timer</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span> (fun,time = <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            fun.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>,<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;,time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.dragDemo&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;drag&#x27;</span>,<span class=\"title function_\">throttle</span>(<span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">offsetX</span>,e.<span class=\"property\">offsetY</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-xss\"><a href=\"#6-xss\" class=\"headerlink\" title=\"6.xss\"></a>6.xss</h4><p>（1）. 问题：常见的web前端攻击方式有哪些？<br>比如我写了一篇博客，博客里面有script标签，该代码执行获取用户cookie的操作，任何用户访问该博客后，就会执行该代码。被获取到cookie之后，将cookie发送到我的服务器，这样就会拿到用户的敏感信息<br>（2）. xss预防：<br>//      替换特殊字符（&lt; –&gt; &lt; &gt;  –&gt; &gt;）前端后端都要替换。</p>\n<h4 id=\"7-xsrf\"><a href=\"#7-xsrf\" class=\"headerlink\" title=\"7.xsrf\"></a>7.xsrf</h4><p>（1）概念：<br>用?带参数去访问服务器，得到服务器数据<br>（2）预防方法：<br>    使用post接口、增加验证：例如密码、短信验证码、指纹</p>\n"},{"title":"【第6章】事件捕获与冒泡相关","date":"2019-04-10T04:13:35.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n## 描述事件冒泡的流程\n事件冒泡基于树形dom结构，事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。若一个事件在最外层绑定的，在最内层上依旧能监听到。\n\n## 事件冒泡和事件捕获 \n##### 事件冒泡：事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。\n```javascript\nevent.stopPropagation() // 阻止向上冒泡，事件只在当前层生效。\n\nevent.preventDefault() \n// 阻止默认事件，默认事件包括\n//  a标签的默认跳转\n//  鼠标右键菜单事件\n//  submit表单提交事件\n\nevent.target // 实际触发事件是在哪个元素上\n\nevent.target.dataset \n// 可以获取元素上的data-xxx属性，如<div data-a = \"1\"></div>，那么event.target.dataset.a == 1\n\nevent.currentTarget // 事件绑定在哪个元素上\n\nevent.target.matches(selector) --> // 判断是不是该元素，选择符可以是类、id、也可以是元素标签\n```\n##### 事件捕获：从外向内触发事件，很少用于开发。\nxxx.addEventListener('xxx',function(){},true) 第三个参数为true时，则触发事件捕获。\n\n## 事件代理\n像瀑布流，无限加载图片，由于元素太多不好每一个元素都绑定事件，所以就将事件绑定在这些图片的父元素上，通过事件冒泡去相应事件\n好处是代码简洁，减少浏览器占用，但不要滥用。\n\n\n## 面试题 \n#### 编写一个通用的事件监听函数 \n为了解决事件代理（如瀑布流需要每个图片都有一个点击事件）将瀑布流事件绑定在父元素上，当点击父元素时，可以激发子元素的事件\n```javascript\nfunction bindEvent(element,eventType,selector,fn) {\n    if(fn == null) { \n// 第三个参数是触发子元素事件的可选，如果没有子元素，那么第三个参数应该是fn，所以赋值一\n\n        fn = selector\n        selector = null\n    }\n    element.addEventListener(eventType,e => {\n        let target = e.target\n        if (selector) {\n            if (target.matches(selector)) {\n                fn.call(target,e)\n            }\n        } else { // 不需要代理\n            // window.fn.call(target,e) ，就想，call这个函数实际上在call的对象上面加了一个一模一样的fn方法，然后变成了target.fn\n            fn.call(target,e) // 用call是因为下面bindEvent实际上是在window下，所以里面的this是指向window的，现在是需要将this指向调用addEventListener的event\n        }\n    })\n}\n```\n```javascript\n// 我写的，我把selector移到第四个参数了，这样可以省一步判断\nfunction bindEvent(element,eventType,fn,selector) {\n    element.addEventListener(eventType,(event)=>{\n        let target = event.target\n        if(selector) {\n            if(target.matches(selector)) {\n                fn.call(target,event)\n            }\n        } else {\n            fn.call(target,event)\n        }\n    })\n}\n let btn = document.querySelector('btn')\n bindEvent(btn,'click','child_div',function(e){\n    e.preventDefault() \n    alert(this.innerHTML) \n })\n```","source":"_posts/cxy/js/js-event.md","raw":"---\ntitle: '【第6章】事件捕获与冒泡相关'\ndate: 2019-04-10 12:13:35\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## 描述事件冒泡的流程\n事件冒泡基于树形dom结构，事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。若一个事件在最外层绑定的，在最内层上依旧能监听到。\n\n## 事件冒泡和事件捕获 \n##### 事件冒泡：事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。\n```javascript\nevent.stopPropagation() // 阻止向上冒泡，事件只在当前层生效。\n\nevent.preventDefault() \n// 阻止默认事件，默认事件包括\n//  a标签的默认跳转\n//  鼠标右键菜单事件\n//  submit表单提交事件\n\nevent.target // 实际触发事件是在哪个元素上\n\nevent.target.dataset \n// 可以获取元素上的data-xxx属性，如<div data-a = \"1\"></div>，那么event.target.dataset.a == 1\n\nevent.currentTarget // 事件绑定在哪个元素上\n\nevent.target.matches(selector) --> // 判断是不是该元素，选择符可以是类、id、也可以是元素标签\n```\n##### 事件捕获：从外向内触发事件，很少用于开发。\nxxx.addEventListener('xxx',function(){},true) 第三个参数为true时，则触发事件捕获。\n\n## 事件代理\n像瀑布流，无限加载图片，由于元素太多不好每一个元素都绑定事件，所以就将事件绑定在这些图片的父元素上，通过事件冒泡去相应事件\n好处是代码简洁，减少浏览器占用，但不要滥用。\n\n\n## 面试题 \n#### 编写一个通用的事件监听函数 \n为了解决事件代理（如瀑布流需要每个图片都有一个点击事件）将瀑布流事件绑定在父元素上，当点击父元素时，可以激发子元素的事件\n```javascript\nfunction bindEvent(element,eventType,selector,fn) {\n    if(fn == null) { \n// 第三个参数是触发子元素事件的可选，如果没有子元素，那么第三个参数应该是fn，所以赋值一\n\n        fn = selector\n        selector = null\n    }\n    element.addEventListener(eventType,e => {\n        let target = e.target\n        if (selector) {\n            if (target.matches(selector)) {\n                fn.call(target,e)\n            }\n        } else { // 不需要代理\n            // window.fn.call(target,e) ，就想，call这个函数实际上在call的对象上面加了一个一模一样的fn方法，然后变成了target.fn\n            fn.call(target,e) // 用call是因为下面bindEvent实际上是在window下，所以里面的this是指向window的，现在是需要将this指向调用addEventListener的event\n        }\n    })\n}\n```\n```javascript\n// 我写的，我把selector移到第四个参数了，这样可以省一步判断\nfunction bindEvent(element,eventType,fn,selector) {\n    element.addEventListener(eventType,(event)=>{\n        let target = event.target\n        if(selector) {\n            if(target.matches(selector)) {\n                fn.call(target,event)\n            }\n        } else {\n            fn.call(target,event)\n        }\n    })\n}\n let btn = document.querySelector('btn')\n bindEvent(btn,'click','child_div',function(e){\n    e.preventDefault() \n    alert(this.innerHTML) \n })\n```","slug":"cxy/js/js-event","published":1,"updated":"2023-02-08T09:20:22.671Z","_id":"cldc53ifi0008kdwi3apg5mzl","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"描述事件冒泡的流程\"><a href=\"#描述事件冒泡的流程\" class=\"headerlink\" title=\"描述事件冒泡的流程\"></a>描述事件冒泡的流程</h2><p>事件冒泡基于树形dom结构，事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。若一个事件在最外层绑定的，在最内层上依旧能监听到。</p>\n<h2 id=\"事件冒泡和事件捕获\"><a href=\"#事件冒泡和事件捕获\" class=\"headerlink\" title=\"事件冒泡和事件捕获\"></a>事件冒泡和事件捕获</h2><h5 id=\"事件冒泡：事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。\"><a href=\"#事件冒泡：事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。\" class=\"headerlink\" title=\"事件冒泡：事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。\"></a>事件冒泡：事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event.<span class=\"title function_\">stopPropagation</span>() <span class=\"comment\">// 阻止向上冒泡，事件只在当前层生效。</span></span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"title function_\">preventDefault</span>() </span><br><span class=\"line\"><span class=\"comment\">// 阻止默认事件，默认事件包括</span></span><br><span class=\"line\"><span class=\"comment\">//  a标签的默认跳转</span></span><br><span class=\"line\"><span class=\"comment\">//  鼠标右键菜单事件</span></span><br><span class=\"line\"><span class=\"comment\">//  submit表单提交事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"property\">target</span> <span class=\"comment\">// 实际触发事件是在哪个元素上</span></span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"property\">target</span>.<span class=\"property\">dataset</span> </span><br><span class=\"line\"><span class=\"comment\">// 可以获取元素上的data-xxx属性，如&lt;div data-a = &quot;1&quot;&gt;&lt;/div&gt;，那么event.target.dataset.a == 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"property\">currentTarget</span> <span class=\"comment\">// 事件绑定在哪个元素上</span></span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"property\">target</span>.<span class=\"title function_\">matches</span>(selector) --&gt; <span class=\"comment\">// 判断是不是该元素，选择符可以是类、id、也可以是元素标签</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"事件捕获：从外向内触发事件，很少用于开发。\"><a href=\"#事件捕获：从外向内触发事件，很少用于开发。\" class=\"headerlink\" title=\"事件捕获：从外向内触发事件，很少用于开发。\"></a>事件捕获：从外向内触发事件，很少用于开发。</h5><p>xxx.addEventListener(‘xxx’,function(){},true) 第三个参数为true时，则触发事件捕获。</p>\n<h2 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h2><p>像瀑布流，无限加载图片，由于元素太多不好每一个元素都绑定事件，所以就将事件绑定在这些图片的父元素上，通过事件冒泡去相应事件<br>好处是代码简洁，减少浏览器占用，但不要滥用。</p>\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><h4 id=\"编写一个通用的事件监听函数\"><a href=\"#编写一个通用的事件监听函数\" class=\"headerlink\" title=\"编写一个通用的事件监听函数\"></a>编写一个通用的事件监听函数</h4><p>为了解决事件代理（如瀑布流需要每个图片都有一个点击事件）将瀑布流事件绑定在父元素上，当点击父元素时，可以激发子元素的事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindEvent</span>(<span class=\"params\">element,eventType,selector,fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fn == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\"><span class=\"comment\">// 第三个参数是触发子元素事件的可选，如果没有子元素，那么第三个参数应该是fn，所以赋值一</span></span><br><span class=\"line\"></span><br><span class=\"line\">        fn = selector</span><br><span class=\"line\">        selector = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    element.<span class=\"title function_\">addEventListener</span>(eventType,<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target = e.<span class=\"property\">target</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selector) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target.<span class=\"title function_\">matches</span>(selector)) &#123;</span><br><span class=\"line\">                fn.<span class=\"title function_\">call</span>(target,e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 不需要代理</span></span><br><span class=\"line\">            <span class=\"comment\">// window.fn.call(target,e) ，就想，call这个函数实际上在call的对象上面加了一个一模一样的fn方法，然后变成了target.fn</span></span><br><span class=\"line\">            fn.<span class=\"title function_\">call</span>(target,e) <span class=\"comment\">// 用call是因为下面bindEvent实际上是在window下，所以里面的this是指向window的，现在是需要将this指向调用addEventListener的event</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我写的，我把selector移到第四个参数了，这样可以省一步判断</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindEvent</span>(<span class=\"params\">element,eventType,fn,selector</span>) &#123;</span><br><span class=\"line\">    element.<span class=\"title function_\">addEventListener</span>(eventType,<span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target = event.<span class=\"property\">target</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(selector) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target.<span class=\"title function_\">matches</span>(selector)) &#123;</span><br><span class=\"line\">                fn.<span class=\"title function_\">call</span>(target,event)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">call</span>(target,event)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;btn&#x27;</span>)</span><br><span class=\"line\"> <span class=\"title function_\">bindEvent</span>(btn,<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"string\">&#x27;child_div&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>() </span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">innerHTML</span>) </span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"描述事件冒泡的流程\"><a href=\"#描述事件冒泡的流程\" class=\"headerlink\" title=\"描述事件冒泡的流程\"></a>描述事件冒泡的流程</h2><p>事件冒泡基于树形dom结构，事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。若一个事件在最外层绑定的，在最内层上依旧能监听到。</p>\n<h2 id=\"事件冒泡和事件捕获\"><a href=\"#事件冒泡和事件捕获\" class=\"headerlink\" title=\"事件冒泡和事件捕获\"></a>事件冒泡和事件捕获</h2><h5 id=\"事件冒泡：事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。\"><a href=\"#事件冒泡：事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。\" class=\"headerlink\" title=\"事件冒泡：事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。\"></a>事件冒泡：事件可以一级一级的向上冒泡，若有多个事件，先响应内层，再响应外层。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event.<span class=\"title function_\">stopPropagation</span>() <span class=\"comment\">// 阻止向上冒泡，事件只在当前层生效。</span></span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"title function_\">preventDefault</span>() </span><br><span class=\"line\"><span class=\"comment\">// 阻止默认事件，默认事件包括</span></span><br><span class=\"line\"><span class=\"comment\">//  a标签的默认跳转</span></span><br><span class=\"line\"><span class=\"comment\">//  鼠标右键菜单事件</span></span><br><span class=\"line\"><span class=\"comment\">//  submit表单提交事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"property\">target</span> <span class=\"comment\">// 实际触发事件是在哪个元素上</span></span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"property\">target</span>.<span class=\"property\">dataset</span> </span><br><span class=\"line\"><span class=\"comment\">// 可以获取元素上的data-xxx属性，如&lt;div data-a = &quot;1&quot;&gt;&lt;/div&gt;，那么event.target.dataset.a == 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"property\">currentTarget</span> <span class=\"comment\">// 事件绑定在哪个元素上</span></span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"property\">target</span>.<span class=\"title function_\">matches</span>(selector) --&gt; <span class=\"comment\">// 判断是不是该元素，选择符可以是类、id、也可以是元素标签</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"事件捕获：从外向内触发事件，很少用于开发。\"><a href=\"#事件捕获：从外向内触发事件，很少用于开发。\" class=\"headerlink\" title=\"事件捕获：从外向内触发事件，很少用于开发。\"></a>事件捕获：从外向内触发事件，很少用于开发。</h5><p>xxx.addEventListener(‘xxx’,function(){},true) 第三个参数为true时，则触发事件捕获。</p>\n<h2 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h2><p>像瀑布流，无限加载图片，由于元素太多不好每一个元素都绑定事件，所以就将事件绑定在这些图片的父元素上，通过事件冒泡去相应事件<br>好处是代码简洁，减少浏览器占用，但不要滥用。</p>\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><h4 id=\"编写一个通用的事件监听函数\"><a href=\"#编写一个通用的事件监听函数\" class=\"headerlink\" title=\"编写一个通用的事件监听函数\"></a>编写一个通用的事件监听函数</h4><p>为了解决事件代理（如瀑布流需要每个图片都有一个点击事件）将瀑布流事件绑定在父元素上，当点击父元素时，可以激发子元素的事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindEvent</span>(<span class=\"params\">element,eventType,selector,fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fn == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\"><span class=\"comment\">// 第三个参数是触发子元素事件的可选，如果没有子元素，那么第三个参数应该是fn，所以赋值一</span></span><br><span class=\"line\"></span><br><span class=\"line\">        fn = selector</span><br><span class=\"line\">        selector = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    element.<span class=\"title function_\">addEventListener</span>(eventType,<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target = e.<span class=\"property\">target</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selector) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target.<span class=\"title function_\">matches</span>(selector)) &#123;</span><br><span class=\"line\">                fn.<span class=\"title function_\">call</span>(target,e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 不需要代理</span></span><br><span class=\"line\">            <span class=\"comment\">// window.fn.call(target,e) ，就想，call这个函数实际上在call的对象上面加了一个一模一样的fn方法，然后变成了target.fn</span></span><br><span class=\"line\">            fn.<span class=\"title function_\">call</span>(target,e) <span class=\"comment\">// 用call是因为下面bindEvent实际上是在window下，所以里面的this是指向window的，现在是需要将this指向调用addEventListener的event</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我写的，我把selector移到第四个参数了，这样可以省一步判断</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindEvent</span>(<span class=\"params\">element,eventType,fn,selector</span>) &#123;</span><br><span class=\"line\">    element.<span class=\"title function_\">addEventListener</span>(eventType,<span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target = event.<span class=\"property\">target</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(selector) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target.<span class=\"title function_\">matches</span>(selector)) &#123;</span><br><span class=\"line\">                fn.<span class=\"title function_\">call</span>(target,event)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">call</span>(target,event)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;btn&#x27;</span>)</span><br><span class=\"line\"> <span class=\"title function_\">bindEvent</span>(btn,<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"string\">&#x27;child_div&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>() </span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">innerHTML</span>) </span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>"},{"title":"【第5章】dom、bom","date":"2019-04-03T05:03:15.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、dom\n\n#### 前言：dom的本质\nhtml是一种特定的xml，html规定了语法，而xml可以自己规定标签\ndom的本质是一个树形的数据结构\n![](https://upload-images.jianshu.io/upload_images/20892169-2583ad059ce41ddb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 1. document对象\n###### （1）document对象集合\n>all[]所有元素的集合 \nanchors[]对所有href链接的引用，非常简单地返回文档中具有name属性值的所有锚点的集合。已被web标准删除。\napplets对所有applets（小应用程序）对象的引用 \nforms[]对所有forms的引用 \nimages[]对所有img的引用 \nlinks[]对所有area的href的引用，<a>href\n\n###### （2）document对象属性\n```\ncookie     \ndomain （域名，'www.baidu.com'）\nlastModified（返回文档被最后修改的日期和时间。） \nreferrer（从哪里跳转来的。返回\"载入\"当前文档的文档的 URL。这个比较常用）'https://www.baidu.com/from=844b/s?word=sdfsdf'\ntitle（返回当前文档的标题。）\nURL（当前文档url，和location.href的区别：URL不可设置，location.href可以设置）\n```\n###### （3）document对象方法\n```\ndocument.querySelector()\ndocument.getElementById()\t\ndocument.getElementsByName()\ndocument.getElementsByClassname()\t\ndocument.getElementsByTagName()\t\ndocument.createElement() \ndocument.createTextNode() \ndocument.createAttribute() \ndocument.open()\t\n```\n#### 2. document.element\n###### （1）节点操作\n```\nelement.getElementsByTagName()\nelement.appendChild()  在元素末尾添加新结点\nelement.insertBefore(新节点，指定子节点) 在指定的已有的子节点之前插入新节点。\nelement.cloneNode(deep) 复制元素 要连后代一起复制请把 deep 参数设置 true，否则设置为 false。\nelement.hasChildNodes() 有子节点返回true\nelement.normalize() 合并元素中相邻的文本节点，删除空的文本节点\nelement.replaceChild(newchild,oldchild) 用newchild替换元素中的某个oldchlid了\nelement.removeChild(node) 删除元素中的某个子元素node\n```\n###### （2）节点属性操作\n```\nelement.attributes \n//返回属性数组\nelement.getAttribute()\n//返回元素节点的指定属性值。 <a href = 'abc'></a> a.getAttribute('href')--->abc\nelement.getAttributeNode(name) let atr = document.querySelector('a').getAttributeNode('href')\n//返回指定的属性节点。 <a href = 'abc'></a> a.getAttribute('href')--->href = 'abc' a.getAttribute('href').value ---> abc a.getAttribute('href').name--->href\nelement.hasAttribute(name)\n// 如果元素拥有指定属性，则返回true，否则返回 false。\nelement.hasAttributes()\n// 如果元素拥有属性，则返回 true，否则返回 false。\nelement.setAttribute(name,value) a.setAttribute('href','http://xxx.cn')\nelement.setAttributeNode()//用来设置已经创建的attribute节点\n/*\n    // 用法\n    let div = document.createElement('div')\n    let attr = document.createAttribute('attr')\n    attr.value = '1'\n    div.setAttributeNode(attr)\n    div // <div attr = \"1\"></div>\n*/\nlet newAtrNode = document.createAttribute('class') newAtrNode.nodeValue='abc' newNode.setAttributeNode(newAtrNode)\nelement.removeAttribute(name) \nelement.removeAttributeNode() // let atr = document.querySelector('a').getAttributeNode('href') document.querySelector('a').removeAttribute(atr)\nelement.style.xxx 获取元素内联的样式(style = \"??????\")，也可以通过它进行设置\nelement.className\n```\n###### （3）节点属性\n```\nelement.childNodes  返回元素子节点的nodelists\nelement.className 返回元素类名\nelement.innerHTML\nelement.id\t\nelement.firstChild 返回元素的首个子元素\nelement.lastChild 返回元素的最后一个子元素\nelement.firstElementChild element.lastElementChild 返回元素的最后一个子标签元素\nelement.nodeType 1 元素 2 属性 3 文本 8 注释\nelement.nodeValue 元素节点的 nodeValue 是 undefined 或 null 文本节点的 nodeValue 是文本自身 属性节点的 nodeValue 是属性的值\nelement.nextSibling 当前节点的下一个节点（同一树层级）\nelement.previousSibling 当前节点的上一个节点（同一树层级）\nelement.innerHTML element.innerText\nelement.clientHeight element.clientWidth 返回元素的可见高度可见宽度（要减去滚动条滚动过的高度） \nelement.offsetWidth element.offsetHeight 返回元素的高度宽度（元素本身的高度宽度，包括边框，不受滚动条影响）\nelement.offsetTop element.offsetLeft // 元素距上层元素的高度/宽度，不受滚动条影响的\nelement.scrollTop  element.scrollLeft // 滚动的高度/宽度\nelement.offsetParent 返回元素的偏移容器，不会是div\n```\n![](https://upload-images.jianshu.io/upload_images/20892169-dd392939dc6498e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 3.attribute 在属性节点上的可用的属性或方法\n```\nattr.isId 属性是id返回true反之false\nattr.name 属性名称 btn.attributes[0].name，只读\nattr.value 属性值 btn.attributes[0].value\nnodemap就是element.attributes ~\nnodemap.getNamedItem() // // 通过名称获取指定属性\nnodemap.item(num) // 返回nodemap的指定位置属性\nnodemap.length\t// 返回nodemap长度\nnodemap.removeNamedItem(num) // 移出指定位置属性\nnodemap.setNamedItem() // 通过名称设置指定属性\n\n// var btn=document.getElementsByTagName(\"h1\")[0];\n// var typ=document.createAttribute(\"class\");\n// typ.nodeValue=\"democlass\";\n// btn.attributes.setNamedItem(typ);\n```\n#### 4.event\n###### （1）基本写法\n``` \ndocument.querySelector('body').addEventListener('click',()=>{\n    alert(1)\n})\n```\n###### （2）事件类型\n```\nonabort 图像的加载被中断。\nonreset\t重置按钮被点击。\nonselect\t文本被选中。\nonunload\t用户退出页面。\nonchange\t域的内容被改变。(input textarea)\nonkeydown onkeypress\tonkeyup\t\nonload 一张页面或一幅图像完成加载。\nonmousedown onmousemove onmouseout onmouseover onmouseup\n\n// altKey ctrlKey metaKey shiftKey clientX clientY screenX screenY clientX clientY\n// currentTarget target\ttype(返回当前 Event 对象表示的事件的名称。)\n// preventDefault()\t阻止默认事件 stopPropagation()停止冒泡\n\n// 捕获比冒泡先执行，从内到外冒泡，从外到内捕获 addEventListener第三个参数默认为false 即冒泡 true 即捕获\n```\n#### 二、bom\n（1）window下\n###### history \n    back()、forward()、go(n)\n###### location\n以http://localhost:8080/axiospage?name=aaa&age=12#abc举例\n```\nhash(#后)   //'#abc'\nhost  // localhost:8080\nhostname  //localhost\nhref   //'http://localhost:8080/axiospage?name=aaa&age=12#abc'\npathname（纯路径无#无?）'/axiospage'\nport    //'8080'\nprotocol   //'http:'\nsearch(?后)   //'?name=aaa&age=12'\nassign(url)替换新url，会存储在当前历史中，和href作用一样。\nreload()重新载入，为true时绕过缓存载入文档，为false或无参数则从缓存加载大概\nreplace(newUrl)\t(不会存储在历史跳转中，替换了当前)\n```\n###### Navigator：\nNavigator下的属性基本是浏览器的各种信息，如userAgent返回由客户机发送服务器的 user-agent 头部的值。\n###### 其他常用的：\n```\npageXOffset、pageYOffset\t \ninnerheight、innerwidth（无border margin）\t\nouterheight、outerwidth(加border margin) \nself（相当于window）\nScreen\n返回屏幕信息，分辨率、大小、英寸、像素 availHeight\tavailWidth\tdeviceXDPI\tdeviceYDPI\theight\twidth\tpixelDepth\t等等\nrequestAnimationFrame\n```\n#### 面试题：\n###### 如何提高dom性能？\n(1) 避免频繁的dom操作\n(2) 对dom查询做缓存 \n(3) 将dom频繁操作改为一次性操作","source":"_posts/cxy/js/js-explore.md","raw":"---\ntitle: '【第5章】dom、bom'\ndate: 2019-04-03 13:03:15\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、dom\n\n#### 前言：dom的本质\nhtml是一种特定的xml，html规定了语法，而xml可以自己规定标签\ndom的本质是一个树形的数据结构\n![](https://upload-images.jianshu.io/upload_images/20892169-2583ad059ce41ddb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 1. document对象\n###### （1）document对象集合\n>all[]所有元素的集合 \nanchors[]对所有href链接的引用，非常简单地返回文档中具有name属性值的所有锚点的集合。已被web标准删除。\napplets对所有applets（小应用程序）对象的引用 \nforms[]对所有forms的引用 \nimages[]对所有img的引用 \nlinks[]对所有area的href的引用，<a>href\n\n###### （2）document对象属性\n```\ncookie     \ndomain （域名，'www.baidu.com'）\nlastModified（返回文档被最后修改的日期和时间。） \nreferrer（从哪里跳转来的。返回\"载入\"当前文档的文档的 URL。这个比较常用）'https://www.baidu.com/from=844b/s?word=sdfsdf'\ntitle（返回当前文档的标题。）\nURL（当前文档url，和location.href的区别：URL不可设置，location.href可以设置）\n```\n###### （3）document对象方法\n```\ndocument.querySelector()\ndocument.getElementById()\t\ndocument.getElementsByName()\ndocument.getElementsByClassname()\t\ndocument.getElementsByTagName()\t\ndocument.createElement() \ndocument.createTextNode() \ndocument.createAttribute() \ndocument.open()\t\n```\n#### 2. document.element\n###### （1）节点操作\n```\nelement.getElementsByTagName()\nelement.appendChild()  在元素末尾添加新结点\nelement.insertBefore(新节点，指定子节点) 在指定的已有的子节点之前插入新节点。\nelement.cloneNode(deep) 复制元素 要连后代一起复制请把 deep 参数设置 true，否则设置为 false。\nelement.hasChildNodes() 有子节点返回true\nelement.normalize() 合并元素中相邻的文本节点，删除空的文本节点\nelement.replaceChild(newchild,oldchild) 用newchild替换元素中的某个oldchlid了\nelement.removeChild(node) 删除元素中的某个子元素node\n```\n###### （2）节点属性操作\n```\nelement.attributes \n//返回属性数组\nelement.getAttribute()\n//返回元素节点的指定属性值。 <a href = 'abc'></a> a.getAttribute('href')--->abc\nelement.getAttributeNode(name) let atr = document.querySelector('a').getAttributeNode('href')\n//返回指定的属性节点。 <a href = 'abc'></a> a.getAttribute('href')--->href = 'abc' a.getAttribute('href').value ---> abc a.getAttribute('href').name--->href\nelement.hasAttribute(name)\n// 如果元素拥有指定属性，则返回true，否则返回 false。\nelement.hasAttributes()\n// 如果元素拥有属性，则返回 true，否则返回 false。\nelement.setAttribute(name,value) a.setAttribute('href','http://xxx.cn')\nelement.setAttributeNode()//用来设置已经创建的attribute节点\n/*\n    // 用法\n    let div = document.createElement('div')\n    let attr = document.createAttribute('attr')\n    attr.value = '1'\n    div.setAttributeNode(attr)\n    div // <div attr = \"1\"></div>\n*/\nlet newAtrNode = document.createAttribute('class') newAtrNode.nodeValue='abc' newNode.setAttributeNode(newAtrNode)\nelement.removeAttribute(name) \nelement.removeAttributeNode() // let atr = document.querySelector('a').getAttributeNode('href') document.querySelector('a').removeAttribute(atr)\nelement.style.xxx 获取元素内联的样式(style = \"??????\")，也可以通过它进行设置\nelement.className\n```\n###### （3）节点属性\n```\nelement.childNodes  返回元素子节点的nodelists\nelement.className 返回元素类名\nelement.innerHTML\nelement.id\t\nelement.firstChild 返回元素的首个子元素\nelement.lastChild 返回元素的最后一个子元素\nelement.firstElementChild element.lastElementChild 返回元素的最后一个子标签元素\nelement.nodeType 1 元素 2 属性 3 文本 8 注释\nelement.nodeValue 元素节点的 nodeValue 是 undefined 或 null 文本节点的 nodeValue 是文本自身 属性节点的 nodeValue 是属性的值\nelement.nextSibling 当前节点的下一个节点（同一树层级）\nelement.previousSibling 当前节点的上一个节点（同一树层级）\nelement.innerHTML element.innerText\nelement.clientHeight element.clientWidth 返回元素的可见高度可见宽度（要减去滚动条滚动过的高度） \nelement.offsetWidth element.offsetHeight 返回元素的高度宽度（元素本身的高度宽度，包括边框，不受滚动条影响）\nelement.offsetTop element.offsetLeft // 元素距上层元素的高度/宽度，不受滚动条影响的\nelement.scrollTop  element.scrollLeft // 滚动的高度/宽度\nelement.offsetParent 返回元素的偏移容器，不会是div\n```\n![](https://upload-images.jianshu.io/upload_images/20892169-dd392939dc6498e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 3.attribute 在属性节点上的可用的属性或方法\n```\nattr.isId 属性是id返回true反之false\nattr.name 属性名称 btn.attributes[0].name，只读\nattr.value 属性值 btn.attributes[0].value\nnodemap就是element.attributes ~\nnodemap.getNamedItem() // // 通过名称获取指定属性\nnodemap.item(num) // 返回nodemap的指定位置属性\nnodemap.length\t// 返回nodemap长度\nnodemap.removeNamedItem(num) // 移出指定位置属性\nnodemap.setNamedItem() // 通过名称设置指定属性\n\n// var btn=document.getElementsByTagName(\"h1\")[0];\n// var typ=document.createAttribute(\"class\");\n// typ.nodeValue=\"democlass\";\n// btn.attributes.setNamedItem(typ);\n```\n#### 4.event\n###### （1）基本写法\n``` \ndocument.querySelector('body').addEventListener('click',()=>{\n    alert(1)\n})\n```\n###### （2）事件类型\n```\nonabort 图像的加载被中断。\nonreset\t重置按钮被点击。\nonselect\t文本被选中。\nonunload\t用户退出页面。\nonchange\t域的内容被改变。(input textarea)\nonkeydown onkeypress\tonkeyup\t\nonload 一张页面或一幅图像完成加载。\nonmousedown onmousemove onmouseout onmouseover onmouseup\n\n// altKey ctrlKey metaKey shiftKey clientX clientY screenX screenY clientX clientY\n// currentTarget target\ttype(返回当前 Event 对象表示的事件的名称。)\n// preventDefault()\t阻止默认事件 stopPropagation()停止冒泡\n\n// 捕获比冒泡先执行，从内到外冒泡，从外到内捕获 addEventListener第三个参数默认为false 即冒泡 true 即捕获\n```\n#### 二、bom\n（1）window下\n###### history \n    back()、forward()、go(n)\n###### location\n以http://localhost:8080/axiospage?name=aaa&age=12#abc举例\n```\nhash(#后)   //'#abc'\nhost  // localhost:8080\nhostname  //localhost\nhref   //'http://localhost:8080/axiospage?name=aaa&age=12#abc'\npathname（纯路径无#无?）'/axiospage'\nport    //'8080'\nprotocol   //'http:'\nsearch(?后)   //'?name=aaa&age=12'\nassign(url)替换新url，会存储在当前历史中，和href作用一样。\nreload()重新载入，为true时绕过缓存载入文档，为false或无参数则从缓存加载大概\nreplace(newUrl)\t(不会存储在历史跳转中，替换了当前)\n```\n###### Navigator：\nNavigator下的属性基本是浏览器的各种信息，如userAgent返回由客户机发送服务器的 user-agent 头部的值。\n###### 其他常用的：\n```\npageXOffset、pageYOffset\t \ninnerheight、innerwidth（无border margin）\t\nouterheight、outerwidth(加border margin) \nself（相当于window）\nScreen\n返回屏幕信息，分辨率、大小、英寸、像素 availHeight\tavailWidth\tdeviceXDPI\tdeviceYDPI\theight\twidth\tpixelDepth\t等等\nrequestAnimationFrame\n```\n#### 面试题：\n###### 如何提高dom性能？\n(1) 避免频繁的dom操作\n(2) 对dom查询做缓存 \n(3) 将dom频繁操作改为一次性操作","slug":"cxy/js/js-explore","published":1,"updated":"2023-01-25T20:32:21.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifi000bkdwi8bkt3uap","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、dom\"><a href=\"#一、dom\" class=\"headerlink\" title=\"一、dom\"></a>一、dom</h2><h4 id=\"前言：dom的本质\"><a href=\"#前言：dom的本质\" class=\"headerlink\" title=\"前言：dom的本质\"></a>前言：dom的本质</h4><p>html是一种特定的xml，html规定了语法，而xml可以自己规定标签<br>dom的本质是一个树形的数据结构<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2583ad059ce41ddb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"1-document对象\"><a href=\"#1-document对象\" class=\"headerlink\" title=\"1. document对象\"></a>1. document对象</h4><h6 id=\"（1）document对象集合\"><a href=\"#（1）document对象集合\" class=\"headerlink\" title=\"（1）document对象集合\"></a>（1）document对象集合</h6><blockquote>\n<p>all[]所有元素的集合<br>anchors[]对所有href链接的引用，非常简单地返回文档中具有name属性值的所有锚点的集合。已被web标准删除。<br>applets对所有applets（小应用程序）对象的引用<br>forms[]对所有forms的引用<br>images[]对所有img的引用<br>links[]对所有area的href的引用，<a>href</p>\n</blockquote>\n<h6 id=\"（2）document对象属性\"><a href=\"#（2）document对象属性\" class=\"headerlink\" title=\"（2）document对象属性\"></a>（2）document对象属性</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie     </span><br><span class=\"line\">domain （域名，&#x27;www.baidu.com&#x27;）</span><br><span class=\"line\">lastModified（返回文档被最后修改的日期和时间。） </span><br><span class=\"line\">referrer（从哪里跳转来的。返回&quot;载入&quot;当前文档的文档的 URL。这个比较常用）&#x27;https://www.baidu.com/from=844b/s?word=sdfsdf&#x27;</span><br><span class=\"line\">title（返回当前文档的标题。）</span><br><span class=\"line\">URL（当前文档url，和location.href的区别：URL不可设置，location.href可以设置）</span><br></pre></td></tr></table></figure>\n<h6 id=\"（3）document对象方法\"><a href=\"#（3）document对象方法\" class=\"headerlink\" title=\"（3）document对象方法\"></a>（3）document对象方法</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.querySelector()</span><br><span class=\"line\">document.getElementById()\t</span><br><span class=\"line\">document.getElementsByName()</span><br><span class=\"line\">document.getElementsByClassname()\t</span><br><span class=\"line\">document.getElementsByTagName()\t</span><br><span class=\"line\">document.createElement() </span><br><span class=\"line\">document.createTextNode() </span><br><span class=\"line\">document.createAttribute() </span><br><span class=\"line\">document.open()\t</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-document-element\"><a href=\"#2-document-element\" class=\"headerlink\" title=\"2. document.element\"></a>2. document.element</h4><h6 id=\"（1）节点操作\"><a href=\"#（1）节点操作\" class=\"headerlink\" title=\"（1）节点操作\"></a>（1）节点操作</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.getElementsByTagName()</span><br><span class=\"line\">element.appendChild()  在元素末尾添加新结点</span><br><span class=\"line\">element.insertBefore(新节点，指定子节点) 在指定的已有的子节点之前插入新节点。</span><br><span class=\"line\">element.cloneNode(deep) 复制元素 要连后代一起复制请把 deep 参数设置 true，否则设置为 false。</span><br><span class=\"line\">element.hasChildNodes() 有子节点返回true</span><br><span class=\"line\">element.normalize() 合并元素中相邻的文本节点，删除空的文本节点</span><br><span class=\"line\">element.replaceChild(newchild,oldchild) 用newchild替换元素中的某个oldchlid了</span><br><span class=\"line\">element.removeChild(node) 删除元素中的某个子元素node</span><br></pre></td></tr></table></figure>\n<h6 id=\"（2）节点属性操作\"><a href=\"#（2）节点属性操作\" class=\"headerlink\" title=\"（2）节点属性操作\"></a>（2）节点属性操作</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.attributes </span><br><span class=\"line\">//返回属性数组</span><br><span class=\"line\">element.getAttribute()</span><br><span class=\"line\">//返回元素节点的指定属性值。 &lt;a href = &#x27;abc&#x27;&gt;&lt;/a&gt; a.getAttribute(&#x27;href&#x27;)---&gt;abc</span><br><span class=\"line\">element.getAttributeNode(name) let atr = document.querySelector(&#x27;a&#x27;).getAttributeNode(&#x27;href&#x27;)</span><br><span class=\"line\">//返回指定的属性节点。 &lt;a href = &#x27;abc&#x27;&gt;&lt;/a&gt; a.getAttribute(&#x27;href&#x27;)---&gt;href = &#x27;abc&#x27; a.getAttribute(&#x27;href&#x27;).value ---&gt; abc a.getAttribute(&#x27;href&#x27;).name---&gt;href</span><br><span class=\"line\">element.hasAttribute(name)</span><br><span class=\"line\">// 如果元素拥有指定属性，则返回true，否则返回 false。</span><br><span class=\"line\">element.hasAttributes()</span><br><span class=\"line\">// 如果元素拥有属性，则返回 true，否则返回 false。</span><br><span class=\"line\">element.setAttribute(name,value) a.setAttribute(&#x27;href&#x27;,&#x27;http://xxx.cn&#x27;)</span><br><span class=\"line\">element.setAttributeNode()//用来设置已经创建的attribute节点</span><br><span class=\"line\">/*</span><br><span class=\"line\">    // 用法</span><br><span class=\"line\">    let div = document.createElement(&#x27;div&#x27;)</span><br><span class=\"line\">    let attr = document.createAttribute(&#x27;attr&#x27;)</span><br><span class=\"line\">    attr.value = &#x27;1&#x27;</span><br><span class=\"line\">    div.setAttributeNode(attr)</span><br><span class=\"line\">    div // &lt;div attr = &quot;1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">*/</span><br><span class=\"line\">let newAtrNode = document.createAttribute(&#x27;class&#x27;) newAtrNode.nodeValue=&#x27;abc&#x27; newNode.setAttributeNode(newAtrNode)</span><br><span class=\"line\">element.removeAttribute(name) </span><br><span class=\"line\">element.removeAttributeNode() // let atr = document.querySelector(&#x27;a&#x27;).getAttributeNode(&#x27;href&#x27;) document.querySelector(&#x27;a&#x27;).removeAttribute(atr)</span><br><span class=\"line\">element.style.xxx 获取元素内联的样式(style = &quot;??????&quot;)，也可以通过它进行设置</span><br><span class=\"line\">element.className</span><br></pre></td></tr></table></figure>\n<h6 id=\"（3）节点属性\"><a href=\"#（3）节点属性\" class=\"headerlink\" title=\"（3）节点属性\"></a>（3）节点属性</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.childNodes  返回元素子节点的nodelists</span><br><span class=\"line\">element.className 返回元素类名</span><br><span class=\"line\">element.innerHTML</span><br><span class=\"line\">element.id\t</span><br><span class=\"line\">element.firstChild 返回元素的首个子元素</span><br><span class=\"line\">element.lastChild 返回元素的最后一个子元素</span><br><span class=\"line\">element.firstElementChild element.lastElementChild 返回元素的最后一个子标签元素</span><br><span class=\"line\">element.nodeType 1 元素 2 属性 3 文本 8 注释</span><br><span class=\"line\">element.nodeValue 元素节点的 nodeValue 是 undefined 或 null 文本节点的 nodeValue 是文本自身 属性节点的 nodeValue 是属性的值</span><br><span class=\"line\">element.nextSibling 当前节点的下一个节点（同一树层级）</span><br><span class=\"line\">element.previousSibling 当前节点的上一个节点（同一树层级）</span><br><span class=\"line\">element.innerHTML element.innerText</span><br><span class=\"line\">element.clientHeight element.clientWidth 返回元素的可见高度可见宽度（要减去滚动条滚动过的高度） </span><br><span class=\"line\">element.offsetWidth element.offsetHeight 返回元素的高度宽度（元素本身的高度宽度，包括边框，不受滚动条影响）</span><br><span class=\"line\">element.offsetTop element.offsetLeft // 元素距上层元素的高度/宽度，不受滚动条影响的</span><br><span class=\"line\">element.scrollTop  element.scrollLeft // 滚动的高度/宽度</span><br><span class=\"line\">element.offsetParent 返回元素的偏移容器，不会是div</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-dd392939dc6498e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"3-attribute-在属性节点上的可用的属性或方法\"><a href=\"#3-attribute-在属性节点上的可用的属性或方法\" class=\"headerlink\" title=\"3.attribute 在属性节点上的可用的属性或方法\"></a>3.attribute 在属性节点上的可用的属性或方法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attr.isId 属性是id返回true反之false</span><br><span class=\"line\">attr.name 属性名称 btn.attributes[0].name，只读</span><br><span class=\"line\">attr.value 属性值 btn.attributes[0].value</span><br><span class=\"line\">nodemap就是element.attributes ~</span><br><span class=\"line\">nodemap.getNamedItem() // // 通过名称获取指定属性</span><br><span class=\"line\">nodemap.item(num) // 返回nodemap的指定位置属性</span><br><span class=\"line\">nodemap.length\t// 返回nodemap长度</span><br><span class=\"line\">nodemap.removeNamedItem(num) // 移出指定位置属性</span><br><span class=\"line\">nodemap.setNamedItem() // 通过名称设置指定属性</span><br><span class=\"line\"></span><br><span class=\"line\">// var btn=document.getElementsByTagName(&quot;h1&quot;)[0];</span><br><span class=\"line\">// var typ=document.createAttribute(&quot;class&quot;);</span><br><span class=\"line\">// typ.nodeValue=&quot;democlass&quot;;</span><br><span class=\"line\">// btn.attributes.setNamedItem(typ);</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-event\"><a href=\"#4-event\" class=\"headerlink\" title=\"4.event\"></a>4.event</h4><h6 id=\"（1）基本写法\"><a href=\"#（1）基本写法\" class=\"headerlink\" title=\"（1）基本写法\"></a>（1）基本写法</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.querySelector(&#x27;body&#x27;).addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class=\"line\">    alert(1)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h6 id=\"（2）事件类型\"><a href=\"#（2）事件类型\" class=\"headerlink\" title=\"（2）事件类型\"></a>（2）事件类型</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onabort 图像的加载被中断。</span><br><span class=\"line\">onreset\t重置按钮被点击。</span><br><span class=\"line\">onselect\t文本被选中。</span><br><span class=\"line\">onunload\t用户退出页面。</span><br><span class=\"line\">onchange\t域的内容被改变。(input textarea)</span><br><span class=\"line\">onkeydown onkeypress\tonkeyup\t</span><br><span class=\"line\">onload 一张页面或一幅图像完成加载。</span><br><span class=\"line\">onmousedown onmousemove onmouseout onmouseover onmouseup</span><br><span class=\"line\"></span><br><span class=\"line\">// altKey ctrlKey metaKey shiftKey clientX clientY screenX screenY clientX clientY</span><br><span class=\"line\">// currentTarget target\ttype(返回当前 Event 对象表示的事件的名称。)</span><br><span class=\"line\">// preventDefault()\t阻止默认事件 stopPropagation()停止冒泡</span><br><span class=\"line\"></span><br><span class=\"line\">// 捕获比冒泡先执行，从内到外冒泡，从外到内捕获 addEventListener第三个参数默认为false 即冒泡 true 即捕获</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、bom\"><a href=\"#二、bom\" class=\"headerlink\" title=\"二、bom\"></a>二、bom</h4><p>（1）window下</p>\n<h6 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h6><pre><code>back()、forward()、go(n)\n</code></pre>\n<h6 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h6><p>以<a href=\"http://localhost:8080/axiospage?name=aaa&amp;age=12#abc%E4%B8%BE%E4%BE%8B\">http://localhost:8080/axiospage?name=aaa&amp;age=12#abc举例</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash(#后)   //&#x27;#abc&#x27;</span><br><span class=\"line\">host  // localhost:8080</span><br><span class=\"line\">hostname  //localhost</span><br><span class=\"line\">href   //&#x27;http://localhost:8080/axiospage?name=aaa&amp;age=12#abc&#x27;</span><br><span class=\"line\">pathname（纯路径无#无?）&#x27;/axiospage&#x27;</span><br><span class=\"line\">port    //&#x27;8080&#x27;</span><br><span class=\"line\">protocol   //&#x27;http:&#x27;</span><br><span class=\"line\">search(?后)   //&#x27;?name=aaa&amp;age=12&#x27;</span><br><span class=\"line\">assign(url)替换新url，会存储在当前历史中，和href作用一样。</span><br><span class=\"line\">reload()重新载入，为true时绕过缓存载入文档，为false或无参数则从缓存加载大概</span><br><span class=\"line\">replace(newUrl)\t(不会存储在历史跳转中，替换了当前)</span><br></pre></td></tr></table></figure>\n<h6 id=\"Navigator：\"><a href=\"#Navigator：\" class=\"headerlink\" title=\"Navigator：\"></a>Navigator：</h6><p>Navigator下的属性基本是浏览器的各种信息，如userAgent返回由客户机发送服务器的 user-agent 头部的值。</p>\n<h6 id=\"其他常用的：\"><a href=\"#其他常用的：\" class=\"headerlink\" title=\"其他常用的：\"></a>其他常用的：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pageXOffset、pageYOffset\t </span><br><span class=\"line\">innerheight、innerwidth（无border margin）\t</span><br><span class=\"line\">outerheight、outerwidth(加border margin) </span><br><span class=\"line\">self（相当于window）</span><br><span class=\"line\">Screen</span><br><span class=\"line\">返回屏幕信息，分辨率、大小、英寸、像素 availHeight\tavailWidth\tdeviceXDPI\tdeviceYDPI\theight\twidth\tpixelDepth\t等等</span><br><span class=\"line\">requestAnimationFrame</span><br></pre></td></tr></table></figure>\n<h4 id=\"面试题：\"><a href=\"#面试题：\" class=\"headerlink\" title=\"面试题：\"></a>面试题：</h4><h6 id=\"如何提高dom性能？\"><a href=\"#如何提高dom性能？\" class=\"headerlink\" title=\"如何提高dom性能？\"></a>如何提高dom性能？</h6><p>(1) 避免频繁的dom操作<br>(2) 对dom查询做缓存<br>(3) 将dom频繁操作改为一次性操作</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、dom\"><a href=\"#一、dom\" class=\"headerlink\" title=\"一、dom\"></a>一、dom</h2><h4 id=\"前言：dom的本质\"><a href=\"#前言：dom的本质\" class=\"headerlink\" title=\"前言：dom的本质\"></a>前言：dom的本质</h4><p>html是一种特定的xml，html规定了语法，而xml可以自己规定标签<br>dom的本质是一个树形的数据结构<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2583ad059ce41ddb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"1-document对象\"><a href=\"#1-document对象\" class=\"headerlink\" title=\"1. document对象\"></a>1. document对象</h4><h6 id=\"（1）document对象集合\"><a href=\"#（1）document对象集合\" class=\"headerlink\" title=\"（1）document对象集合\"></a>（1）document对象集合</h6><blockquote>\n<p>all[]所有元素的集合<br>anchors[]对所有href链接的引用，非常简单地返回文档中具有name属性值的所有锚点的集合。已被web标准删除。<br>applets对所有applets（小应用程序）对象的引用<br>forms[]对所有forms的引用<br>images[]对所有img的引用<br>links[]对所有area的href的引用，<a>href</p>\n</blockquote>\n<h6 id=\"（2）document对象属性\"><a href=\"#（2）document对象属性\" class=\"headerlink\" title=\"（2）document对象属性\"></a>（2）document对象属性</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie     </span><br><span class=\"line\">domain （域名，&#x27;www.baidu.com&#x27;）</span><br><span class=\"line\">lastModified（返回文档被最后修改的日期和时间。） </span><br><span class=\"line\">referrer（从哪里跳转来的。返回&quot;载入&quot;当前文档的文档的 URL。这个比较常用）&#x27;https://www.baidu.com/from=844b/s?word=sdfsdf&#x27;</span><br><span class=\"line\">title（返回当前文档的标题。）</span><br><span class=\"line\">URL（当前文档url，和location.href的区别：URL不可设置，location.href可以设置）</span><br></pre></td></tr></table></figure>\n<h6 id=\"（3）document对象方法\"><a href=\"#（3）document对象方法\" class=\"headerlink\" title=\"（3）document对象方法\"></a>（3）document对象方法</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.querySelector()</span><br><span class=\"line\">document.getElementById()\t</span><br><span class=\"line\">document.getElementsByName()</span><br><span class=\"line\">document.getElementsByClassname()\t</span><br><span class=\"line\">document.getElementsByTagName()\t</span><br><span class=\"line\">document.createElement() </span><br><span class=\"line\">document.createTextNode() </span><br><span class=\"line\">document.createAttribute() </span><br><span class=\"line\">document.open()\t</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-document-element\"><a href=\"#2-document-element\" class=\"headerlink\" title=\"2. document.element\"></a>2. document.element</h4><h6 id=\"（1）节点操作\"><a href=\"#（1）节点操作\" class=\"headerlink\" title=\"（1）节点操作\"></a>（1）节点操作</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.getElementsByTagName()</span><br><span class=\"line\">element.appendChild()  在元素末尾添加新结点</span><br><span class=\"line\">element.insertBefore(新节点，指定子节点) 在指定的已有的子节点之前插入新节点。</span><br><span class=\"line\">element.cloneNode(deep) 复制元素 要连后代一起复制请把 deep 参数设置 true，否则设置为 false。</span><br><span class=\"line\">element.hasChildNodes() 有子节点返回true</span><br><span class=\"line\">element.normalize() 合并元素中相邻的文本节点，删除空的文本节点</span><br><span class=\"line\">element.replaceChild(newchild,oldchild) 用newchild替换元素中的某个oldchlid了</span><br><span class=\"line\">element.removeChild(node) 删除元素中的某个子元素node</span><br></pre></td></tr></table></figure>\n<h6 id=\"（2）节点属性操作\"><a href=\"#（2）节点属性操作\" class=\"headerlink\" title=\"（2）节点属性操作\"></a>（2）节点属性操作</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.attributes </span><br><span class=\"line\">//返回属性数组</span><br><span class=\"line\">element.getAttribute()</span><br><span class=\"line\">//返回元素节点的指定属性值。 &lt;a href = &#x27;abc&#x27;&gt;&lt;/a&gt; a.getAttribute(&#x27;href&#x27;)---&gt;abc</span><br><span class=\"line\">element.getAttributeNode(name) let atr = document.querySelector(&#x27;a&#x27;).getAttributeNode(&#x27;href&#x27;)</span><br><span class=\"line\">//返回指定的属性节点。 &lt;a href = &#x27;abc&#x27;&gt;&lt;/a&gt; a.getAttribute(&#x27;href&#x27;)---&gt;href = &#x27;abc&#x27; a.getAttribute(&#x27;href&#x27;).value ---&gt; abc a.getAttribute(&#x27;href&#x27;).name---&gt;href</span><br><span class=\"line\">element.hasAttribute(name)</span><br><span class=\"line\">// 如果元素拥有指定属性，则返回true，否则返回 false。</span><br><span class=\"line\">element.hasAttributes()</span><br><span class=\"line\">// 如果元素拥有属性，则返回 true，否则返回 false。</span><br><span class=\"line\">element.setAttribute(name,value) a.setAttribute(&#x27;href&#x27;,&#x27;http://xxx.cn&#x27;)</span><br><span class=\"line\">element.setAttributeNode()//用来设置已经创建的attribute节点</span><br><span class=\"line\">/*</span><br><span class=\"line\">    // 用法</span><br><span class=\"line\">    let div = document.createElement(&#x27;div&#x27;)</span><br><span class=\"line\">    let attr = document.createAttribute(&#x27;attr&#x27;)</span><br><span class=\"line\">    attr.value = &#x27;1&#x27;</span><br><span class=\"line\">    div.setAttributeNode(attr)</span><br><span class=\"line\">    div // &lt;div attr = &quot;1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">*/</span><br><span class=\"line\">let newAtrNode = document.createAttribute(&#x27;class&#x27;) newAtrNode.nodeValue=&#x27;abc&#x27; newNode.setAttributeNode(newAtrNode)</span><br><span class=\"line\">element.removeAttribute(name) </span><br><span class=\"line\">element.removeAttributeNode() // let atr = document.querySelector(&#x27;a&#x27;).getAttributeNode(&#x27;href&#x27;) document.querySelector(&#x27;a&#x27;).removeAttribute(atr)</span><br><span class=\"line\">element.style.xxx 获取元素内联的样式(style = &quot;??????&quot;)，也可以通过它进行设置</span><br><span class=\"line\">element.className</span><br></pre></td></tr></table></figure>\n<h6 id=\"（3）节点属性\"><a href=\"#（3）节点属性\" class=\"headerlink\" title=\"（3）节点属性\"></a>（3）节点属性</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.childNodes  返回元素子节点的nodelists</span><br><span class=\"line\">element.className 返回元素类名</span><br><span class=\"line\">element.innerHTML</span><br><span class=\"line\">element.id\t</span><br><span class=\"line\">element.firstChild 返回元素的首个子元素</span><br><span class=\"line\">element.lastChild 返回元素的最后一个子元素</span><br><span class=\"line\">element.firstElementChild element.lastElementChild 返回元素的最后一个子标签元素</span><br><span class=\"line\">element.nodeType 1 元素 2 属性 3 文本 8 注释</span><br><span class=\"line\">element.nodeValue 元素节点的 nodeValue 是 undefined 或 null 文本节点的 nodeValue 是文本自身 属性节点的 nodeValue 是属性的值</span><br><span class=\"line\">element.nextSibling 当前节点的下一个节点（同一树层级）</span><br><span class=\"line\">element.previousSibling 当前节点的上一个节点（同一树层级）</span><br><span class=\"line\">element.innerHTML element.innerText</span><br><span class=\"line\">element.clientHeight element.clientWidth 返回元素的可见高度可见宽度（要减去滚动条滚动过的高度） </span><br><span class=\"line\">element.offsetWidth element.offsetHeight 返回元素的高度宽度（元素本身的高度宽度，包括边框，不受滚动条影响）</span><br><span class=\"line\">element.offsetTop element.offsetLeft // 元素距上层元素的高度/宽度，不受滚动条影响的</span><br><span class=\"line\">element.scrollTop  element.scrollLeft // 滚动的高度/宽度</span><br><span class=\"line\">element.offsetParent 返回元素的偏移容器，不会是div</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-dd392939dc6498e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"3-attribute-在属性节点上的可用的属性或方法\"><a href=\"#3-attribute-在属性节点上的可用的属性或方法\" class=\"headerlink\" title=\"3.attribute 在属性节点上的可用的属性或方法\"></a>3.attribute 在属性节点上的可用的属性或方法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attr.isId 属性是id返回true反之false</span><br><span class=\"line\">attr.name 属性名称 btn.attributes[0].name，只读</span><br><span class=\"line\">attr.value 属性值 btn.attributes[0].value</span><br><span class=\"line\">nodemap就是element.attributes ~</span><br><span class=\"line\">nodemap.getNamedItem() // // 通过名称获取指定属性</span><br><span class=\"line\">nodemap.item(num) // 返回nodemap的指定位置属性</span><br><span class=\"line\">nodemap.length\t// 返回nodemap长度</span><br><span class=\"line\">nodemap.removeNamedItem(num) // 移出指定位置属性</span><br><span class=\"line\">nodemap.setNamedItem() // 通过名称设置指定属性</span><br><span class=\"line\"></span><br><span class=\"line\">// var btn=document.getElementsByTagName(&quot;h1&quot;)[0];</span><br><span class=\"line\">// var typ=document.createAttribute(&quot;class&quot;);</span><br><span class=\"line\">// typ.nodeValue=&quot;democlass&quot;;</span><br><span class=\"line\">// btn.attributes.setNamedItem(typ);</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-event\"><a href=\"#4-event\" class=\"headerlink\" title=\"4.event\"></a>4.event</h4><h6 id=\"（1）基本写法\"><a href=\"#（1）基本写法\" class=\"headerlink\" title=\"（1）基本写法\"></a>（1）基本写法</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.querySelector(&#x27;body&#x27;).addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class=\"line\">    alert(1)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h6 id=\"（2）事件类型\"><a href=\"#（2）事件类型\" class=\"headerlink\" title=\"（2）事件类型\"></a>（2）事件类型</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onabort 图像的加载被中断。</span><br><span class=\"line\">onreset\t重置按钮被点击。</span><br><span class=\"line\">onselect\t文本被选中。</span><br><span class=\"line\">onunload\t用户退出页面。</span><br><span class=\"line\">onchange\t域的内容被改变。(input textarea)</span><br><span class=\"line\">onkeydown onkeypress\tonkeyup\t</span><br><span class=\"line\">onload 一张页面或一幅图像完成加载。</span><br><span class=\"line\">onmousedown onmousemove onmouseout onmouseover onmouseup</span><br><span class=\"line\"></span><br><span class=\"line\">// altKey ctrlKey metaKey shiftKey clientX clientY screenX screenY clientX clientY</span><br><span class=\"line\">// currentTarget target\ttype(返回当前 Event 对象表示的事件的名称。)</span><br><span class=\"line\">// preventDefault()\t阻止默认事件 stopPropagation()停止冒泡</span><br><span class=\"line\"></span><br><span class=\"line\">// 捕获比冒泡先执行，从内到外冒泡，从外到内捕获 addEventListener第三个参数默认为false 即冒泡 true 即捕获</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、bom\"><a href=\"#二、bom\" class=\"headerlink\" title=\"二、bom\"></a>二、bom</h4><p>（1）window下</p>\n<h6 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h6><pre><code>back()、forward()、go(n)\n</code></pre>\n<h6 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h6><p>以<a href=\"http://localhost:8080/axiospage?name=aaa&amp;age=12#abc%E4%B8%BE%E4%BE%8B\">http://localhost:8080/axiospage?name=aaa&amp;age=12#abc举例</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash(#后)   //&#x27;#abc&#x27;</span><br><span class=\"line\">host  // localhost:8080</span><br><span class=\"line\">hostname  //localhost</span><br><span class=\"line\">href   //&#x27;http://localhost:8080/axiospage?name=aaa&amp;age=12#abc&#x27;</span><br><span class=\"line\">pathname（纯路径无#无?）&#x27;/axiospage&#x27;</span><br><span class=\"line\">port    //&#x27;8080&#x27;</span><br><span class=\"line\">protocol   //&#x27;http:&#x27;</span><br><span class=\"line\">search(?后)   //&#x27;?name=aaa&amp;age=12&#x27;</span><br><span class=\"line\">assign(url)替换新url，会存储在当前历史中，和href作用一样。</span><br><span class=\"line\">reload()重新载入，为true时绕过缓存载入文档，为false或无参数则从缓存加载大概</span><br><span class=\"line\">replace(newUrl)\t(不会存储在历史跳转中，替换了当前)</span><br></pre></td></tr></table></figure>\n<h6 id=\"Navigator：\"><a href=\"#Navigator：\" class=\"headerlink\" title=\"Navigator：\"></a>Navigator：</h6><p>Navigator下的属性基本是浏览器的各种信息，如userAgent返回由客户机发送服务器的 user-agent 头部的值。</p>\n<h6 id=\"其他常用的：\"><a href=\"#其他常用的：\" class=\"headerlink\" title=\"其他常用的：\"></a>其他常用的：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pageXOffset、pageYOffset\t </span><br><span class=\"line\">innerheight、innerwidth（无border margin）\t</span><br><span class=\"line\">outerheight、outerwidth(加border margin) </span><br><span class=\"line\">self（相当于window）</span><br><span class=\"line\">Screen</span><br><span class=\"line\">返回屏幕信息，分辨率、大小、英寸、像素 availHeight\tavailWidth\tdeviceXDPI\tdeviceYDPI\theight\twidth\tpixelDepth\t等等</span><br><span class=\"line\">requestAnimationFrame</span><br></pre></td></tr></table></figure>\n<h4 id=\"面试题：\"><a href=\"#面试题：\" class=\"headerlink\" title=\"面试题：\"></a>面试题：</h4><h6 id=\"如何提高dom性能？\"><a href=\"#如何提高dom性能？\" class=\"headerlink\" title=\"如何提高dom性能？\"></a>如何提高dom性能？</h6><p>(1) 避免频繁的dom操作<br>(2) 对dom查询做缓存<br>(3) 将dom频繁操作改为一次性操作</p>\n"},{"title":"【第9章】http与restfulAPI","date":"2019-04-12T07:33:35.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\nconst { get } = require(\"http\");\n\n## 状态码类型\n  1xx 服务器收到了请求\n  2xx请求成功 如200\n  3xx重定向 如302\n  4xx客户端错误\n  5xx服务端错误，如500\n\n## 常见状态码：\n**200 请求成功**\n**301 永久重定向**\n（配合location，浏览器记住了该网址返回了301，然后浏览器之后会永久自动处理到新的网站，如域名到期换新域名的情况）\n**302 临时重定向**\n（配合location，浏览器记住了该网址返回了302，但下次访问浏览器还是会访问到旧地址，如百度首页搜索的二级跳转、短网址等）\n点击链接：[为什么百度需要二级跳转重定向？](https://www.bilibili.com/read/cv6711239/)简单说，是为了打点。\n点击链接：[短网址的作用](https://www.zhihu.com/question/20790447) 简单说，微博字数那么长，再来个那么长的网址真心hold不住。\n**304 资源未被修改**（缓存了）请求过来的数据没有改变\n**404 资源未找到**\n**401 用户未授权** 比如密码错误、用户名错误\n**403 用户得到授权，但访问时禁止的**\n**500 服务器错误**\n**504 网关超时** (服务器端的操作有超时)\n\n## 新method可以写的状态码\n/*\n    200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。\n    201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\n    202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）\n    204 NO CONTENT - [DELETE]：用户删除数据成功。\n    400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。\n    401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。\n    403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\n    404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n    406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\n    410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\n    422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\n    500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。\n*/\n// “幂等性”指的是 1 次或 N 次的副作用(对系统造成的影响)相同，而不是返回结果相同，因此 GET 请求总是幂等的。\n// 无论一个操作被执行一次还是多次，执行后的效果都相同。比如对某资源发送GET请求，如果访问一次和访问十次获得的数据一样，那么就说这个请求具有幂等性。\n\n## http methods\n#### 1. 传统methods\nget获取服务器数据\npost向服务器提交数据\n\n#### 2. 现在的methods\n点击链接：[restful api 的设计方法](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)\n（1）get获取服务器数据 ()\n（2）head 和get类似，但服务器在响应中只返回头部，不返回实体的主体部分，这就允许客户端在没获取资源时对资源首部进行检查\n（3）post新建数据 (新建blog)\n（4）patch/put更新数据 （更新blog）\npatch:局部更新资源，比如只更新某一字段 put：完整更新资源，对带宽会有影响  https://blog.csdn.net/varyall/article/details/80895945\n（5） delete删除数据 （删除blog）\n（6）options 获取信息，关于资源的哪些属性是客户端可以修改的的。\n\n## restfulApi \n**restfulApi 是一种新的api设计方法。**\n#### 1. 概念：\nRESTful API 就是REST风格的API。现在终端平台多样，移动、平板、PC等许多媒介向服务端发送请求后，如果不适用RESTful API，需要为每个平台的数据请求定义相应的返回格式，以适应前端显示。但是RESTful API 要求前端以一种预定义的语法格式发送请求，那么服务端就只需要定义一个统一的响应接口，不必像之前那样解析各色各式的请求。\n#### 2. restfulapi的设计\n（1）传统API 把每个url当做一个功能\n（2）restful api 把每个url当做一个唯一的资源\\(^o^)/~\n就比如获取博客和更新博客 /api/blog/create 创建博客 /api/blog/update?blog=100 更新博客 这是一种功能\n// 而新的restfulapi，获取博客、更新博客、创建博客，都可以用/api/blog去表示，唯一不同的是method，这是一种资源集合\n（3）在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的\"集合\"（collection），所以API中的名词也应该使用复数。\n\n## 附：\nURI：Uniform Resource Identifier，统一资源标识符\nURL：Uniform Resource Location统一资源定位符 URL是URI的子集。\n点击链接：[URI 和 URL](https://www.zhihu.com/question/21950864)\n\n\n#### 3. 如何把每个url设计成一个资源？\n###### （1）不使用url参数 ，即问号后面的部分，然后做一个url的唯一标识\n传统： /api/list?pageIndex=2\nrestful api: /api/list/2\n\n###### （2）使用method表示操作类型\n**传统：**\n```\npost: /api/blog/create 创建\npost: /api/blog/update?blog=100 更新\nget:  /api/blog/get?blog=100 获取\n```\n**restful api：**\n```\npost: /api/blog method:post\npatch: /api/blog/100 method:patch/put\ndelete: /api/blog/100 method:delete\n```\n下面以动物园为例子：\n```\n    GET /zoos：列出所有动物园  /api/zoos get\n    POST /zoos：新建一个动物园 /api/zoos post\n    GET /zoos/ID：获取某个指定动物园的信息 /api/zoos/ID get\n    PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） /api/zoos/ID put\n    PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） /api/zoos/ID patch\n    DELETE /zoos/ID：删除某个动物园 /api/zoos/ID patch delete\n    GET /zoos/ID/animals：列出某个指定动物园的所有动物 /api/zoos/ID/animals get\n    DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 /api/zoos/ID/animals/ID delete\n```\n## http headers\n#### 1. 常见的request headers（客户端像服务端发送的）\n\nAccept: image/avif,image/webp,image/apng,text/html\n浏览器可接受的数据格式\n\nAccept-Encoding: gzip, deflate, br\n浏览器可接受的压缩算法\n\nAccept-Language: zh-CN,zh;q=0.9\n浏览器可接受的语言\n\nConnection: keep-alive   \n连接方式 \nkeep-alive：一次tcp连接可以重复使用\n\nCookie: BIDUPSID=8B5F551B8E92D363D2BF09A17F1787F0; BAIDUID=5ccc19b28fd87ed0af236b203e83021a\n什么是cookie：\nCookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息 [1]  。\n\nHost: m.baidu.com\n域名\n\nContent-type: application/json text-plain\n客户端像服务端请求时，告诉服务端我发送数据的格式，一般只有post请求有，get是获取数据一般没有\n\nUser-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.193 Mobile Safari/537.36\n浏览器信息\n\nCache-Control\n\n\n\n#### 2. 常见的response headers（服务端像客户端返回的）\n连接方式      Connection: keep-alive\n返回数据的大小 Content-Length: 0\n返回的数据的格式 Content-Type: text/plain; charset=utf-8\n返回的数据的压缩算法 Content-Encoding\n服务端改cookie的时候，需要发送 Set-Cookie: __bsi=10004501327375333328_00_32_N_R_10_0303_c02f_Y; max-age=3600; domain=m.baidu.com; path=/\n\n#### 3. 缓存相关的headers\ncache-control （响应头，缓存时间）\nexpires (响应头中，已被cache-control代替，有这个属性和cache-control一起兼容写法的情况)\nlast-modified（响应头，资源的最后修改时间）\n if-modified-since （请求头，协商缓存时浏览器再次请求会带着这个值，这个值和响应头的laast-modified相同）\netag （资源的唯一标识）\nif-none-match (请求头，值和响应头的etag相同，协商缓存中的唯一标识)\n\n**header也可以自定义,axios插件就可以自定义header**\n除了以上之外，可以自定义header，如果在客户端自定义在request中加，如果在服务端中自定义要后端在response中加\n**常用场景：**如服务端需要前端加上一个验证header做非法请求的验证\n\n## 总结一下restful api的设计模式\n1.协议遵守https协议\n2.api应该有单独域名\n3.加上版本号\n4.由于restfulapi中url表示一种资源的集合，而不再是一个功能一个url，所以网址中不能有动词，应该全是名词，且与数据库的表名一一对应，也由于是一种集合，所以api的名词尽量为复数\n5.用http动词去表示资源的具体操作类型，如putpatchpostgetdelete增删改查等\n6.如果涉及分页这种返回结果相当多的情况，api也可以提供一些参数，如?limit=10&page=2\n7.有单独的状态码\n8.4xx错误时要返回出错信息，用统一的error作为键值\n9.返回结果应符合规范\n    GET /collection：返回资源对象的列表（数组）\n    GET /collection/resource：返回单个资源对象\n    POST /collection：返回新生成的资源对象\n    PUT /collection/resource：返回完整的资源对象\n    PATCH /collection/resource：返回完整的资源对象\n    DELETE /collection/resource：返回一个空文档\n10.Hypermedia API 返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。\n\n\n## http缓存(见有道云)\n#### 1. 什么是缓存？\n网页第二次访问时，有相同资源可以不用重新请求一遍。\n#### 2. 为什么需要缓存\n为了让页面加载更快，网络请求加载相比cpu计算等等会比较慢，所以要尽量减少网络请求的数量和体积，可以让加载更快一些\n#### 3. 哪些资源可以被缓存 —— 静态资源（js css img）\nhtml一般是不被缓存的，网页的业务数据（比如留言板列表、博客列表）一般也不能被缓存，因为有可能随时会更新。\n\n#### 2. http缓存策略(见有道云)\n\n###### （1）强制缓存 cache-control\n比如请求一个js资源\n浏览器初次请求服务器，服务器返回资源和cache-control，若服务端感觉这个资源可以被缓存，则加入cache-control（在response-headers中，因为在响应头中，所以客户端无法控制，服务端控制）\n如：cache-control：max-age=5184000 单位为秒\n浏览器再次请求时，之前服务端的cache-control本地缓存会缓存下js的内容，如果cache-control没过期，浏览器就请求本地缓存，不通过网络，由本地缓存返回资源。\n\n###### （2）协商缓存\n服务端去判断客户端资源是否和服务端一致，一致则返回304（服务端判断客户端资源未改动），否则返回200和最新的资源。\n浏览器初次请求，服务端返回资源和资源标识给浏览器。浏览器再次请求会带上资源标识，服务端判断该资源标识的资源是否和服务端最新资源一致，则返回304，否则返回新资源和新资源标识。\n资源标识：在response-header中（因为是服务端返回的呗）\nlast-Modified 资源的最后修改时间\nEtag资源的唯一标识（一个字符串，类似人类指纹）\n\n###### （3）刷新方式对缓存的影响\n\n## https协议(见有道云)\n\n## 一、 http面试题\n1. http常见状态码 \n2. http常见header \n3. 什么是restful \n4. 描述一下http缓存机制\n","source":"_posts/cxy/js/js-http.md","raw":"---\ntitle: '【第9章】http与restfulAPI'\ndate: 2019-04-12 15:33:35\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\nconst { get } = require(\"http\");\n\n## 状态码类型\n  1xx 服务器收到了请求\n  2xx请求成功 如200\n  3xx重定向 如302\n  4xx客户端错误\n  5xx服务端错误，如500\n\n## 常见状态码：\n**200 请求成功**\n**301 永久重定向**\n（配合location，浏览器记住了该网址返回了301，然后浏览器之后会永久自动处理到新的网站，如域名到期换新域名的情况）\n**302 临时重定向**\n（配合location，浏览器记住了该网址返回了302，但下次访问浏览器还是会访问到旧地址，如百度首页搜索的二级跳转、短网址等）\n点击链接：[为什么百度需要二级跳转重定向？](https://www.bilibili.com/read/cv6711239/)简单说，是为了打点。\n点击链接：[短网址的作用](https://www.zhihu.com/question/20790447) 简单说，微博字数那么长，再来个那么长的网址真心hold不住。\n**304 资源未被修改**（缓存了）请求过来的数据没有改变\n**404 资源未找到**\n**401 用户未授权** 比如密码错误、用户名错误\n**403 用户得到授权，但访问时禁止的**\n**500 服务器错误**\n**504 网关超时** (服务器端的操作有超时)\n\n## 新method可以写的状态码\n/*\n    200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。\n    201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\n    202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）\n    204 NO CONTENT - [DELETE]：用户删除数据成功。\n    400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。\n    401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。\n    403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\n    404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n    406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\n    410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\n    422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\n    500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。\n*/\n// “幂等性”指的是 1 次或 N 次的副作用(对系统造成的影响)相同，而不是返回结果相同，因此 GET 请求总是幂等的。\n// 无论一个操作被执行一次还是多次，执行后的效果都相同。比如对某资源发送GET请求，如果访问一次和访问十次获得的数据一样，那么就说这个请求具有幂等性。\n\n## http methods\n#### 1. 传统methods\nget获取服务器数据\npost向服务器提交数据\n\n#### 2. 现在的methods\n点击链接：[restful api 的设计方法](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)\n（1）get获取服务器数据 ()\n（2）head 和get类似，但服务器在响应中只返回头部，不返回实体的主体部分，这就允许客户端在没获取资源时对资源首部进行检查\n（3）post新建数据 (新建blog)\n（4）patch/put更新数据 （更新blog）\npatch:局部更新资源，比如只更新某一字段 put：完整更新资源，对带宽会有影响  https://blog.csdn.net/varyall/article/details/80895945\n（5） delete删除数据 （删除blog）\n（6）options 获取信息，关于资源的哪些属性是客户端可以修改的的。\n\n## restfulApi \n**restfulApi 是一种新的api设计方法。**\n#### 1. 概念：\nRESTful API 就是REST风格的API。现在终端平台多样，移动、平板、PC等许多媒介向服务端发送请求后，如果不适用RESTful API，需要为每个平台的数据请求定义相应的返回格式，以适应前端显示。但是RESTful API 要求前端以一种预定义的语法格式发送请求，那么服务端就只需要定义一个统一的响应接口，不必像之前那样解析各色各式的请求。\n#### 2. restfulapi的设计\n（1）传统API 把每个url当做一个功能\n（2）restful api 把每个url当做一个唯一的资源\\(^o^)/~\n就比如获取博客和更新博客 /api/blog/create 创建博客 /api/blog/update?blog=100 更新博客 这是一种功能\n// 而新的restfulapi，获取博客、更新博客、创建博客，都可以用/api/blog去表示，唯一不同的是method，这是一种资源集合\n（3）在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的\"集合\"（collection），所以API中的名词也应该使用复数。\n\n## 附：\nURI：Uniform Resource Identifier，统一资源标识符\nURL：Uniform Resource Location统一资源定位符 URL是URI的子集。\n点击链接：[URI 和 URL](https://www.zhihu.com/question/21950864)\n\n\n#### 3. 如何把每个url设计成一个资源？\n###### （1）不使用url参数 ，即问号后面的部分，然后做一个url的唯一标识\n传统： /api/list?pageIndex=2\nrestful api: /api/list/2\n\n###### （2）使用method表示操作类型\n**传统：**\n```\npost: /api/blog/create 创建\npost: /api/blog/update?blog=100 更新\nget:  /api/blog/get?blog=100 获取\n```\n**restful api：**\n```\npost: /api/blog method:post\npatch: /api/blog/100 method:patch/put\ndelete: /api/blog/100 method:delete\n```\n下面以动物园为例子：\n```\n    GET /zoos：列出所有动物园  /api/zoos get\n    POST /zoos：新建一个动物园 /api/zoos post\n    GET /zoos/ID：获取某个指定动物园的信息 /api/zoos/ID get\n    PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） /api/zoos/ID put\n    PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） /api/zoos/ID patch\n    DELETE /zoos/ID：删除某个动物园 /api/zoos/ID patch delete\n    GET /zoos/ID/animals：列出某个指定动物园的所有动物 /api/zoos/ID/animals get\n    DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 /api/zoos/ID/animals/ID delete\n```\n## http headers\n#### 1. 常见的request headers（客户端像服务端发送的）\n\nAccept: image/avif,image/webp,image/apng,text/html\n浏览器可接受的数据格式\n\nAccept-Encoding: gzip, deflate, br\n浏览器可接受的压缩算法\n\nAccept-Language: zh-CN,zh;q=0.9\n浏览器可接受的语言\n\nConnection: keep-alive   \n连接方式 \nkeep-alive：一次tcp连接可以重复使用\n\nCookie: BIDUPSID=8B5F551B8E92D363D2BF09A17F1787F0; BAIDUID=5ccc19b28fd87ed0af236b203e83021a\n什么是cookie：\nCookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息 [1]  。\n\nHost: m.baidu.com\n域名\n\nContent-type: application/json text-plain\n客户端像服务端请求时，告诉服务端我发送数据的格式，一般只有post请求有，get是获取数据一般没有\n\nUser-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.193 Mobile Safari/537.36\n浏览器信息\n\nCache-Control\n\n\n\n#### 2. 常见的response headers（服务端像客户端返回的）\n连接方式      Connection: keep-alive\n返回数据的大小 Content-Length: 0\n返回的数据的格式 Content-Type: text/plain; charset=utf-8\n返回的数据的压缩算法 Content-Encoding\n服务端改cookie的时候，需要发送 Set-Cookie: __bsi=10004501327375333328_00_32_N_R_10_0303_c02f_Y; max-age=3600; domain=m.baidu.com; path=/\n\n#### 3. 缓存相关的headers\ncache-control （响应头，缓存时间）\nexpires (响应头中，已被cache-control代替，有这个属性和cache-control一起兼容写法的情况)\nlast-modified（响应头，资源的最后修改时间）\n if-modified-since （请求头，协商缓存时浏览器再次请求会带着这个值，这个值和响应头的laast-modified相同）\netag （资源的唯一标识）\nif-none-match (请求头，值和响应头的etag相同，协商缓存中的唯一标识)\n\n**header也可以自定义,axios插件就可以自定义header**\n除了以上之外，可以自定义header，如果在客户端自定义在request中加，如果在服务端中自定义要后端在response中加\n**常用场景：**如服务端需要前端加上一个验证header做非法请求的验证\n\n## 总结一下restful api的设计模式\n1.协议遵守https协议\n2.api应该有单独域名\n3.加上版本号\n4.由于restfulapi中url表示一种资源的集合，而不再是一个功能一个url，所以网址中不能有动词，应该全是名词，且与数据库的表名一一对应，也由于是一种集合，所以api的名词尽量为复数\n5.用http动词去表示资源的具体操作类型，如putpatchpostgetdelete增删改查等\n6.如果涉及分页这种返回结果相当多的情况，api也可以提供一些参数，如?limit=10&page=2\n7.有单独的状态码\n8.4xx错误时要返回出错信息，用统一的error作为键值\n9.返回结果应符合规范\n    GET /collection：返回资源对象的列表（数组）\n    GET /collection/resource：返回单个资源对象\n    POST /collection：返回新生成的资源对象\n    PUT /collection/resource：返回完整的资源对象\n    PATCH /collection/resource：返回完整的资源对象\n    DELETE /collection/resource：返回一个空文档\n10.Hypermedia API 返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。\n\n\n## http缓存(见有道云)\n#### 1. 什么是缓存？\n网页第二次访问时，有相同资源可以不用重新请求一遍。\n#### 2. 为什么需要缓存\n为了让页面加载更快，网络请求加载相比cpu计算等等会比较慢，所以要尽量减少网络请求的数量和体积，可以让加载更快一些\n#### 3. 哪些资源可以被缓存 —— 静态资源（js css img）\nhtml一般是不被缓存的，网页的业务数据（比如留言板列表、博客列表）一般也不能被缓存，因为有可能随时会更新。\n\n#### 2. http缓存策略(见有道云)\n\n###### （1）强制缓存 cache-control\n比如请求一个js资源\n浏览器初次请求服务器，服务器返回资源和cache-control，若服务端感觉这个资源可以被缓存，则加入cache-control（在response-headers中，因为在响应头中，所以客户端无法控制，服务端控制）\n如：cache-control：max-age=5184000 单位为秒\n浏览器再次请求时，之前服务端的cache-control本地缓存会缓存下js的内容，如果cache-control没过期，浏览器就请求本地缓存，不通过网络，由本地缓存返回资源。\n\n###### （2）协商缓存\n服务端去判断客户端资源是否和服务端一致，一致则返回304（服务端判断客户端资源未改动），否则返回200和最新的资源。\n浏览器初次请求，服务端返回资源和资源标识给浏览器。浏览器再次请求会带上资源标识，服务端判断该资源标识的资源是否和服务端最新资源一致，则返回304，否则返回新资源和新资源标识。\n资源标识：在response-header中（因为是服务端返回的呗）\nlast-Modified 资源的最后修改时间\nEtag资源的唯一标识（一个字符串，类似人类指纹）\n\n###### （3）刷新方式对缓存的影响\n\n## https协议(见有道云)\n\n## 一、 http面试题\n1. http常见状态码 \n2. http常见header \n3. 什么是restful \n4. 描述一下http缓存机制\n","slug":"cxy/js/js-http","published":1,"updated":"2023-01-25T20:43:04.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifj000ekdwigd1l6e32","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>const { get } = require(“http”);</p>\n<h2 id=\"状态码类型\"><a href=\"#状态码类型\" class=\"headerlink\" title=\"状态码类型\"></a>状态码类型</h2><p>  1xx 服务器收到了请求<br>  2xx请求成功 如200<br>  3xx重定向 如302<br>  4xx客户端错误<br>  5xx服务端错误，如500</p>\n<h2 id=\"常见状态码：\"><a href=\"#常见状态码：\" class=\"headerlink\" title=\"常见状态码：\"></a>常见状态码：</h2><p><strong>200 请求成功</strong><br><strong>301 永久重定向</strong><br>（配合location，浏览器记住了该网址返回了301，然后浏览器之后会永久自动处理到新的网站，如域名到期换新域名的情况）<br><strong>302 临时重定向</strong><br>（配合location，浏览器记住了该网址返回了302，但下次访问浏览器还是会访问到旧地址，如百度首页搜索的二级跳转、短网址等）<br>点击链接：<a href=\"https://www.bilibili.com/read/cv6711239/\">为什么百度需要二级跳转重定向？</a>简单说，是为了打点。<br>点击链接：<a href=\"https://www.zhihu.com/question/20790447\">短网址的作用</a> 简单说，微博字数那么长，再来个那么长的网址真心hold不住。<br><strong>304 资源未被修改</strong>（缓存了）请求过来的数据没有改变<br><strong>404 资源未找到</strong><br><strong>401 用户未授权</strong> 比如密码错误、用户名错误<br><strong>403 用户得到授权，但访问时禁止的</strong><br><strong>500 服务器错误</strong><br><strong>504 网关超时</strong> (服务器端的操作有超时)</p>\n<h2 id=\"新method可以写的状态码\"><a href=\"#新method可以写的状态码\" class=\"headerlink\" title=\"新method可以写的状态码\"></a>新method可以写的状态码</h2><p>/*<br>    200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。<br>    201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。<br>    202 Accepted - [<em>]：表示一个请求已经进入后台排队（异步任务）<br>    204 NO CONTENT - [DELETE]：用户删除数据成功。<br>    400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。<br>    401 Unauthorized - [</em>]：表示用户没有权限（令牌、用户名、密码错误）。<br>    403 Forbidden - [<em>] 表示用户得到授权（与401错误相对），但是访问是被禁止的。<br>    404 NOT FOUND - [</em>]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。<br>    406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。<br>    410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。<br>    422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。<br>    500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。<br>*/<br>// “幂等性”指的是 1 次或 N 次的副作用(对系统造成的影响)相同，而不是返回结果相同，因此 GET 请求总是幂等的。<br>// 无论一个操作被执行一次还是多次，执行后的效果都相同。比如对某资源发送GET请求，如果访问一次和访问十次获得的数据一样，那么就说这个请求具有幂等性。</p>\n<h2 id=\"http-methods\"><a href=\"#http-methods\" class=\"headerlink\" title=\"http methods\"></a>http methods</h2><h4 id=\"1-传统methods\"><a href=\"#1-传统methods\" class=\"headerlink\" title=\"1. 传统methods\"></a>1. 传统methods</h4><p>get获取服务器数据<br>post向服务器提交数据</p>\n<h4 id=\"2-现在的methods\"><a href=\"#2-现在的methods\" class=\"headerlink\" title=\"2. 现在的methods\"></a>2. 现在的methods</h4><p>点击链接：<a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\">restful api 的设计方法</a><br>（1）get获取服务器数据 ()<br>（2）head 和get类似，但服务器在响应中只返回头部，不返回实体的主体部分，这就允许客户端在没获取资源时对资源首部进行检查<br>（3）post新建数据 (新建blog)<br>（4）patch/put更新数据 （更新blog）<br>patch:局部更新资源，比如只更新某一字段 put：完整更新资源，对带宽会有影响  <a href=\"https://blog.csdn.net/varyall/article/details/80895945\">https://blog.csdn.net/varyall/article/details/80895945</a><br>（5） delete删除数据 （删除blog）<br>（6）options 获取信息，关于资源的哪些属性是客户端可以修改的的。</p>\n<h2 id=\"restfulApi\"><a href=\"#restfulApi\" class=\"headerlink\" title=\"restfulApi\"></a>restfulApi</h2><p><strong>restfulApi 是一种新的api设计方法。</strong></p>\n<h4 id=\"1-概念：\"><a href=\"#1-概念：\" class=\"headerlink\" title=\"1. 概念：\"></a>1. 概念：</h4><p>RESTful API 就是REST风格的API。现在终端平台多样，移动、平板、PC等许多媒介向服务端发送请求后，如果不适用RESTful API，需要为每个平台的数据请求定义相应的返回格式，以适应前端显示。但是RESTful API 要求前端以一种预定义的语法格式发送请求，那么服务端就只需要定义一个统一的响应接口，不必像之前那样解析各色各式的请求。</p>\n<h4 id=\"2-restfulapi的设计\"><a href=\"#2-restfulapi的设计\" class=\"headerlink\" title=\"2. restfulapi的设计\"></a>2. restfulapi的设计</h4><p>（1）传统API 把每个url当做一个功能<br>（2）restful api 把每个url当做一个唯一的资源(^o^)/~<br>就比如获取博客和更新博客 /api/blog/create 创建博客 /api/blog/update?blog=100 更新博客 这是一种功能<br>// 而新的restfulapi，获取博客、更新博客、创建博客，都可以用/api/blog去表示，唯一不同的是method，这是一种资源集合<br>（3）在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p>URI：Uniform Resource Identifier，统一资源标识符<br>URL：Uniform Resource Location统一资源定位符 URL是URI的子集。<br>点击链接：<a href=\"https://www.zhihu.com/question/21950864\">URI 和 URL</a></p>\n<h4 id=\"3-如何把每个url设计成一个资源？\"><a href=\"#3-如何把每个url设计成一个资源？\" class=\"headerlink\" title=\"3. 如何把每个url设计成一个资源？\"></a>3. 如何把每个url设计成一个资源？</h4><h6 id=\"（1）不使用url参数-，即问号后面的部分，然后做一个url的唯一标识\"><a href=\"#（1）不使用url参数-，即问号后面的部分，然后做一个url的唯一标识\" class=\"headerlink\" title=\"（1）不使用url参数 ，即问号后面的部分，然后做一个url的唯一标识\"></a>（1）不使用url参数 ，即问号后面的部分，然后做一个url的唯一标识</h6><p>传统： /api/list?pageIndex=2<br>restful api: /api/list/2</p>\n<h6 id=\"（2）使用method表示操作类型\"><a href=\"#（2）使用method表示操作类型\" class=\"headerlink\" title=\"（2）使用method表示操作类型\"></a>（2）使用method表示操作类型</h6><p><strong>传统：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post: /api/blog/create 创建</span><br><span class=\"line\">post: /api/blog/update?blog=100 更新</span><br><span class=\"line\">get:  /api/blog/get?blog=100 获取</span><br></pre></td></tr></table></figure>\n<p><strong>restful api：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post: /api/blog method:post</span><br><span class=\"line\">patch: /api/blog/100 method:patch/put</span><br><span class=\"line\">delete: /api/blog/100 method:delete</span><br></pre></td></tr></table></figure>\n<p>下面以动物园为例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /zoos：列出所有动物园  /api/zoos get</span><br><span class=\"line\">POST /zoos：新建一个动物园 /api/zoos post</span><br><span class=\"line\">GET /zoos/ID：获取某个指定动物园的信息 /api/zoos/ID get</span><br><span class=\"line\">PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） /api/zoos/ID put</span><br><span class=\"line\">PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） /api/zoos/ID patch</span><br><span class=\"line\">DELETE /zoos/ID：删除某个动物园 /api/zoos/ID patch delete</span><br><span class=\"line\">GET /zoos/ID/animals：列出某个指定动物园的所有动物 /api/zoos/ID/animals get</span><br><span class=\"line\">DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 /api/zoos/ID/animals/ID delete</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-headers\"><a href=\"#http-headers\" class=\"headerlink\" title=\"http headers\"></a>http headers</h2><h4 id=\"1-常见的request-headers（客户端像服务端发送的）\"><a href=\"#1-常见的request-headers（客户端像服务端发送的）\" class=\"headerlink\" title=\"1. 常见的request headers（客户端像服务端发送的）\"></a>1. 常见的request headers（客户端像服务端发送的）</h4><p>Accept: image/avif,image/webp,image/apng,text/html<br>浏览器可接受的数据格式</p>\n<p>Accept-Encoding: gzip, deflate, br<br>浏览器可接受的压缩算法</p>\n<p>Accept-Language: zh-CN,zh;q=0.9<br>浏览器可接受的语言</p>\n<p>Connection: keep-alive<br>连接方式<br>keep-alive：一次tcp连接可以重复使用</p>\n<p>Cookie: BIDUPSID=8B5F551B8E92D363D2BF09A17F1787F0; BAIDUID=5ccc19b28fd87ed0af236b203e83021a<br>什么是cookie：<br>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息 [1]  。</p>\n<p>Host: m.baidu.com<br>域名</p>\n<p>Content-type: application/json text-plain<br>客户端像服务端请求时，告诉服务端我发送数据的格式，一般只有post请求有，get是获取数据一般没有</p>\n<p>User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.193 Mobile Safari/537.36<br>浏览器信息</p>\n<p>Cache-Control</p>\n<h4 id=\"2-常见的response-headers（服务端像客户端返回的）\"><a href=\"#2-常见的response-headers（服务端像客户端返回的）\" class=\"headerlink\" title=\"2. 常见的response headers（服务端像客户端返回的）\"></a>2. 常见的response headers（服务端像客户端返回的）</h4><p>连接方式      Connection: keep-alive<br>返回数据的大小 Content-Length: 0<br>返回的数据的格式 Content-Type: text/plain; charset=utf-8<br>返回的数据的压缩算法 Content-Encoding<br>服务端改cookie的时候，需要发送 Set-Cookie: __bsi=10004501327375333328_00_32_N_R_10_0303_c02f_Y; max-age=3600; domain=m.baidu.com; path=/</p>\n<h4 id=\"3-缓存相关的headers\"><a href=\"#3-缓存相关的headers\" class=\"headerlink\" title=\"3. 缓存相关的headers\"></a>3. 缓存相关的headers</h4><p>cache-control （响应头，缓存时间）<br>expires (响应头中，已被cache-control代替，有这个属性和cache-control一起兼容写法的情况)<br>last-modified（响应头，资源的最后修改时间）<br> if-modified-since （请求头，协商缓存时浏览器再次请求会带着这个值，这个值和响应头的laast-modified相同）<br>etag （资源的唯一标识）<br>if-none-match (请求头，值和响应头的etag相同，协商缓存中的唯一标识)</p>\n<p><strong>header也可以自定义,axios插件就可以自定义header</strong><br>除了以上之外，可以自定义header，如果在客户端自定义在request中加，如果在服务端中自定义要后端在response中加<br><strong>常用场景：</strong>如服务端需要前端加上一个验证header做非法请求的验证</p>\n<h2 id=\"总结一下restful-api的设计模式\"><a href=\"#总结一下restful-api的设计模式\" class=\"headerlink\" title=\"总结一下restful api的设计模式\"></a>总结一下restful api的设计模式</h2><p>1.协议遵守https协议<br>2.api应该有单独域名<br>3.加上版本号<br>4.由于restfulapi中url表示一种资源的集合，而不再是一个功能一个url，所以网址中不能有动词，应该全是名词，且与数据库的表名一一对应，也由于是一种集合，所以api的名词尽量为复数<br>5.用http动词去表示资源的具体操作类型，如putpatchpostgetdelete增删改查等<br>6.如果涉及分页这种返回结果相当多的情况，api也可以提供一些参数，如?limit=10&amp;page=2<br>7.有单独的状态码<br>8.4xx错误时要返回出错信息，用统一的error作为键值<br>9.返回结果应符合规范<br>    GET /collection：返回资源对象的列表（数组）<br>    GET /collection/resource：返回单个资源对象<br>    POST /collection：返回新生成的资源对象<br>    PUT /collection/resource：返回完整的资源对象<br>    PATCH /collection/resource：返回完整的资源对象<br>    DELETE /collection/resource：返回一个空文档<br>10.Hypermedia API 返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p>\n<h2 id=\"http缓存-见有道云\"><a href=\"#http缓存-见有道云\" class=\"headerlink\" title=\"http缓存(见有道云)\"></a>http缓存(见有道云)</h2><h4 id=\"1-什么是缓存？\"><a href=\"#1-什么是缓存？\" class=\"headerlink\" title=\"1. 什么是缓存？\"></a>1. 什么是缓存？</h4><p>网页第二次访问时，有相同资源可以不用重新请求一遍。</p>\n<h4 id=\"2-为什么需要缓存\"><a href=\"#2-为什么需要缓存\" class=\"headerlink\" title=\"2. 为什么需要缓存\"></a>2. 为什么需要缓存</h4><p>为了让页面加载更快，网络请求加载相比cpu计算等等会比较慢，所以要尽量减少网络请求的数量和体积，可以让加载更快一些</p>\n<h4 id=\"3-哪些资源可以被缓存-——-静态资源（js-css-img）\"><a href=\"#3-哪些资源可以被缓存-——-静态资源（js-css-img）\" class=\"headerlink\" title=\"3. 哪些资源可以被缓存 —— 静态资源（js css img）\"></a>3. 哪些资源可以被缓存 —— 静态资源（js css img）</h4><p>html一般是不被缓存的，网页的业务数据（比如留言板列表、博客列表）一般也不能被缓存，因为有可能随时会更新。</p>\n<h4 id=\"2-http缓存策略-见有道云\"><a href=\"#2-http缓存策略-见有道云\" class=\"headerlink\" title=\"2. http缓存策略(见有道云)\"></a>2. http缓存策略(见有道云)</h4><h6 id=\"（1）强制缓存-cache-control\"><a href=\"#（1）强制缓存-cache-control\" class=\"headerlink\" title=\"（1）强制缓存 cache-control\"></a>（1）强制缓存 cache-control</h6><p>比如请求一个js资源<br>浏览器初次请求服务器，服务器返回资源和cache-control，若服务端感觉这个资源可以被缓存，则加入cache-control（在response-headers中，因为在响应头中，所以客户端无法控制，服务端控制）<br>如：cache-control：max-age=5184000 单位为秒<br>浏览器再次请求时，之前服务端的cache-control本地缓存会缓存下js的内容，如果cache-control没过期，浏览器就请求本地缓存，不通过网络，由本地缓存返回资源。</p>\n<h6 id=\"（2）协商缓存\"><a href=\"#（2）协商缓存\" class=\"headerlink\" title=\"（2）协商缓存\"></a>（2）协商缓存</h6><p>服务端去判断客户端资源是否和服务端一致，一致则返回304（服务端判断客户端资源未改动），否则返回200和最新的资源。<br>浏览器初次请求，服务端返回资源和资源标识给浏览器。浏览器再次请求会带上资源标识，服务端判断该资源标识的资源是否和服务端最新资源一致，则返回304，否则返回新资源和新资源标识。<br>资源标识：在response-header中（因为是服务端返回的呗）<br>last-Modified 资源的最后修改时间<br>Etag资源的唯一标识（一个字符串，类似人类指纹）</p>\n<h6 id=\"（3）刷新方式对缓存的影响\"><a href=\"#（3）刷新方式对缓存的影响\" class=\"headerlink\" title=\"（3）刷新方式对缓存的影响\"></a>（3）刷新方式对缓存的影响</h6><h2 id=\"https协议-见有道云\"><a href=\"#https协议-见有道云\" class=\"headerlink\" title=\"https协议(见有道云)\"></a>https协议(见有道云)</h2><h2 id=\"一、-http面试题\"><a href=\"#一、-http面试题\" class=\"headerlink\" title=\"一、 http面试题\"></a>一、 http面试题</h2><ol>\n<li>http常见状态码 </li>\n<li>http常见header </li>\n<li>什么是restful </li>\n<li>描述一下http缓存机制</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>const { get } = require(“http”);</p>\n<h2 id=\"状态码类型\"><a href=\"#状态码类型\" class=\"headerlink\" title=\"状态码类型\"></a>状态码类型</h2><p>  1xx 服务器收到了请求<br>  2xx请求成功 如200<br>  3xx重定向 如302<br>  4xx客户端错误<br>  5xx服务端错误，如500</p>\n<h2 id=\"常见状态码：\"><a href=\"#常见状态码：\" class=\"headerlink\" title=\"常见状态码：\"></a>常见状态码：</h2><p><strong>200 请求成功</strong><br><strong>301 永久重定向</strong><br>（配合location，浏览器记住了该网址返回了301，然后浏览器之后会永久自动处理到新的网站，如域名到期换新域名的情况）<br><strong>302 临时重定向</strong><br>（配合location，浏览器记住了该网址返回了302，但下次访问浏览器还是会访问到旧地址，如百度首页搜索的二级跳转、短网址等）<br>点击链接：<a href=\"https://www.bilibili.com/read/cv6711239/\">为什么百度需要二级跳转重定向？</a>简单说，是为了打点。<br>点击链接：<a href=\"https://www.zhihu.com/question/20790447\">短网址的作用</a> 简单说，微博字数那么长，再来个那么长的网址真心hold不住。<br><strong>304 资源未被修改</strong>（缓存了）请求过来的数据没有改变<br><strong>404 资源未找到</strong><br><strong>401 用户未授权</strong> 比如密码错误、用户名错误<br><strong>403 用户得到授权，但访问时禁止的</strong><br><strong>500 服务器错误</strong><br><strong>504 网关超时</strong> (服务器端的操作有超时)</p>\n<h2 id=\"新method可以写的状态码\"><a href=\"#新method可以写的状态码\" class=\"headerlink\" title=\"新method可以写的状态码\"></a>新method可以写的状态码</h2><p>/*<br>    200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。<br>    201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。<br>    202 Accepted - [<em>]：表示一个请求已经进入后台排队（异步任务）<br>    204 NO CONTENT - [DELETE]：用户删除数据成功。<br>    400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。<br>    401 Unauthorized - [</em>]：表示用户没有权限（令牌、用户名、密码错误）。<br>    403 Forbidden - [<em>] 表示用户得到授权（与401错误相对），但是访问是被禁止的。<br>    404 NOT FOUND - [</em>]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。<br>    406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。<br>    410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。<br>    422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。<br>    500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。<br>*/<br>// “幂等性”指的是 1 次或 N 次的副作用(对系统造成的影响)相同，而不是返回结果相同，因此 GET 请求总是幂等的。<br>// 无论一个操作被执行一次还是多次，执行后的效果都相同。比如对某资源发送GET请求，如果访问一次和访问十次获得的数据一样，那么就说这个请求具有幂等性。</p>\n<h2 id=\"http-methods\"><a href=\"#http-methods\" class=\"headerlink\" title=\"http methods\"></a>http methods</h2><h4 id=\"1-传统methods\"><a href=\"#1-传统methods\" class=\"headerlink\" title=\"1. 传统methods\"></a>1. 传统methods</h4><p>get获取服务器数据<br>post向服务器提交数据</p>\n<h4 id=\"2-现在的methods\"><a href=\"#2-现在的methods\" class=\"headerlink\" title=\"2. 现在的methods\"></a>2. 现在的methods</h4><p>点击链接：<a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\">restful api 的设计方法</a><br>（1）get获取服务器数据 ()<br>（2）head 和get类似，但服务器在响应中只返回头部，不返回实体的主体部分，这就允许客户端在没获取资源时对资源首部进行检查<br>（3）post新建数据 (新建blog)<br>（4）patch/put更新数据 （更新blog）<br>patch:局部更新资源，比如只更新某一字段 put：完整更新资源，对带宽会有影响  <a href=\"https://blog.csdn.net/varyall/article/details/80895945\">https://blog.csdn.net/varyall/article/details/80895945</a><br>（5） delete删除数据 （删除blog）<br>（6）options 获取信息，关于资源的哪些属性是客户端可以修改的的。</p>\n<h2 id=\"restfulApi\"><a href=\"#restfulApi\" class=\"headerlink\" title=\"restfulApi\"></a>restfulApi</h2><p><strong>restfulApi 是一种新的api设计方法。</strong></p>\n<h4 id=\"1-概念：\"><a href=\"#1-概念：\" class=\"headerlink\" title=\"1. 概念：\"></a>1. 概念：</h4><p>RESTful API 就是REST风格的API。现在终端平台多样，移动、平板、PC等许多媒介向服务端发送请求后，如果不适用RESTful API，需要为每个平台的数据请求定义相应的返回格式，以适应前端显示。但是RESTful API 要求前端以一种预定义的语法格式发送请求，那么服务端就只需要定义一个统一的响应接口，不必像之前那样解析各色各式的请求。</p>\n<h4 id=\"2-restfulapi的设计\"><a href=\"#2-restfulapi的设计\" class=\"headerlink\" title=\"2. restfulapi的设计\"></a>2. restfulapi的设计</h4><p>（1）传统API 把每个url当做一个功能<br>（2）restful api 把每个url当做一个唯一的资源(^o^)/~<br>就比如获取博客和更新博客 /api/blog/create 创建博客 /api/blog/update?blog=100 更新博客 这是一种功能<br>// 而新的restfulapi，获取博客、更新博客、创建博客，都可以用/api/blog去表示，唯一不同的是method，这是一种资源集合<br>（3）在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p>URI：Uniform Resource Identifier，统一资源标识符<br>URL：Uniform Resource Location统一资源定位符 URL是URI的子集。<br>点击链接：<a href=\"https://www.zhihu.com/question/21950864\">URI 和 URL</a></p>\n<h4 id=\"3-如何把每个url设计成一个资源？\"><a href=\"#3-如何把每个url设计成一个资源？\" class=\"headerlink\" title=\"3. 如何把每个url设计成一个资源？\"></a>3. 如何把每个url设计成一个资源？</h4><h6 id=\"（1）不使用url参数-，即问号后面的部分，然后做一个url的唯一标识\"><a href=\"#（1）不使用url参数-，即问号后面的部分，然后做一个url的唯一标识\" class=\"headerlink\" title=\"（1）不使用url参数 ，即问号后面的部分，然后做一个url的唯一标识\"></a>（1）不使用url参数 ，即问号后面的部分，然后做一个url的唯一标识</h6><p>传统： /api/list?pageIndex=2<br>restful api: /api/list/2</p>\n<h6 id=\"（2）使用method表示操作类型\"><a href=\"#（2）使用method表示操作类型\" class=\"headerlink\" title=\"（2）使用method表示操作类型\"></a>（2）使用method表示操作类型</h6><p><strong>传统：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post: /api/blog/create 创建</span><br><span class=\"line\">post: /api/blog/update?blog=100 更新</span><br><span class=\"line\">get:  /api/blog/get?blog=100 获取</span><br></pre></td></tr></table></figure>\n<p><strong>restful api：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post: /api/blog method:post</span><br><span class=\"line\">patch: /api/blog/100 method:patch/put</span><br><span class=\"line\">delete: /api/blog/100 method:delete</span><br></pre></td></tr></table></figure>\n<p>下面以动物园为例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /zoos：列出所有动物园  /api/zoos get</span><br><span class=\"line\">POST /zoos：新建一个动物园 /api/zoos post</span><br><span class=\"line\">GET /zoos/ID：获取某个指定动物园的信息 /api/zoos/ID get</span><br><span class=\"line\">PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） /api/zoos/ID put</span><br><span class=\"line\">PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） /api/zoos/ID patch</span><br><span class=\"line\">DELETE /zoos/ID：删除某个动物园 /api/zoos/ID patch delete</span><br><span class=\"line\">GET /zoos/ID/animals：列出某个指定动物园的所有动物 /api/zoos/ID/animals get</span><br><span class=\"line\">DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 /api/zoos/ID/animals/ID delete</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-headers\"><a href=\"#http-headers\" class=\"headerlink\" title=\"http headers\"></a>http headers</h2><h4 id=\"1-常见的request-headers（客户端像服务端发送的）\"><a href=\"#1-常见的request-headers（客户端像服务端发送的）\" class=\"headerlink\" title=\"1. 常见的request headers（客户端像服务端发送的）\"></a>1. 常见的request headers（客户端像服务端发送的）</h4><p>Accept: image/avif,image/webp,image/apng,text/html<br>浏览器可接受的数据格式</p>\n<p>Accept-Encoding: gzip, deflate, br<br>浏览器可接受的压缩算法</p>\n<p>Accept-Language: zh-CN,zh;q=0.9<br>浏览器可接受的语言</p>\n<p>Connection: keep-alive<br>连接方式<br>keep-alive：一次tcp连接可以重复使用</p>\n<p>Cookie: BIDUPSID=8B5F551B8E92D363D2BF09A17F1787F0; BAIDUID=5ccc19b28fd87ed0af236b203e83021a<br>什么是cookie：<br>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息 [1]  。</p>\n<p>Host: m.baidu.com<br>域名</p>\n<p>Content-type: application/json text-plain<br>客户端像服务端请求时，告诉服务端我发送数据的格式，一般只有post请求有，get是获取数据一般没有</p>\n<p>User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.193 Mobile Safari/537.36<br>浏览器信息</p>\n<p>Cache-Control</p>\n<h4 id=\"2-常见的response-headers（服务端像客户端返回的）\"><a href=\"#2-常见的response-headers（服务端像客户端返回的）\" class=\"headerlink\" title=\"2. 常见的response headers（服务端像客户端返回的）\"></a>2. 常见的response headers（服务端像客户端返回的）</h4><p>连接方式      Connection: keep-alive<br>返回数据的大小 Content-Length: 0<br>返回的数据的格式 Content-Type: text/plain; charset=utf-8<br>返回的数据的压缩算法 Content-Encoding<br>服务端改cookie的时候，需要发送 Set-Cookie: __bsi=10004501327375333328_00_32_N_R_10_0303_c02f_Y; max-age=3600; domain=m.baidu.com; path=/</p>\n<h4 id=\"3-缓存相关的headers\"><a href=\"#3-缓存相关的headers\" class=\"headerlink\" title=\"3. 缓存相关的headers\"></a>3. 缓存相关的headers</h4><p>cache-control （响应头，缓存时间）<br>expires (响应头中，已被cache-control代替，有这个属性和cache-control一起兼容写法的情况)<br>last-modified（响应头，资源的最后修改时间）<br> if-modified-since （请求头，协商缓存时浏览器再次请求会带着这个值，这个值和响应头的laast-modified相同）<br>etag （资源的唯一标识）<br>if-none-match (请求头，值和响应头的etag相同，协商缓存中的唯一标识)</p>\n<p><strong>header也可以自定义,axios插件就可以自定义header</strong><br>除了以上之外，可以自定义header，如果在客户端自定义在request中加，如果在服务端中自定义要后端在response中加<br><strong>常用场景：</strong>如服务端需要前端加上一个验证header做非法请求的验证</p>\n<h2 id=\"总结一下restful-api的设计模式\"><a href=\"#总结一下restful-api的设计模式\" class=\"headerlink\" title=\"总结一下restful api的设计模式\"></a>总结一下restful api的设计模式</h2><p>1.协议遵守https协议<br>2.api应该有单独域名<br>3.加上版本号<br>4.由于restfulapi中url表示一种资源的集合，而不再是一个功能一个url，所以网址中不能有动词，应该全是名词，且与数据库的表名一一对应，也由于是一种集合，所以api的名词尽量为复数<br>5.用http动词去表示资源的具体操作类型，如putpatchpostgetdelete增删改查等<br>6.如果涉及分页这种返回结果相当多的情况，api也可以提供一些参数，如?limit=10&amp;page=2<br>7.有单独的状态码<br>8.4xx错误时要返回出错信息，用统一的error作为键值<br>9.返回结果应符合规范<br>    GET /collection：返回资源对象的列表（数组）<br>    GET /collection/resource：返回单个资源对象<br>    POST /collection：返回新生成的资源对象<br>    PUT /collection/resource：返回完整的资源对象<br>    PATCH /collection/resource：返回完整的资源对象<br>    DELETE /collection/resource：返回一个空文档<br>10.Hypermedia API 返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p>\n<h2 id=\"http缓存-见有道云\"><a href=\"#http缓存-见有道云\" class=\"headerlink\" title=\"http缓存(见有道云)\"></a>http缓存(见有道云)</h2><h4 id=\"1-什么是缓存？\"><a href=\"#1-什么是缓存？\" class=\"headerlink\" title=\"1. 什么是缓存？\"></a>1. 什么是缓存？</h4><p>网页第二次访问时，有相同资源可以不用重新请求一遍。</p>\n<h4 id=\"2-为什么需要缓存\"><a href=\"#2-为什么需要缓存\" class=\"headerlink\" title=\"2. 为什么需要缓存\"></a>2. 为什么需要缓存</h4><p>为了让页面加载更快，网络请求加载相比cpu计算等等会比较慢，所以要尽量减少网络请求的数量和体积，可以让加载更快一些</p>\n<h4 id=\"3-哪些资源可以被缓存-——-静态资源（js-css-img）\"><a href=\"#3-哪些资源可以被缓存-——-静态资源（js-css-img）\" class=\"headerlink\" title=\"3. 哪些资源可以被缓存 —— 静态资源（js css img）\"></a>3. 哪些资源可以被缓存 —— 静态资源（js css img）</h4><p>html一般是不被缓存的，网页的业务数据（比如留言板列表、博客列表）一般也不能被缓存，因为有可能随时会更新。</p>\n<h4 id=\"2-http缓存策略-见有道云\"><a href=\"#2-http缓存策略-见有道云\" class=\"headerlink\" title=\"2. http缓存策略(见有道云)\"></a>2. http缓存策略(见有道云)</h4><h6 id=\"（1）强制缓存-cache-control\"><a href=\"#（1）强制缓存-cache-control\" class=\"headerlink\" title=\"（1）强制缓存 cache-control\"></a>（1）强制缓存 cache-control</h6><p>比如请求一个js资源<br>浏览器初次请求服务器，服务器返回资源和cache-control，若服务端感觉这个资源可以被缓存，则加入cache-control（在response-headers中，因为在响应头中，所以客户端无法控制，服务端控制）<br>如：cache-control：max-age=5184000 单位为秒<br>浏览器再次请求时，之前服务端的cache-control本地缓存会缓存下js的内容，如果cache-control没过期，浏览器就请求本地缓存，不通过网络，由本地缓存返回资源。</p>\n<h6 id=\"（2）协商缓存\"><a href=\"#（2）协商缓存\" class=\"headerlink\" title=\"（2）协商缓存\"></a>（2）协商缓存</h6><p>服务端去判断客户端资源是否和服务端一致，一致则返回304（服务端判断客户端资源未改动），否则返回200和最新的资源。<br>浏览器初次请求，服务端返回资源和资源标识给浏览器。浏览器再次请求会带上资源标识，服务端判断该资源标识的资源是否和服务端最新资源一致，则返回304，否则返回新资源和新资源标识。<br>资源标识：在response-header中（因为是服务端返回的呗）<br>last-Modified 资源的最后修改时间<br>Etag资源的唯一标识（一个字符串，类似人类指纹）</p>\n<h6 id=\"（3）刷新方式对缓存的影响\"><a href=\"#（3）刷新方式对缓存的影响\" class=\"headerlink\" title=\"（3）刷新方式对缓存的影响\"></a>（3）刷新方式对缓存的影响</h6><h2 id=\"https协议-见有道云\"><a href=\"#https协议-见有道云\" class=\"headerlink\" title=\"https协议(见有道云)\"></a>https协议(见有道云)</h2><h2 id=\"一、-http面试题\"><a href=\"#一、-http面试题\" class=\"headerlink\" title=\"一、 http面试题\"></a>一、 http面试题</h2><ol>\n<li>http常见状态码 </li>\n<li>http常见header </li>\n<li>什么是restful </li>\n<li>描述一下http缓存机制</li>\n</ol>\n"},{"title":"【第9-1章】http缓存策略","date":"2019-04-14T04:23:21.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n懒得重写了，直接从笔记截图过来。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-e1623a60f5bc7ddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/cxy/js/js-http11.md","raw":"---\ntitle: '【第9-1章】http缓存策略'\ndate: 2019-04-14 12:23:21\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n懒得重写了，直接从笔记截图过来。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-e1623a60f5bc7ddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"cxy/js/js-http11","published":1,"updated":"2023-01-25T20:46:33.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifj000hkdwibm3xejhv","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>懒得重写了，直接从笔记截图过来。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e1623a60f5bc7ddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>懒得重写了，直接从笔记截图过来。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-e1623a60f5bc7ddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n"},{"title":"【第9-2章】http协议","date":"2019-04-14T04:23:21.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n懒得重写了，直接从笔记截图过来。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-c76428754e823238.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/cxy/js/js-http22.md","raw":"---\ntitle: '【第9-2章】http协议'\ndate: 2019-04-14 12:23:21\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n懒得重写了，直接从笔记截图过来。\n![image.png](https://upload-images.jianshu.io/upload_images/20892169-c76428754e823238.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"cxy/js/js-http22","published":1,"updated":"2023-01-25T20:46:27.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifj000kkdwib0a4db11","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>懒得重写了，直接从笔记截图过来。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c76428754e823238.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>懒得重写了，直接从笔记截图过来。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c76428754e823238.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n"},{"title":"【第1章】变量类型和计算","date":"2019-04-03T05:03:15.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 一、值类型和引用类型\n#### 1.js的类型一共六种\n数字（number）、字符串（string）、布尔值（boolean）、undefined、null、对象（Object）。 \n\n**其中对象类型包括**：数组（Array）、函数（Function）\n\n**还有两个特殊的对象**：正则（RegExp）和日期（Date）\n\n**值类型**: number、string、boolean、undefined\n\n**引用类型**: null、object(array function regexp date)\n\n**新类型**：BigInt 是一种内置对象，它提供了一种方法来表示大于 253 - 1 的整数。\n\n**BigInt和Number的区别**：不能用于 Math 对象中的方法；不能和任何 Number 实例混合运算，两者必须转换成同一种类型。在两种类型来回转换时要小心，因为 BigInt 变量在转换成 Number 变量时可能会丢失精度。\n\n#### 2. 深入分析值类型和引用类型在内存中的存储方式\n**值类型和引用类型有什么区别**\n值类型在栈中存储，引用类型在堆中存储，值类型赋值多少就是多少，引用类型会被指针影响。\n```javascript\nlet a = {a:1} \nlet b = a\nb.a // 1\n\nb.a = 2 \na.a // 2\n```\n#### 3. typeof能判断那些类型？\ntypeof返回结果为字符串\n\n```javascript\nlet a = 1\nlet b = '1'\nlet c\nlet d = {}\nlet e = Symbol('a')\ntypeof a // number\ntypeof b // string\ntypeof c // undefined\ntypeof d // object\ntypeof Array // function 构造函数\ntypeof Object // function 构造函数\ntypeof Symbol // symbol\n// 六种数据类型和两种特殊类型，object内包括function和array，\n// const不能定义引用类型\n// typeof能判断的数据类型只有number string undefined object function，无法判断null，array，regexp，date，这几个均为object\n```\n\n#### 4. 何时使用===何时使用==？\n除了 == null之外，全部用 === \n\n先说 \"===\"，这个比较简单。下面的规则用来判断两个值是否===相等：\n\n1、如果类型不同，就不相等\n\n2、如果两个都是数值，并且是同一个值，那么[相等]；(！例外)的是，如果其中至少一个是NaN，那么[不相等]。（判断一个值是否是NaN，只能用isNaN()来判断）\n\n3、如果两个都是字符串，每个位置的字符都一样，那么相等；否则不相等 。\n\n4、如果两个值都是true，或者都是false，那么相等。\n\n5、如果两个值都引用同一个对象或函数，那么相等；否则不相等。\n\n6、如果两个值都是null，或者都是undefined，那么相等。\n\n再说 \"==\"\n\n如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：\n\na、如果一个是null、一个是undefined，那么相等。\n\nb、如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。\n\nc、如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。像-1既不等于false也不等于true，2既不等于false也不等于true\n2 > true, -1 < false 都是成立的\n\nd、如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 js核心内置类，会尝试valueOf先于toString;\n\n    toString() 将变量转换为字符串\n    valueOf() 取变量的真实值\n\n```javascript\n    let str = \"abc\"\n    let num = 123\n    let obj1 = {a:1}\n    let obj2 = {a:1}\n```\ne、任何其他组合，都不相等。\n```javascript\n    // 几个最好记下来的点：\n    NaN == NaN //false\n    undefined == null //true\n    undefined === null // false\n    100 == '100' //true\n    0 == '' // true\n    0 == false // true\n    false == '' // true\n    '' == null // false\n    '' == undefined // false\n\n    let a = {}\n    b = a\n    a === b\n\n    let fun = function() {}\n    fun1 = fun\n    fun === fun1\n```\n#### 5. 手写深拷贝:递归,\n什么是深拷贝:浅拷贝如果遇到的是一个引用类型，那么拷贝的实际上是变量的地址，更改的时候会更改拷贝的原变量，深拷贝则会生成一个新地址\n方法1：\n```javascript\nJSON.parse(JSON.stringify());\n```\n方法2：\n```javascript\nfunction clone(target) {\n    if(typeof target === 'object') {\n        let cloneTarget = Array.isArray(target) ? [] : {}\n        for(const key in target) {\n            cloneTarget[key] = clone(target[key])\n        }\n        return cloneTarget\n    } else {\n        return target\n    }\n}\n```\n改良\n```javascript\nfunction clone(target, map = new Map()) {\n    if (typeof target === 'object') {\n        let cloneTarget = Array.isArray(target) ? [] : {};\n        if (map.get(target)) {\n            // map可用对象做键值，存储键值为实际值，value为虚设，如果遇到子节点和父节点是一个值，则直接将父节点值返回。\n            return map.get(target);\n        }\n        map.set(target, cloneTarget);\n        for (const key in target) {\n            cloneTarget[key] = clone(target[key], map);\n        }\n        return cloneTarget;\n    } else {\n        return target;\n    }\n};\n```\n#### 手写isEquals()函数\n```javascript\n// 5.2 手写isEquals()函数\nfunction isObject(obj) {\n  return typeof obj === \"object\" && obj !== null\n}\nfunction isEqual(obj1,obj2){\n    if(!isObject(obj1) || !isObject(obj2)){\n        return obj1 === obj2\n    }\n    if(obj1 === obj2) {\n        return true\n    }\n    const obj1Keys = Object.keys(obj1).length\n    const obj2Keys = Object.keys(obj2).length\n    if (obj1Keys !== obj2Keys) {\n        return false\n    }\n    for (let i in obj1) {\n        const res = isEqual(obj1[i],obj2[i])\n        if(!res) {\n            return false\n        }\n    }\n    return true\n} \n```\n#### 6. truly变量和falsely变量\n两步非运算为true，则为truly变量，两步非运算为false，则为falsely变量，即\n```javascript\n!!a === true !!a === false\n```\n以下为falsely变量，其他都为truly变量\n```javascript\n!!0 === false\n!!NaN === false\n!!'' === false\n!!null === false\n!!undefined === false\n!!false === false\n```\nif判断时的truly变量和falsely变量，若为falsely变量直接无法走入if循环\n\n#### 强制类型转换和隐式类型转换\n(1) 强制类型转换parseInt()和parseFloat()\n```javascript\nparseInt('1a') // 1\nparseInt('a1') // NaN\nparseFloat('1.5a') // 1.5\nparseFloat('a1.5') // NaN\n```\n(2) 隐式类型转换 if 逻辑运算 == +、*拼接字符串\n//字符串和数字相加会转为字符串，字符串和数字相乘/除/减会转为数字\n```javascript\n'1' * 1 // 1\n'1' + 1 // 11\n'1' + '2' // '12'\n'1' + 2 + '3' // '123'\n1 + '2' // 12\n'2' - 1 // 1\n2 - '1' // 1\n```\n\n#### 补：\nhasOwnProperty:对象方法，返回一个boolean，判断是否拥有此对象，**且不是继承来的对象，也就是沿着原型链上查找到的。**\n\n**map weakmap set weakset 区别:**\n1.weakset值只能是对象\n2.weakset是弱引用，即如果其他对象都不引用该对象，那么垃圾回收机制会立即回收。\nweakmap键只能是对象，值可以任意。WeakMap的键名所指向的对象，不计入垃圾回收机制。WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。\nset方法：has() add() delete() clear() entries() keys() values() size \nmap方法：add() delete() set(key,value) get()（增删改查） entries() keys() values() size\n```javascript\nlet set = new Set(['red', 'green', 'blue']);\nfor (let item of set.keys()) {\n    console.log(item);\n}\n```\nsettimeout(fun,ms,arg1,arg2...argN) 第三个-最后一个参数会作为传递参数传给fun\n","source":"_posts/cxy/js/js-let.md","raw":"---\ntitle: '【第1章】变量类型和计算'\ndate: 2019-04-03 13:03:15\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 一、值类型和引用类型\n#### 1.js的类型一共六种\n数字（number）、字符串（string）、布尔值（boolean）、undefined、null、对象（Object）。 \n\n**其中对象类型包括**：数组（Array）、函数（Function）\n\n**还有两个特殊的对象**：正则（RegExp）和日期（Date）\n\n**值类型**: number、string、boolean、undefined\n\n**引用类型**: null、object(array function regexp date)\n\n**新类型**：BigInt 是一种内置对象，它提供了一种方法来表示大于 253 - 1 的整数。\n\n**BigInt和Number的区别**：不能用于 Math 对象中的方法；不能和任何 Number 实例混合运算，两者必须转换成同一种类型。在两种类型来回转换时要小心，因为 BigInt 变量在转换成 Number 变量时可能会丢失精度。\n\n#### 2. 深入分析值类型和引用类型在内存中的存储方式\n**值类型和引用类型有什么区别**\n值类型在栈中存储，引用类型在堆中存储，值类型赋值多少就是多少，引用类型会被指针影响。\n```javascript\nlet a = {a:1} \nlet b = a\nb.a // 1\n\nb.a = 2 \na.a // 2\n```\n#### 3. typeof能判断那些类型？\ntypeof返回结果为字符串\n\n```javascript\nlet a = 1\nlet b = '1'\nlet c\nlet d = {}\nlet e = Symbol('a')\ntypeof a // number\ntypeof b // string\ntypeof c // undefined\ntypeof d // object\ntypeof Array // function 构造函数\ntypeof Object // function 构造函数\ntypeof Symbol // symbol\n// 六种数据类型和两种特殊类型，object内包括function和array，\n// const不能定义引用类型\n// typeof能判断的数据类型只有number string undefined object function，无法判断null，array，regexp，date，这几个均为object\n```\n\n#### 4. 何时使用===何时使用==？\n除了 == null之外，全部用 === \n\n先说 \"===\"，这个比较简单。下面的规则用来判断两个值是否===相等：\n\n1、如果类型不同，就不相等\n\n2、如果两个都是数值，并且是同一个值，那么[相等]；(！例外)的是，如果其中至少一个是NaN，那么[不相等]。（判断一个值是否是NaN，只能用isNaN()来判断）\n\n3、如果两个都是字符串，每个位置的字符都一样，那么相等；否则不相等 。\n\n4、如果两个值都是true，或者都是false，那么相等。\n\n5、如果两个值都引用同一个对象或函数，那么相等；否则不相等。\n\n6、如果两个值都是null，或者都是undefined，那么相等。\n\n再说 \"==\"\n\n如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：\n\na、如果一个是null、一个是undefined，那么相等。\n\nb、如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。\n\nc、如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。像-1既不等于false也不等于true，2既不等于false也不等于true\n2 > true, -1 < false 都是成立的\n\nd、如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 js核心内置类，会尝试valueOf先于toString;\n\n    toString() 将变量转换为字符串\n    valueOf() 取变量的真实值\n\n```javascript\n    let str = \"abc\"\n    let num = 123\n    let obj1 = {a:1}\n    let obj2 = {a:1}\n```\ne、任何其他组合，都不相等。\n```javascript\n    // 几个最好记下来的点：\n    NaN == NaN //false\n    undefined == null //true\n    undefined === null // false\n    100 == '100' //true\n    0 == '' // true\n    0 == false // true\n    false == '' // true\n    '' == null // false\n    '' == undefined // false\n\n    let a = {}\n    b = a\n    a === b\n\n    let fun = function() {}\n    fun1 = fun\n    fun === fun1\n```\n#### 5. 手写深拷贝:递归,\n什么是深拷贝:浅拷贝如果遇到的是一个引用类型，那么拷贝的实际上是变量的地址，更改的时候会更改拷贝的原变量，深拷贝则会生成一个新地址\n方法1：\n```javascript\nJSON.parse(JSON.stringify());\n```\n方法2：\n```javascript\nfunction clone(target) {\n    if(typeof target === 'object') {\n        let cloneTarget = Array.isArray(target) ? [] : {}\n        for(const key in target) {\n            cloneTarget[key] = clone(target[key])\n        }\n        return cloneTarget\n    } else {\n        return target\n    }\n}\n```\n改良\n```javascript\nfunction clone(target, map = new Map()) {\n    if (typeof target === 'object') {\n        let cloneTarget = Array.isArray(target) ? [] : {};\n        if (map.get(target)) {\n            // map可用对象做键值，存储键值为实际值，value为虚设，如果遇到子节点和父节点是一个值，则直接将父节点值返回。\n            return map.get(target);\n        }\n        map.set(target, cloneTarget);\n        for (const key in target) {\n            cloneTarget[key] = clone(target[key], map);\n        }\n        return cloneTarget;\n    } else {\n        return target;\n    }\n};\n```\n#### 手写isEquals()函数\n```javascript\n// 5.2 手写isEquals()函数\nfunction isObject(obj) {\n  return typeof obj === \"object\" && obj !== null\n}\nfunction isEqual(obj1,obj2){\n    if(!isObject(obj1) || !isObject(obj2)){\n        return obj1 === obj2\n    }\n    if(obj1 === obj2) {\n        return true\n    }\n    const obj1Keys = Object.keys(obj1).length\n    const obj2Keys = Object.keys(obj2).length\n    if (obj1Keys !== obj2Keys) {\n        return false\n    }\n    for (let i in obj1) {\n        const res = isEqual(obj1[i],obj2[i])\n        if(!res) {\n            return false\n        }\n    }\n    return true\n} \n```\n#### 6. truly变量和falsely变量\n两步非运算为true，则为truly变量，两步非运算为false，则为falsely变量，即\n```javascript\n!!a === true !!a === false\n```\n以下为falsely变量，其他都为truly变量\n```javascript\n!!0 === false\n!!NaN === false\n!!'' === false\n!!null === false\n!!undefined === false\n!!false === false\n```\nif判断时的truly变量和falsely变量，若为falsely变量直接无法走入if循环\n\n#### 强制类型转换和隐式类型转换\n(1) 强制类型转换parseInt()和parseFloat()\n```javascript\nparseInt('1a') // 1\nparseInt('a1') // NaN\nparseFloat('1.5a') // 1.5\nparseFloat('a1.5') // NaN\n```\n(2) 隐式类型转换 if 逻辑运算 == +、*拼接字符串\n//字符串和数字相加会转为字符串，字符串和数字相乘/除/减会转为数字\n```javascript\n'1' * 1 // 1\n'1' + 1 // 11\n'1' + '2' // '12'\n'1' + 2 + '3' // '123'\n1 + '2' // 12\n'2' - 1 // 1\n2 - '1' // 1\n```\n\n#### 补：\nhasOwnProperty:对象方法，返回一个boolean，判断是否拥有此对象，**且不是继承来的对象，也就是沿着原型链上查找到的。**\n\n**map weakmap set weakset 区别:**\n1.weakset值只能是对象\n2.weakset是弱引用，即如果其他对象都不引用该对象，那么垃圾回收机制会立即回收。\nweakmap键只能是对象，值可以任意。WeakMap的键名所指向的对象，不计入垃圾回收机制。WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。\nset方法：has() add() delete() clear() entries() keys() values() size \nmap方法：add() delete() set(key,value) get()（增删改查） entries() keys() values() size\n```javascript\nlet set = new Set(['red', 'green', 'blue']);\nfor (let item of set.keys()) {\n    console.log(item);\n}\n```\nsettimeout(fun,ms,arg1,arg2...argN) 第三个-最后一个参数会作为传递参数传给fun\n","slug":"cxy/js/js-let","published":1,"updated":"2023-01-25T20:25:08.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifk000nkdwidlk170ro","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"一、值类型和引用类型\"><a href=\"#一、值类型和引用类型\" class=\"headerlink\" title=\"一、值类型和引用类型\"></a>一、值类型和引用类型</h2><h4 id=\"1-js的类型一共六种\"><a href=\"#1-js的类型一共六种\" class=\"headerlink\" title=\"1.js的类型一共六种\"></a>1.js的类型一共六种</h4><p>数字（number）、字符串（string）、布尔值（boolean）、undefined、null、对象（Object）。 </p>\n<p><strong>其中对象类型包括</strong>：数组（Array）、函数（Function）</p>\n<p><strong>还有两个特殊的对象</strong>：正则（RegExp）和日期（Date）</p>\n<p><strong>值类型</strong>: number、string、boolean、undefined</p>\n<p><strong>引用类型</strong>: null、object(array function regexp date)</p>\n<p><strong>新类型</strong>：BigInt 是一种内置对象，它提供了一种方法来表示大于 253 - 1 的整数。</p>\n<p><strong>BigInt和Number的区别</strong>：不能用于 Math 对象中的方法；不能和任何 Number 实例混合运算，两者必须转换成同一种类型。在两种类型来回转换时要小心，因为 BigInt 变量在转换成 Number 变量时可能会丢失精度。</p>\n<h4 id=\"2-深入分析值类型和引用类型在内存中的存储方式\"><a href=\"#2-深入分析值类型和引用类型在内存中的存储方式\" class=\"headerlink\" title=\"2. 深入分析值类型和引用类型在内存中的存储方式\"></a>2. 深入分析值类型和引用类型在内存中的存储方式</h4><p><strong>值类型和引用类型有什么区别</strong><br>值类型在栈中存储，引用类型在堆中存储，值类型赋值多少就是多少，引用类型会被指针影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a</span><br><span class=\"line\">b.<span class=\"property\">a</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">b.<span class=\"property\">a</span> = <span class=\"number\">2</span> </span><br><span class=\"line\">a.<span class=\"property\">a</span> <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-typeof能判断那些类型？\"><a href=\"#3-typeof能判断那些类型？\" class=\"headerlink\" title=\"3. typeof能判断那些类型？\"></a>3. typeof能判断那些类型？</h4><p>typeof返回结果为字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> e = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> b <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> c <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> d <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Array</span> <span class=\"comment\">// function 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Object</span> <span class=\"comment\">// function 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span> <span class=\"comment\">// symbol</span></span><br><span class=\"line\"><span class=\"comment\">// 六种数据类型和两种特殊类型，object内包括function和array，</span></span><br><span class=\"line\"><span class=\"comment\">// const不能定义引用类型</span></span><br><span class=\"line\"><span class=\"comment\">// typeof能判断的数据类型只有number string undefined object function，无法判断null，array，regexp，date，这几个均为object</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-何时使用-何时使用-？\"><a href=\"#4-何时使用-何时使用-？\" class=\"headerlink\" title=\"4. 何时使用===何时使用==？\"></a>4. 何时使用===何时使用==？</h4><p>除了 == null之外，全部用 === </p>\n<p>先说 “===”，这个比较简单。下面的规则用来判断两个值是否===相等：</p>\n<p>1、如果类型不同，就不相等</p>\n<p>2、如果两个都是数值，并且是同一个值，那么[相等]；(！例外)的是，如果其中至少一个是NaN，那么[不相等]。（判断一个值是否是NaN，只能用isNaN()来判断）</p>\n<p>3、如果两个都是字符串，每个位置的字符都一样，那么相等；否则不相等 。</p>\n<p>4、如果两个值都是true，或者都是false，那么相等。</p>\n<p>5、如果两个值都引用同一个对象或函数，那么相等；否则不相等。</p>\n<p>6、如果两个值都是null，或者都是undefined，那么相等。</p>\n<p>再说 “==”</p>\n<p>如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：</p>\n<p>a、如果一个是null、一个是undefined，那么相等。</p>\n<p>b、如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。</p>\n<p>c、如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。像-1既不等于false也不等于true，2既不等于false也不等于true<br>2 &gt; true, -1 &lt; false 都是成立的</p>\n<p>d、如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 js核心内置类，会尝试valueOf先于toString;</p>\n<pre><code>toString() 将变量转换为字符串\nvalueOf() 取变量的真实值\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>e、任何其他组合，都不相等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 几个最好记下来的点：</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> == <span class=\"title class_\">NaN</span> <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">null</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> === <span class=\"literal\">null</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"number\">100</span> == <span class=\"string\">&#x27;100&#x27;</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">false</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"literal\">null</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;&#125;</span><br><span class=\"line\">b = a</span><br><span class=\"line\">a === b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fun = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">fun1 = fun</span><br><span class=\"line\">fun === fun1</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-手写深拷贝-递归\"><a href=\"#5-手写深拷贝-递归\" class=\"headerlink\" title=\"5. 手写深拷贝:递归,\"></a>5. 手写深拷贝:递归,</h4><p>什么是深拷贝:浅拷贝如果遇到的是一个引用类型，那么拷贝的实际上是变量的地址，更改的时候会更改拷贝的原变量，深拷贝则会生成一个新地址<br>方法1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>());</span><br></pre></td></tr></table></figure>\n<p>方法2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clone</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> target === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cloneTarget = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(target) ? [] : &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">            cloneTarget[key] = <span class=\"title function_\">clone</span>(target[key])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cloneTarget</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改良</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clone</span>(<span class=\"params\">target, map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cloneTarget = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(target) ? [] : &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.<span class=\"title function_\">get</span>(target)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// map可用对象做键值，存储键值为实际值，value为虚设，如果遇到子节点和父节点是一个值，则直接将父节点值返回。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> map.<span class=\"title function_\">get</span>(target);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.<span class=\"title function_\">set</span>(target, cloneTarget);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">            cloneTarget[key] = <span class=\"title function_\">clone</span>(target[key], map);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"手写isEquals-函数\"><a href=\"#手写isEquals-函数\" class=\"headerlink\" title=\"手写isEquals()函数\"></a>手写isEquals()函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5.2 手写isEquals()函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isObject</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; obj !== <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isEqual</span>(<span class=\"params\">obj1,obj2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_\">isObject</span>(obj1) || !<span class=\"title function_\">isObject</span>(obj2))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj1 === obj2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj1 === obj2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj1Keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj1).<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj2Keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj2).<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj1Keys !== obj2Keys) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> obj1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = <span class=\"title function_\">isEqual</span>(obj1[i],obj2[i])</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!res) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h4 id=\"6-truly变量和falsely变量\"><a href=\"#6-truly变量和falsely变量\" class=\"headerlink\" title=\"6. truly变量和falsely变量\"></a>6. truly变量和falsely变量</h4><p>两步非运算为true，则为truly变量，两步非运算为false，则为falsely变量，即</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!a === <span class=\"literal\">true</span> !!a === <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>以下为falsely变量，其他都为truly变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!<span class=\"number\">0</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">!!<span class=\"title class_\">NaN</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">!!<span class=\"string\">&#x27;&#x27;</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">!!<span class=\"literal\">null</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">!!<span class=\"literal\">undefined</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">!!<span class=\"literal\">false</span> === <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>if判断时的truly变量和falsely变量，若为falsely变量直接无法走入if循环</p>\n<h4 id=\"强制类型转换和隐式类型转换\"><a href=\"#强制类型转换和隐式类型转换\" class=\"headerlink\" title=\"强制类型转换和隐式类型转换\"></a>强制类型转换和隐式类型转换</h4><p>(1) 强制类型转换parseInt()和parseFloat()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;1a&#x27;</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;a1&#x27;</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;1.5a&#x27;</span>) <span class=\"comment\">// 1.5</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;a1.5&#x27;</span>) <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>(2) 隐式类型转换 if 逻辑运算 == +、*拼接字符串<br>//字符串和数字相加会转为字符串，字符串和数字相乘/除/减会转为数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span> * <span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span> + <span class=\"number\">1</span> <span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span> + <span class=\"string\">&#x27;2&#x27;</span> <span class=\"comment\">// &#x27;12&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span> + <span class=\"number\">2</span> + <span class=\"string\">&#x27;3&#x27;</span> <span class=\"comment\">// &#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"string\">&#x27;2&#x27;</span> <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"string\">&#x27;2&#x27;</span> - <span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">2</span> - <span class=\"string\">&#x27;1&#x27;</span> <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"补：\"><a href=\"#补：\" class=\"headerlink\" title=\"补：\"></a>补：</h4><p>hasOwnProperty:对象方法，返回一个boolean，判断是否拥有此对象，<strong>且不是继承来的对象，也就是沿着原型链上查找到的。</strong></p>\n<p><strong>map weakmap set weakset 区别:</strong><br>1.weakset值只能是对象<br>2.weakset是弱引用，即如果其他对象都不引用该对象，那么垃圾回收机制会立即回收。<br>weakmap键只能是对象，值可以任意。WeakMap的键名所指向的对象，不计入垃圾回收机制。WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。<br>set方法：has() add() delete() clear() entries() keys() values() size<br>map方法：add() delete() set(key,value) get()（增删改查） entries() keys() values() size</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.<span class=\"title function_\">keys</span>()) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>settimeout(fun,ms,arg1,arg2…argN) 第三个-最后一个参数会作为传递参数传给fun</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"一、值类型和引用类型\"><a href=\"#一、值类型和引用类型\" class=\"headerlink\" title=\"一、值类型和引用类型\"></a>一、值类型和引用类型</h2><h4 id=\"1-js的类型一共六种\"><a href=\"#1-js的类型一共六种\" class=\"headerlink\" title=\"1.js的类型一共六种\"></a>1.js的类型一共六种</h4><p>数字（number）、字符串（string）、布尔值（boolean）、undefined、null、对象（Object）。 </p>\n<p><strong>其中对象类型包括</strong>：数组（Array）、函数（Function）</p>\n<p><strong>还有两个特殊的对象</strong>：正则（RegExp）和日期（Date）</p>\n<p><strong>值类型</strong>: number、string、boolean、undefined</p>\n<p><strong>引用类型</strong>: null、object(array function regexp date)</p>\n<p><strong>新类型</strong>：BigInt 是一种内置对象，它提供了一种方法来表示大于 253 - 1 的整数。</p>\n<p><strong>BigInt和Number的区别</strong>：不能用于 Math 对象中的方法；不能和任何 Number 实例混合运算，两者必须转换成同一种类型。在两种类型来回转换时要小心，因为 BigInt 变量在转换成 Number 变量时可能会丢失精度。</p>\n<h4 id=\"2-深入分析值类型和引用类型在内存中的存储方式\"><a href=\"#2-深入分析值类型和引用类型在内存中的存储方式\" class=\"headerlink\" title=\"2. 深入分析值类型和引用类型在内存中的存储方式\"></a>2. 深入分析值类型和引用类型在内存中的存储方式</h4><p><strong>值类型和引用类型有什么区别</strong><br>值类型在栈中存储，引用类型在堆中存储，值类型赋值多少就是多少，引用类型会被指针影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125; </span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a</span><br><span class=\"line\">b.<span class=\"property\">a</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">b.<span class=\"property\">a</span> = <span class=\"number\">2</span> </span><br><span class=\"line\">a.<span class=\"property\">a</span> <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-typeof能判断那些类型？\"><a href=\"#3-typeof能判断那些类型？\" class=\"headerlink\" title=\"3. typeof能判断那些类型？\"></a>3. typeof能判断那些类型？</h4><p>typeof返回结果为字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> e = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> b <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> c <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> d <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Array</span> <span class=\"comment\">// function 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Object</span> <span class=\"comment\">// function 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span> <span class=\"comment\">// symbol</span></span><br><span class=\"line\"><span class=\"comment\">// 六种数据类型和两种特殊类型，object内包括function和array，</span></span><br><span class=\"line\"><span class=\"comment\">// const不能定义引用类型</span></span><br><span class=\"line\"><span class=\"comment\">// typeof能判断的数据类型只有number string undefined object function，无法判断null，array，regexp，date，这几个均为object</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-何时使用-何时使用-？\"><a href=\"#4-何时使用-何时使用-？\" class=\"headerlink\" title=\"4. 何时使用===何时使用==？\"></a>4. 何时使用===何时使用==？</h4><p>除了 == null之外，全部用 === </p>\n<p>先说 “===”，这个比较简单。下面的规则用来判断两个值是否===相等：</p>\n<p>1、如果类型不同，就不相等</p>\n<p>2、如果两个都是数值，并且是同一个值，那么[相等]；(！例外)的是，如果其中至少一个是NaN，那么[不相等]。（判断一个值是否是NaN，只能用isNaN()来判断）</p>\n<p>3、如果两个都是字符串，每个位置的字符都一样，那么相等；否则不相等 。</p>\n<p>4、如果两个值都是true，或者都是false，那么相等。</p>\n<p>5、如果两个值都引用同一个对象或函数，那么相等；否则不相等。</p>\n<p>6、如果两个值都是null，或者都是undefined，那么相等。</p>\n<p>再说 “==”</p>\n<p>如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：</p>\n<p>a、如果一个是null、一个是undefined，那么相等。</p>\n<p>b、如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。</p>\n<p>c、如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。像-1既不等于false也不等于true，2既不等于false也不等于true<br>2 &gt; true, -1 &lt; false 都是成立的</p>\n<p>d、如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 js核心内置类，会尝试valueOf先于toString;</p>\n<pre><code>toString() 将变量转换为字符串\nvalueOf() 取变量的真实值\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>e、任何其他组合，都不相等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 几个最好记下来的点：</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> == <span class=\"title class_\">NaN</span> <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">null</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> === <span class=\"literal\">null</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"number\">100</span> == <span class=\"string\">&#x27;100&#x27;</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">false</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"literal\">null</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;&#125;</span><br><span class=\"line\">b = a</span><br><span class=\"line\">a === b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fun = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">fun1 = fun</span><br><span class=\"line\">fun === fun1</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-手写深拷贝-递归\"><a href=\"#5-手写深拷贝-递归\" class=\"headerlink\" title=\"5. 手写深拷贝:递归,\"></a>5. 手写深拷贝:递归,</h4><p>什么是深拷贝:浅拷贝如果遇到的是一个引用类型，那么拷贝的实际上是变量的地址，更改的时候会更改拷贝的原变量，深拷贝则会生成一个新地址<br>方法1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>());</span><br></pre></td></tr></table></figure>\n<p>方法2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clone</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> target === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cloneTarget = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(target) ? [] : &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">            cloneTarget[key] = <span class=\"title function_\">clone</span>(target[key])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cloneTarget</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改良</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clone</span>(<span class=\"params\">target, map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cloneTarget = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(target) ? [] : &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.<span class=\"title function_\">get</span>(target)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// map可用对象做键值，存储键值为实际值，value为虚设，如果遇到子节点和父节点是一个值，则直接将父节点值返回。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> map.<span class=\"title function_\">get</span>(target);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.<span class=\"title function_\">set</span>(target, cloneTarget);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">            cloneTarget[key] = <span class=\"title function_\">clone</span>(target[key], map);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"手写isEquals-函数\"><a href=\"#手写isEquals-函数\" class=\"headerlink\" title=\"手写isEquals()函数\"></a>手写isEquals()函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5.2 手写isEquals()函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isObject</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; obj !== <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isEqual</span>(<span class=\"params\">obj1,obj2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_\">isObject</span>(obj1) || !<span class=\"title function_\">isObject</span>(obj2))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj1 === obj2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj1 === obj2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj1Keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj1).<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj2Keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj2).<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj1Keys !== obj2Keys) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> obj1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = <span class=\"title function_\">isEqual</span>(obj1[i],obj2[i])</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!res) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h4 id=\"6-truly变量和falsely变量\"><a href=\"#6-truly变量和falsely变量\" class=\"headerlink\" title=\"6. truly变量和falsely变量\"></a>6. truly变量和falsely变量</h4><p>两步非运算为true，则为truly变量，两步非运算为false，则为falsely变量，即</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!a === <span class=\"literal\">true</span> !!a === <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>以下为falsely变量，其他都为truly变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!<span class=\"number\">0</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">!!<span class=\"title class_\">NaN</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">!!<span class=\"string\">&#x27;&#x27;</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">!!<span class=\"literal\">null</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">!!<span class=\"literal\">undefined</span> === <span class=\"literal\">false</span></span><br><span class=\"line\">!!<span class=\"literal\">false</span> === <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>if判断时的truly变量和falsely变量，若为falsely变量直接无法走入if循环</p>\n<h4 id=\"强制类型转换和隐式类型转换\"><a href=\"#强制类型转换和隐式类型转换\" class=\"headerlink\" title=\"强制类型转换和隐式类型转换\"></a>强制类型转换和隐式类型转换</h4><p>(1) 强制类型转换parseInt()和parseFloat()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;1a&#x27;</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;a1&#x27;</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;1.5a&#x27;</span>) <span class=\"comment\">// 1.5</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;a1.5&#x27;</span>) <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>(2) 隐式类型转换 if 逻辑运算 == +、*拼接字符串<br>//字符串和数字相加会转为字符串，字符串和数字相乘/除/减会转为数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span> * <span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span> + <span class=\"number\">1</span> <span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span> + <span class=\"string\">&#x27;2&#x27;</span> <span class=\"comment\">// &#x27;12&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span> + <span class=\"number\">2</span> + <span class=\"string\">&#x27;3&#x27;</span> <span class=\"comment\">// &#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"string\">&#x27;2&#x27;</span> <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"string\">&#x27;2&#x27;</span> - <span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">2</span> - <span class=\"string\">&#x27;1&#x27;</span> <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"补：\"><a href=\"#补：\" class=\"headerlink\" title=\"补：\"></a>补：</h4><p>hasOwnProperty:对象方法，返回一个boolean，判断是否拥有此对象，<strong>且不是继承来的对象，也就是沿着原型链上查找到的。</strong></p>\n<p><strong>map weakmap set weakset 区别:</strong><br>1.weakset值只能是对象<br>2.weakset是弱引用，即如果其他对象都不引用该对象，那么垃圾回收机制会立即回收。<br>weakmap键只能是对象，值可以任意。WeakMap的键名所指向的对象，不计入垃圾回收机制。WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。<br>set方法：has() add() delete() clear() entries() keys() values() size<br>map方法：add() delete() set(key,value) get()（增删改查） entries() keys() values() size</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.<span class=\"title function_\">keys</span>()) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>settimeout(fun,ms,arg1,arg2…argN) 第三个-最后一个参数会作为传递参数传给fun</p>\n"},{"title":"【第4章】同步和异步","date":"2019-04-06T05:20:03.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n## 单线程和异步\njs是单线程语言，只能同时做一件事情，两段js不能同时执行，.原因就是避免DOM渲染的冲突（都修改DOM就冲突了）\n浏览器和nodejs已经支持js启动进程 如 web server\njs和dom渲染共用一个县城，所以可以操作dom \n##异步为了解决什么问题？\n因为js是单线程，异步为了解决遇到等待时，等待过程中不可能像alert一样阻塞程序进行，因此所有的“等待情况”都需要异步。\n\n## 异步应用场景：\n定时任务：setTimeout、setInterval、\n网络请求：Ajax请求、动态<img>加载、\n事件绑定：图片加载如onload，不用等待onload完毕再去执行onload后面的代码\n\n## 回调地狱callback hell\n回调函数： 将一个函数作为参数传递给另个函数\n回调地狱用promise来解决\n```javascript\nfunction c() {}\n function a(function b(){\n     function c(function d(){\n \n     })\n}) // 代码看起来过于复杂混乱\n```\n再如请求太多的时候，回调函数套回调函数\n```javascript\n$.get(url1, (data1) => {\n    console.log(data1)\n    $.get(url2,(data2)=>{\n        console.log(data2)\n        $.get(url3, (data3)=>{\n            console.log(data3)\n        })\n    })\n}) \n```\n如果用promise去写，就会简洁很多。\n```javascript\nconst url1 = 'data1.json'\nconst url2 = 'data2.json'\nconst url3 = 'data3.json'\nfunction getData (url) {\n    return new Promise((resolve,reject)=>{\n        $.ajax({\n            url:'url',\n            success(data) {\n                resolve(data)\n            },\n            error(err){\n                reject(err)\n            }\n        })\n    })\n}\ngetData((url1).then(data1=>{\n\n}).then(data2=>{\n\n}).then(data3=>{\n\n}).catch(err=>{\n    console.log(err)\n})\n```\n## 常见的面试题：\n#### 图片加载\n```\nlet url = 'https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89'\nfunction loadImg (url) {\n    return new Promise((resolve,reject)=>{\n        let img = document.createElement('img')\n        img.onload = function() {\n            resolve(img)\n        }\n        img.onerror = function() {\n            let err = new Error('加载失败')\n            reject(err)\n        }\n        img.src = url\n    })\n}\n```\n```javascript\nloadImg('https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89')\n.then((data)=>{ \n    console.log(data)// data是resolve传过去的img\n    // <img src=\"https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\">\n    return loadImg(url)\n}).then((data)=>{ \n    console.log(data)// data是上一个return loadImg(url)中resolve传过去的img标签\n    // <img src=\"https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\">\n    return url\n}).then((data)=>{ \n    console.log(data)// data是上一个return 的url\n    // https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\n    return url\n}).catch((err)=>{\n    console.log(err)\n})\n// then中return的如果是promise对象，则下一个then根据上一个then返回的promise来传参。\n// return如果返回的是其他内容（如字符串），则将其他内容（如字符串）包装为promise\n//（如promise.resolved(img)），将该内容作为then的参数\n```\n#### 单线程是什么\n#### 前端使用异步的场景有哪些","source":"_posts/cxy/js/js-progre.md","raw":"---\ntitle: '【第4章】同步和异步'\ndate: 2019-04-06 13:20:03\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## 单线程和异步\njs是单线程语言，只能同时做一件事情，两段js不能同时执行，.原因就是避免DOM渲染的冲突（都修改DOM就冲突了）\n浏览器和nodejs已经支持js启动进程 如 web server\njs和dom渲染共用一个县城，所以可以操作dom \n##异步为了解决什么问题？\n因为js是单线程，异步为了解决遇到等待时，等待过程中不可能像alert一样阻塞程序进行，因此所有的“等待情况”都需要异步。\n\n## 异步应用场景：\n定时任务：setTimeout、setInterval、\n网络请求：Ajax请求、动态<img>加载、\n事件绑定：图片加载如onload，不用等待onload完毕再去执行onload后面的代码\n\n## 回调地狱callback hell\n回调函数： 将一个函数作为参数传递给另个函数\n回调地狱用promise来解决\n```javascript\nfunction c() {}\n function a(function b(){\n     function c(function d(){\n \n     })\n}) // 代码看起来过于复杂混乱\n```\n再如请求太多的时候，回调函数套回调函数\n```javascript\n$.get(url1, (data1) => {\n    console.log(data1)\n    $.get(url2,(data2)=>{\n        console.log(data2)\n        $.get(url3, (data3)=>{\n            console.log(data3)\n        })\n    })\n}) \n```\n如果用promise去写，就会简洁很多。\n```javascript\nconst url1 = 'data1.json'\nconst url2 = 'data2.json'\nconst url3 = 'data3.json'\nfunction getData (url) {\n    return new Promise((resolve,reject)=>{\n        $.ajax({\n            url:'url',\n            success(data) {\n                resolve(data)\n            },\n            error(err){\n                reject(err)\n            }\n        })\n    })\n}\ngetData((url1).then(data1=>{\n\n}).then(data2=>{\n\n}).then(data3=>{\n\n}).catch(err=>{\n    console.log(err)\n})\n```\n## 常见的面试题：\n#### 图片加载\n```\nlet url = 'https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89'\nfunction loadImg (url) {\n    return new Promise((resolve,reject)=>{\n        let img = document.createElement('img')\n        img.onload = function() {\n            resolve(img)\n        }\n        img.onerror = function() {\n            let err = new Error('加载失败')\n            reject(err)\n        }\n        img.src = url\n    })\n}\n```\n```javascript\nloadImg('https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89')\n.then((data)=>{ \n    console.log(data)// data是resolve传过去的img\n    // <img src=\"https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\">\n    return loadImg(url)\n}).then((data)=>{ \n    console.log(data)// data是上一个return loadImg(url)中resolve传过去的img标签\n    // <img src=\"https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\">\n    return url\n}).then((data)=>{ \n    console.log(data)// data是上一个return 的url\n    // https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\n    return url\n}).catch((err)=>{\n    console.log(err)\n})\n// then中return的如果是promise对象，则下一个then根据上一个then返回的promise来传参。\n// return如果返回的是其他内容（如字符串），则将其他内容（如字符串）包装为promise\n//（如promise.resolved(img)），将该内容作为then的参数\n```\n#### 单线程是什么\n#### 前端使用异步的场景有哪些","slug":"cxy/js/js-progre","published":1,"updated":"2023-01-25T20:26:13.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifk000qkdwi84b97aor","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"单线程和异步\"><a href=\"#单线程和异步\" class=\"headerlink\" title=\"单线程和异步\"></a>单线程和异步</h2><p>js是单线程语言，只能同时做一件事情，两段js不能同时执行，.原因就是避免DOM渲染的冲突（都修改DOM就冲突了）<br>浏览器和nodejs已经支持js启动进程 如 web server<br>js和dom渲染共用一个县城，所以可以操作dom<br>##异步为了解决什么问题？<br>因为js是单线程，异步为了解决遇到等待时，等待过程中不可能像alert一样阻塞程序进行，因此所有的“等待情况”都需要异步。</p>\n<h2 id=\"异步应用场景：\"><a href=\"#异步应用场景：\" class=\"headerlink\" title=\"异步应用场景：\"></a>异步应用场景：</h2><p>定时任务：setTimeout、setInterval、<br>网络请求：Ajax请求、动态<img>加载、<br>事件绑定：图片加载如onload，不用等待onload完毕再去执行onload后面的代码</p>\n<h2 id=\"回调地狱callback-hell\"><a href=\"#回调地狱callback-hell\" class=\"headerlink\" title=\"回调地狱callback hell\"></a>回调地狱callback hell</h2><p>回调函数： 将一个函数作为参数传递给另个函数<br>回调地狱用promise来解决</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"><span class=\"keyword\">function</span> b()&#123;</span></span><br><span class=\"line\"><span class=\"params\">     <span class=\"keyword\">function</span> c(<span class=\"keyword\">function</span> d()&#123;</span></span><br><span class=\"line\"><span class=\"params\"> </span></span><br><span class=\"line\"><span class=\"params\">     &#125;)</span></span><br><span class=\"line\"><span class=\"params\">&#125;</span>) <span class=\"comment\">// 代码看起来过于复杂混乱</span></span><br></pre></td></tr></table></figure>\n<p>再如请求太多的时候，回调函数套回调函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">get</span>(url1, <span class=\"function\">(<span class=\"params\">data1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data1)</span><br><span class=\"line\">    $.<span class=\"title function_\">get</span>(url2,<span class=\"function\">(<span class=\"params\">data2</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data2)</span><br><span class=\"line\">        $.<span class=\"title function_\">get</span>(url3, <span class=\"function\">(<span class=\"params\">data3</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data3)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure>\n<p>如果用promise去写，就会简洁很多。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url1 = <span class=\"string\">&#x27;data1.json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url2 = <span class=\"string\">&#x27;data2.json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url3 = <span class=\"string\">&#x27;data3.json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getData</span> (url) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">url</span>:<span class=\"string\">&#x27;url&#x27;</span>,</span><br><span class=\"line\">            <span class=\"title function_\">success</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(data)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">error</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">getData</span>((url1).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data1</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data2</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data3</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见的面试题：\"><a href=\"#常见的面试题：\" class=\"headerlink\" title=\"常见的面试题：\"></a>常见的面试题：</h2><h4 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url = &#x27;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&#x27;</span><br><span class=\"line\">function loadImg (url) &#123;</span><br><span class=\"line\">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        let img = document.createElement(&#x27;img&#x27;)</span><br><span class=\"line\">        img.onload = function() &#123;</span><br><span class=\"line\">            resolve(img)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.onerror = function() &#123;</span><br><span class=\"line\">            let err = new Error(&#x27;加载失败&#x27;)</span><br><span class=\"line\">            reject(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.src = url</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">loadImg</span>(<span class=\"string\">&#x27;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&#x27;</span>)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是resolve传过去的img</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;img src=&quot;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">loadImg</span>(url)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是上一个return loadImg(url)中resolve传过去的img标签</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;img src=&quot;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是上一个return 的url</span></span><br><span class=\"line\">    <span class=\"comment\">// https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// then中return的如果是promise对象，则下一个then根据上一个then返回的promise来传参。</span></span><br><span class=\"line\"><span class=\"comment\">// return如果返回的是其他内容（如字符串），则将其他内容（如字符串）包装为promise</span></span><br><span class=\"line\"><span class=\"comment\">//（如promise.resolved(img)），将该内容作为then的参数</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"单线程是什么\"><a href=\"#单线程是什么\" class=\"headerlink\" title=\"单线程是什么\"></a>单线程是什么</h4><h4 id=\"前端使用异步的场景有哪些\"><a href=\"#前端使用异步的场景有哪些\" class=\"headerlink\" title=\"前端使用异步的场景有哪些\"></a>前端使用异步的场景有哪些</h4>","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"单线程和异步\"><a href=\"#单线程和异步\" class=\"headerlink\" title=\"单线程和异步\"></a>单线程和异步</h2><p>js是单线程语言，只能同时做一件事情，两段js不能同时执行，.原因就是避免DOM渲染的冲突（都修改DOM就冲突了）<br>浏览器和nodejs已经支持js启动进程 如 web server<br>js和dom渲染共用一个县城，所以可以操作dom<br>##异步为了解决什么问题？<br>因为js是单线程，异步为了解决遇到等待时，等待过程中不可能像alert一样阻塞程序进行，因此所有的“等待情况”都需要异步。</p>\n<h2 id=\"异步应用场景：\"><a href=\"#异步应用场景：\" class=\"headerlink\" title=\"异步应用场景：\"></a>异步应用场景：</h2><p>定时任务：setTimeout、setInterval、<br>网络请求：Ajax请求、动态<img>加载、<br>事件绑定：图片加载如onload，不用等待onload完毕再去执行onload后面的代码</p>\n<h2 id=\"回调地狱callback-hell\"><a href=\"#回调地狱callback-hell\" class=\"headerlink\" title=\"回调地狱callback hell\"></a>回调地狱callback hell</h2><p>回调函数： 将一个函数作为参数传递给另个函数<br>回调地狱用promise来解决</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"><span class=\"keyword\">function</span> b()&#123;</span></span><br><span class=\"line\"><span class=\"params\">     <span class=\"keyword\">function</span> c(<span class=\"keyword\">function</span> d()&#123;</span></span><br><span class=\"line\"><span class=\"params\"> </span></span><br><span class=\"line\"><span class=\"params\">     &#125;)</span></span><br><span class=\"line\"><span class=\"params\">&#125;</span>) <span class=\"comment\">// 代码看起来过于复杂混乱</span></span><br></pre></td></tr></table></figure>\n<p>再如请求太多的时候，回调函数套回调函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">get</span>(url1, <span class=\"function\">(<span class=\"params\">data1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data1)</span><br><span class=\"line\">    $.<span class=\"title function_\">get</span>(url2,<span class=\"function\">(<span class=\"params\">data2</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data2)</span><br><span class=\"line\">        $.<span class=\"title function_\">get</span>(url3, <span class=\"function\">(<span class=\"params\">data3</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data3)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure>\n<p>如果用promise去写，就会简洁很多。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url1 = <span class=\"string\">&#x27;data1.json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url2 = <span class=\"string\">&#x27;data2.json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url3 = <span class=\"string\">&#x27;data3.json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getData</span> (url) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">url</span>:<span class=\"string\">&#x27;url&#x27;</span>,</span><br><span class=\"line\">            <span class=\"title function_\">success</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(data)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">error</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">getData</span>((url1).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data1</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data2</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data3</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见的面试题：\"><a href=\"#常见的面试题：\" class=\"headerlink\" title=\"常见的面试题：\"></a>常见的面试题：</h2><h4 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url = &#x27;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&#x27;</span><br><span class=\"line\">function loadImg (url) &#123;</span><br><span class=\"line\">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        let img = document.createElement(&#x27;img&#x27;)</span><br><span class=\"line\">        img.onload = function() &#123;</span><br><span class=\"line\">            resolve(img)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.onerror = function() &#123;</span><br><span class=\"line\">            let err = new Error(&#x27;加载失败&#x27;)</span><br><span class=\"line\">            reject(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.src = url</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">loadImg</span>(<span class=\"string\">&#x27;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&#x27;</span>)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是resolve传过去的img</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;img src=&quot;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">loadImg</span>(url)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是上一个return loadImg(url)中resolve传过去的img标签</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;img src=&quot;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是上一个return 的url</span></span><br><span class=\"line\">    <span class=\"comment\">// https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// then中return的如果是promise对象，则下一个then根据上一个then返回的promise来传参。</span></span><br><span class=\"line\"><span class=\"comment\">// return如果返回的是其他内容（如字符串），则将其他内容（如字符串）包装为promise</span></span><br><span class=\"line\"><span class=\"comment\">//（如promise.resolved(img)），将该内容作为then的参数</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"单线程是什么\"><a href=\"#单线程是什么\" class=\"headerlink\" title=\"单线程是什么\"></a>单线程是什么</h4><h4 id=\"前端使用异步的场景有哪些\"><a href=\"#前端使用异步的场景有哪些\" class=\"headerlink\" title=\"前端使用异步的场景有哪些\"></a>前端使用异步的场景有哪些</h4>"},{"title":"【第4-2章】promise","date":"2019-04-05T08:22:15.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 一、promise的三种状态 \nfuifilling reject pending，在没有获取到reject或者fulfilling时一直都是pending，直到有reject或resolve返回\npromise变为fufilling或reject之后，状态不可逆。\npending状态，不会触发then和catch，resolved会触发then，reject会触发catch\n\n## 二、then(res,rej)方法\nthen(res,rej)方法的两个参数，第一个是resolve方法，第二个是reject方法，reject方法可以在后面用catch的方法调用\nthen方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。\n第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。\n```javascript\n// promise实现隔三秒打印i的值\nlet i = 1\nfunction timeout(ms,wenzi) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms, i++);\n  });\n}\n\ntimeout(3000)\n.then((value)=>{console.log(value);return timeout(3000)}) // 隔三秒 1 return的返回值如果是一个promise对象，那么下一个then就会执行这个promise对象的then\n.then((value)=>{console.log(value);return timeout(3000)}) // 隔三秒 2 同上\n.then((value)=>{console.log(value);return timeout(3000)}) // 隔三秒 3 同上\n.then((value)=>{console.log(value);return timeout(3000)}) // 隔三秒 4 同上\n.then((value)=>{console.log(value);return 3000})// 隔三秒 5 return的是一个实际值，那么这个值就会被包装为promise.resolved(3000)而返回，也就是说3000作为下一个then的参数而使用\n.then((value)=>{console.log(value)}) // 立刻打印 3000 由上一个return返回的3000作为该then的参数，3000被包装为promise.resolve(3000)\n.catch((value)=>{\n  console.log('catch'+value);\n});\n```\n```javascript\n// 图片加载\nlet url = 'https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89'\nfunction loadImg (url) {\n    return new Promise((resolve,reject)=>{\n        let img = document.createElement('img')\n        img.onload = function() {\n            resolve(img)\n        }\n        img.onerror = function() {\n            let err = new Error('加载失败')\n            reject(err)\n        }\n        img.src = url\n    })\n}\n\nloadImg('https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89')\n.then((data)=>{ \n    console.log(data)// data是resolve传过去的img\n    // <img src=\"https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\">\n    return loadImg(url)\n}).then((data)=>{ \n    console.log(data)// data是上一个return loadImg(url)中resolve传过去的img标签\n    // <img src=\"https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\">\n    return url\n}).then((data)=>{ \n    console.log(data)// data是上一个return 的url\n    // https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\n    return url\n}).catch((err)=>{\n    console.log(err)\n})\n// then中return的如果是promise对象，则下一个then根据上一个then返回的promise来传参，return如果返回的是其他内容（如字符串），则将其他内容（如字符串）包装为promise（如promise.then(img)），将该内容作为then的参数\n```\n\n## 直接获取resolve状态或reject状态的方法：\n```javascript\nlet promise = Promise.reject()\nlet promise = Promise.resolve()\n// 这样子状态就直接是reject或resolve\n```\n\n## 三、then和catch的状态改变\n1. then正常返回**resolve**，内部有报错（或throw err）则返回**rejected**。\n2. catch正常返回**resolved**，内部有报错则返回**rejected**。\n3. **resolve触发then回调，rejected后续触发catch回调**，注意resolve是**不会触发catch回调的**。\n4. promise.resolve()和promise.reject()只要**内部没报错**，后续还是**触发then回调**。\n5. 最后的状态靠最后返回的结果为定\n```javascript\nconst p1 = Promise.resolve().then(()=>{\n    return 100\n})\nconsole.log(p1) // resolve，触发后续then回调\n\nconst p2 = Promise.resolve().then(()=>{\n    throw new Error('then error') // 只要内部有报错，就到reject，触发后续catch回调\n})\nconsole.log(p2) // reject\n\nPromise.resolve().then(()=>{\n    console.log(1) // 1\n}).catch(()=>{\n    console.log(2) \n}).then(()=>{\n    console.log(3)\n}) // 1 3\n\nPromise.resolve().then(()=>{\n    console.log(1) // 1\n    throw new Error('error1')\n}).catch(()=>{ // catch执行完只要内部没报错也是返回一个resolve状态的promise欧赔\n    console.log(2)\n}).then(()=>{\n    console.log(3)\n}) // 1 2 3\n\nPromise.resolve().then(()=>{\n    console.log(1) // 1\n    throw new Error('error1')\n}).catch(()=>{\n    console.log(2) // catch执行完只要内部没报错也是返回一个resolve状态的promise欧赔，所以下面的catch不执\n}).catch(()=>{\n    console.log(3)\n}) // 1 2\n```\n**第五点我要单独说一下：**\n**最后的状态靠最后返回的结果为定**\n在下面的代码中，promiseA本身是反悔了resolve，但由于它引入了另一个promiseB，而promiseB返回reject，所以最终执行结果会到catch方法中。\n```javascript\nfunction getPromise(a,b) {\n    let promiseA = new Promise((resolve,reject)=>{\n        if(a>=b) {\n            resolve(promiseB)\n        }\n        else {\n            reject('ERROR')\n        }\n    })\n    return promiseA\n}\nlet promiseB = Promise.reject()\ngetPromise(1,2).then((value)=>{\n    console.log(value)\n}).catch((err)=>{\n    console.log(err)\n})\n```\n\n## 四. resolve和fufilled\n**promiseA如果resolved到了另一个promiseB中，那它不一定是pendding fulfilled reject,它的状态由promiseB执行完毕才决定。**\n上面有代码示例。\n\n>(1) nothing happened yet\n(2) \"locked in\"to another promise\n(3) fulfilled \n(4) rejeted\n(1)(2) pedding (3)(4)settled (2)(3)(4)resolved (1)unresolved\n\n##五. Promise.resolve() 和 Promise.reject() \n1. 如果Promise.resolve()有参数:\n（1）. 参数为promise，原封不动的返回该promise\n```javascript\nfunction testPromise (a) {\n    let promise = new Promise((resolve,reject)=>{\n        if(a) {\n            resolve(a)\n        }\n        else {\n            reject('undefined val')\n        }\n    })\n    return promise\n}\nlet promiseR = Promise.resolve(testPromise('111'))\n// 写法相当于 let promiseR = testPromise('111')\npromiseR.then((value)=>{\n    console.log(a) // 111\n})\n```\n\n（2）参数为有then方法的对象，会立即执行then方法，并将执行结果封装为promise对象\n```javascript\nlet thenable = {\n    then: function(resolve, reject) {\n      resolve(42);\n    }\n  };\n  \n  let p1 = Promise.resolve(thenable);\n  p1.then(function (value) {\n    console.log(value);  // 42，注意已经执行过promise方法\n  });\n```\n（3）参数没有then方法，或根本就不是对象，则将值包装为promise对象并返回到then中，状态为resolved\n```javascript\nconst p = Promise.resolve('Hello');\n\np.then(function (s) {\n  console.log(s)\n});\n// Hello\n```\n## 六、promise定义时立即执行，而then相当于异步，所以执行完promise内的内容跳出去执行同步代码，再执行then\n```\nnew Promise((resolve)=>{\n    console.log(1)\n    resolve()\n}).then(()=>{\n    console.log(2)\n\n})\nconsole.log(3) // 1 3 2\n```\n\n\n\n\n\n### 面试题：\n以下代码的执行结果？\n```javascript\nasync function async1() {\n    console.log(\"async1 start\")\n    await async2()\n    console.log(\"async1 end\")\n}\n \nasync function async2(){\n    console.log(\"async2\")\n}\n \nconsole.log(\"script start\")\n \nsetTimeout(function(){\n    console.log(\"setTimeout\")\n}, 0)\n \nasync1()\n \nnew Promise(function(resolve){\n    console.log(\"promise1\")\n    resolve()\n}).then(function(){\n    console.log(\"promise2\")\n})\n \n```","source":"_posts/cxy/js/js-promise.md","raw":"---\ntitle: '【第4-2章】promise'\ndate: 2019-04-05 16:22:15\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 一、promise的三种状态 \nfuifilling reject pending，在没有获取到reject或者fulfilling时一直都是pending，直到有reject或resolve返回\npromise变为fufilling或reject之后，状态不可逆。\npending状态，不会触发then和catch，resolved会触发then，reject会触发catch\n\n## 二、then(res,rej)方法\nthen(res,rej)方法的两个参数，第一个是resolve方法，第二个是reject方法，reject方法可以在后面用catch的方法调用\nthen方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。\n第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。\n```javascript\n// promise实现隔三秒打印i的值\nlet i = 1\nfunction timeout(ms,wenzi) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms, i++);\n  });\n}\n\ntimeout(3000)\n.then((value)=>{console.log(value);return timeout(3000)}) // 隔三秒 1 return的返回值如果是一个promise对象，那么下一个then就会执行这个promise对象的then\n.then((value)=>{console.log(value);return timeout(3000)}) // 隔三秒 2 同上\n.then((value)=>{console.log(value);return timeout(3000)}) // 隔三秒 3 同上\n.then((value)=>{console.log(value);return timeout(3000)}) // 隔三秒 4 同上\n.then((value)=>{console.log(value);return 3000})// 隔三秒 5 return的是一个实际值，那么这个值就会被包装为promise.resolved(3000)而返回，也就是说3000作为下一个then的参数而使用\n.then((value)=>{console.log(value)}) // 立刻打印 3000 由上一个return返回的3000作为该then的参数，3000被包装为promise.resolve(3000)\n.catch((value)=>{\n  console.log('catch'+value);\n});\n```\n```javascript\n// 图片加载\nlet url = 'https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89'\nfunction loadImg (url) {\n    return new Promise((resolve,reject)=>{\n        let img = document.createElement('img')\n        img.onload = function() {\n            resolve(img)\n        }\n        img.onerror = function() {\n            let err = new Error('加载失败')\n            reject(err)\n        }\n        img.src = url\n    })\n}\n\nloadImg('https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89')\n.then((data)=>{ \n    console.log(data)// data是resolve传过去的img\n    // <img src=\"https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\">\n    return loadImg(url)\n}).then((data)=>{ \n    console.log(data)// data是上一个return loadImg(url)中resolve传过去的img标签\n    // <img src=\"https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\">\n    return url\n}).then((data)=>{ \n    console.log(data)// data是上一个return 的url\n    // https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89\n    return url\n}).catch((err)=>{\n    console.log(err)\n})\n// then中return的如果是promise对象，则下一个then根据上一个then返回的promise来传参，return如果返回的是其他内容（如字符串），则将其他内容（如字符串）包装为promise（如promise.then(img)），将该内容作为then的参数\n```\n\n## 直接获取resolve状态或reject状态的方法：\n```javascript\nlet promise = Promise.reject()\nlet promise = Promise.resolve()\n// 这样子状态就直接是reject或resolve\n```\n\n## 三、then和catch的状态改变\n1. then正常返回**resolve**，内部有报错（或throw err）则返回**rejected**。\n2. catch正常返回**resolved**，内部有报错则返回**rejected**。\n3. **resolve触发then回调，rejected后续触发catch回调**，注意resolve是**不会触发catch回调的**。\n4. promise.resolve()和promise.reject()只要**内部没报错**，后续还是**触发then回调**。\n5. 最后的状态靠最后返回的结果为定\n```javascript\nconst p1 = Promise.resolve().then(()=>{\n    return 100\n})\nconsole.log(p1) // resolve，触发后续then回调\n\nconst p2 = Promise.resolve().then(()=>{\n    throw new Error('then error') // 只要内部有报错，就到reject，触发后续catch回调\n})\nconsole.log(p2) // reject\n\nPromise.resolve().then(()=>{\n    console.log(1) // 1\n}).catch(()=>{\n    console.log(2) \n}).then(()=>{\n    console.log(3)\n}) // 1 3\n\nPromise.resolve().then(()=>{\n    console.log(1) // 1\n    throw new Error('error1')\n}).catch(()=>{ // catch执行完只要内部没报错也是返回一个resolve状态的promise欧赔\n    console.log(2)\n}).then(()=>{\n    console.log(3)\n}) // 1 2 3\n\nPromise.resolve().then(()=>{\n    console.log(1) // 1\n    throw new Error('error1')\n}).catch(()=>{\n    console.log(2) // catch执行完只要内部没报错也是返回一个resolve状态的promise欧赔，所以下面的catch不执\n}).catch(()=>{\n    console.log(3)\n}) // 1 2\n```\n**第五点我要单独说一下：**\n**最后的状态靠最后返回的结果为定**\n在下面的代码中，promiseA本身是反悔了resolve，但由于它引入了另一个promiseB，而promiseB返回reject，所以最终执行结果会到catch方法中。\n```javascript\nfunction getPromise(a,b) {\n    let promiseA = new Promise((resolve,reject)=>{\n        if(a>=b) {\n            resolve(promiseB)\n        }\n        else {\n            reject('ERROR')\n        }\n    })\n    return promiseA\n}\nlet promiseB = Promise.reject()\ngetPromise(1,2).then((value)=>{\n    console.log(value)\n}).catch((err)=>{\n    console.log(err)\n})\n```\n\n## 四. resolve和fufilled\n**promiseA如果resolved到了另一个promiseB中，那它不一定是pendding fulfilled reject,它的状态由promiseB执行完毕才决定。**\n上面有代码示例。\n\n>(1) nothing happened yet\n(2) \"locked in\"to another promise\n(3) fulfilled \n(4) rejeted\n(1)(2) pedding (3)(4)settled (2)(3)(4)resolved (1)unresolved\n\n##五. Promise.resolve() 和 Promise.reject() \n1. 如果Promise.resolve()有参数:\n（1）. 参数为promise，原封不动的返回该promise\n```javascript\nfunction testPromise (a) {\n    let promise = new Promise((resolve,reject)=>{\n        if(a) {\n            resolve(a)\n        }\n        else {\n            reject('undefined val')\n        }\n    })\n    return promise\n}\nlet promiseR = Promise.resolve(testPromise('111'))\n// 写法相当于 let promiseR = testPromise('111')\npromiseR.then((value)=>{\n    console.log(a) // 111\n})\n```\n\n（2）参数为有then方法的对象，会立即执行then方法，并将执行结果封装为promise对象\n```javascript\nlet thenable = {\n    then: function(resolve, reject) {\n      resolve(42);\n    }\n  };\n  \n  let p1 = Promise.resolve(thenable);\n  p1.then(function (value) {\n    console.log(value);  // 42，注意已经执行过promise方法\n  });\n```\n（3）参数没有then方法，或根本就不是对象，则将值包装为promise对象并返回到then中，状态为resolved\n```javascript\nconst p = Promise.resolve('Hello');\n\np.then(function (s) {\n  console.log(s)\n});\n// Hello\n```\n## 六、promise定义时立即执行，而then相当于异步，所以执行完promise内的内容跳出去执行同步代码，再执行then\n```\nnew Promise((resolve)=>{\n    console.log(1)\n    resolve()\n}).then(()=>{\n    console.log(2)\n\n})\nconsole.log(3) // 1 3 2\n```\n\n\n\n\n\n### 面试题：\n以下代码的执行结果？\n```javascript\nasync function async1() {\n    console.log(\"async1 start\")\n    await async2()\n    console.log(\"async1 end\")\n}\n \nasync function async2(){\n    console.log(\"async2\")\n}\n \nconsole.log(\"script start\")\n \nsetTimeout(function(){\n    console.log(\"setTimeout\")\n}, 0)\n \nasync1()\n \nnew Promise(function(resolve){\n    console.log(\"promise1\")\n    resolve()\n}).then(function(){\n    console.log(\"promise2\")\n})\n \n```","slug":"cxy/js/js-promise","published":1,"updated":"2023-01-25T20:28:39.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifl000tkdwigr170bi8","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"一、promise的三种状态\"><a href=\"#一、promise的三种状态\" class=\"headerlink\" title=\"一、promise的三种状态\"></a>一、promise的三种状态</h2><p>fuifilling reject pending，在没有获取到reject或者fulfilling时一直都是pending，直到有reject或resolve返回<br>promise变为fufilling或reject之后，状态不可逆。<br>pending状态，不会触发then和catch，resolved会触发then，reject会触发catch</p>\n<h2 id=\"二、then-res-rej-方法\"><a href=\"#二、then-res-rej-方法\" class=\"headerlink\" title=\"二、then(res,rej)方法\"></a>二、then(res,rej)方法</h2><p>then(res,rej)方法的两个参数，第一个是resolve方法，第二个是reject方法，reject方法可以在后面用catch的方法调用<br>then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。<br>第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise实现隔三秒打印i的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">timeout</span>(<span class=\"params\">ms,wenzi</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve, ms, i++);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">timeout</span>(<span class=\"number\">3000</span>)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);<span class=\"keyword\">return</span> <span class=\"title function_\">timeout</span>(<span class=\"number\">3000</span>)&#125;) <span class=\"comment\">// 隔三秒 1 return的返回值如果是一个promise对象，那么下一个then就会执行这个promise对象的then</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);<span class=\"keyword\">return</span> <span class=\"title function_\">timeout</span>(<span class=\"number\">3000</span>)&#125;) <span class=\"comment\">// 隔三秒 2 同上</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);<span class=\"keyword\">return</span> <span class=\"title function_\">timeout</span>(<span class=\"number\">3000</span>)&#125;) <span class=\"comment\">// 隔三秒 3 同上</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);<span class=\"keyword\">return</span> <span class=\"title function_\">timeout</span>(<span class=\"number\">3000</span>)&#125;) <span class=\"comment\">// 隔三秒 4 同上</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);<span class=\"keyword\">return</span> <span class=\"number\">3000</span>&#125;)<span class=\"comment\">// 隔三秒 5 return的是一个实际值，那么这个值就会被包装为promise.resolved(3000)而返回，也就是说3000作为下一个then的参数而使用</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)&#125;) <span class=\"comment\">// 立刻打印 3000 由上一个return返回的3000作为该then的参数，3000被包装为promise.resolve(3000)</span></span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;catch&#x27;</span>+value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 图片加载</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadImg</span> (url) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\">        img.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(img)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> err = <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;加载失败&#x27;</span>)</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.<span class=\"property\">src</span> = url</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">loadImg</span>(<span class=\"string\">&#x27;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&#x27;</span>)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是resolve传过去的img</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;img src=&quot;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">loadImg</span>(url)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是上一个return loadImg(url)中resolve传过去的img标签</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;img src=&quot;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是上一个return 的url</span></span><br><span class=\"line\">    <span class=\"comment\">// https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// then中return的如果是promise对象，则下一个then根据上一个then返回的promise来传参，return如果返回的是其他内容（如字符串），则将其他内容（如字符串）包装为promise（如promise.then(img)），将该内容作为then的参数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"直接获取resolve状态或reject状态的方法：\"><a href=\"#直接获取resolve状态或reject状态的方法：\" class=\"headerlink\" title=\"直接获取resolve状态或reject状态的方法：\"></a>直接获取resolve状态或reject状态的方法：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\"><span class=\"comment\">// 这样子状态就直接是reject或resolve</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、then和catch的状态改变\"><a href=\"#三、then和catch的状态改变\" class=\"headerlink\" title=\"三、then和catch的状态改变\"></a>三、then和catch的状态改变</h2><ol>\n<li>then正常返回<strong>resolve</strong>，内部有报错（或throw err）则返回<strong>rejected</strong>。</li>\n<li>catch正常返回<strong>resolved</strong>，内部有报错则返回<strong>rejected</strong>。</li>\n<li><strong>resolve触发then回调，rejected后续触发catch回调</strong>，注意resolve是<strong>不会触发catch回调的</strong>。</li>\n<li>promise.resolve()和promise.reject()只要<strong>内部没报错</strong>，后续还是<strong>触发then回调</strong>。</li>\n<li>最后的状态靠最后返回的结果为定<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">100</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1) <span class=\"comment\">// resolve，触发后续then回调</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;then error&#x27;</span>) <span class=\"comment\">// 只要内部有报错，就到reject，触发后续catch回调</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p2) <span class=\"comment\">// reject</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>) </span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 1 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;error1&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">// catch执行完只要内部没报错也是返回一个resolve状态的promise欧赔</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;error1&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>) <span class=\"comment\">// catch执行完只要内部没报错也是返回一个resolve状态的promise欧赔，所以下面的catch不执</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 1 2</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>第五点我要单独说一下：</strong><br><strong>最后的状态靠最后返回的结果为定</strong><br>在下面的代码中，promiseA本身是反悔了resolve，但由于它引入了另一个promiseB，而promiseB返回reject，所以最终执行结果会到catch方法中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getPromise</span>(<span class=\"params\">a,b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promiseA = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a&gt;=b) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(promiseB)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;ERROR&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promiseA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> promiseB = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>()</span><br><span class=\"line\"><span class=\"title function_\">getPromise</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-resolve和fufilled\"><a href=\"#四-resolve和fufilled\" class=\"headerlink\" title=\"四. resolve和fufilled\"></a>四. resolve和fufilled</h2><p><strong>promiseA如果resolved到了另一个promiseB中，那它不一定是pendding fulfilled reject,它的状态由promiseB执行完毕才决定。</strong><br>上面有代码示例。</p>\n<blockquote>\n<p>(1) nothing happened yet<br>(2) “locked in”to another promise<br>(3) fulfilled<br>(4) rejeted<br>(1)(2) pedding (3)(4)settled (2)(3)(4)resolved (1)unresolved</p>\n</blockquote>\n<p>##五. Promise.resolve() 和 Promise.reject() </p>\n<ol>\n<li>如果Promise.resolve()有参数:<br>（1）. 参数为promise，原封不动的返回该promise<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testPromise</span> (a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(a)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;undefined val&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> promiseR = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">testPromise</span>(<span class=\"string\">&#x27;111&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">// 写法相当于 let promiseR = testPromise(&#x27;111&#x27;)</span></span><br><span class=\"line\">promiseR.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// 111</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>（2）参数为有then方法的对象，会立即执行then方法，并将执行结果封装为promise对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thenable = &#123;</span><br><span class=\"line\">    <span class=\"attr\">then</span>: <span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> p1 = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(thenable);</span><br><span class=\"line\">  p1.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);  <span class=\"comment\">// 42，注意已经执行过promise方法</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>（3）参数没有then方法，或根本就不是对象，则将值包装为promise对象并返回到then中，状态为resolved</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Hello</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"六、promise定义时立即执行，而then相当于异步，所以执行完promise内的内容跳出去执行同步代码，再执行then\"><a href=\"#六、promise定义时立即执行，而then相当于异步，所以执行完promise内的内容跳出去执行同步代码，再执行then\" class=\"headerlink\" title=\"六、promise定义时立即执行，而then相当于异步，所以执行完promise内的内容跳出去执行同步代码，再执行then\"></a>六、promise定义时立即执行，而then相当于异步，所以执行完promise内的内容跳出去执行同步代码，再执行then</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise((resolve)=&gt;&#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">&#125;).then(()=&gt;&#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(3) // 1 3 2</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"面试题：\"><a href=\"#面试题：\" class=\"headerlink\" title=\"面试题：\"></a>面试题：</h3><p>以下代码的执行结果？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;async1 start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">async2</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;async1 end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async2</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;async2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;script start&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;setTimeout&quot;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"title function_\">async1</span>()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;promise1&quot;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;promise2&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"一、promise的三种状态\"><a href=\"#一、promise的三种状态\" class=\"headerlink\" title=\"一、promise的三种状态\"></a>一、promise的三种状态</h2><p>fuifilling reject pending，在没有获取到reject或者fulfilling时一直都是pending，直到有reject或resolve返回<br>promise变为fufilling或reject之后，状态不可逆。<br>pending状态，不会触发then和catch，resolved会触发then，reject会触发catch</p>\n<h2 id=\"二、then-res-rej-方法\"><a href=\"#二、then-res-rej-方法\" class=\"headerlink\" title=\"二、then(res,rej)方法\"></a>二、then(res,rej)方法</h2><p>then(res,rej)方法的两个参数，第一个是resolve方法，第二个是reject方法，reject方法可以在后面用catch的方法调用<br>then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。<br>第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise实现隔三秒打印i的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">timeout</span>(<span class=\"params\">ms,wenzi</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve, ms, i++);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">timeout</span>(<span class=\"number\">3000</span>)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);<span class=\"keyword\">return</span> <span class=\"title function_\">timeout</span>(<span class=\"number\">3000</span>)&#125;) <span class=\"comment\">// 隔三秒 1 return的返回值如果是一个promise对象，那么下一个then就会执行这个promise对象的then</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);<span class=\"keyword\">return</span> <span class=\"title function_\">timeout</span>(<span class=\"number\">3000</span>)&#125;) <span class=\"comment\">// 隔三秒 2 同上</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);<span class=\"keyword\">return</span> <span class=\"title function_\">timeout</span>(<span class=\"number\">3000</span>)&#125;) <span class=\"comment\">// 隔三秒 3 同上</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);<span class=\"keyword\">return</span> <span class=\"title function_\">timeout</span>(<span class=\"number\">3000</span>)&#125;) <span class=\"comment\">// 隔三秒 4 同上</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);<span class=\"keyword\">return</span> <span class=\"number\">3000</span>&#125;)<span class=\"comment\">// 隔三秒 5 return的是一个实际值，那么这个值就会被包装为promise.resolved(3000)而返回，也就是说3000作为下一个then的参数而使用</span></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)&#125;) <span class=\"comment\">// 立刻打印 3000 由上一个return返回的3000作为该then的参数，3000被包装为promise.resolve(3000)</span></span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;catch&#x27;</span>+value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 图片加载</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadImg</span> (url) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\">        img.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(img)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> err = <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;加载失败&#x27;</span>)</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.<span class=\"property\">src</span> = url</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">loadImg</span>(<span class=\"string\">&#x27;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&#x27;</span>)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是resolve传过去的img</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;img src=&quot;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">loadImg</span>(url)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是上一个return loadImg(url)中resolve传过去的img标签</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;img src=&quot;https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)<span class=\"comment\">// data是上一个return 的url</span></span><br><span class=\"line\">    <span class=\"comment\">// https://pics6.baidu.com/feed/4b90f603738da9775728172eeb1762108618e304.jpeg?token=caf3a7ab76f26a0a52b930268b9ddc89</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// then中return的如果是promise对象，则下一个then根据上一个then返回的promise来传参，return如果返回的是其他内容（如字符串），则将其他内容（如字符串）包装为promise（如promise.then(img)），将该内容作为then的参数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"直接获取resolve状态或reject状态的方法：\"><a href=\"#直接获取resolve状态或reject状态的方法：\" class=\"headerlink\" title=\"直接获取resolve状态或reject状态的方法：\"></a>直接获取resolve状态或reject状态的方法：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\"><span class=\"comment\">// 这样子状态就直接是reject或resolve</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、then和catch的状态改变\"><a href=\"#三、then和catch的状态改变\" class=\"headerlink\" title=\"三、then和catch的状态改变\"></a>三、then和catch的状态改变</h2><ol>\n<li>then正常返回<strong>resolve</strong>，内部有报错（或throw err）则返回<strong>rejected</strong>。</li>\n<li>catch正常返回<strong>resolved</strong>，内部有报错则返回<strong>rejected</strong>。</li>\n<li><strong>resolve触发then回调，rejected后续触发catch回调</strong>，注意resolve是<strong>不会触发catch回调的</strong>。</li>\n<li>promise.resolve()和promise.reject()只要<strong>内部没报错</strong>，后续还是<strong>触发then回调</strong>。</li>\n<li>最后的状态靠最后返回的结果为定<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">100</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1) <span class=\"comment\">// resolve，触发后续then回调</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;then error&#x27;</span>) <span class=\"comment\">// 只要内部有报错，就到reject，触发后续catch回调</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p2) <span class=\"comment\">// reject</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>) </span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 1 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;error1&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">// catch执行完只要内部没报错也是返回一个resolve状态的promise欧赔</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;error1&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>) <span class=\"comment\">// catch执行完只要内部没报错也是返回一个resolve状态的promise欧赔，所以下面的catch不执</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 1 2</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>第五点我要单独说一下：</strong><br><strong>最后的状态靠最后返回的结果为定</strong><br>在下面的代码中，promiseA本身是反悔了resolve，但由于它引入了另一个promiseB，而promiseB返回reject，所以最终执行结果会到catch方法中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getPromise</span>(<span class=\"params\">a,b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promiseA = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a&gt;=b) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(promiseB)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;ERROR&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promiseA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> promiseB = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>()</span><br><span class=\"line\"><span class=\"title function_\">getPromise</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-resolve和fufilled\"><a href=\"#四-resolve和fufilled\" class=\"headerlink\" title=\"四. resolve和fufilled\"></a>四. resolve和fufilled</h2><p><strong>promiseA如果resolved到了另一个promiseB中，那它不一定是pendding fulfilled reject,它的状态由promiseB执行完毕才决定。</strong><br>上面有代码示例。</p>\n<blockquote>\n<p>(1) nothing happened yet<br>(2) “locked in”to another promise<br>(3) fulfilled<br>(4) rejeted<br>(1)(2) pedding (3)(4)settled (2)(3)(4)resolved (1)unresolved</p>\n</blockquote>\n<p>##五. Promise.resolve() 和 Promise.reject() </p>\n<ol>\n<li>如果Promise.resolve()有参数:<br>（1）. 参数为promise，原封不动的返回该promise<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testPromise</span> (a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(a)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;undefined val&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> promiseR = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">testPromise</span>(<span class=\"string\">&#x27;111&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">// 写法相当于 let promiseR = testPromise(&#x27;111&#x27;)</span></span><br><span class=\"line\">promiseR.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// 111</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>（2）参数为有then方法的对象，会立即执行then方法，并将执行结果封装为promise对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thenable = &#123;</span><br><span class=\"line\">    <span class=\"attr\">then</span>: <span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> p1 = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(thenable);</span><br><span class=\"line\">  p1.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);  <span class=\"comment\">// 42，注意已经执行过promise方法</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>（3）参数没有then方法，或根本就不是对象，则将值包装为promise对象并返回到then中，状态为resolved</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Hello</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"六、promise定义时立即执行，而then相当于异步，所以执行完promise内的内容跳出去执行同步代码，再执行then\"><a href=\"#六、promise定义时立即执行，而then相当于异步，所以执行完promise内的内容跳出去执行同步代码，再执行then\" class=\"headerlink\" title=\"六、promise定义时立即执行，而then相当于异步，所以执行完promise内的内容跳出去执行同步代码，再执行then\"></a>六、promise定义时立即执行，而then相当于异步，所以执行完promise内的内容跳出去执行同步代码，再执行then</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise((resolve)=&gt;&#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">&#125;).then(()=&gt;&#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(3) // 1 3 2</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"面试题：\"><a href=\"#面试题：\" class=\"headerlink\" title=\"面试题：\"></a>面试题：</h3><p>以下代码的执行结果？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;async1 start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">async2</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;async1 end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async2</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;async2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;script start&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;setTimeout&quot;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"title function_\">async1</span>()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;promise1&quot;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;promise2&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>"},{"title":"【第2章】原型和原型链","date":"2019-04-04T06:13:15.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、原型的简单描述\n#### 在一个类中：\n实例的隐式原型，指向类的显式原型\n类的方法定义于prototype中。\n**son.\\_\\_proto\\_\\_ = Son.prototype**\n![](https://upload-images.jianshu.io/upload_images/20892169-c3761b8085632913.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 在继承关系中：\n子类的显式原型的隐式原型指向父类的显式原型，查找时就顺着这个链去查找，类的最顶端为object\n子类也有隐式原型，指向的是父类。\n**Son.prototype.\\_\\_proto\\_\\_ = Parent.prototype**\n**Son.\\_\\_proto\\_\\_ = Parent**\n![](https://upload-images.jianshu.io/upload_images/20892169-2a872db5f400936f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### call、apply、bind的区别和使用：\n作用是在一个对象中调用另一个对象的方法和属性。\n\ncall、apply、bind的第一个参数均为需要调用属性或方法的对象，区别是apply的第二个参数为数组，而bind、apply参数不放入数组而是直接列出。\n\nbing会返回一个函数，执行函数后才改变this，而call、apply会立即执行。\n```javascript\nlet fullname = {\n    getFullName (city,country) {\n        return this.firstname+this.lastname+'from'+country+city\n    }\n}\nlet name = {\n    firstname: 'bai',\n    lastname:'xue'\n}\n```\n###### bind的执行：\n```javascript\nlet fullnamestring = fullname.getFullName.bind(name,'安康','陕西')\nfullnamestring() //'baixuefrom陕西安康'\n```\n###### call的执行：\n```javascript\nlet fullnamestring = fullname.getFullName.call(name,'安康','陕西') //'baixuefrom陕西安康'\n```\n###### apply的执行：\n```javascript\nlet fullnamestring = fullname.getFullName.apply(name,['安康','陕西']) //'baixuefrom陕西安康'\n```\n\nclass说白了还是语法糖，如果不用class，用原型链当然也可以定义继承关系。\n比如我现在有一个类A，有一个子类B\n```javascript\nfunction A() {\n  this.a = 'a' // 自身属性，不存在于原型链上\n}\nfunction B() {\n  \n}\nA.prototype.aa = 'valueaa'\n// 继承的实现\nB.__proto__ = A\nB.prototype.__proto__ = A.prototype\n\nlet b = new B()\nb.aa //valueaa\nb.a // undefined，\n```\n### 补充：in和hasOwnproperty的区别\n两个方法都是判断对象中是否存在某个key，但hasOwnproperty不判断原型链上的属性和方法。\n所以，依据上面的例子：\n'aa' in b // truejavascript\nb.hasOwnProperty('aa') // false","source":"_posts/cxy/js/js-prototype.md","raw":"---\ntitle: '【第2章】原型和原型链'\ndate: 2019-04-04 14:13:15\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、原型的简单描述\n#### 在一个类中：\n实例的隐式原型，指向类的显式原型\n类的方法定义于prototype中。\n**son.\\_\\_proto\\_\\_ = Son.prototype**\n![](https://upload-images.jianshu.io/upload_images/20892169-c3761b8085632913.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 在继承关系中：\n子类的显式原型的隐式原型指向父类的显式原型，查找时就顺着这个链去查找，类的最顶端为object\n子类也有隐式原型，指向的是父类。\n**Son.prototype.\\_\\_proto\\_\\_ = Parent.prototype**\n**Son.\\_\\_proto\\_\\_ = Parent**\n![](https://upload-images.jianshu.io/upload_images/20892169-2a872db5f400936f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### call、apply、bind的区别和使用：\n作用是在一个对象中调用另一个对象的方法和属性。\n\ncall、apply、bind的第一个参数均为需要调用属性或方法的对象，区别是apply的第二个参数为数组，而bind、apply参数不放入数组而是直接列出。\n\nbing会返回一个函数，执行函数后才改变this，而call、apply会立即执行。\n```javascript\nlet fullname = {\n    getFullName (city,country) {\n        return this.firstname+this.lastname+'from'+country+city\n    }\n}\nlet name = {\n    firstname: 'bai',\n    lastname:'xue'\n}\n```\n###### bind的执行：\n```javascript\nlet fullnamestring = fullname.getFullName.bind(name,'安康','陕西')\nfullnamestring() //'baixuefrom陕西安康'\n```\n###### call的执行：\n```javascript\nlet fullnamestring = fullname.getFullName.call(name,'安康','陕西') //'baixuefrom陕西安康'\n```\n###### apply的执行：\n```javascript\nlet fullnamestring = fullname.getFullName.apply(name,['安康','陕西']) //'baixuefrom陕西安康'\n```\n\nclass说白了还是语法糖，如果不用class，用原型链当然也可以定义继承关系。\n比如我现在有一个类A，有一个子类B\n```javascript\nfunction A() {\n  this.a = 'a' // 自身属性，不存在于原型链上\n}\nfunction B() {\n  \n}\nA.prototype.aa = 'valueaa'\n// 继承的实现\nB.__proto__ = A\nB.prototype.__proto__ = A.prototype\n\nlet b = new B()\nb.aa //valueaa\nb.a // undefined，\n```\n### 补充：in和hasOwnproperty的区别\n两个方法都是判断对象中是否存在某个key，但hasOwnproperty不判断原型链上的属性和方法。\n所以，依据上面的例子：\n'aa' in b // truejavascript\nb.hasOwnProperty('aa') // false","slug":"cxy/js/js-prototype","published":1,"updated":"2023-01-25T20:25:17.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifl000wkdwi602j03hg","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、原型的简单描述\"><a href=\"#一、原型的简单描述\" class=\"headerlink\" title=\"一、原型的简单描述\"></a>一、原型的简单描述</h2><h4 id=\"在一个类中：\"><a href=\"#在一个类中：\" class=\"headerlink\" title=\"在一个类中：\"></a>在一个类中：</h4><p>实例的隐式原型，指向类的显式原型<br>类的方法定义于prototype中。<br><strong>son.__proto__ = Son.prototype</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c3761b8085632913.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"在继承关系中：\"><a href=\"#在继承关系中：\" class=\"headerlink\" title=\"在继承关系中：\"></a>在继承关系中：</h4><p>子类的显式原型的隐式原型指向父类的显式原型，查找时就顺着这个链去查找，类的最顶端为object<br>子类也有隐式原型，指向的是父类。<br><strong>Son.prototype.__proto__ = Parent.prototype</strong><br><strong>Son.__proto__ = Parent</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2a872db5f400936f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"call、apply、bind的区别和使用：\"><a href=\"#call、apply、bind的区别和使用：\" class=\"headerlink\" title=\"call、apply、bind的区别和使用：\"></a>call、apply、bind的区别和使用：</h4><p>作用是在一个对象中调用另一个对象的方法和属性。</p>\n<p>call、apply、bind的第一个参数均为需要调用属性或方法的对象，区别是apply的第二个参数为数组，而bind、apply参数不放入数组而是直接列出。</p>\n<p>bing会返回一个函数，执行函数后才改变this，而call、apply会立即执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullname = &#123;</span><br><span class=\"line\">    getFullName (city,country) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstname</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">lastname</span>+<span class=\"string\">&#x27;from&#x27;</span>+country+city</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> name = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstname</span>: <span class=\"string\">&#x27;bai&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastname</span>:<span class=\"string\">&#x27;xue&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"bind的执行：\"><a href=\"#bind的执行：\" class=\"headerlink\" title=\"bind的执行：\"></a>bind的执行：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullnamestring = fullname.<span class=\"property\">getFullName</span>.<span class=\"title function_\">bind</span>(name,<span class=\"string\">&#x27;安康&#x27;</span>,<span class=\"string\">&#x27;陕西&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">fullnamestring</span>() <span class=\"comment\">//&#x27;baixuefrom陕西安康&#x27;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"call的执行：\"><a href=\"#call的执行：\" class=\"headerlink\" title=\"call的执行：\"></a>call的执行：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullnamestring = fullname.<span class=\"property\">getFullName</span>.<span class=\"title function_\">call</span>(name,<span class=\"string\">&#x27;安康&#x27;</span>,<span class=\"string\">&#x27;陕西&#x27;</span>) <span class=\"comment\">//&#x27;baixuefrom陕西安康&#x27;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"apply的执行：\"><a href=\"#apply的执行：\" class=\"headerlink\" title=\"apply的执行：\"></a>apply的执行：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullnamestring = fullname.<span class=\"property\">getFullName</span>.<span class=\"title function_\">apply</span>(name,[<span class=\"string\">&#x27;安康&#x27;</span>,<span class=\"string\">&#x27;陕西&#x27;</span>]) <span class=\"comment\">//&#x27;baixuefrom陕西安康&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>class说白了还是语法糖，如果不用class，用原型链当然也可以定义继承关系。<br>比如我现在有一个类A，有一个子类B</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"string\">&#x27;a&#x27;</span> <span class=\"comment\">// 自身属性，不存在于原型链上</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">aa</span> = <span class=\"string\">&#x27;valueaa&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 继承的实现</span></span><br><span class=\"line\">B.<span class=\"property\">__proto__</span> = A</span><br><span class=\"line\">B.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> = A.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()</span><br><span class=\"line\">b.<span class=\"property\">aa</span> <span class=\"comment\">//valueaa</span></span><br><span class=\"line\">b.<span class=\"property\">a</span> <span class=\"comment\">// undefined，</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"补充：in和hasOwnproperty的区别\"><a href=\"#补充：in和hasOwnproperty的区别\" class=\"headerlink\" title=\"补充：in和hasOwnproperty的区别\"></a>补充：in和hasOwnproperty的区别</h3><p>两个方法都是判断对象中是否存在某个key，但hasOwnproperty不判断原型链上的属性和方法。<br>所以，依据上面的例子：<br>‘aa’ in b // truejavascript<br>b.hasOwnProperty(‘aa’) // false</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、原型的简单描述\"><a href=\"#一、原型的简单描述\" class=\"headerlink\" title=\"一、原型的简单描述\"></a>一、原型的简单描述</h2><h4 id=\"在一个类中：\"><a href=\"#在一个类中：\" class=\"headerlink\" title=\"在一个类中：\"></a>在一个类中：</h4><p>实例的隐式原型，指向类的显式原型<br>类的方法定义于prototype中。<br><strong>son.__proto__ = Son.prototype</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c3761b8085632913.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"在继承关系中：\"><a href=\"#在继承关系中：\" class=\"headerlink\" title=\"在继承关系中：\"></a>在继承关系中：</h4><p>子类的显式原型的隐式原型指向父类的显式原型，查找时就顺着这个链去查找，类的最顶端为object<br>子类也有隐式原型，指向的是父类。<br><strong>Son.prototype.__proto__ = Parent.prototype</strong><br><strong>Son.__proto__ = Parent</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-2a872db5f400936f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"call、apply、bind的区别和使用：\"><a href=\"#call、apply、bind的区别和使用：\" class=\"headerlink\" title=\"call、apply、bind的区别和使用：\"></a>call、apply、bind的区别和使用：</h4><p>作用是在一个对象中调用另一个对象的方法和属性。</p>\n<p>call、apply、bind的第一个参数均为需要调用属性或方法的对象，区别是apply的第二个参数为数组，而bind、apply参数不放入数组而是直接列出。</p>\n<p>bing会返回一个函数，执行函数后才改变this，而call、apply会立即执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullname = &#123;</span><br><span class=\"line\">    getFullName (city,country) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstname</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">lastname</span>+<span class=\"string\">&#x27;from&#x27;</span>+country+city</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> name = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstname</span>: <span class=\"string\">&#x27;bai&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastname</span>:<span class=\"string\">&#x27;xue&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"bind的执行：\"><a href=\"#bind的执行：\" class=\"headerlink\" title=\"bind的执行：\"></a>bind的执行：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullnamestring = fullname.<span class=\"property\">getFullName</span>.<span class=\"title function_\">bind</span>(name,<span class=\"string\">&#x27;安康&#x27;</span>,<span class=\"string\">&#x27;陕西&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">fullnamestring</span>() <span class=\"comment\">//&#x27;baixuefrom陕西安康&#x27;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"call的执行：\"><a href=\"#call的执行：\" class=\"headerlink\" title=\"call的执行：\"></a>call的执行：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullnamestring = fullname.<span class=\"property\">getFullName</span>.<span class=\"title function_\">call</span>(name,<span class=\"string\">&#x27;安康&#x27;</span>,<span class=\"string\">&#x27;陕西&#x27;</span>) <span class=\"comment\">//&#x27;baixuefrom陕西安康&#x27;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"apply的执行：\"><a href=\"#apply的执行：\" class=\"headerlink\" title=\"apply的执行：\"></a>apply的执行：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fullnamestring = fullname.<span class=\"property\">getFullName</span>.<span class=\"title function_\">apply</span>(name,[<span class=\"string\">&#x27;安康&#x27;</span>,<span class=\"string\">&#x27;陕西&#x27;</span>]) <span class=\"comment\">//&#x27;baixuefrom陕西安康&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>class说白了还是语法糖，如果不用class，用原型链当然也可以定义继承关系。<br>比如我现在有一个类A，有一个子类B</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"string\">&#x27;a&#x27;</span> <span class=\"comment\">// 自身属性，不存在于原型链上</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">aa</span> = <span class=\"string\">&#x27;valueaa&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 继承的实现</span></span><br><span class=\"line\">B.<span class=\"property\">__proto__</span> = A</span><br><span class=\"line\">B.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> = A.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()</span><br><span class=\"line\">b.<span class=\"property\">aa</span> <span class=\"comment\">//valueaa</span></span><br><span class=\"line\">b.<span class=\"property\">a</span> <span class=\"comment\">// undefined，</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"补充：in和hasOwnproperty的区别\"><a href=\"#补充：in和hasOwnproperty的区别\" class=\"headerlink\" title=\"补充：in和hasOwnproperty的区别\"></a>补充：in和hasOwnproperty的区别</h3><p>两个方法都是判断对象中是否存在某个key，但hasOwnproperty不判断原型链上的属性和方法。<br>所以，依据上面的例子：<br>‘aa’ in b // truejavascript<br>b.hasOwnProperty(‘aa’) // false</p>\n"},{"title":"【第8章】localStorage、sessionStorage、cookie","date":"2019-04-12T07:33:35.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n内容：localStorage sessionStorage cookie\n\n## 一、cookie \n#### 1. 什么是cookie？\ncookie用来server端和浏览器端通信，并不是用来做本地存储，只是因为原先html5不普及所以借用来本地存储\n#### 2. 前端修改cookie的方式：\ndocument.cookie \n后端也可以修改cookie。\n#### 3. cookie的缺点：\n（1）存储大小最大只有4k\n（2）每次发送http请求，cookie都会被发送到服务端，会增加请求的数据量\n（3）只能用document.cookie来修改，很麻烦。\n\n## 二、.localStorage和sessionStorage\n#### 1. 优点：\n（1）localStorage和sessionStorage是html5专门为存储设计，最大存储5m\n（2）api简单易用\n（3）不会随着http请求被发送。\n\nlocalStorage和sessionStorage可以在控制台application查看\n#### 2. api:\ngetItem(key) \nsetItem(key,value)\n\n#### 3. localStorage和sessionStorage、cookie区别\n(1) localStorage会永久存储，sessionStorage只存在于当前会话，如果浏览器关闭，该网站的sessionStorage会立即清除。\n (2) cookie每次都会随着浏览器请求发送到服务端，localStorage和sessionStorage只存在于本地\n (3) localStorage和sessionStorage的api简单，cookie只能通过document.cookie设置。","source":"_posts/cxy/js/js-storage.md","raw":"---\ntitle: '【第8章】localStorage、sessionStorage、cookie'\ndate: 2019-04-12 15:33:35\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n内容：localStorage sessionStorage cookie\n\n## 一、cookie \n#### 1. 什么是cookie？\ncookie用来server端和浏览器端通信，并不是用来做本地存储，只是因为原先html5不普及所以借用来本地存储\n#### 2. 前端修改cookie的方式：\ndocument.cookie \n后端也可以修改cookie。\n#### 3. cookie的缺点：\n（1）存储大小最大只有4k\n（2）每次发送http请求，cookie都会被发送到服务端，会增加请求的数据量\n（3）只能用document.cookie来修改，很麻烦。\n\n## 二、.localStorage和sessionStorage\n#### 1. 优点：\n（1）localStorage和sessionStorage是html5专门为存储设计，最大存储5m\n（2）api简单易用\n（3）不会随着http请求被发送。\n\nlocalStorage和sessionStorage可以在控制台application查看\n#### 2. api:\ngetItem(key) \nsetItem(key,value)\n\n#### 3. localStorage和sessionStorage、cookie区别\n(1) localStorage会永久存储，sessionStorage只存在于当前会话，如果浏览器关闭，该网站的sessionStorage会立即清除。\n (2) cookie每次都会随着浏览器请求发送到服务端，localStorage和sessionStorage只存在于本地\n (3) localStorage和sessionStorage的api简单，cookie只能通过document.cookie设置。","slug":"cxy/js/js-storage","published":1,"updated":"2023-01-25T20:38:46.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifl000zkdwi8gqzcw1f","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>内容：localStorage sessionStorage cookie</p>\n<h2 id=\"一、cookie\"><a href=\"#一、cookie\" class=\"headerlink\" title=\"一、cookie\"></a>一、cookie</h2><h4 id=\"1-什么是cookie？\"><a href=\"#1-什么是cookie？\" class=\"headerlink\" title=\"1. 什么是cookie？\"></a>1. 什么是cookie？</h4><p>cookie用来server端和浏览器端通信，并不是用来做本地存储，只是因为原先html5不普及所以借用来本地存储</p>\n<h4 id=\"2-前端修改cookie的方式：\"><a href=\"#2-前端修改cookie的方式：\" class=\"headerlink\" title=\"2. 前端修改cookie的方式：\"></a>2. 前端修改cookie的方式：</h4><p>document.cookie<br>后端也可以修改cookie。</p>\n<h4 id=\"3-cookie的缺点：\"><a href=\"#3-cookie的缺点：\" class=\"headerlink\" title=\"3. cookie的缺点：\"></a>3. cookie的缺点：</h4><p>（1）存储大小最大只有4k<br>（2）每次发送http请求，cookie都会被发送到服务端，会增加请求的数据量<br>（3）只能用document.cookie来修改，很麻烦。</p>\n<h2 id=\"二、-localStorage和sessionStorage\"><a href=\"#二、-localStorage和sessionStorage\" class=\"headerlink\" title=\"二、.localStorage和sessionStorage\"></a>二、.localStorage和sessionStorage</h2><h4 id=\"1-优点：\"><a href=\"#1-优点：\" class=\"headerlink\" title=\"1. 优点：\"></a>1. 优点：</h4><p>（1）localStorage和sessionStorage是html5专门为存储设计，最大存储5m<br>（2）api简单易用<br>（3）不会随着http请求被发送。</p>\n<p>localStorage和sessionStorage可以在控制台application查看</p>\n<h4 id=\"2-api\"><a href=\"#2-api\" class=\"headerlink\" title=\"2. api:\"></a>2. api:</h4><p>getItem(key)<br>setItem(key,value)</p>\n<h4 id=\"3-localStorage和sessionStorage、cookie区别\"><a href=\"#3-localStorage和sessionStorage、cookie区别\" class=\"headerlink\" title=\"3. localStorage和sessionStorage、cookie区别\"></a>3. localStorage和sessionStorage、cookie区别</h4><p>(1) localStorage会永久存储，sessionStorage只存在于当前会话，如果浏览器关闭，该网站的sessionStorage会立即清除。<br> (2) cookie每次都会随着浏览器请求发送到服务端，localStorage和sessionStorage只存在于本地<br> (3) localStorage和sessionStorage的api简单，cookie只能通过document.cookie设置。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>内容：localStorage sessionStorage cookie</p>\n<h2 id=\"一、cookie\"><a href=\"#一、cookie\" class=\"headerlink\" title=\"一、cookie\"></a>一、cookie</h2><h4 id=\"1-什么是cookie？\"><a href=\"#1-什么是cookie？\" class=\"headerlink\" title=\"1. 什么是cookie？\"></a>1. 什么是cookie？</h4><p>cookie用来server端和浏览器端通信，并不是用来做本地存储，只是因为原先html5不普及所以借用来本地存储</p>\n<h4 id=\"2-前端修改cookie的方式：\"><a href=\"#2-前端修改cookie的方式：\" class=\"headerlink\" title=\"2. 前端修改cookie的方式：\"></a>2. 前端修改cookie的方式：</h4><p>document.cookie<br>后端也可以修改cookie。</p>\n<h4 id=\"3-cookie的缺点：\"><a href=\"#3-cookie的缺点：\" class=\"headerlink\" title=\"3. cookie的缺点：\"></a>3. cookie的缺点：</h4><p>（1）存储大小最大只有4k<br>（2）每次发送http请求，cookie都会被发送到服务端，会增加请求的数据量<br>（3）只能用document.cookie来修改，很麻烦。</p>\n<h2 id=\"二、-localStorage和sessionStorage\"><a href=\"#二、-localStorage和sessionStorage\" class=\"headerlink\" title=\"二、.localStorage和sessionStorage\"></a>二、.localStorage和sessionStorage</h2><h4 id=\"1-优点：\"><a href=\"#1-优点：\" class=\"headerlink\" title=\"1. 优点：\"></a>1. 优点：</h4><p>（1）localStorage和sessionStorage是html5专门为存储设计，最大存储5m<br>（2）api简单易用<br>（3）不会随着http请求被发送。</p>\n<p>localStorage和sessionStorage可以在控制台application查看</p>\n<h4 id=\"2-api\"><a href=\"#2-api\" class=\"headerlink\" title=\"2. api:\"></a>2. api:</h4><p>getItem(key)<br>setItem(key,value)</p>\n<h4 id=\"3-localStorage和sessionStorage、cookie区别\"><a href=\"#3-localStorage和sessionStorage、cookie区别\" class=\"headerlink\" title=\"3. localStorage和sessionStorage、cookie区别\"></a>3. localStorage和sessionStorage、cookie区别</h4><p>(1) localStorage会永久存储，sessionStorage只存在于当前会话，如果浏览器关闭，该网站的sessionStorage会立即清除。<br> (2) cookie每次都会随着浏览器请求发送到服务端，localStorage和sessionStorage只存在于本地<br> (3) localStorage和sessionStorage的api简单，cookie只能通过document.cookie设置。</p>\n"},{"title":"【第3-1章】this","date":"2019-04-05T04:00:00.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 一、作用域与this\n**ES5只有全局作用域和函数作用域，没有块级作用域**\n**作用域分为静态/词法作用域和动态作用域**\n\n#### 0. 声明提升和暂时性死区\n\n**(1).声明提升(var)**\n```javascript\nconsole.log(a); // undefined\nvar a = 1;\n```\n**(2).暂时性死区(let)**\n```javascript\nconsole.log(a) // Uncaught ReferenceError: a is not defined\nlet a = 1;\n```\n注意：\n在es5 strict mode，赋值给未声明的变量将报错。\n\n#### 1.静态作用域\n静态作用域指的是一段代码，在它**执行之前就已经确定了它的作用域**，简单来说就是在执行之前就确定了它可以应用哪些地方的作用域(变量)\n首先let和const声明的全局变量不再属于window\n变量的作用域，**除了this以外，全部遵循词法作用域的原则。**\n即JS引擎总会从最近的一个域，向外层域查找；\n#### 二、动态作用域\n动态作用域–函数的作用域是在**函数调用的时候才决定的。**\n在 JavaScript 中的**仅存**的应用动态作用域的地方：this 引用。\n动态作用域，作用域是基于调用栈的，而不是代码中的作用域嵌套；\n**作用域嵌套**：有词法作用域一样的特性，查找变量时，总是寻找最近的作用域；\n\n#### 三、声明函数的方法\n（1）.函数声明\nfunction a (a,b,c) {\treturn a+b+c;}\n（2）.函数表达式\nvar a = function (a,b,c) {\treturn a+b+c;}\n（3）.Function构造函数\n语法： new Function(参数1, 参数2, 参数3, 方法体)\nvar a = new Function('a','b','c','return a+b+c')\n\n#### 四、变量进入作用域的方法\n**1.Language-defined**：所有的作用域默认都会给出 this 和 arguments 两个变量名（global没有arguments\n**2.Formal parameters（函数形参）**：函数有形参，形参会添加到函数的作用域中;\n**3.Function declarations（函数声明）**：如 function foo() {}\n**4.Variable declarations（变量声明）**：如 var foo，包括_函数表达式_\n\n除了上下文顺序声明之外，若声明提升符合。\n函数声明和变量声明**总是会被移动到它们所在的作用域的顶部**。\n而变量的解析顺序（优先级），与变量进入作用域的4种方式的顺序一致。\n\n关于上下文：https://stackoverflow.com/questions/7493936/is-there-a-difference-between-the-terms-execution-context-and-scope\n```javascript\nfunction testOrder(arg) {\n    console.log(arg); // arg是形参，不会被重新定义\n    console.log(a); // 因为函数声明比变量声明优先级高，所以这里a是函数\n    var arg = 'hello'; // var arg;变量声明被忽略， arg = 'hello'被执行\n    var a = 10; // var a;被忽视; a = 10被执行，a变成number\n    function a() {\n        console.log('fun');\n    } // 被提升到作用域顶部\n    console.log(a); // 输出10\n    console.log(arg); // 输出hello\n}; \ntestOrder('hi');\n/* 输出：\nhi \nfunction a() {\n        console.log('fun');\n    }\n10 \nhello \n*/\n```\n#### 五、this\n每个作用域都会有this。\n在全局上下文（任何函数以外），this指向全局对象。\n```javascript\nconsole.log(this === window); // true\n```\n###### this在具体位置的具体指向：\n1. 在函数内部时，this由函数怎么调用来确定。\n简单调用，即独立函数调用。由于this没有通过call来指定，且this必须指向对象，那么默认就指向全局对象。\n2. 严格模式下，this保持进入execution context时被设置的值。如果没有设置，那么默认是undefined。它可以被设置为任意值**（包括null/undefined/1等等基础值，不会被转换成对象）**。\n3. 在箭头函数中，this由词法/静态作用域设置（set lexically）。它被设置为包含它的execution context的this，并且不再被调用方式影响（call/apply/bind）。\n4. 当函数作为对象方法调用时，this指向该对象。\n5. 原型链上的方法根对象方法一样，作为对象方法调用时this指向该对象。\n6. 在构造函数（函数用new调用）中，this指向要被constructed的新对象。\n7. Function.prototype上的call和apply可以指定函数运行时的this。\n8. ES5引进了Function.prototype.bind。f.bind(someObject)会创建新的函数（函数体和作用域与原函数一致），但this被永久绑定到someObject，不论你怎么调用。\n它说创建新函数，可不是覆盖原函数，！！！！\n9. 闭包中的this（挺绕的，但无论下次看到理不理解，都要记住闭包套的闭包有可能返回window，需要分析有没有自执行函数）\n为什么下面这段代码的结果是\"The Window\"？\n```javascript\nvar name = \"The Window\";\nvar object = {\n    name: \"My object\",\n    getNameFunc: function() {\n        return function() {\n            return this.name;\n        };\n    }\n}\nobject.getNameFunc()() // The Window\n```\nobject.getNameFunc是对象调用的方法，里面的this是指向object，但object里面return的闭包，有自己的this和arguments。\n 在《Javascript高级程序设计》中有写\n>为什么匿名函数没有取得其包含作用域（外部作用域）的this对象呢？\n每个函数被调用时，其活动对象都会自动取得两个特殊变量：this和arguments。内部函数在搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量。\n\n在[作用域和闭包](/2019/04/05/cxy/js/js-context/)说过，闭包的情况有函数作为返回值及函数作为参数被传递。同样的，还有像操作dom函数的闭包。\n```javascript\nfunction clickEvent () {\n  console.log(this) // dragDemo\n  return (function() {\n    console.log(this) // window\n  })() // 如果没有自执行，就需要具体情况具体分析了\n}\ndocument.querySelector('.dragDemo').addEventListener('click',clickEvent)\n```\n再深层一些，比如clickEvent这个函数返回的也是闭包，那么无论多少层，只要执行了，都是window。\n```javascript\nfunction clickEvent (fun) {\n  return function() {\n    fun()\n  }\n}\ndocument.querySelector('.div').addEventListener('click',clickEvent(function(){\n    console.log(this) // window\n}))\n```\n**注意**：当用call和apply而传进去作为this的不是对象时，将会调用内置的ToObject操作转换成对象。所以4将会装换成new Number(4)，而null/undefined由于无法转换成对象，全局对象将作为this。\n\n#### 六、JavaScript采用Lexical Scope。（静态范围作用域）\n于是，我们仅仅通过查看代码（因为JavaScript采用静态范围作用域），就可以确定各个变量到底指代哪个值。\n另外，变量的查找是从里往外的，直到最顶层（全局作用域），并且一旦找到，即停止向上查找。所以内层的变量可以覆盖外层的同名变量。\n#### 七、Function vs. Block Scope\n上面的内容有意无意似乎应该表明了，JS没有Block Scope。\n除了Global Scope，只有function可以创建新作用域（Function Scope）。 不过这已经是老黄历了，ES6引入了Block Scope。\n另外，with和try catch都可以创建Block Scope。\n","source":"_posts/cxy/js/js-this.md","raw":"---\ntitle: '【第3-1章】this'\ndate: 2019-04-05 12:00:00\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 一、作用域与this\n**ES5只有全局作用域和函数作用域，没有块级作用域**\n**作用域分为静态/词法作用域和动态作用域**\n\n#### 0. 声明提升和暂时性死区\n\n**(1).声明提升(var)**\n```javascript\nconsole.log(a); // undefined\nvar a = 1;\n```\n**(2).暂时性死区(let)**\n```javascript\nconsole.log(a) // Uncaught ReferenceError: a is not defined\nlet a = 1;\n```\n注意：\n在es5 strict mode，赋值给未声明的变量将报错。\n\n#### 1.静态作用域\n静态作用域指的是一段代码，在它**执行之前就已经确定了它的作用域**，简单来说就是在执行之前就确定了它可以应用哪些地方的作用域(变量)\n首先let和const声明的全局变量不再属于window\n变量的作用域，**除了this以外，全部遵循词法作用域的原则。**\n即JS引擎总会从最近的一个域，向外层域查找；\n#### 二、动态作用域\n动态作用域–函数的作用域是在**函数调用的时候才决定的。**\n在 JavaScript 中的**仅存**的应用动态作用域的地方：this 引用。\n动态作用域，作用域是基于调用栈的，而不是代码中的作用域嵌套；\n**作用域嵌套**：有词法作用域一样的特性，查找变量时，总是寻找最近的作用域；\n\n#### 三、声明函数的方法\n（1）.函数声明\nfunction a (a,b,c) {\treturn a+b+c;}\n（2）.函数表达式\nvar a = function (a,b,c) {\treturn a+b+c;}\n（3）.Function构造函数\n语法： new Function(参数1, 参数2, 参数3, 方法体)\nvar a = new Function('a','b','c','return a+b+c')\n\n#### 四、变量进入作用域的方法\n**1.Language-defined**：所有的作用域默认都会给出 this 和 arguments 两个变量名（global没有arguments\n**2.Formal parameters（函数形参）**：函数有形参，形参会添加到函数的作用域中;\n**3.Function declarations（函数声明）**：如 function foo() {}\n**4.Variable declarations（变量声明）**：如 var foo，包括_函数表达式_\n\n除了上下文顺序声明之外，若声明提升符合。\n函数声明和变量声明**总是会被移动到它们所在的作用域的顶部**。\n而变量的解析顺序（优先级），与变量进入作用域的4种方式的顺序一致。\n\n关于上下文：https://stackoverflow.com/questions/7493936/is-there-a-difference-between-the-terms-execution-context-and-scope\n```javascript\nfunction testOrder(arg) {\n    console.log(arg); // arg是形参，不会被重新定义\n    console.log(a); // 因为函数声明比变量声明优先级高，所以这里a是函数\n    var arg = 'hello'; // var arg;变量声明被忽略， arg = 'hello'被执行\n    var a = 10; // var a;被忽视; a = 10被执行，a变成number\n    function a() {\n        console.log('fun');\n    } // 被提升到作用域顶部\n    console.log(a); // 输出10\n    console.log(arg); // 输出hello\n}; \ntestOrder('hi');\n/* 输出：\nhi \nfunction a() {\n        console.log('fun');\n    }\n10 \nhello \n*/\n```\n#### 五、this\n每个作用域都会有this。\n在全局上下文（任何函数以外），this指向全局对象。\n```javascript\nconsole.log(this === window); // true\n```\n###### this在具体位置的具体指向：\n1. 在函数内部时，this由函数怎么调用来确定。\n简单调用，即独立函数调用。由于this没有通过call来指定，且this必须指向对象，那么默认就指向全局对象。\n2. 严格模式下，this保持进入execution context时被设置的值。如果没有设置，那么默认是undefined。它可以被设置为任意值**（包括null/undefined/1等等基础值，不会被转换成对象）**。\n3. 在箭头函数中，this由词法/静态作用域设置（set lexically）。它被设置为包含它的execution context的this，并且不再被调用方式影响（call/apply/bind）。\n4. 当函数作为对象方法调用时，this指向该对象。\n5. 原型链上的方法根对象方法一样，作为对象方法调用时this指向该对象。\n6. 在构造函数（函数用new调用）中，this指向要被constructed的新对象。\n7. Function.prototype上的call和apply可以指定函数运行时的this。\n8. ES5引进了Function.prototype.bind。f.bind(someObject)会创建新的函数（函数体和作用域与原函数一致），但this被永久绑定到someObject，不论你怎么调用。\n它说创建新函数，可不是覆盖原函数，！！！！\n9. 闭包中的this（挺绕的，但无论下次看到理不理解，都要记住闭包套的闭包有可能返回window，需要分析有没有自执行函数）\n为什么下面这段代码的结果是\"The Window\"？\n```javascript\nvar name = \"The Window\";\nvar object = {\n    name: \"My object\",\n    getNameFunc: function() {\n        return function() {\n            return this.name;\n        };\n    }\n}\nobject.getNameFunc()() // The Window\n```\nobject.getNameFunc是对象调用的方法，里面的this是指向object，但object里面return的闭包，有自己的this和arguments。\n 在《Javascript高级程序设计》中有写\n>为什么匿名函数没有取得其包含作用域（外部作用域）的this对象呢？\n每个函数被调用时，其活动对象都会自动取得两个特殊变量：this和arguments。内部函数在搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量。\n\n在[作用域和闭包](/2019/04/05/cxy/js/js-context/)说过，闭包的情况有函数作为返回值及函数作为参数被传递。同样的，还有像操作dom函数的闭包。\n```javascript\nfunction clickEvent () {\n  console.log(this) // dragDemo\n  return (function() {\n    console.log(this) // window\n  })() // 如果没有自执行，就需要具体情况具体分析了\n}\ndocument.querySelector('.dragDemo').addEventListener('click',clickEvent)\n```\n再深层一些，比如clickEvent这个函数返回的也是闭包，那么无论多少层，只要执行了，都是window。\n```javascript\nfunction clickEvent (fun) {\n  return function() {\n    fun()\n  }\n}\ndocument.querySelector('.div').addEventListener('click',clickEvent(function(){\n    console.log(this) // window\n}))\n```\n**注意**：当用call和apply而传进去作为this的不是对象时，将会调用内置的ToObject操作转换成对象。所以4将会装换成new Number(4)，而null/undefined由于无法转换成对象，全局对象将作为this。\n\n#### 六、JavaScript采用Lexical Scope。（静态范围作用域）\n于是，我们仅仅通过查看代码（因为JavaScript采用静态范围作用域），就可以确定各个变量到底指代哪个值。\n另外，变量的查找是从里往外的，直到最顶层（全局作用域），并且一旦找到，即停止向上查找。所以内层的变量可以覆盖外层的同名变量。\n#### 七、Function vs. Block Scope\n上面的内容有意无意似乎应该表明了，JS没有Block Scope。\n除了Global Scope，只有function可以创建新作用域（Function Scope）。 不过这已经是老黄历了，ES6引入了Block Scope。\n另外，with和try catch都可以创建Block Scope。\n","slug":"cxy/js/js-this","published":1,"updated":"2023-01-25T20:25:31.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldc53ifm0012kdwi1grw0lz5","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"一、作用域与this\"><a href=\"#一、作用域与this\" class=\"headerlink\" title=\"一、作用域与this\"></a>一、作用域与this</h2><p><strong>ES5只有全局作用域和函数作用域，没有块级作用域</strong><br><strong>作用域分为静态/词法作用域和动态作用域</strong></p>\n<h4 id=\"0-声明提升和暂时性死区\"><a href=\"#0-声明提升和暂时性死区\" class=\"headerlink\" title=\"0. 声明提升和暂时性死区\"></a>0. 声明提升和暂时性死区</h4><p><strong>(1).声明提升(var)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>(2).暂时性死区(let)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>注意：<br>在es5 strict mode，赋值给未声明的变量将报错。</p>\n<h4 id=\"1-静态作用域\"><a href=\"#1-静态作用域\" class=\"headerlink\" title=\"1.静态作用域\"></a>1.静态作用域</h4><p>静态作用域指的是一段代码，在它<strong>执行之前就已经确定了它的作用域</strong>，简单来说就是在执行之前就确定了它可以应用哪些地方的作用域(变量)<br>首先let和const声明的全局变量不再属于window<br>变量的作用域，<strong>除了this以外，全部遵循词法作用域的原则。</strong><br>即JS引擎总会从最近的一个域，向外层域查找；</p>\n<h4 id=\"二、动态作用域\"><a href=\"#二、动态作用域\" class=\"headerlink\" title=\"二、动态作用域\"></a>二、动态作用域</h4><p>动态作用域–函数的作用域是在<strong>函数调用的时候才决定的。</strong><br>在 JavaScript 中的<strong>仅存</strong>的应用动态作用域的地方：this 引用。<br>动态作用域，作用域是基于调用栈的，而不是代码中的作用域嵌套；<br><strong>作用域嵌套</strong>：有词法作用域一样的特性，查找变量时，总是寻找最近的作用域；</p>\n<h4 id=\"三、声明函数的方法\"><a href=\"#三、声明函数的方法\" class=\"headerlink\" title=\"三、声明函数的方法\"></a>三、声明函数的方法</h4><p>（1）.函数声明<br>function a (a,b,c) {    return a+b+c;}<br>（2）.函数表达式<br>var a = function (a,b,c) {    return a+b+c;}<br>（3）.Function构造函数<br>语法： new Function(参数1, 参数2, 参数3, 方法体)<br>var a = new Function(‘a’,’b’,’c’,’return a+b+c’)</p>\n<h4 id=\"四、变量进入作用域的方法\"><a href=\"#四、变量进入作用域的方法\" class=\"headerlink\" title=\"四、变量进入作用域的方法\"></a>四、变量进入作用域的方法</h4><p><strong>1.Language-defined</strong>：所有的作用域默认都会给出 this 和 arguments 两个变量名（global没有arguments<br><strong>2.Formal parameters（函数形参）</strong>：函数有形参，形参会添加到函数的作用域中;<br><strong>3.Function declarations（函数声明）</strong>：如 function foo() {}<br><strong>4.Variable declarations（变量声明）</strong>：如 var foo，包括_函数表达式_</p>\n<p>除了上下文顺序声明之外，若声明提升符合。<br>函数声明和变量声明<strong>总是会被移动到它们所在的作用域的顶部</strong>。<br>而变量的解析顺序（优先级），与变量进入作用域的4种方式的顺序一致。</p>\n<p>关于上下文：<a href=\"https://stackoverflow.com/questions/7493936/is-there-a-difference-between-the-terms-execution-context-and-scope\">https://stackoverflow.com/questions/7493936/is-there-a-difference-between-the-terms-execution-context-and-scope</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testOrder</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg); <span class=\"comment\">// arg是形参，不会被重新定义</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 因为函数声明比变量声明优先级高，所以这里a是函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arg = <span class=\"string\">&#x27;hello&#x27;</span>; <span class=\"comment\">// var arg;变量声明被忽略， arg = &#x27;hello&#x27;被执行</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>; <span class=\"comment\">// var a;被忽视; a = 10被执行，a变成number</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fun&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"comment\">// 被提升到作用域顶部</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出10</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg); <span class=\"comment\">// 输出hello</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"title function_\">testOrder</span>(<span class=\"string\">&#x27;hi&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">/* 输出：</span></span><br><span class=\"line\"><span class=\"comment\">hi </span></span><br><span class=\"line\"><span class=\"comment\">function a() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        console.log(&#x27;fun&#x27;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">10 </span></span><br><span class=\"line\"><span class=\"comment\">hello </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"五、this\"><a href=\"#五、this\" class=\"headerlink\" title=\"五、this\"></a>五、this</h4><p>每个作用域都会有this。<br>在全局上下文（任何函数以外），this指向全局对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span> === <span class=\"variable language_\">window</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"this在具体位置的具体指向：\"><a href=\"#this在具体位置的具体指向：\" class=\"headerlink\" title=\"this在具体位置的具体指向：\"></a>this在具体位置的具体指向：</h6><ol>\n<li>在函数内部时，this由函数怎么调用来确定。<br>简单调用，即独立函数调用。由于this没有通过call来指定，且this必须指向对象，那么默认就指向全局对象。</li>\n<li>严格模式下，this保持进入execution context时被设置的值。如果没有设置，那么默认是undefined。它可以被设置为任意值<strong>（包括null/undefined/1等等基础值，不会被转换成对象）</strong>。</li>\n<li>在箭头函数中，this由词法/静态作用域设置（set lexically）。它被设置为包含它的execution context的this，并且不再被调用方式影响（call/apply/bind）。</li>\n<li>当函数作为对象方法调用时，this指向该对象。</li>\n<li>原型链上的方法根对象方法一样，作为对象方法调用时this指向该对象。</li>\n<li>在构造函数（函数用new调用）中，this指向要被constructed的新对象。</li>\n<li>Function.prototype上的call和apply可以指定函数运行时的this。</li>\n<li>ES5引进了Function.prototype.bind。f.bind(someObject)会创建新的函数（函数体和作用域与原函数一致），但this被永久绑定到someObject，不论你怎么调用。<br>它说创建新函数，可不是覆盖原函数，！！！！</li>\n<li>闭包中的this（挺绕的，但无论下次看到理不理解，都要记住闭包套的闭包有可能返回window，需要分析有没有自执行函数）<br>为什么下面这段代码的结果是”The Window”？<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;My object&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">getNameFunc</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">object.<span class=\"title function_\">getNameFunc</span>()() <span class=\"comment\">// The Window</span></span><br></pre></td></tr></table></figure>\nobject.getNameFunc是对象调用的方法，里面的this是指向object，但object里面return的闭包，有自己的this和arguments。<br>在《Javascript高级程序设计》中有写<blockquote>\n<p>为什么匿名函数没有取得其包含作用域（外部作用域）的this对象呢？<br>每个函数被调用时，其活动对象都会自动取得两个特殊变量：this和arguments。内部函数在搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量。</p>\n</blockquote>\n</li>\n</ol>\n<p>在<a href=\"/2019/04/05/cxy/js/js-context/\">作用域和闭包</a>说过，闭包的情况有函数作为返回值及函数作为参数被传递。同样的，还有像操作dom函数的闭包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clickEvent</span> () &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// dragDemo</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// window</span></span><br><span class=\"line\">  &#125;)() <span class=\"comment\">// 如果没有自执行，就需要具体情况具体分析了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.dragDemo&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,clickEvent)</span><br></pre></td></tr></table></figure>\n<p>再深层一些，比如clickEvent这个函数返回的也是闭包，那么无论多少层，只要执行了，都是window。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clickEvent</span> (fun) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fun</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.div&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"title function_\">clickEvent</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// window</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：当用call和apply而传进去作为this的不是对象时，将会调用内置的ToObject操作转换成对象。所以4将会装换成new Number(4)，而null/undefined由于无法转换成对象，全局对象将作为this。</p>\n<h4 id=\"六、JavaScript采用Lexical-Scope。（静态范围作用域）\"><a href=\"#六、JavaScript采用Lexical-Scope。（静态范围作用域）\" class=\"headerlink\" title=\"六、JavaScript采用Lexical Scope。（静态范围作用域）\"></a>六、JavaScript采用Lexical Scope。（静态范围作用域）</h4><p>于是，我们仅仅通过查看代码（因为JavaScript采用静态范围作用域），就可以确定各个变量到底指代哪个值。<br>另外，变量的查找是从里往外的，直到最顶层（全局作用域），并且一旦找到，即停止向上查找。所以内层的变量可以覆盖外层的同名变量。</p>\n<h4 id=\"七、Function-vs-Block-Scope\"><a href=\"#七、Function-vs-Block-Scope\" class=\"headerlink\" title=\"七、Function vs. Block Scope\"></a>七、Function vs. Block Scope</h4><p>上面的内容有意无意似乎应该表明了，JS没有Block Scope。<br>除了Global Scope，只有function可以创建新作用域（Function Scope）。 不过这已经是老黄历了，ES6引入了Block Scope。<br>另外，with和try catch都可以创建Block Scope。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"一、作用域与this\"><a href=\"#一、作用域与this\" class=\"headerlink\" title=\"一、作用域与this\"></a>一、作用域与this</h2><p><strong>ES5只有全局作用域和函数作用域，没有块级作用域</strong><br><strong>作用域分为静态/词法作用域和动态作用域</strong></p>\n<h4 id=\"0-声明提升和暂时性死区\"><a href=\"#0-声明提升和暂时性死区\" class=\"headerlink\" title=\"0. 声明提升和暂时性死区\"></a>0. 声明提升和暂时性死区</h4><p><strong>(1).声明提升(var)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>(2).暂时性死区(let)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>注意：<br>在es5 strict mode，赋值给未声明的变量将报错。</p>\n<h4 id=\"1-静态作用域\"><a href=\"#1-静态作用域\" class=\"headerlink\" title=\"1.静态作用域\"></a>1.静态作用域</h4><p>静态作用域指的是一段代码，在它<strong>执行之前就已经确定了它的作用域</strong>，简单来说就是在执行之前就确定了它可以应用哪些地方的作用域(变量)<br>首先let和const声明的全局变量不再属于window<br>变量的作用域，<strong>除了this以外，全部遵循词法作用域的原则。</strong><br>即JS引擎总会从最近的一个域，向外层域查找；</p>\n<h4 id=\"二、动态作用域\"><a href=\"#二、动态作用域\" class=\"headerlink\" title=\"二、动态作用域\"></a>二、动态作用域</h4><p>动态作用域–函数的作用域是在<strong>函数调用的时候才决定的。</strong><br>在 JavaScript 中的<strong>仅存</strong>的应用动态作用域的地方：this 引用。<br>动态作用域，作用域是基于调用栈的，而不是代码中的作用域嵌套；<br><strong>作用域嵌套</strong>：有词法作用域一样的特性，查找变量时，总是寻找最近的作用域；</p>\n<h4 id=\"三、声明函数的方法\"><a href=\"#三、声明函数的方法\" class=\"headerlink\" title=\"三、声明函数的方法\"></a>三、声明函数的方法</h4><p>（1）.函数声明<br>function a (a,b,c) {    return a+b+c;}<br>（2）.函数表达式<br>var a = function (a,b,c) {    return a+b+c;}<br>（3）.Function构造函数<br>语法： new Function(参数1, 参数2, 参数3, 方法体)<br>var a = new Function(‘a’,’b’,’c’,’return a+b+c’)</p>\n<h4 id=\"四、变量进入作用域的方法\"><a href=\"#四、变量进入作用域的方法\" class=\"headerlink\" title=\"四、变量进入作用域的方法\"></a>四、变量进入作用域的方法</h4><p><strong>1.Language-defined</strong>：所有的作用域默认都会给出 this 和 arguments 两个变量名（global没有arguments<br><strong>2.Formal parameters（函数形参）</strong>：函数有形参，形参会添加到函数的作用域中;<br><strong>3.Function declarations（函数声明）</strong>：如 function foo() {}<br><strong>4.Variable declarations（变量声明）</strong>：如 var foo，包括_函数表达式_</p>\n<p>除了上下文顺序声明之外，若声明提升符合。<br>函数声明和变量声明<strong>总是会被移动到它们所在的作用域的顶部</strong>。<br>而变量的解析顺序（优先级），与变量进入作用域的4种方式的顺序一致。</p>\n<p>关于上下文：<a href=\"https://stackoverflow.com/questions/7493936/is-there-a-difference-between-the-terms-execution-context-and-scope\">https://stackoverflow.com/questions/7493936/is-there-a-difference-between-the-terms-execution-context-and-scope</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testOrder</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg); <span class=\"comment\">// arg是形参，不会被重新定义</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 因为函数声明比变量声明优先级高，所以这里a是函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arg = <span class=\"string\">&#x27;hello&#x27;</span>; <span class=\"comment\">// var arg;变量声明被忽略， arg = &#x27;hello&#x27;被执行</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>; <span class=\"comment\">// var a;被忽视; a = 10被执行，a变成number</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fun&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"comment\">// 被提升到作用域顶部</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出10</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg); <span class=\"comment\">// 输出hello</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"title function_\">testOrder</span>(<span class=\"string\">&#x27;hi&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">/* 输出：</span></span><br><span class=\"line\"><span class=\"comment\">hi </span></span><br><span class=\"line\"><span class=\"comment\">function a() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        console.log(&#x27;fun&#x27;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">10 </span></span><br><span class=\"line\"><span class=\"comment\">hello </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"五、this\"><a href=\"#五、this\" class=\"headerlink\" title=\"五、this\"></a>五、this</h4><p>每个作用域都会有this。<br>在全局上下文（任何函数以外），this指向全局对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span> === <span class=\"variable language_\">window</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"this在具体位置的具体指向：\"><a href=\"#this在具体位置的具体指向：\" class=\"headerlink\" title=\"this在具体位置的具体指向：\"></a>this在具体位置的具体指向：</h6><ol>\n<li>在函数内部时，this由函数怎么调用来确定。<br>简单调用，即独立函数调用。由于this没有通过call来指定，且this必须指向对象，那么默认就指向全局对象。</li>\n<li>严格模式下，this保持进入execution context时被设置的值。如果没有设置，那么默认是undefined。它可以被设置为任意值<strong>（包括null/undefined/1等等基础值，不会被转换成对象）</strong>。</li>\n<li>在箭头函数中，this由词法/静态作用域设置（set lexically）。它被设置为包含它的execution context的this，并且不再被调用方式影响（call/apply/bind）。</li>\n<li>当函数作为对象方法调用时，this指向该对象。</li>\n<li>原型链上的方法根对象方法一样，作为对象方法调用时this指向该对象。</li>\n<li>在构造函数（函数用new调用）中，this指向要被constructed的新对象。</li>\n<li>Function.prototype上的call和apply可以指定函数运行时的this。</li>\n<li>ES5引进了Function.prototype.bind。f.bind(someObject)会创建新的函数（函数体和作用域与原函数一致），但this被永久绑定到someObject，不论你怎么调用。<br>它说创建新函数，可不是覆盖原函数，！！！！</li>\n<li>闭包中的this（挺绕的，但无论下次看到理不理解，都要记住闭包套的闭包有可能返回window，需要分析有没有自执行函数）<br>为什么下面这段代码的结果是”The Window”？<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;My object&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">getNameFunc</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">object.<span class=\"title function_\">getNameFunc</span>()() <span class=\"comment\">// The Window</span></span><br></pre></td></tr></table></figure>\nobject.getNameFunc是对象调用的方法，里面的this是指向object，但object里面return的闭包，有自己的this和arguments。<br>在《Javascript高级程序设计》中有写<blockquote>\n<p>为什么匿名函数没有取得其包含作用域（外部作用域）的this对象呢？<br>每个函数被调用时，其活动对象都会自动取得两个特殊变量：this和arguments。内部函数在搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量。</p>\n</blockquote>\n</li>\n</ol>\n<p>在<a href=\"/2019/04/05/cxy/js/js-context/\">作用域和闭包</a>说过，闭包的情况有函数作为返回值及函数作为参数被传递。同样的，还有像操作dom函数的闭包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clickEvent</span> () &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// dragDemo</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// window</span></span><br><span class=\"line\">  &#125;)() <span class=\"comment\">// 如果没有自执行，就需要具体情况具体分析了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.dragDemo&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,clickEvent)</span><br></pre></td></tr></table></figure>\n<p>再深层一些，比如clickEvent这个函数返回的也是闭包，那么无论多少层，只要执行了，都是window。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clickEvent</span> (fun) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fun</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.div&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"title function_\">clickEvent</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// window</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：当用call和apply而传进去作为this的不是对象时，将会调用内置的ToObject操作转换成对象。所以4将会装换成new Number(4)，而null/undefined由于无法转换成对象，全局对象将作为this。</p>\n<h4 id=\"六、JavaScript采用Lexical-Scope。（静态范围作用域）\"><a href=\"#六、JavaScript采用Lexical-Scope。（静态范围作用域）\" class=\"headerlink\" title=\"六、JavaScript采用Lexical Scope。（静态范围作用域）\"></a>六、JavaScript采用Lexical Scope。（静态范围作用域）</h4><p>于是，我们仅仅通过查看代码（因为JavaScript采用静态范围作用域），就可以确定各个变量到底指代哪个值。<br>另外，变量的查找是从里往外的，直到最顶层（全局作用域），并且一旦找到，即停止向上查找。所以内层的变量可以覆盖外层的同名变量。</p>\n<h4 id=\"七、Function-vs-Block-Scope\"><a href=\"#七、Function-vs-Block-Scope\" class=\"headerlink\" title=\"七、Function vs. Block Scope\"></a>七、Function vs. Block Scope</h4><p>上面的内容有意无意似乎应该表明了，JS没有Block Scope。<br>除了Global Scope，只有function可以创建新作用域（Function Scope）。 不过这已经是老黄历了，ES6引入了Block Scope。<br>另外，with和try catch都可以创建Block Scope。</p>\n"},{"title":"【blender】blender+pr，做史上最便宜的全息投影","date":"2022-12-25T08:23:04.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n做了一个模型嘿嘿嘿~\n然后本来说是想做动态捕捉的虚拟人物\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/vuNJ-6fLmM8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n做好了之后。。喝口水的功夫突然想到，诶可以拿水瓶儿做全息投影什么的！\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kBCh5uAnB8Y\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n于是就又用pr剪好了视频，然后做了投影嘿嘿嘿\n具体原理就是下面酱紫~\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/A86kay6UPeg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","source":"_posts/jianmo/bl-qxty.md","raw":"---\ntitle: '【blender】blender+pr，做史上最便宜的全息投影'\ndate: 2022-12-25 16:23:04\ntags: \n  - blender\n  - pr\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n做了一个模型嘿嘿嘿~\n然后本来说是想做动态捕捉的虚拟人物\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/vuNJ-6fLmM8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n做好了之后。。喝口水的功夫突然想到，诶可以拿水瓶儿做全息投影什么的！\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kBCh5uAnB8Y\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n于是就又用pr剪好了视频，然后做了投影嘿嘿嘿\n具体原理就是下面酱紫~\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/A86kay6UPeg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","slug":"jianmo/bl-qxty","published":1,"updated":"2023-01-25T23:34:10.327Z","_id":"cldcat0dg00004kwia7negdwc","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>做了一个模型嘿嘿嘿~<br>然后本来说是想做动态捕捉的虚拟人物</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/vuNJ-6fLmM8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n做好了之后。。喝口水的功夫突然想到，诶可以拿水瓶儿做全息投影什么的！\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kBCh5uAnB8Y\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n<p>于是就又用pr剪好了视频，然后做了投影嘿嘿嘿<br>具体原理就是下面酱紫~</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/A86kay6UPeg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>做了一个模型嘿嘿嘿~<br>然后本来说是想做动态捕捉的虚拟人物</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/vuNJ-6fLmM8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n做好了之后。。喝口水的功夫突然想到，诶可以拿水瓶儿做全息投影什么的！\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kBCh5uAnB8Y\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n<p>于是就又用pr剪好了视频，然后做了投影嘿嘿嘿<br>具体原理就是下面酱紫~</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/A86kay6UPeg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>"},{"title":"随便画画","date":"2022-11-26T10:23:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n下载了一个叫画吧的软件，在里面画了一张西红柿\n唔，软件不太好用呢~全程不好开压感的。\n而且笔有延迟，幸亏只是画一个西红柿。\n延迟还挺严重。有点劝退。\n不知道有没有人一起什么的。。。。/\n\n![](https://upload-images.jianshu.io/upload_images/20892169-1163d79674192fe9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/paint/paint-picture5.md","raw":"---\ntitle: '随便画画'\ndate: 2022-11-26 18:23:38\ntags: 绘画\ncategories:\n  - 绘画\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n下载了一个叫画吧的软件，在里面画了一张西红柿\n唔，软件不太好用呢~全程不好开压感的。\n而且笔有延迟，幸亏只是画一个西红柿。\n延迟还挺严重。有点劝退。\n不知道有没有人一起什么的。。。。/\n\n![](https://upload-images.jianshu.io/upload_images/20892169-1163d79674192fe9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"paint/paint-picture5","published":1,"updated":"2023-01-26T00:14:27.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldcco6b2000003wi6n1l9lkh","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>下载了一个叫画吧的软件，在里面画了一张西红柿<br>唔，软件不太好用呢~全程不好开压感的。<br>而且笔有延迟，幸亏只是画一个西红柿。<br>延迟还挺严重。有点劝退。<br>不知道有没有人一起什么的。。。。/</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1163d79674192fe9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>下载了一个叫画吧的软件，在里面画了一张西红柿<br>唔，软件不太好用呢~全程不好开压感的。<br>而且笔有延迟，幸亏只是画一个西红柿。<br>延迟还挺严重。有点劝退。<br>不知道有没有人一起什么的。。。。/</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-1163d79674192fe9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"blender练习蜡笔工具","date":"2022-06-23T04:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n上上手蜡笔工具吧。\n挺好玩的，有点费事儿，比三渲二效果好多了。\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/e7miJjb99SE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","source":"_posts/jianmo/bl-grease.md","raw":"---\ntitle: 'blender练习蜡笔工具'\ndate: 2022-06-23 12:21:49\ntags: blender\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n上上手蜡笔工具吧。\n挺好玩的，有点费事儿，比三渲二效果好多了。\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/e7miJjb99SE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","slug":"jianmo/bl-grease","published":1,"updated":"2023-01-26T08:38:31.056Z","_id":"cldcco6b4000103widm874s32","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>上上手蜡笔工具吧。<br>挺好玩的，有点费事儿，比三渲二效果好多了。</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/e7miJjb99SE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>上上手蜡笔工具吧。<br>挺好玩的，有点费事儿，比三渲二效果好多了。</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/e7miJjb99SE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>"},{"title":"blender场景练习1","date":"2020-04-03T04:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n这是我初次学到用体积散射可以做出空气透视的效果，在场景透视中是很常用的。\n![](https://upload-images.jianshu.io/upload_images/20892169-5a99460c277d7f6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-4438c18acabc674e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-dc34c00263d2d735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-83dcb5e29d337f9e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-bbb8eedb3b426761.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-ab06b87bd93afdff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-5a99460c277d7f6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nc       ","source":"_posts/jianmo/bl-practice1.md","raw":"---\ntitle: 'blender场景练习1'\ndate: 2020-04-03 12:21:49\ntags: blender\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n这是我初次学到用体积散射可以做出空气透视的效果，在场景透视中是很常用的。\n![](https://upload-images.jianshu.io/upload_images/20892169-5a99460c277d7f6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-4438c18acabc674e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-dc34c00263d2d735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-83dcb5e29d337f9e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-bbb8eedb3b426761.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-ab06b87bd93afdff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-5a99460c277d7f6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nc       ","slug":"jianmo/bl-practice1","published":1,"updated":"2023-01-26T00:04:09.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldcco6b5000303wi893v1t4z","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>这是我初次学到用体积散射可以做出空气透视的效果，在场景透视中是很常用的。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5a99460c277d7f6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4438c18acabc674e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-dc34c00263d2d735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-83dcb5e29d337f9e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-bbb8eedb3b426761.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ab06b87bd93afdff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5a99460c277d7f6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>c       </p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>这是我初次学到用体积散射可以做出空气透视的效果，在场景透视中是很常用的。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5a99460c277d7f6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-4438c18acabc674e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-dc34c00263d2d735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-83dcb5e29d337f9e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-bbb8eedb3b426761.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ab06b87bd93afdff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5a99460c277d7f6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>c       </p>\n"},{"title":"blender场景练习(low poly)","date":"2020-04-19T07:21:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n这次在渲染方面学习到了粒子系统和着色器。\n着色器节点之后我会写文总结。\n就现在的bl版本，变化太快，这个版本有的节点，到下个版本可能就会被删除了。\n这一点让人很头大。\n改天需要下载keyshot，我还是喜欢用zb。\n雕刻什么的最好玩了吖~！~~~~！~~~~\n![](https://upload-images.jianshu.io/upload_images/20892169-bdea7e097ebaf59e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-f78b56685f0f225e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-b1ce5c656a917706.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/jianmo/bl-practice2.md","raw":"---\ntitle: 'blender场景练习(low poly)'\ndate: 2020-04-19 15:21:49\ntags: blender\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n这次在渲染方面学习到了粒子系统和着色器。\n着色器节点之后我会写文总结。\n就现在的bl版本，变化太快，这个版本有的节点，到下个版本可能就会被删除了。\n这一点让人很头大。\n改天需要下载keyshot，我还是喜欢用zb。\n雕刻什么的最好玩了吖~！~~~~！~~~~\n![](https://upload-images.jianshu.io/upload_images/20892169-bdea7e097ebaf59e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-f78b56685f0f225e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-b1ce5c656a917706.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"jianmo/bl-practice2","published":1,"updated":"2023-01-26T00:08:29.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldcco6b5000503wi26zmh6jo","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>这次在渲染方面学习到了粒子系统和着色器。<br>着色器节点之后我会写文总结。<br>就现在的bl版本，变化太快，这个版本有的节点，到下个版本可能就会被删除了。<br>这一点让人很头大。<br>改天需要下载keyshot，我还是喜欢用zb。<br>雕刻什么的最好玩了吖~！~~~~！~~~~<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-bdea7e097ebaf59e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f78b56685f0f225e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b1ce5c656a917706.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>这次在渲染方面学习到了粒子系统和着色器。<br>着色器节点之后我会写文总结。<br>就现在的bl版本，变化太快，这个版本有的节点，到下个版本可能就会被删除了。<br>这一点让人很头大。<br>改天需要下载keyshot，我还是喜欢用zb。<br>雕刻什么的最好玩了吖~！~~~~！~~~~<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-bdea7e097ebaf59e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f78b56685f0f225e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-b1ce5c656a917706.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"blender三渲二","date":"2022-10-25T19:21:02.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n听说了灌篮高手剧场版上映后，看片花知道是三渲二做的。\n不太喜欢三渲二的效果，但还是想自己尝试一下。\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gLDtNTBOvMQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n怎么说呢。。就是三渲二实际上也只是搭个架子，内部的阴影结构明暗交界线什么的要想细化还是得根据光源去画贴图或者顶点着色才可以。\n如果是普通雕刻人物也就罢了。一般来说可以固定光源在物体的一个角度进行绘画，但如果是会动的物体或者光源不固定就比较讨厌了。就比如灌篮高手剧场版，这次删掉了原本井上的硬朗排线风格。如果灌篮高手剧场版要去全部加这些细节的话，那人物一动光源就跟着被影响，那么每一帧的人物按理说阴影和明暗交界线的排线都需要重新画了。想想可能不比传统动画简便呢。。特别是打篮球本来就是要一直动的。","source":"_posts/jianmo/bl-sanxuaner.md","raw":"---\ntitle: 'blender三渲二'\ndate: 2022-10-26 03:21:02\ntags: blender\ncategories:\n  - 建模\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n听说了灌篮高手剧场版上映后，看片花知道是三渲二做的。\n不太喜欢三渲二的效果，但还是想自己尝试一下。\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gLDtNTBOvMQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n怎么说呢。。就是三渲二实际上也只是搭个架子，内部的阴影结构明暗交界线什么的要想细化还是得根据光源去画贴图或者顶点着色才可以。\n如果是普通雕刻人物也就罢了。一般来说可以固定光源在物体的一个角度进行绘画，但如果是会动的物体或者光源不固定就比较讨厌了。就比如灌篮高手剧场版，这次删掉了原本井上的硬朗排线风格。如果灌篮高手剧场版要去全部加这些细节的话，那人物一动光源就跟着被影响，那么每一帧的人物按理说阴影和明暗交界线的排线都需要重新画了。想想可能不比传统动画简便呢。。特别是打篮球本来就是要一直动的。","slug":"jianmo/bl-sanxuaner","published":1,"updated":"2023-01-26T08:38:29.773Z","_id":"cldcco6b6000a03wi727qc5o2","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>听说了灌篮高手剧场版上映后，看片花知道是三渲二做的。<br>不太喜欢三渲二的效果，但还是想自己尝试一下。</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gLDtNTBOvMQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n<p>怎么说呢。。就是三渲二实际上也只是搭个架子，内部的阴影结构明暗交界线什么的要想细化还是得根据光源去画贴图或者顶点着色才可以。<br>如果是普通雕刻人物也就罢了。一般来说可以固定光源在物体的一个角度进行绘画，但如果是会动的物体或者光源不固定就比较讨厌了。就比如灌篮高手剧场版，这次删掉了原本井上的硬朗排线风格。如果灌篮高手剧场版要去全部加这些细节的话，那人物一动光源就跟着被影响，那么每一帧的人物按理说阴影和明暗交界线的排线都需要重新画了。想想可能不比传统动画简便呢。。特别是打篮球本来就是要一直动的。</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<p>听说了灌篮高手剧场版上映后，看片花知道是三渲二做的。<br>不太喜欢三渲二的效果，但还是想自己尝试一下。</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gLDtNTBOvMQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n<p>怎么说呢。。就是三渲二实际上也只是搭个架子，内部的阴影结构明暗交界线什么的要想细化还是得根据光源去画贴图或者顶点着色才可以。<br>如果是普通雕刻人物也就罢了。一般来说可以固定光源在物体的一个角度进行绘画，但如果是会动的物体或者光源不固定就比较讨厌了。就比如灌篮高手剧场版，这次删掉了原本井上的硬朗排线风格。如果灌篮高手剧场版要去全部加这些细节的话，那人物一动光源就跟着被影响，那么每一帧的人物按理说阴影和明暗交界线的排线都需要重新画了。想想可能不比传统动画简便呢。。特别是打篮球本来就是要一直动的。</p>\n"},{"title":"【2020-11-27】大喵的表情包上线拉！","date":"2020-11-27T05:23:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n虽然全套的动态带静态表情包是我两天就全部做好的超级赶工品。。还是希望会有人下载用用看啵~\n![](https://upload-images.jianshu.io/upload_images/20892169-cd58de40684cdc20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n之后有机会的话我会认真画的！绝对！可能。大概。。。也许。。。。。","source":"_posts/diary/diary-0612 copy.md","raw":"---\ntitle: 【2020-11-27】大喵的表情包上线拉！\ndate: 2020-11-27 13:23:38\ntags: \n  - 生活\n  - 绘画\n  - 表情包\ncategories:\n  - 绘画\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n虽然全套的动态带静态表情包是我两天就全部做好的超级赶工品。。还是希望会有人下载用用看啵~\n![](https://upload-images.jianshu.io/upload_images/20892169-cd58de40684cdc20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n之后有机会的话我会认真画的！绝对！可能。大概。。。也许。。。。。","slug":"diary/diary-0612 copy","published":1,"updated":"2023-01-25T23:58:43.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldcco6bb000d03wih9lrgx4b","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>虽然全套的动态带静态表情包是我两天就全部做好的超级赶工品。。还是希望会有人下载用用看啵~<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cd58de40684cdc20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>之后有机会的话我会认真画的！绝对！可能。大概。。。也许。。。。。</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>虽然全套的动态带静态表情包是我两天就全部做好的超级赶工品。。还是希望会有人下载用用看啵~<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-cd58de40684cdc20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>之后有机会的话我会认真画的！绝对！可能。大概。。。也许。。。。。</p>\n"},{"title":"【2022-06-12】这种试稿我再也不想参加了","date":"2022-06-12T05:23:38.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n虽然都不难，按他的风格去画都是半小时内就画完的东西，画完两张试稿通过后觉得好不值得，关键画完说通过了才给合同，好家伙，一看一单抽六成，你们咋不去抢呢？？？\n\n![](https://upload-images.jianshu.io/upload_images/20892169-5cf979926cfcf4d0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-0f8931155353da0d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-c7b92eec0c4cc2f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/diary/diary-0612.md","raw":"---\ntitle: 【2022-06-12】这种试稿我再也不想参加了\ndate: 2022-06-12 13:23:38\ntags: \n  - 生活\n  - 绘画\ncategories:\n  - 日记\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n虽然都不难，按他的风格去画都是半小时内就画完的东西，画完两张试稿通过后觉得好不值得，关键画完说通过了才给合同，好家伙，一看一单抽六成，你们咋不去抢呢？？？\n\n![](https://upload-images.jianshu.io/upload_images/20892169-5cf979926cfcf4d0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-0f8931155353da0d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/20892169-c7b92eec0c4cc2f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"diary/diary-0612","published":1,"updated":"2023-01-25T23:52:35.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldcco6bc000g03wifnto6zot","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>虽然都不难，按他的风格去画都是半小时内就画完的东西，画完两张试稿通过后觉得好不值得，关键画完说通过了才给合同，好家伙，一看一单抽六成，你们咋不去抢呢？？？</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5cf979926cfcf4d0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0f8931155353da0d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c7b92eec0c4cc2f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>虽然都不难，按他的风格去画都是半小时内就画完的东西，画完两张试稿通过后觉得好不值得，关键画完说通过了才给合同，好家伙，一看一单抽六成，你们咋不去抢呢？？？</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-5cf979926cfcf4d0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-0f8931155353da0d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c7b92eec0c4cc2f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"jsdelivr结合github搭建cdn图片仓库t","date":"2020-01-11T06:34:08.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n## jsdelivr简介\njsdelivr.net是著名的CDN服务提供商，可以加速前端静态资源访问速度。\n## jsdelivr 使用\n首先在github新建仓库，然后提交一张测试图片上传，点击release\n\n![](https://upload-images.jianshu.io/upload_images/20892169-938ca577f04e9980.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在这里新增一个版本号，点击Publish release\n\n![](https://upload-images.jianshu.io/upload_images/20892169-88c33a78e2227b59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后使用\nhttps://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@版本号/\n就可以访问静态资源了","source":"_posts/cxy/other/jsdelivr.md","raw":"---\ntitle: 'jsdelivr结合github搭建cdn图片仓库t'\ndate: 2020-01-11 14:34:08\ntags: jsdelivr\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## jsdelivr简介\njsdelivr.net是著名的CDN服务提供商，可以加速前端静态资源访问速度。\n## jsdelivr 使用\n首先在github新建仓库，然后提交一张测试图片上传，点击release\n\n![](https://upload-images.jianshu.io/upload_images/20892169-938ca577f04e9980.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在这里新增一个版本号，点击Publish release\n\n![](https://upload-images.jianshu.io/upload_images/20892169-88c33a78e2227b59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后使用\nhttps://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@版本号/\n就可以访问静态资源了","slug":"cxy/other/jsdelivr","published":1,"updated":"2023-01-26T20:33:55.829Z","_id":"clddbcume000036wi0fiu7q40","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"jsdelivr简介\"><a href=\"#jsdelivr简介\" class=\"headerlink\" title=\"jsdelivr简介\"></a>jsdelivr简介</h2><p>jsdelivr.net是著名的CDN服务提供商，可以加速前端静态资源访问速度。</p>\n<h2 id=\"jsdelivr-使用\"><a href=\"#jsdelivr-使用\" class=\"headerlink\" title=\"jsdelivr 使用\"></a>jsdelivr 使用</h2><p>首先在github新建仓库，然后提交一张测试图片上传，点击release</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-938ca577f04e9980.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>在这里新增一个版本号，点击Publish release</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-88c33a78e2227b59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>然后使用<br><a href=\"https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D@%E7%89%88%E6%9C%AC%E5%8F%B7/\">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@版本号/</a><br>就可以访问静态资源了</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"jsdelivr简介\"><a href=\"#jsdelivr简介\" class=\"headerlink\" title=\"jsdelivr简介\"></a>jsdelivr简介</h2><p>jsdelivr.net是著名的CDN服务提供商，可以加速前端静态资源访问速度。</p>\n<h2 id=\"jsdelivr-使用\"><a href=\"#jsdelivr-使用\" class=\"headerlink\" title=\"jsdelivr 使用\"></a>jsdelivr 使用</h2><p>首先在github新建仓库，然后提交一张测试图片上传，点击release</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-938ca577f04e9980.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>在这里新增一个版本号，点击Publish release</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-88c33a78e2227b59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>然后使用<br><a href=\"https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D@%E7%89%88%E6%9C%AC%E5%8F%B7/\">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@版本号/</a><br>就可以访问静态资源了</p>\n"},{"title":"在自己的网站中集成h5音乐播放器","date":"2021-09-11T10:48:34.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 简介：\n APlayer 是一个可爱的 HTML5 音乐播放器。（官方原话）\n\n地址：[点击访问](https://github.com/DIYgod/APlayer)\n\n## 安装\n使用 npm:\n```js\nnpm install aplayer --save\n```\n使用 Yarn:\n```js\nyarn add aplayer\n```\n## 使用\n```html\n<link rel=\"stylesheet\" href=\"APlayer.min.css\">\n<div id=\"aplayer\"></div>\n<script src=\"APlayer.min.js\"></script>\n```\n```js\nconst ap = new APlayer({\n    container: document.getElementById('aplayer'),\n    audio: [{\n        name: 'name',\n        artist: 'artist',\n        url: 'url.mp3',\n        cover: 'cover.jpg'\n    }]\n});\n```\n使用模块管理器:\n```js\nimport 'APlayer/dist/APlayer.min.css';\nimport APlayer from 'APlayer';\n\nconst ap = new APlayer(options);\n```\n\n## 参数介绍（可见官网）\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>container</td>\n<td>document.querySelector('.aplayer')</td>\n<td>播放器容器元素</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>false</td>\n<td>开启吸底模式, <a href=\"https://aplayer.js.org/#/home?id=fixed-mode\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>mini</td>\n<td>false</td>\n<td>开启迷你模式, <a href=\"https://aplayer.js.org/#/home?id=mini-mode\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>autoplay</td>\n<td>false</td>\n<td>音频自动播放</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>'#b7daff'</td>\n<td>主题色</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>'all'</td>\n<td>音频循环播放, 可选值: 'all', 'one', 'none'</td>\n</tr>\n<tr>\n<td>order</td>\n<td>'list'</td>\n<td>音频循环顺序, 可选值: 'list', 'random'</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>'auto'</td>\n<td>预加载，可选值: 'none', 'metadata', 'auto'</td>\n</tr>\n<tr>\n<td>volume</td>\n<td>0.7</td>\n<td>默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</td>\n</tr>\n<tr>\n<td>audio</td>\n<td>-</td>\n<td>音频信息, 应该是一个对象或对象数组</td>\n</tr>\n<tr>\n<td>audio.name</td>\n<td>-</td>\n<td>音频名称</td>\n</tr>\n<tr>\n<td>audio.artist</td>\n<td>-</td>\n<td>音频艺术家</td>\n</tr>\n<tr>\n<td>audio.url</td>\n<td>-</td>\n<td>音频链接</td>\n</tr>\n<tr>\n<td>audio.cover</td>\n<td>-</td>\n<td>音频封面</td>\n</tr>\n<tr>\n<td>audio.lrc</td>\n<td>-</td>\n<td><a href=\"https://aplayer.js.org/#/home?id=lrc\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>audio.theme</td>\n<td>-</td>\n<td>切换到此音频时的主题色，比上面的 theme 优先级高</td>\n</tr>\n<tr>\n<td>audio.type</td>\n<td>'auto'</td>\n<td>可选值: 'auto', 'hls', 'normal' 或其他自定义类型, <a href=\"https://aplayer.js.org/#/home?id=mse-support\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>customAudioType</td>\n<td>-</td>\n<td>自定义类型，<a href=\"https://aplayer.js.org/#/home?id=mse-support\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>mutex</td>\n<td>true</td>\n<td>互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</td>\n</tr>\n<tr>\n<td>lrcType</td>\n<td>0</td>\n<td><a href=\"https://aplayer.js.org/#/home?id=lrc\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>listFolded</td>\n<td>false</td>\n<td>列表默认折叠</td>\n</tr>\n<tr>\n<td>listMaxHeight</td>\n<td>-</td>\n<td>列表最大高度</td>\n</tr>\n<tr>\n<td>storageName</td>\n<td>'aplayer-setting'</td>\n<td>存储播放器设置的 localStorage key</td>\n</tr>\n</tbody>\n</table>","source":"_posts/cxy/other/aplayer.md","raw":"---\ntitle: '在自己的网站中集成h5音乐播放器'\ndate: 2021-09-11 18:48:34\ntags: '实用开源代码or工具'\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 简介：\n APlayer 是一个可爱的 HTML5 音乐播放器。（官方原话）\n\n地址：[点击访问](https://github.com/DIYgod/APlayer)\n\n## 安装\n使用 npm:\n```js\nnpm install aplayer --save\n```\n使用 Yarn:\n```js\nyarn add aplayer\n```\n## 使用\n```html\n<link rel=\"stylesheet\" href=\"APlayer.min.css\">\n<div id=\"aplayer\"></div>\n<script src=\"APlayer.min.js\"></script>\n```\n```js\nconst ap = new APlayer({\n    container: document.getElementById('aplayer'),\n    audio: [{\n        name: 'name',\n        artist: 'artist',\n        url: 'url.mp3',\n        cover: 'cover.jpg'\n    }]\n});\n```\n使用模块管理器:\n```js\nimport 'APlayer/dist/APlayer.min.css';\nimport APlayer from 'APlayer';\n\nconst ap = new APlayer(options);\n```\n\n## 参数介绍（可见官网）\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>container</td>\n<td>document.querySelector('.aplayer')</td>\n<td>播放器容器元素</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>false</td>\n<td>开启吸底模式, <a href=\"https://aplayer.js.org/#/home?id=fixed-mode\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>mini</td>\n<td>false</td>\n<td>开启迷你模式, <a href=\"https://aplayer.js.org/#/home?id=mini-mode\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>autoplay</td>\n<td>false</td>\n<td>音频自动播放</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>'#b7daff'</td>\n<td>主题色</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>'all'</td>\n<td>音频循环播放, 可选值: 'all', 'one', 'none'</td>\n</tr>\n<tr>\n<td>order</td>\n<td>'list'</td>\n<td>音频循环顺序, 可选值: 'list', 'random'</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>'auto'</td>\n<td>预加载，可选值: 'none', 'metadata', 'auto'</td>\n</tr>\n<tr>\n<td>volume</td>\n<td>0.7</td>\n<td>默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</td>\n</tr>\n<tr>\n<td>audio</td>\n<td>-</td>\n<td>音频信息, 应该是一个对象或对象数组</td>\n</tr>\n<tr>\n<td>audio.name</td>\n<td>-</td>\n<td>音频名称</td>\n</tr>\n<tr>\n<td>audio.artist</td>\n<td>-</td>\n<td>音频艺术家</td>\n</tr>\n<tr>\n<td>audio.url</td>\n<td>-</td>\n<td>音频链接</td>\n</tr>\n<tr>\n<td>audio.cover</td>\n<td>-</td>\n<td>音频封面</td>\n</tr>\n<tr>\n<td>audio.lrc</td>\n<td>-</td>\n<td><a href=\"https://aplayer.js.org/#/home?id=lrc\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>audio.theme</td>\n<td>-</td>\n<td>切换到此音频时的主题色，比上面的 theme 优先级高</td>\n</tr>\n<tr>\n<td>audio.type</td>\n<td>'auto'</td>\n<td>可选值: 'auto', 'hls', 'normal' 或其他自定义类型, <a href=\"https://aplayer.js.org/#/home?id=mse-support\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>customAudioType</td>\n<td>-</td>\n<td>自定义类型，<a href=\"https://aplayer.js.org/#/home?id=mse-support\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>mutex</td>\n<td>true</td>\n<td>互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</td>\n</tr>\n<tr>\n<td>lrcType</td>\n<td>0</td>\n<td><a href=\"https://aplayer.js.org/#/home?id=lrc\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>listFolded</td>\n<td>false</td>\n<td>列表默认折叠</td>\n</tr>\n<tr>\n<td>listMaxHeight</td>\n<td>-</td>\n<td>列表最大高度</td>\n</tr>\n<tr>\n<td>storageName</td>\n<td>'aplayer-setting'</td>\n<td>存储播放器设置的 localStorage key</td>\n</tr>\n</tbody>\n</table>","slug":"cxy/other/aplayer","published":1,"updated":"2023-02-01T11:19:41.193Z","_id":"clddbcumh000136wi9cdifmpt","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p> APlayer 是一个可爱的 HTML5 音乐播放器。（官方原话）</p>\n<p>地址：<a href=\"https://github.com/DIYgod/APlayer\">点击访问</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>使用 npm:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install aplayer --save</span><br></pre></td></tr></table></figure>\n<p>使用 Yarn:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add aplayer</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;APlayer.min.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;aplayer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;APlayer.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ap = <span class=\"keyword\">new</span> <span class=\"title class_\">APlayer</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">container</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;aplayer&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">audio</span>: [&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">artist</span>: <span class=\"string\">&#x27;artist&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;url.mp3&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">cover</span>: <span class=\"string\">&#x27;cover.jpg&#x27;</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用模块管理器:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;APlayer/dist/APlayer.min.css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">APlayer</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;APlayer&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ap = <span class=\"keyword\">new</span> <span class=\"title class_\">APlayer</span>(options);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参数介绍（可见官网）\"><a href=\"#参数介绍（可见官网）\" class=\"headerlink\" title=\"参数介绍（可见官网）\"></a>参数介绍（可见官网）</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>container</td>\n<td>document.querySelector('.aplayer')</td>\n<td>播放器容器元素</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>false</td>\n<td>开启吸底模式, <a href=\"https://aplayer.js.org/#/home?id=fixed-mode\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>mini</td>\n<td>false</td>\n<td>开启迷你模式, <a href=\"https://aplayer.js.org/#/home?id=mini-mode\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>autoplay</td>\n<td>false</td>\n<td>音频自动播放</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>'#b7daff'</td>\n<td>主题色</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>'all'</td>\n<td>音频循环播放, 可选值: 'all', 'one', 'none'</td>\n</tr>\n<tr>\n<td>order</td>\n<td>'list'</td>\n<td>音频循环顺序, 可选值: 'list', 'random'</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>'auto'</td>\n<td>预加载，可选值: 'none', 'metadata', 'auto'</td>\n</tr>\n<tr>\n<td>volume</td>\n<td>0.7</td>\n<td>默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</td>\n</tr>\n<tr>\n<td>audio</td>\n<td>-</td>\n<td>音频信息, 应该是一个对象或对象数组</td>\n</tr>\n<tr>\n<td>audio.name</td>\n<td>-</td>\n<td>音频名称</td>\n</tr>\n<tr>\n<td>audio.artist</td>\n<td>-</td>\n<td>音频艺术家</td>\n</tr>\n<tr>\n<td>audio.url</td>\n<td>-</td>\n<td>音频链接</td>\n</tr>\n<tr>\n<td>audio.cover</td>\n<td>-</td>\n<td>音频封面</td>\n</tr>\n<tr>\n<td>audio.lrc</td>\n<td>-</td>\n<td><a href=\"https://aplayer.js.org/#/home?id=lrc\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>audio.theme</td>\n<td>-</td>\n<td>切换到此音频时的主题色，比上面的 theme 优先级高</td>\n</tr>\n<tr>\n<td>audio.type</td>\n<td>'auto'</td>\n<td>可选值: 'auto', 'hls', 'normal' 或其他自定义类型, <a href=\"https://aplayer.js.org/#/home?id=mse-support\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>customAudioType</td>\n<td>-</td>\n<td>自定义类型，<a href=\"https://aplayer.js.org/#/home?id=mse-support\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>mutex</td>\n<td>true</td>\n<td>互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</td>\n</tr>\n<tr>\n<td>lrcType</td>\n<td>0</td>\n<td><a href=\"https://aplayer.js.org/#/home?id=lrc\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>listFolded</td>\n<td>false</td>\n<td>列表默认折叠</td>\n</tr>\n<tr>\n<td>listMaxHeight</td>\n<td>-</td>\n<td>列表最大高度</td>\n</tr>\n<tr>\n<td>storageName</td>\n<td>'aplayer-setting'</td>\n<td>存储播放器设置的 localStorage key</td>\n</tr>\n</tbody>\n</table>","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p> APlayer 是一个可爱的 HTML5 音乐播放器。（官方原话）</p>\n<p>地址：<a href=\"https://github.com/DIYgod/APlayer\">点击访问</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>使用 npm:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install aplayer --save</span><br></pre></td></tr></table></figure>\n<p>使用 Yarn:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add aplayer</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;APlayer.min.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;aplayer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;APlayer.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ap = <span class=\"keyword\">new</span> <span class=\"title class_\">APlayer</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">container</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;aplayer&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">audio</span>: [&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">artist</span>: <span class=\"string\">&#x27;artist&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;url.mp3&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">cover</span>: <span class=\"string\">&#x27;cover.jpg&#x27;</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用模块管理器:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;APlayer/dist/APlayer.min.css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">APlayer</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;APlayer&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ap = <span class=\"keyword\">new</span> <span class=\"title class_\">APlayer</span>(options);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参数介绍（可见官网）\"><a href=\"#参数介绍（可见官网）\" class=\"headerlink\" title=\"参数介绍（可见官网）\"></a>参数介绍（可见官网）</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>container</td>\n<td>document.querySelector('.aplayer')</td>\n<td>播放器容器元素</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>false</td>\n<td>开启吸底模式, <a href=\"https://aplayer.js.org/#/home?id=fixed-mode\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>mini</td>\n<td>false</td>\n<td>开启迷你模式, <a href=\"https://aplayer.js.org/#/home?id=mini-mode\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>autoplay</td>\n<td>false</td>\n<td>音频自动播放</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>'#b7daff'</td>\n<td>主题色</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>'all'</td>\n<td>音频循环播放, 可选值: 'all', 'one', 'none'</td>\n</tr>\n<tr>\n<td>order</td>\n<td>'list'</td>\n<td>音频循环顺序, 可选值: 'list', 'random'</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>'auto'</td>\n<td>预加载，可选值: 'none', 'metadata', 'auto'</td>\n</tr>\n<tr>\n<td>volume</td>\n<td>0.7</td>\n<td>默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</td>\n</tr>\n<tr>\n<td>audio</td>\n<td>-</td>\n<td>音频信息, 应该是一个对象或对象数组</td>\n</tr>\n<tr>\n<td>audio.name</td>\n<td>-</td>\n<td>音频名称</td>\n</tr>\n<tr>\n<td>audio.artist</td>\n<td>-</td>\n<td>音频艺术家</td>\n</tr>\n<tr>\n<td>audio.url</td>\n<td>-</td>\n<td>音频链接</td>\n</tr>\n<tr>\n<td>audio.cover</td>\n<td>-</td>\n<td>音频封面</td>\n</tr>\n<tr>\n<td>audio.lrc</td>\n<td>-</td>\n<td><a href=\"https://aplayer.js.org/#/home?id=lrc\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>audio.theme</td>\n<td>-</td>\n<td>切换到此音频时的主题色，比上面的 theme 优先级高</td>\n</tr>\n<tr>\n<td>audio.type</td>\n<td>'auto'</td>\n<td>可选值: 'auto', 'hls', 'normal' 或其他自定义类型, <a href=\"https://aplayer.js.org/#/home?id=mse-support\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>customAudioType</td>\n<td>-</td>\n<td>自定义类型，<a href=\"https://aplayer.js.org/#/home?id=mse-support\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>mutex</td>\n<td>true</td>\n<td>互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</td>\n</tr>\n<tr>\n<td>lrcType</td>\n<td>0</td>\n<td><a href=\"https://aplayer.js.org/#/home?id=lrc\" target=\"_blank\">详情</a></td>\n</tr>\n<tr>\n<td>listFolded</td>\n<td>false</td>\n<td>列表默认折叠</td>\n</tr>\n<tr>\n<td>listMaxHeight</td>\n<td>-</td>\n<td>列表最大高度</td>\n</tr>\n<tr>\n<td>storageName</td>\n<td>'aplayer-setting'</td>\n<td>存储播放器设置的 localStorage key</td>\n</tr>\n</tbody>\n</table>"},{"title":"ChatGPT初探","date":"2023-01-27T06:10:51.000Z","_content":"\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n### ChatGPT官方说明：\n\n> Optimizing Language Models for Dialogue\n> \n> We’ve trained a model called ChatGPT which interacts in a conversational way.\n> \n> The dialogue format makes it possible for ChatGPT to answer followup questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests.\n\n我们训练了一个叫做ChatGPT的模型，它以对话方式进行交互。\n\n对话格式使ChatGPT能够回答后续问题、承认错误、质疑不正确的前提和拒绝不适当的请求。\n### ChatGPT能做什么？\n\n我自己是随便玩了一下\n\n*   #### 写脚本\n\n    \"帮我写一段nodejs发送邮件的脚本吧\"\n\n    答：\n\n![](https://upload-images.jianshu.io/upload_images/20892169-fa1a6f8a56b6b6e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n*   ### 写信（不太靠谱）\n\n    \"你朋友的手机摔坏了，写一封信安慰他吧\"\n![](https://upload-images.jianshu.io/upload_images/20892169-27e115dbed1d2e60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n（ai是比我大方的）\n\n  \"你把朋友的手机摔坏了，写一封信安慰他吧\"\n![](https://upload-images.jianshu.io/upload_images/20892169-7a4a3a585b5924c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n你这样说话不会被揍么。。。\n\n还有很多其他的食用方式，自己去探索拉~\n\n*   ### vscode插件\n\n![](https://upload-images.jianshu.io/upload_images/20892169-dd783dcd1a2224c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n使用该插件可以直接在vscode与chatGPT交互，相当于连接到官方web网页，这样子如果提问的是代码，那么程序员就可以快速发现代码的问题（因为我实测发现chatGPT现在写出来的代码是多多少少有问题的）\n\n### 相关链接\n\nchatgpt: [点击访问](https://chat.openai.com/chat)\nopenai api key:[点击访问](https://beta.openai.com/account/api-keys)\n","source":"_posts/cxy/other/chatgpt.md","raw":"---\ntitle: ChatGPT初探\ndate: 2023-01-27 14:10:51\ntags: 实用开源代码or工具\ncategories: \n  - [程序员的自我修养]\n  - [生活]\n---\n\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n### ChatGPT官方说明：\n\n> Optimizing Language Models for Dialogue\n> \n> We’ve trained a model called ChatGPT which interacts in a conversational way.\n> \n> The dialogue format makes it possible for ChatGPT to answer followup questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests.\n\n我们训练了一个叫做ChatGPT的模型，它以对话方式进行交互。\n\n对话格式使ChatGPT能够回答后续问题、承认错误、质疑不正确的前提和拒绝不适当的请求。\n### ChatGPT能做什么？\n\n我自己是随便玩了一下\n\n*   #### 写脚本\n\n    \"帮我写一段nodejs发送邮件的脚本吧\"\n\n    答：\n\n![](https://upload-images.jianshu.io/upload_images/20892169-fa1a6f8a56b6b6e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n*   ### 写信（不太靠谱）\n\n    \"你朋友的手机摔坏了，写一封信安慰他吧\"\n![](https://upload-images.jianshu.io/upload_images/20892169-27e115dbed1d2e60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n（ai是比我大方的）\n\n  \"你把朋友的手机摔坏了，写一封信安慰他吧\"\n![](https://upload-images.jianshu.io/upload_images/20892169-7a4a3a585b5924c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n你这样说话不会被揍么。。。\n\n还有很多其他的食用方式，自己去探索拉~\n\n*   ### vscode插件\n\n![](https://upload-images.jianshu.io/upload_images/20892169-dd783dcd1a2224c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n使用该插件可以直接在vscode与chatGPT交互，相当于连接到官方web网页，这样子如果提问的是代码，那么程序员就可以快速发现代码的问题（因为我实测发现chatGPT现在写出来的代码是多多少少有问题的）\n\n### 相关链接\n\nchatgpt: [点击访问](https://chat.openai.com/chat)\nopenai api key:[点击访问](https://beta.openai.com/account/api-keys)\n","slug":"cxy/other/chatgpt","published":1,"updated":"2023-02-01T11:19:41.194Z","_id":"clde6qed70000j7wi67qu0gxh","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h3 id=\"ChatGPT官方说明：\"><a href=\"#ChatGPT官方说明：\" class=\"headerlink\" title=\"ChatGPT官方说明：\"></a>ChatGPT官方说明：</h3><blockquote>\n<p>Optimizing Language Models for Dialogue</p>\n<p>We’ve trained a model called ChatGPT which interacts in a conversational way.</p>\n<p>The dialogue format makes it possible for ChatGPT to answer followup questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests.</p>\n</blockquote>\n<p>我们训练了一个叫做ChatGPT的模型，它以对话方式进行交互。</p>\n<p>对话格式使ChatGPT能够回答后续问题、承认错误、质疑不正确的前提和拒绝不适当的请求。</p>\n<h3 id=\"ChatGPT能做什么？\"><a href=\"#ChatGPT能做什么？\" class=\"headerlink\" title=\"ChatGPT能做什么？\"></a>ChatGPT能做什么？</h3><p>我自己是随便玩了一下</p>\n<ul>\n<li><h4 id=\"写脚本\"><a href=\"#写脚本\" class=\"headerlink\" title=\"写脚本\"></a>写脚本</h4><p>  “帮我写一段nodejs发送邮件的脚本吧”</p>\n<p>  答：</p>\n</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fa1a6f8a56b6b6e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ul>\n<li><h3 id=\"写信（不太靠谱）\"><a href=\"#写信（不太靠谱）\" class=\"headerlink\" title=\"写信（不太靠谱）\"></a>写信（不太靠谱）</h3><p>  “你朋友的手机摔坏了，写一封信安慰他吧”<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-27e115dbed1d2e60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n</li>\n</ul>\n<p>（ai是比我大方的）</p>\n<p>  “你把朋友的手机摔坏了，写一封信安慰他吧”<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-7a4a3a585b5924c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>你这样说话不会被揍么。。。</p>\n<p>还有很多其他的食用方式，自己去探索拉~</p>\n<ul>\n<li><h3 id=\"vscode插件\"><a href=\"#vscode插件\" class=\"headerlink\" title=\"vscode插件\"></a>vscode插件</h3></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-dd783dcd1a2224c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>使用该插件可以直接在vscode与chatGPT交互，相当于连接到官方web网页，这样子如果提问的是代码，那么程序员就可以快速发现代码的问题（因为我实测发现chatGPT现在写出来的代码是多多少少有问题的）</p>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p>chatgpt: <a href=\"https://chat.openai.com/chat\">点击访问</a><br>openai api key:<a href=\"https://beta.openai.com/account/api-keys\">点击访问</a></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h3 id=\"ChatGPT官方说明：\"><a href=\"#ChatGPT官方说明：\" class=\"headerlink\" title=\"ChatGPT官方说明：\"></a>ChatGPT官方说明：</h3><blockquote>\n<p>Optimizing Language Models for Dialogue</p>\n<p>We’ve trained a model called ChatGPT which interacts in a conversational way.</p>\n<p>The dialogue format makes it possible for ChatGPT to answer followup questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests.</p>\n</blockquote>\n<p>我们训练了一个叫做ChatGPT的模型，它以对话方式进行交互。</p>\n<p>对话格式使ChatGPT能够回答后续问题、承认错误、质疑不正确的前提和拒绝不适当的请求。</p>\n<h3 id=\"ChatGPT能做什么？\"><a href=\"#ChatGPT能做什么？\" class=\"headerlink\" title=\"ChatGPT能做什么？\"></a>ChatGPT能做什么？</h3><p>我自己是随便玩了一下</p>\n<ul>\n<li><h4 id=\"写脚本\"><a href=\"#写脚本\" class=\"headerlink\" title=\"写脚本\"></a>写脚本</h4><p>  “帮我写一段nodejs发送邮件的脚本吧”</p>\n<p>  答：</p>\n</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fa1a6f8a56b6b6e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ul>\n<li><h3 id=\"写信（不太靠谱）\"><a href=\"#写信（不太靠谱）\" class=\"headerlink\" title=\"写信（不太靠谱）\"></a>写信（不太靠谱）</h3><p>  “你朋友的手机摔坏了，写一封信安慰他吧”<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-27e115dbed1d2e60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n</li>\n</ul>\n<p>（ai是比我大方的）</p>\n<p>  “你把朋友的手机摔坏了，写一封信安慰他吧”<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-7a4a3a585b5924c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>你这样说话不会被揍么。。。</p>\n<p>还有很多其他的食用方式，自己去探索拉~</p>\n<ul>\n<li><h3 id=\"vscode插件\"><a href=\"#vscode插件\" class=\"headerlink\" title=\"vscode插件\"></a>vscode插件</h3></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-dd783dcd1a2224c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>使用该插件可以直接在vscode与chatGPT交互，相当于连接到官方web网页，这样子如果提问的是代码，那么程序员就可以快速发现代码的问题（因为我实测发现chatGPT现在写出来的代码是多多少少有问题的）</p>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p>chatgpt: <a href=\"https://chat.openai.com/chat\">点击访问</a><br>openai api key:<a href=\"https://beta.openai.com/account/api-keys\">点击访问</a></p>\n"},{"title":"在github pages中集成Gitalk功能","date":"2019-12-11T10:48:34.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n## Gitalk简介\n\nGitalk 是一个基于 Github Issue 和 Preact 开发的评论组件，支持 MarkDown 语法。\n\n官方地址\n\nhttps://gitalk.github.io/\n\n特性\n\n+ 使用 github 帐户进行身份验证\n\n+ 无服务器，所有评论将存储为github问题\n\n+ 个人和组织github项目均可用于存储评论\n\n+ 本地化，支持多种语言[en，zh-CN，zh-TW，es-ES，fr，ru，de]\n\n+ 类似于Facebook的无干扰模式（可以通过distractionFreeMode选件启用）\n\n+ 热键提交评论（cmd | ctrl + Enter）\n\n安装方法有两种\n\n- links\n\n```javascript\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\"></script>\n\n  <!-- or -->\n\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\">\n  <script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n```\n\n- npm install\n\n```javascript\nnpm i --save gitalk\nimport 'gitalk/dist/gitalk.css'\nimport Gitalk from 'gitalk'\n```\n\n## 用法\n\n1. 首先创建一个公共的 github 存储库来存储评论。（现有的也ok，反正只是用到issue不会影响仓库代码。）\n\n2. 创建一个**GitHub 应用程序**，创建方法请[单击此处注册](https://github.com/settings/applications/new)一个新应用程序。\n\n **注意：** 必须在字段中指定网站域 url `Authorization callback URL`（回调的地址），都写你的个人网站地址就可以了。\n![](https://upload-images.jianshu.io/upload_images/20892169-82c3c3b4e810dd11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n创建成功后，跳转到此\n![](https://upload-images.jianshu.io/upload_images/20892169-61c661153203e3eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n记住clientID和clientSecret，是之后要配置的。\n\n3. 选择如何应用到页面，如下所示：\n\n### 方法：\n\n将容器添加到您的页面：\n\n```html\n<div id=\"gitalk-container\"></div>\n```\n\n然后使用下面的Javascript代码生成gitalk插件：\n\n```js\nconst gitalk = new Gitalk({\n  clientID: 'GitHub Application Client ID',\n  clientSecret: 'GitHub Application Client Secret',\n  repo: 'GitHub repo',      // The repository of store comments,\n  owner: 'GitHub repo owner',\n  admin: ['GitHub repo owner and collaborators, only these guys can initialize github issues'],\n  id: location.pathname,      // Ensure uniqueness and length less than 50\n  distractionFreeMode: false  // Facebook-like distraction free mode\n})\n\ngitalk.render('gitalk-container')\n```\n其中clientID和clientSecret是上面生成的，填入你的就可以了。\n## 选项\n\n*   **客户端ID** `String`\n\n    **必填**。GitHub 应用程序客户端 ID。\n\n*   **客户秘密** `String`\n\n    **必填**。GitHub 应用程序客户端机密。\n\n*   **回购** `String`\n\n    **必填**。GitHub 存储库。\n\n*   **所有者** `String`\n\n    **必填**。GitHub 存储库所有者。可以是个人用户或组织。\n\n*   **行政** `Array`\n\n    **必填**。GitHub 存储库所有者和协作者。（对该存储库具有写入权限的用户）\n\n*   **ID** `String`\n\n    默认值：`location.href`.\n\n    页面的唯一标识。长度必须小于 50。\n\n*   **数字** `Number`\n\n    默认值：`-1`.\n\n    页面的issue ID，如果`number`没有定义该属性，则使用.issue定位issue `id`。\n\n*   **标签** `Array`\n\n    默认值：`['Gitalk']`.\n\n    GitHub 问题标签。\n\n*   **标题** `String`\n\n    默认值：`document.title`.\n\n    GitHub 问题标题。\n\n*   **身体** `String`\n\n    默认值：`location.href + header.meta[description]`.\n\n    GitHub 问题正文。\n\n*   **语言** `String`\n\n    默认值：`navigator.language || navigator.userLanguage`.\n\n    本地化语言键，支持[ `en`, `zh-CN`, `zh-TW`, `es-ES`, `fr`, `ru`, `de`, `pl`, `ko`, `fa`, `ja`]。\n\n*   **每页** `Number`\n\n    默认值：`10`.\n\n    分页大小，最大 100。\n\n*   **无干扰模式** `Boolean`\n\n    默认值：假。\n\n    类似 Facebook 的无干扰模式。\n\n*   **pagerDirection** `String`\n\n    默认值：“最后”\n\n    评论排序方向，可选值为`last`和`first`。\n\n*   **手动创建问题** `Boolean`\n\n    默认值：`false`.\n\n    默认情况下，当登录用户属于用户时，Gitalk 会自动为您的每个页面创建一个相应的 github 问题`admin`。您可以通过将此选项设置为 来手动创建它`true`。\n\n*   **代理人** `String`\n\n    默认值：`https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token`.\n\n    GitHub oauth 请求 CORS 的反向代理。[为什么需要这个？](https://github.com/isaacs/github/issues/330)\n\n*   **翻转移动选项** `Object`\n\n    默认：\n\n    ```source-js\n      {\n        staggerDelayBy: 150,\n        appearAnimation: 'accordionVertical',\n        enterAnimation: 'accordionVertical',\n        leaveAnimation: 'accordionVertical',\n      }\n    ```\n\n    评论列表动画。[参考](https://github.com/joshwcomeau/react-flip-move/blob/master/documentation/enter_leave_animations.md)\n\n*   **启用热键** `Boolean`\n\n    默认值：`true`.\n\n    启用热键 (cmd|ctrl + enter) 提交评论。\n\n## 效果演示\n[点击访问](https://bbdcsg.love/2019/12/11/cxy/other/gitalk/)\n![](https://upload-images.jianshu.io/upload_images/20892169-fa80cc39adc7320d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/cxy/other/gitalk.md","raw":"---\ntitle: '在github pages中集成Gitalk功能'\ndate: 2019-12-11 18:48:34\ntags: 实用开源代码\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n## Gitalk简介\n\nGitalk 是一个基于 Github Issue 和 Preact 开发的评论组件，支持 MarkDown 语法。\n\n官方地址\n\nhttps://gitalk.github.io/\n\n特性\n\n+ 使用 github 帐户进行身份验证\n\n+ 无服务器，所有评论将存储为github问题\n\n+ 个人和组织github项目均可用于存储评论\n\n+ 本地化，支持多种语言[en，zh-CN，zh-TW，es-ES，fr，ru，de]\n\n+ 类似于Facebook的无干扰模式（可以通过distractionFreeMode选件启用）\n\n+ 热键提交评论（cmd | ctrl + Enter）\n\n安装方法有两种\n\n- links\n\n```javascript\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\"></script>\n\n  <!-- or -->\n\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\">\n  <script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n```\n\n- npm install\n\n```javascript\nnpm i --save gitalk\nimport 'gitalk/dist/gitalk.css'\nimport Gitalk from 'gitalk'\n```\n\n## 用法\n\n1. 首先创建一个公共的 github 存储库来存储评论。（现有的也ok，反正只是用到issue不会影响仓库代码。）\n\n2. 创建一个**GitHub 应用程序**，创建方法请[单击此处注册](https://github.com/settings/applications/new)一个新应用程序。\n\n **注意：** 必须在字段中指定网站域 url `Authorization callback URL`（回调的地址），都写你的个人网站地址就可以了。\n![](https://upload-images.jianshu.io/upload_images/20892169-82c3c3b4e810dd11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n创建成功后，跳转到此\n![](https://upload-images.jianshu.io/upload_images/20892169-61c661153203e3eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n记住clientID和clientSecret，是之后要配置的。\n\n3. 选择如何应用到页面，如下所示：\n\n### 方法：\n\n将容器添加到您的页面：\n\n```html\n<div id=\"gitalk-container\"></div>\n```\n\n然后使用下面的Javascript代码生成gitalk插件：\n\n```js\nconst gitalk = new Gitalk({\n  clientID: 'GitHub Application Client ID',\n  clientSecret: 'GitHub Application Client Secret',\n  repo: 'GitHub repo',      // The repository of store comments,\n  owner: 'GitHub repo owner',\n  admin: ['GitHub repo owner and collaborators, only these guys can initialize github issues'],\n  id: location.pathname,      // Ensure uniqueness and length less than 50\n  distractionFreeMode: false  // Facebook-like distraction free mode\n})\n\ngitalk.render('gitalk-container')\n```\n其中clientID和clientSecret是上面生成的，填入你的就可以了。\n## 选项\n\n*   **客户端ID** `String`\n\n    **必填**。GitHub 应用程序客户端 ID。\n\n*   **客户秘密** `String`\n\n    **必填**。GitHub 应用程序客户端机密。\n\n*   **回购** `String`\n\n    **必填**。GitHub 存储库。\n\n*   **所有者** `String`\n\n    **必填**。GitHub 存储库所有者。可以是个人用户或组织。\n\n*   **行政** `Array`\n\n    **必填**。GitHub 存储库所有者和协作者。（对该存储库具有写入权限的用户）\n\n*   **ID** `String`\n\n    默认值：`location.href`.\n\n    页面的唯一标识。长度必须小于 50。\n\n*   **数字** `Number`\n\n    默认值：`-1`.\n\n    页面的issue ID，如果`number`没有定义该属性，则使用.issue定位issue `id`。\n\n*   **标签** `Array`\n\n    默认值：`['Gitalk']`.\n\n    GitHub 问题标签。\n\n*   **标题** `String`\n\n    默认值：`document.title`.\n\n    GitHub 问题标题。\n\n*   **身体** `String`\n\n    默认值：`location.href + header.meta[description]`.\n\n    GitHub 问题正文。\n\n*   **语言** `String`\n\n    默认值：`navigator.language || navigator.userLanguage`.\n\n    本地化语言键，支持[ `en`, `zh-CN`, `zh-TW`, `es-ES`, `fr`, `ru`, `de`, `pl`, `ko`, `fa`, `ja`]。\n\n*   **每页** `Number`\n\n    默认值：`10`.\n\n    分页大小，最大 100。\n\n*   **无干扰模式** `Boolean`\n\n    默认值：假。\n\n    类似 Facebook 的无干扰模式。\n\n*   **pagerDirection** `String`\n\n    默认值：“最后”\n\n    评论排序方向，可选值为`last`和`first`。\n\n*   **手动创建问题** `Boolean`\n\n    默认值：`false`.\n\n    默认情况下，当登录用户属于用户时，Gitalk 会自动为您的每个页面创建一个相应的 github 问题`admin`。您可以通过将此选项设置为 来手动创建它`true`。\n\n*   **代理人** `String`\n\n    默认值：`https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token`.\n\n    GitHub oauth 请求 CORS 的反向代理。[为什么需要这个？](https://github.com/isaacs/github/issues/330)\n\n*   **翻转移动选项** `Object`\n\n    默认：\n\n    ```source-js\n      {\n        staggerDelayBy: 150,\n        appearAnimation: 'accordionVertical',\n        enterAnimation: 'accordionVertical',\n        leaveAnimation: 'accordionVertical',\n      }\n    ```\n\n    评论列表动画。[参考](https://github.com/joshwcomeau/react-flip-move/blob/master/documentation/enter_leave_animations.md)\n\n*   **启用热键** `Boolean`\n\n    默认值：`true`.\n\n    启用热键 (cmd|ctrl + enter) 提交评论。\n\n## 效果演示\n[点击访问](https://bbdcsg.love/2019/12/11/cxy/other/gitalk/)\n![](https://upload-images.jianshu.io/upload_images/20892169-fa80cc39adc7320d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"cxy/other/gitalk","published":1,"updated":"2023-02-01T11:19:41.198Z","_id":"clde6qeda0001j7wi7gao9v6v","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<h2 id=\"Gitalk简介\"><a href=\"#Gitalk简介\" class=\"headerlink\" title=\"Gitalk简介\"></a>Gitalk简介</h2><p>Gitalk 是一个基于 Github Issue 和 Preact 开发的评论组件，支持 MarkDown 语法。</p>\n<p>官方地址</p>\n<p><a href=\"https://gitalk.github.io/\">https://gitalk.github.io/</a></p>\n<p>特性</p>\n<ul>\n<li><p>使用 github 帐户进行身份验证</p>\n</li>\n<li><p>无服务器，所有评论将存储为github问题</p>\n</li>\n<li><p>个人和组织github项目均可用于存储评论</p>\n</li>\n<li><p>本地化，支持多种语言[en，zh-CN，zh-TW，es-ES，fr，ru，de]</p>\n</li>\n<li><p>类似于Facebook的无干扰模式（可以通过distractionFreeMode选件启用）</p>\n</li>\n<li><p>热键提交评论（cmd | ctrl + Enter）</p>\n</li>\n</ul>\n<p>安装方法有两种</p>\n<ul>\n<li>links</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">&quot;stylesheet&quot;</span> href=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- or --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>npm install</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save gitalk</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;gitalk/dist/gitalk.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Gitalk</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gitalk&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><ol>\n<li><p>首先创建一个公共的 github 存储库来存储评论。（现有的也ok，反正只是用到issue不会影响仓库代码。）</p>\n</li>\n<li><p>创建一个<strong>GitHub 应用程序</strong>，创建方法请<a href=\"https://github.com/settings/applications/new\">单击此处注册</a>一个新应用程序。</p>\n</li>\n</ol>\n<p> <strong>注意：</strong> 必须在字段中指定网站域 url <code>Authorization callback URL</code>（回调的地址），都写你的个人网站地址就可以了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-82c3c3b4e810dd11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>创建成功后，跳转到此<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-61c661153203e3eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>记住clientID和clientSecret，是之后要配置的。</p>\n<ol start=\"3\">\n<li>选择如何应用到页面，如下所示：</li>\n</ol>\n<h3 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a>方法：</h3><p>将容器添加到您的页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gitalk-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后使用下面的Javascript代码生成gitalk插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gitalk = <span class=\"keyword\">new</span> <span class=\"title class_\">Gitalk</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">clientID</span>: <span class=\"string\">&#x27;GitHub Application Client ID&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">clientSecret</span>: <span class=\"string\">&#x27;GitHub Application Client Secret&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">repo</span>: <span class=\"string\">&#x27;GitHub repo&#x27;</span>,      <span class=\"comment\">// The repository of store comments,</span></span><br><span class=\"line\">  <span class=\"attr\">owner</span>: <span class=\"string\">&#x27;GitHub repo owner&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">admin</span>: [<span class=\"string\">&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">id</span>: location.<span class=\"property\">pathname</span>,      <span class=\"comment\">// Ensure uniqueness and length less than 50</span></span><br><span class=\"line\">  <span class=\"attr\">distractionFreeMode</span>: <span class=\"literal\">false</span>  <span class=\"comment\">// Facebook-like distraction free mode</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gitalk.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;gitalk-container&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>其中clientID和clientSecret是上面生成的，填入你的就可以了。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><ul>\n<li><p><strong>客户端ID</strong> <code>String</code></p>\n<p>  <strong>必填</strong>。GitHub 应用程序客户端 ID。</p>\n</li>\n<li><p><strong>客户秘密</strong> <code>String</code></p>\n<p>  <strong>必填</strong>。GitHub 应用程序客户端机密。</p>\n</li>\n<li><p><strong>回购</strong> <code>String</code></p>\n<p>  <strong>必填</strong>。GitHub 存储库。</p>\n</li>\n<li><p><strong>所有者</strong> <code>String</code></p>\n<p>  <strong>必填</strong>。GitHub 存储库所有者。可以是个人用户或组织。</p>\n</li>\n<li><p><strong>行政</strong> <code>Array</code></p>\n<p>  <strong>必填</strong>。GitHub 存储库所有者和协作者。（对该存储库具有写入权限的用户）</p>\n</li>\n<li><p><strong>ID</strong> <code>String</code></p>\n<p>  默认值：<code>location.href</code>.</p>\n<p>  页面的唯一标识。长度必须小于 50。</p>\n</li>\n<li><p><strong>数字</strong> <code>Number</code></p>\n<p>  默认值：<code>-1</code>.</p>\n<p>  页面的issue ID，如果<code>number</code>没有定义该属性，则使用.issue定位issue <code>id</code>。</p>\n</li>\n<li><p><strong>标签</strong> <code>Array</code></p>\n<p>  默认值：<code>[&#39;Gitalk&#39;]</code>.</p>\n<p>  GitHub 问题标签。</p>\n</li>\n<li><p><strong>标题</strong> <code>String</code></p>\n<p>  默认值：<code>document.title</code>.</p>\n<p>  GitHub 问题标题。</p>\n</li>\n<li><p><strong>身体</strong> <code>String</code></p>\n<p>  默认值：<code>location.href + header.meta[description]</code>.</p>\n<p>  GitHub 问题正文。</p>\n</li>\n<li><p><strong>语言</strong> <code>String</code></p>\n<p>  默认值：<code>navigator.language || navigator.userLanguage</code>.</p>\n<p>  本地化语言键，支持[ <code>en</code>, <code>zh-CN</code>, <code>zh-TW</code>, <code>es-ES</code>, <code>fr</code>, <code>ru</code>, <code>de</code>, <code>pl</code>, <code>ko</code>, <code>fa</code>, <code>ja</code>]。</p>\n</li>\n<li><p><strong>每页</strong> <code>Number</code></p>\n<p>  默认值：<code>10</code>.</p>\n<p>  分页大小，最大 100。</p>\n</li>\n<li><p><strong>无干扰模式</strong> <code>Boolean</code></p>\n<p>  默认值：假。</p>\n<p>  类似 Facebook 的无干扰模式。</p>\n</li>\n<li><p><strong>pagerDirection</strong> <code>String</code></p>\n<p>  默认值：“最后”</p>\n<p>  评论排序方向，可选值为<code>last</code>和<code>first</code>。</p>\n</li>\n<li><p><strong>手动创建问题</strong> <code>Boolean</code></p>\n<p>  默认值：<code>false</code>.</p>\n<p>  默认情况下，当登录用户属于用户时，Gitalk 会自动为您的每个页面创建一个相应的 github 问题<code>admin</code>。您可以通过将此选项设置为 来手动创建它<code>true</code>。</p>\n</li>\n<li><p><strong>代理人</strong> <code>String</code></p>\n<p>  默认值：<code>https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</code>.</p>\n<p>  GitHub oauth 请求 CORS 的反向代理。<a href=\"https://github.com/isaacs/github/issues/330\">为什么需要这个？</a></p>\n</li>\n<li><p><strong>翻转移动选项</strong> <code>Object</code></p>\n<p>  默认：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  staggerDelayBy: 150,</span><br><span class=\"line\">  appearAnimation: &#x27;accordionVertical&#x27;,</span><br><span class=\"line\">  enterAnimation: &#x27;accordionVertical&#x27;,</span><br><span class=\"line\">  leaveAnimation: &#x27;accordionVertical&#x27;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  评论列表动画。<a href=\"https://github.com/joshwcomeau/react-flip-move/blob/master/documentation/enter_leave_animations.md\">参考</a></p>\n</li>\n<li><p><strong>启用热键</strong> <code>Boolean</code></p>\n<p>  默认值：<code>true</code>.</p>\n<p>  启用热键 (cmd|ctrl + enter) 提交评论。</p>\n</li>\n</ul>\n<h2 id=\"效果演示\"><a href=\"#效果演示\" class=\"headerlink\" title=\"效果演示\"></a>效果演示</h2><p><a href=\"https://bbdcsg.love/2019/12/11/cxy/other/gitalk/\">点击访问</a><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fa80cc39adc7320d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n\n\n<h2 id=\"Gitalk简介\"><a href=\"#Gitalk简介\" class=\"headerlink\" title=\"Gitalk简介\"></a>Gitalk简介</h2><p>Gitalk 是一个基于 Github Issue 和 Preact 开发的评论组件，支持 MarkDown 语法。</p>\n<p>官方地址</p>\n<p><a href=\"https://gitalk.github.io/\">https://gitalk.github.io/</a></p>\n<p>特性</p>\n<ul>\n<li><p>使用 github 帐户进行身份验证</p>\n</li>\n<li><p>无服务器，所有评论将存储为github问题</p>\n</li>\n<li><p>个人和组织github项目均可用于存储评论</p>\n</li>\n<li><p>本地化，支持多种语言[en，zh-CN，zh-TW，es-ES，fr，ru，de]</p>\n</li>\n<li><p>类似于Facebook的无干扰模式（可以通过distractionFreeMode选件启用）</p>\n</li>\n<li><p>热键提交评论（cmd | ctrl + Enter）</p>\n</li>\n</ul>\n<p>安装方法有两种</p>\n<ul>\n<li>links</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">&quot;stylesheet&quot;</span> href=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- or --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>npm install</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save gitalk</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;gitalk/dist/gitalk.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Gitalk</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gitalk&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><ol>\n<li><p>首先创建一个公共的 github 存储库来存储评论。（现有的也ok，反正只是用到issue不会影响仓库代码。）</p>\n</li>\n<li><p>创建一个<strong>GitHub 应用程序</strong>，创建方法请<a href=\"https://github.com/settings/applications/new\">单击此处注册</a>一个新应用程序。</p>\n</li>\n</ol>\n<p> <strong>注意：</strong> 必须在字段中指定网站域 url <code>Authorization callback URL</code>（回调的地址），都写你的个人网站地址就可以了。<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-82c3c3b4e810dd11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>创建成功后，跳转到此<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-61c661153203e3eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>记住clientID和clientSecret，是之后要配置的。</p>\n<ol start=\"3\">\n<li>选择如何应用到页面，如下所示：</li>\n</ol>\n<h3 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a>方法：</h3><p>将容器添加到您的页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gitalk-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后使用下面的Javascript代码生成gitalk插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gitalk = <span class=\"keyword\">new</span> <span class=\"title class_\">Gitalk</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">clientID</span>: <span class=\"string\">&#x27;GitHub Application Client ID&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">clientSecret</span>: <span class=\"string\">&#x27;GitHub Application Client Secret&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">repo</span>: <span class=\"string\">&#x27;GitHub repo&#x27;</span>,      <span class=\"comment\">// The repository of store comments,</span></span><br><span class=\"line\">  <span class=\"attr\">owner</span>: <span class=\"string\">&#x27;GitHub repo owner&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">admin</span>: [<span class=\"string\">&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">id</span>: location.<span class=\"property\">pathname</span>,      <span class=\"comment\">// Ensure uniqueness and length less than 50</span></span><br><span class=\"line\">  <span class=\"attr\">distractionFreeMode</span>: <span class=\"literal\">false</span>  <span class=\"comment\">// Facebook-like distraction free mode</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gitalk.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;gitalk-container&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>其中clientID和clientSecret是上面生成的，填入你的就可以了。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><ul>\n<li><p><strong>客户端ID</strong> <code>String</code></p>\n<p>  <strong>必填</strong>。GitHub 应用程序客户端 ID。</p>\n</li>\n<li><p><strong>客户秘密</strong> <code>String</code></p>\n<p>  <strong>必填</strong>。GitHub 应用程序客户端机密。</p>\n</li>\n<li><p><strong>回购</strong> <code>String</code></p>\n<p>  <strong>必填</strong>。GitHub 存储库。</p>\n</li>\n<li><p><strong>所有者</strong> <code>String</code></p>\n<p>  <strong>必填</strong>。GitHub 存储库所有者。可以是个人用户或组织。</p>\n</li>\n<li><p><strong>行政</strong> <code>Array</code></p>\n<p>  <strong>必填</strong>。GitHub 存储库所有者和协作者。（对该存储库具有写入权限的用户）</p>\n</li>\n<li><p><strong>ID</strong> <code>String</code></p>\n<p>  默认值：<code>location.href</code>.</p>\n<p>  页面的唯一标识。长度必须小于 50。</p>\n</li>\n<li><p><strong>数字</strong> <code>Number</code></p>\n<p>  默认值：<code>-1</code>.</p>\n<p>  页面的issue ID，如果<code>number</code>没有定义该属性，则使用.issue定位issue <code>id</code>。</p>\n</li>\n<li><p><strong>标签</strong> <code>Array</code></p>\n<p>  默认值：<code>[&#39;Gitalk&#39;]</code>.</p>\n<p>  GitHub 问题标签。</p>\n</li>\n<li><p><strong>标题</strong> <code>String</code></p>\n<p>  默认值：<code>document.title</code>.</p>\n<p>  GitHub 问题标题。</p>\n</li>\n<li><p><strong>身体</strong> <code>String</code></p>\n<p>  默认值：<code>location.href + header.meta[description]</code>.</p>\n<p>  GitHub 问题正文。</p>\n</li>\n<li><p><strong>语言</strong> <code>String</code></p>\n<p>  默认值：<code>navigator.language || navigator.userLanguage</code>.</p>\n<p>  本地化语言键，支持[ <code>en</code>, <code>zh-CN</code>, <code>zh-TW</code>, <code>es-ES</code>, <code>fr</code>, <code>ru</code>, <code>de</code>, <code>pl</code>, <code>ko</code>, <code>fa</code>, <code>ja</code>]。</p>\n</li>\n<li><p><strong>每页</strong> <code>Number</code></p>\n<p>  默认值：<code>10</code>.</p>\n<p>  分页大小，最大 100。</p>\n</li>\n<li><p><strong>无干扰模式</strong> <code>Boolean</code></p>\n<p>  默认值：假。</p>\n<p>  类似 Facebook 的无干扰模式。</p>\n</li>\n<li><p><strong>pagerDirection</strong> <code>String</code></p>\n<p>  默认值：“最后”</p>\n<p>  评论排序方向，可选值为<code>last</code>和<code>first</code>。</p>\n</li>\n<li><p><strong>手动创建问题</strong> <code>Boolean</code></p>\n<p>  默认值：<code>false</code>.</p>\n<p>  默认情况下，当登录用户属于用户时，Gitalk 会自动为您的每个页面创建一个相应的 github 问题<code>admin</code>。您可以通过将此选项设置为 来手动创建它<code>true</code>。</p>\n</li>\n<li><p><strong>代理人</strong> <code>String</code></p>\n<p>  默认值：<code>https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</code>.</p>\n<p>  GitHub oauth 请求 CORS 的反向代理。<a href=\"https://github.com/isaacs/github/issues/330\">为什么需要这个？</a></p>\n</li>\n<li><p><strong>翻转移动选项</strong> <code>Object</code></p>\n<p>  默认：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  staggerDelayBy: 150,</span><br><span class=\"line\">  appearAnimation: &#x27;accordionVertical&#x27;,</span><br><span class=\"line\">  enterAnimation: &#x27;accordionVertical&#x27;,</span><br><span class=\"line\">  leaveAnimation: &#x27;accordionVertical&#x27;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  评论列表动画。<a href=\"https://github.com/joshwcomeau/react-flip-move/blob/master/documentation/enter_leave_animations.md\">参考</a></p>\n</li>\n<li><p><strong>启用热键</strong> <code>Boolean</code></p>\n<p>  默认值：<code>true</code>.</p>\n<p>  启用热键 (cmd|ctrl + enter) 提交评论。</p>\n</li>\n</ul>\n<h2 id=\"效果演示\"><a href=\"#效果演示\" class=\"headerlink\" title=\"效果演示\"></a>效果演示</h2><p><a href=\"https://bbdcsg.love/2019/12/11/cxy/other/gitalk/\">点击访问</a><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-fa80cc39adc7320d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"typescript总结笔记","date":"2020-09-10T07:20:18.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 什么是typescript？\ntypescpt是一种***静态类型语言***。\n添加了类型的js，完全兼容js，写完后可以编译为js\n我觉得是用另一种更为严格和规范的方式去写js\n##静态类型语言\n静态类型语言中，变量的类型必须先声明，即在创建的那一刻就已经确定好变量的类型，而后的使用中，你只能将这一指定类型的数据赋值给变量。如果强行将其他不相干类型的数据赋值给它，就会引发错误。\n在静态语言中，一旦声明一个变量是int类型，之后就只能将int类型的数据赋值给它，否则就会引发错误，而动态类型则没有这样的限制，你将什么类型的数据赋值给变量，这个变量就是什么类型\n## 强类型 VS 弱类型\n强弱之分，体现在对类型的检查严格程度上，弱类型语言对于变量类型的检查比较宽松，容忍隐式类型转换这种事情的发生。何为隐式类型转换，一般有两种形式：\n\n1. 相关类型之间隐式转换\n2. 不相关类型之隐式间转换\n## 一、基础类型\n### 1. ts有哪些基础类型？\n布尔、数字、字符串、数组、元祖、枚举、any、void、null、undefined、never、Object\n### 2. 定义数组：\n```javascript\nlet arr: Array<number> = [1,2,3]\nlet arr2: number[] = [1,2,3]\n```\n### 3. 定义元组：\n```javascript\nlet x: [string,number,string] = ['aaa',111,'aaa']\n```\n注意：访问越界元素会报错\n```javascript\nx[3] = \"world\"; // Error, Property '3' does not exist on type '[string, number]'.\nconsole.log(x[5].toString()); // Error, Property '5' does not exist on type '[string, number]'.\n\n```\n### 4. 枚举：定义类型\n```javascript\nenum Color {\n    Red = '#ff0000',\n    Green = '#00ff00',\n    Blue = '#0000ff'\n}\nlet color: Color = Color.red\n```\n### 5. never\nnever是任何类型的子类型，可以复制给任何类型，但没有类型是never的子类型或可以赋值给never类型（除了never本身），即使是any也不能复制给never。\nnever经常用于**抛出异常的函数**，或是**死循环**。\n\n变量也可以是never类型，当他永不为真的类型保护所约束时。\n```javascript\nlet n: never\nlet num: number = 1 // 报错\nn = num // 报错\nnum = n // ok\n\n// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n    throw new Error(message);\n}\n// 推断的返回值类型为never\nfunction fail() {\n    return error(\"Something failed\");\n}\n// 返回never的函数必须存在无法达到的终点\nfunction infiniteLoop(): never {\n    while (true) {\n    }\n}\n```\n### 6. void\nvoid表示没有任何类型。和any完全相反。函数没有返回值时可以写void\n```javascript\nfunction warnUser(): void {\n    console.log(\"This is my warning message\");\n}\n```\nvoid变量没有什么作用，因为void变量只能赋值null或undefined。\n### 7. 类型断言\n我可能有时候比ts更了解这个变量是什么类型，这时就可以用类型断言\n语法有两种\n第一种：**尖括号**\n```javascript\nlet someValue: any = \"this is a string\";\nlet strLength: number =(<string>someValue).length;\n```\n第二种：**as**\n```javascript\nlet someValue: any = \"this is a string\";\nlet strLength = (someValue as number).length\n```\n## 二、变量声明\nts用const、let代替了var\n## 三、接口\n### 1. 对象类型\n定义一个类型，让变量按照这个类型来具体实现\n```javascript\ninterface LabelType {\n  label: string,\n  name?: string, // name可选\n  id: string|number,\n  readonly size: number, // 只读\n  [propName: string]: any, // 表示接口还可以有其他的属性，且属性名字任意，类型any\n  fn(arg1: string): string\n}\n```\n\n```javascript\nlet labelObj: LabelType {\n    label: '标签1',\n    size: 10,\n    aaa: 32482093840, // [propName: string]: any;\n    bbb: 'whatever',   // [propName: string]: any;\n    fn(a) {\n      return 'a'\n    }\n}\n```\n### 2. 函数类型\n```javascript\ninterface Square{\n  (source: string,subString: string):boolean\n}\n```\n上面代码意思是，一个函数类型叫Square，它应该有两个参数，一个source类型string，一个subString类型string，返回boolean类型的值。\n```javascript\nlet sq: Square = function(source: string,subString: string) {\n  return true\n}\n```\n### 3. 类类型\n```javascript\ninterface ClockInterface {\n  currentTime: Date\n}\nclass Clock implements ClockInterface {\n  currentTime: Date = new Date()\n}\n```\n接口亦可以继承\n```javascript\ninterface Shape {\n    color: string;\n}\n\ninterface PenStroke {\n    penWidth: number;\n}\n\ninterface Square extends Shape, PenStroke {\n    sideLength: number;\n}\n\nlet square = <Square>{};\nsquare.color = \"blue\";\nsquare.sideLength = 10;\nsquare.penWidth = 5.0;\n```\n## 四、类\n```javascript\n// 1. 基本使用class Person\n// 2. 继承\n// 3. 公共、私有、保护\n// 4. 抽象类和接口的区别\n```\n```javascript\nclass Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nclass Rhino extends Animal {\n    constructor() { super(\"Rhino\"); }\n}\n\nclass Employee {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nlet animal = new Animal(\"Goat\");\nlet rhino = new Rhino();\nlet employee = new Employee(\"Bob\");\n\nanimal = rhino;\nanimal = employee; // 错误: Animal 与 Employee 不兼容.\n```\n### 1. public、protected、private的区别：\nprotected：可以继承，不可以在类外部使用\nprivate：不可以继承，不可以在类外部使用\npublic：可以继承，可以在类外部使用\n### 2. readonly：\n```javascript\nclass Person {\n  readonly name: string;\n  readonly sex: string = 'F'\n  constructor (name: string) {\n    this.name = name\n  }\n}\nlet p1 = new Person('小鸣')\n```\n### 3. getter、setter\n```javascript\nlet passcode = \"secret passcode\";\n\nclass Employee {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n        if (passcode && passcode == \"secret passcode\") {\n            this._fullName = newName;\n        }\n        else {\n            console.log(\"Error: Unauthorized update of employee!\");\n        }\n    }\n}\n\nlet employee = new Employee();\nemployee.fullName = \"Bob Smith\";\nif (employee.fullName) {\n    alert(employee.fullName);\n}\n```\n### 4. 静态属性、静态方法\n使用static定义，只能用类名.方法/属性使用\n### 5. 抽象类与抽象方法\n```javascript\nabstract class Animal {\n    abstract makeSound(): void;\n    move(): void {\n        console.log('roaming the earch...');\n    }\n}\n```\n### 6. 抽象类和接口的区别\n#### （1）abstract类 \nabstract类是定义用来被继承的类。\n抽象类中**可以有抽象方法，可以有普通方法**。非抽象类也可以。\n但抽象类**不能创建对象**，普通类继承抽象类**必须实现其方法，或将其定义为抽象方法**。\n抽象类必须在类前用abstract关键字修饰。\n**因为抽象类中含有无具体实现的方法，所以不能用抽象类创建对象。**\n\n##### 1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。\n\n##### 2）抽象类不能用来创建对象；\n\n##### 3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。\n\n##### 4）非抽象类中可以有抽象方法，比如继承的时候，如果子类不想实现父类的抽象方法，则必须将该方法也定义为抽象方法\n\n#### (2) interface接口： 是对类的补充\n接口中可以含有 变量和方法。但是要注意，接口中的变量会被隐式地指定为```public static final```变量（并且只能是```public static final```变量，用```private```修饰会报编译错误）\n\n而方法会被隐式地指定为public abstract方法且只能是public abstract方法（用其他关键字，比如private、protected、static、 final等修饰会报编译错误），并且接口中所有的方法不能有具体的实现\n\n**抽象方法是一种特殊的方法：它只有声明，而没有具体的实现。**\n## 五、函数\n```javascript\nfunction add(a: number,b:number): number {\n  return a + b\n}\nlet addNum: number = add(1,2)\n```\n### 六、泛型（尖括号）\n#### 1. 泛型变量\n一个函数在公用的时候，若同一个参数可能有多个类型or可能有多种返回值的情况下，如果写成any会不严谨\n```javascript\nfunction identify(arg: any) : any {\n   return arg // 如果我想让arg和函数返回值是一个类型，这种写法并不能保证是一个类型\n}\n```\n用下面这个就可以保证返回值与参数相同类型\n```javascript\nfunction identity<T,Y>(arg: T,arg2: Y): T {\n    return arg; // 这里T作为新类型可以保证返回值与参数是一个类型\n}\n// 使用：\nidentity<number,string>(1,'aaa')\nidentity<string,number>('aaa',1)\n```\n#### 2. 泛型类、泛型接口\n```javascript\nclass GenericNumber<T> {\n  public zeroValue: T\n  public add(num1:T,num2:T): T {\n    return num1\n  }\n}\nlet g = new GenericNumber().zeroValue\n```\n```javascript\ninterface Person<TT,YY> {\n  name?: TT,\n  sex?: TT,\n  age?: YY,\n  [propName:string]: any,\n  identity?() : YY\n}\nlet pe: Person<string,number> = {\n  name: '111',\n  age: 111,\n  sex: 'nv',\n  aaa: 1\n}\n```\n## 七、枚举\n```javascript\n  enum Color {\n    RED = 1,\n    GREEN = 2,\n    BLUE = 3\n  }\n  console.log(`Color.RED=${Color.RED}`)\n  let red:Color = Color.RED\n```\n## 八、高级类型\n### 1. 类型别名\n```javascript\ntype NameOrId = string | number\nlet n1: NameOrId = 1\nlet n2: NameOrId = 'n1'\n```\n### 2. 交叉类型\n也就是用’&‘\n```javascript\ninterface Person {\n  name: string,\n  age: number\n}\ninterface Pet {\n  petName: string,\n  petAge: number\n}\ntype PersonAndPet = Person & Pet\nlet p1: PersonAndPet = {\n  name: '小鸣',\n  age: '11',\n  petName: '喵',\n  petAge: '1'\n}\n\n```\n### 3. 联合类型\n也就是用'|'\nlet arg: number | string = 'sfsdfds'\n###4. 类型保护和类型断言\ntypeof和instanceof\n#### （1）typeof\n```javascript\ntype Name = string;\ntype NameResolver = () => string;\ntype NameOrResolver = Name | NameResolver;\nlet n: NameOrResolver = '111'\nif (typeof n === 'string') {\n        return n;\n    }\n    else {\n        return n();\n    }\n```\n#### （2）instanceof只对类有用。\n```javascript\nclass A {\n\n}\nlet a: A = new A()\na instanceof A // true\n```\n## 九、Symbols\n## 十、迭代器\nfor of 与for in\n## 十一、模块（原：外部模块）\n “内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”，这是为了与 [ECMAScript 2015](http://www.ecma-international.org/ecma-262/6.0/)里的术语保持一致，(也就是说 `module X {` 相当于现在推荐的写法 `namespace X {`)。\n```javascript\nimport {ModuleA,ModuleB,ModuleC} from './module'\n```\n用法和js一致。\n\n## 十二、命名空间（原：内部模块）\n “内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”，这是为了与 [ECMAScript 2015](http://www.ecma-international.org/ecma-262/6.0/)里的术语保持一致，(也就是说 `module X {` 相当于现在推荐的写法 `namespace X {`)。\n### 1. 命名空间的基本用法\n在一个文件中，有时候有些变量是不想定义为全局的，比如有ab两个类被c类引用，如果都定义为全局的变量，不好维护容易出错，可以只对外暴露出c类接口（export class C）给该文件其他部分使用。。\n```javascript\nnamespace Home{\n    class A {\n    \n    }\n    class B {\n    \n    }\n    export class C {\n        constructor () {\n            new A()\n            new B()\n        }\n    }\n}\nlet abc = new Home.C()\n// let abc1 = new A() // 报错\n```\n### 2. 复用\n将逻辑与业务分离，可以将一个namespace用另一个namespace引入\n如下面，用page引入components的命名空间\ncomponents.ts文件：\n```javascript\nnamespace Components {\n    export class C {\n\n    }\n    export class D {\n\n    }\n}\n```\npage.ts文件：\n```javascript\nnamespace Home{\n    export class C {\n        constructor () {\n            new Components.C()\n            new Components.D()\n        }\n    }\n}\nlet abc = new Home.C()\n```\n由于这种写法很难搞懂命名空间是在哪个文件中，所以最好在path.ts头部中用三斜线指定进行指定\n```javascript\n/// <reference path=\"components.ts\" />\n```\n###3. 子命名空间\n```javascript\nnamespace Components {\n    // ...\n    export namespace E {\n        export class F {}\n        class G {}\n    }\n}\n```\n## 十三、三斜线指令\n三斜线指令***仅可放在包含它的文件的最顶端。***放在其他地方则会被当做***注释***去解析的。\n包括下面几个指令，去看[官网](https://www.tslang.cn/docs/handbook/triple-slash-directives.html)吧\n```javascript\n/// <reference path=\"...\" />\n// 在编译过程中要引入的额外的文件。\n```\n```javascript\n/// <reference types=\"...\" />\n// 用来声明依赖，被/// <reference path=\"...\" />引用\n```\n```javascript\n/// <reference no-default-lib=\"true\"/>\n```\n```javascript\n/// <amd-module />\n```\n\ntsc -w 监听，自动编译\ntsc init 生成tsconfig.\ntsconfig的配置：\noutFile\noutDir\nmodule\nrootDir\ntarget\n\n## 十四、声明文件\n使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。\n说人话：就是第三方库定义的一些东西直接引进来ts识别不了，ts只能识别js有的和ts已经定义的东西。所以需要另外写一份声明文件告诉ts，然后ts就知道这个第三方库有这些变量就不会报错了。\n文件叫*.d.ts\n\ndeclare 就是用在声明文件中的。\n*   [全局变量](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#global-variables)\n*   [全局函数](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#global-functions)\n*   [带属性的对象](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#objects-with-properties)\n*   [函数重载](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#overloaded-functions)\n*   [可重用类型（接口）](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#reusable-types-interfaces)\n*   [可重用类型（类型别名）](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#reusable-types-type-aliases)\n*   [组织类型](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#organizing-types)\n*   [类](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#classes)\n\n## 十五、项目配置\ntsconfig.json\n\n ","source":"_posts/cxy/js/typescript.md","raw":"---\ntitle: 'typescript总结笔记'\ndate: 2020-09-10 15:20:18\ntags: \n  - typescript\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 什么是typescript？\ntypescpt是一种***静态类型语言***。\n添加了类型的js，完全兼容js，写完后可以编译为js\n我觉得是用另一种更为严格和规范的方式去写js\n##静态类型语言\n静态类型语言中，变量的类型必须先声明，即在创建的那一刻就已经确定好变量的类型，而后的使用中，你只能将这一指定类型的数据赋值给变量。如果强行将其他不相干类型的数据赋值给它，就会引发错误。\n在静态语言中，一旦声明一个变量是int类型，之后就只能将int类型的数据赋值给它，否则就会引发错误，而动态类型则没有这样的限制，你将什么类型的数据赋值给变量，这个变量就是什么类型\n## 强类型 VS 弱类型\n强弱之分，体现在对类型的检查严格程度上，弱类型语言对于变量类型的检查比较宽松，容忍隐式类型转换这种事情的发生。何为隐式类型转换，一般有两种形式：\n\n1. 相关类型之间隐式转换\n2. 不相关类型之隐式间转换\n## 一、基础类型\n### 1. ts有哪些基础类型？\n布尔、数字、字符串、数组、元祖、枚举、any、void、null、undefined、never、Object\n### 2. 定义数组：\n```javascript\nlet arr: Array<number> = [1,2,3]\nlet arr2: number[] = [1,2,3]\n```\n### 3. 定义元组：\n```javascript\nlet x: [string,number,string] = ['aaa',111,'aaa']\n```\n注意：访问越界元素会报错\n```javascript\nx[3] = \"world\"; // Error, Property '3' does not exist on type '[string, number]'.\nconsole.log(x[5].toString()); // Error, Property '5' does not exist on type '[string, number]'.\n\n```\n### 4. 枚举：定义类型\n```javascript\nenum Color {\n    Red = '#ff0000',\n    Green = '#00ff00',\n    Blue = '#0000ff'\n}\nlet color: Color = Color.red\n```\n### 5. never\nnever是任何类型的子类型，可以复制给任何类型，但没有类型是never的子类型或可以赋值给never类型（除了never本身），即使是any也不能复制给never。\nnever经常用于**抛出异常的函数**，或是**死循环**。\n\n变量也可以是never类型，当他永不为真的类型保护所约束时。\n```javascript\nlet n: never\nlet num: number = 1 // 报错\nn = num // 报错\nnum = n // ok\n\n// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n    throw new Error(message);\n}\n// 推断的返回值类型为never\nfunction fail() {\n    return error(\"Something failed\");\n}\n// 返回never的函数必须存在无法达到的终点\nfunction infiniteLoop(): never {\n    while (true) {\n    }\n}\n```\n### 6. void\nvoid表示没有任何类型。和any完全相反。函数没有返回值时可以写void\n```javascript\nfunction warnUser(): void {\n    console.log(\"This is my warning message\");\n}\n```\nvoid变量没有什么作用，因为void变量只能赋值null或undefined。\n### 7. 类型断言\n我可能有时候比ts更了解这个变量是什么类型，这时就可以用类型断言\n语法有两种\n第一种：**尖括号**\n```javascript\nlet someValue: any = \"this is a string\";\nlet strLength: number =(<string>someValue).length;\n```\n第二种：**as**\n```javascript\nlet someValue: any = \"this is a string\";\nlet strLength = (someValue as number).length\n```\n## 二、变量声明\nts用const、let代替了var\n## 三、接口\n### 1. 对象类型\n定义一个类型，让变量按照这个类型来具体实现\n```javascript\ninterface LabelType {\n  label: string,\n  name?: string, // name可选\n  id: string|number,\n  readonly size: number, // 只读\n  [propName: string]: any, // 表示接口还可以有其他的属性，且属性名字任意，类型any\n  fn(arg1: string): string\n}\n```\n\n```javascript\nlet labelObj: LabelType {\n    label: '标签1',\n    size: 10,\n    aaa: 32482093840, // [propName: string]: any;\n    bbb: 'whatever',   // [propName: string]: any;\n    fn(a) {\n      return 'a'\n    }\n}\n```\n### 2. 函数类型\n```javascript\ninterface Square{\n  (source: string,subString: string):boolean\n}\n```\n上面代码意思是，一个函数类型叫Square，它应该有两个参数，一个source类型string，一个subString类型string，返回boolean类型的值。\n```javascript\nlet sq: Square = function(source: string,subString: string) {\n  return true\n}\n```\n### 3. 类类型\n```javascript\ninterface ClockInterface {\n  currentTime: Date\n}\nclass Clock implements ClockInterface {\n  currentTime: Date = new Date()\n}\n```\n接口亦可以继承\n```javascript\ninterface Shape {\n    color: string;\n}\n\ninterface PenStroke {\n    penWidth: number;\n}\n\ninterface Square extends Shape, PenStroke {\n    sideLength: number;\n}\n\nlet square = <Square>{};\nsquare.color = \"blue\";\nsquare.sideLength = 10;\nsquare.penWidth = 5.0;\n```\n## 四、类\n```javascript\n// 1. 基本使用class Person\n// 2. 继承\n// 3. 公共、私有、保护\n// 4. 抽象类和接口的区别\n```\n```javascript\nclass Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nclass Rhino extends Animal {\n    constructor() { super(\"Rhino\"); }\n}\n\nclass Employee {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nlet animal = new Animal(\"Goat\");\nlet rhino = new Rhino();\nlet employee = new Employee(\"Bob\");\n\nanimal = rhino;\nanimal = employee; // 错误: Animal 与 Employee 不兼容.\n```\n### 1. public、protected、private的区别：\nprotected：可以继承，不可以在类外部使用\nprivate：不可以继承，不可以在类外部使用\npublic：可以继承，可以在类外部使用\n### 2. readonly：\n```javascript\nclass Person {\n  readonly name: string;\n  readonly sex: string = 'F'\n  constructor (name: string) {\n    this.name = name\n  }\n}\nlet p1 = new Person('小鸣')\n```\n### 3. getter、setter\n```javascript\nlet passcode = \"secret passcode\";\n\nclass Employee {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n        if (passcode && passcode == \"secret passcode\") {\n            this._fullName = newName;\n        }\n        else {\n            console.log(\"Error: Unauthorized update of employee!\");\n        }\n    }\n}\n\nlet employee = new Employee();\nemployee.fullName = \"Bob Smith\";\nif (employee.fullName) {\n    alert(employee.fullName);\n}\n```\n### 4. 静态属性、静态方法\n使用static定义，只能用类名.方法/属性使用\n### 5. 抽象类与抽象方法\n```javascript\nabstract class Animal {\n    abstract makeSound(): void;\n    move(): void {\n        console.log('roaming the earch...');\n    }\n}\n```\n### 6. 抽象类和接口的区别\n#### （1）abstract类 \nabstract类是定义用来被继承的类。\n抽象类中**可以有抽象方法，可以有普通方法**。非抽象类也可以。\n但抽象类**不能创建对象**，普通类继承抽象类**必须实现其方法，或将其定义为抽象方法**。\n抽象类必须在类前用abstract关键字修饰。\n**因为抽象类中含有无具体实现的方法，所以不能用抽象类创建对象。**\n\n##### 1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。\n\n##### 2）抽象类不能用来创建对象；\n\n##### 3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。\n\n##### 4）非抽象类中可以有抽象方法，比如继承的时候，如果子类不想实现父类的抽象方法，则必须将该方法也定义为抽象方法\n\n#### (2) interface接口： 是对类的补充\n接口中可以含有 变量和方法。但是要注意，接口中的变量会被隐式地指定为```public static final```变量（并且只能是```public static final```变量，用```private```修饰会报编译错误）\n\n而方法会被隐式地指定为public abstract方法且只能是public abstract方法（用其他关键字，比如private、protected、static、 final等修饰会报编译错误），并且接口中所有的方法不能有具体的实现\n\n**抽象方法是一种特殊的方法：它只有声明，而没有具体的实现。**\n## 五、函数\n```javascript\nfunction add(a: number,b:number): number {\n  return a + b\n}\nlet addNum: number = add(1,2)\n```\n### 六、泛型（尖括号）\n#### 1. 泛型变量\n一个函数在公用的时候，若同一个参数可能有多个类型or可能有多种返回值的情况下，如果写成any会不严谨\n```javascript\nfunction identify(arg: any) : any {\n   return arg // 如果我想让arg和函数返回值是一个类型，这种写法并不能保证是一个类型\n}\n```\n用下面这个就可以保证返回值与参数相同类型\n```javascript\nfunction identity<T,Y>(arg: T,arg2: Y): T {\n    return arg; // 这里T作为新类型可以保证返回值与参数是一个类型\n}\n// 使用：\nidentity<number,string>(1,'aaa')\nidentity<string,number>('aaa',1)\n```\n#### 2. 泛型类、泛型接口\n```javascript\nclass GenericNumber<T> {\n  public zeroValue: T\n  public add(num1:T,num2:T): T {\n    return num1\n  }\n}\nlet g = new GenericNumber().zeroValue\n```\n```javascript\ninterface Person<TT,YY> {\n  name?: TT,\n  sex?: TT,\n  age?: YY,\n  [propName:string]: any,\n  identity?() : YY\n}\nlet pe: Person<string,number> = {\n  name: '111',\n  age: 111,\n  sex: 'nv',\n  aaa: 1\n}\n```\n## 七、枚举\n```javascript\n  enum Color {\n    RED = 1,\n    GREEN = 2,\n    BLUE = 3\n  }\n  console.log(`Color.RED=${Color.RED}`)\n  let red:Color = Color.RED\n```\n## 八、高级类型\n### 1. 类型别名\n```javascript\ntype NameOrId = string | number\nlet n1: NameOrId = 1\nlet n2: NameOrId = 'n1'\n```\n### 2. 交叉类型\n也就是用’&‘\n```javascript\ninterface Person {\n  name: string,\n  age: number\n}\ninterface Pet {\n  petName: string,\n  petAge: number\n}\ntype PersonAndPet = Person & Pet\nlet p1: PersonAndPet = {\n  name: '小鸣',\n  age: '11',\n  petName: '喵',\n  petAge: '1'\n}\n\n```\n### 3. 联合类型\n也就是用'|'\nlet arg: number | string = 'sfsdfds'\n###4. 类型保护和类型断言\ntypeof和instanceof\n#### （1）typeof\n```javascript\ntype Name = string;\ntype NameResolver = () => string;\ntype NameOrResolver = Name | NameResolver;\nlet n: NameOrResolver = '111'\nif (typeof n === 'string') {\n        return n;\n    }\n    else {\n        return n();\n    }\n```\n#### （2）instanceof只对类有用。\n```javascript\nclass A {\n\n}\nlet a: A = new A()\na instanceof A // true\n```\n## 九、Symbols\n## 十、迭代器\nfor of 与for in\n## 十一、模块（原：外部模块）\n “内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”，这是为了与 [ECMAScript 2015](http://www.ecma-international.org/ecma-262/6.0/)里的术语保持一致，(也就是说 `module X {` 相当于现在推荐的写法 `namespace X {`)。\n```javascript\nimport {ModuleA,ModuleB,ModuleC} from './module'\n```\n用法和js一致。\n\n## 十二、命名空间（原：内部模块）\n “内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”，这是为了与 [ECMAScript 2015](http://www.ecma-international.org/ecma-262/6.0/)里的术语保持一致，(也就是说 `module X {` 相当于现在推荐的写法 `namespace X {`)。\n### 1. 命名空间的基本用法\n在一个文件中，有时候有些变量是不想定义为全局的，比如有ab两个类被c类引用，如果都定义为全局的变量，不好维护容易出错，可以只对外暴露出c类接口（export class C）给该文件其他部分使用。。\n```javascript\nnamespace Home{\n    class A {\n    \n    }\n    class B {\n    \n    }\n    export class C {\n        constructor () {\n            new A()\n            new B()\n        }\n    }\n}\nlet abc = new Home.C()\n// let abc1 = new A() // 报错\n```\n### 2. 复用\n将逻辑与业务分离，可以将一个namespace用另一个namespace引入\n如下面，用page引入components的命名空间\ncomponents.ts文件：\n```javascript\nnamespace Components {\n    export class C {\n\n    }\n    export class D {\n\n    }\n}\n```\npage.ts文件：\n```javascript\nnamespace Home{\n    export class C {\n        constructor () {\n            new Components.C()\n            new Components.D()\n        }\n    }\n}\nlet abc = new Home.C()\n```\n由于这种写法很难搞懂命名空间是在哪个文件中，所以最好在path.ts头部中用三斜线指定进行指定\n```javascript\n/// <reference path=\"components.ts\" />\n```\n###3. 子命名空间\n```javascript\nnamespace Components {\n    // ...\n    export namespace E {\n        export class F {}\n        class G {}\n    }\n}\n```\n## 十三、三斜线指令\n三斜线指令***仅可放在包含它的文件的最顶端。***放在其他地方则会被当做***注释***去解析的。\n包括下面几个指令，去看[官网](https://www.tslang.cn/docs/handbook/triple-slash-directives.html)吧\n```javascript\n/// <reference path=\"...\" />\n// 在编译过程中要引入的额外的文件。\n```\n```javascript\n/// <reference types=\"...\" />\n// 用来声明依赖，被/// <reference path=\"...\" />引用\n```\n```javascript\n/// <reference no-default-lib=\"true\"/>\n```\n```javascript\n/// <amd-module />\n```\n\ntsc -w 监听，自动编译\ntsc init 生成tsconfig.\ntsconfig的配置：\noutFile\noutDir\nmodule\nrootDir\ntarget\n\n## 十四、声明文件\n使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。\n说人话：就是第三方库定义的一些东西直接引进来ts识别不了，ts只能识别js有的和ts已经定义的东西。所以需要另外写一份声明文件告诉ts，然后ts就知道这个第三方库有这些变量就不会报错了。\n文件叫*.d.ts\n\ndeclare 就是用在声明文件中的。\n*   [全局变量](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#global-variables)\n*   [全局函数](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#global-functions)\n*   [带属性的对象](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#objects-with-properties)\n*   [函数重载](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#overloaded-functions)\n*   [可重用类型（接口）](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#reusable-types-interfaces)\n*   [可重用类型（类型别名）](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#reusable-types-type-aliases)\n*   [组织类型](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#organizing-types)\n*   [类](https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#classes)\n\n## 十五、项目配置\ntsconfig.json\n\n ","slug":"cxy/js/typescript","published":1,"updated":"2023-02-07T11:15:41.393Z","_id":"cldlkywhf0002tuwiarsa7txr","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"什么是typescript？\"><a href=\"#什么是typescript？\" class=\"headerlink\" title=\"什么是typescript？\"></a>什么是typescript？</h2><p>typescpt是一种<em><strong>静态类型语言</strong></em>。<br>添加了类型的js，完全兼容js，写完后可以编译为js<br>我觉得是用另一种更为严格和规范的方式去写js<br>##静态类型语言<br>静态类型语言中，变量的类型必须先声明，即在创建的那一刻就已经确定好变量的类型，而后的使用中，你只能将这一指定类型的数据赋值给变量。如果强行将其他不相干类型的数据赋值给它，就会引发错误。<br>在静态语言中，一旦声明一个变量是int类型，之后就只能将int类型的数据赋值给它，否则就会引发错误，而动态类型则没有这样的限制，你将什么类型的数据赋值给变量，这个变量就是什么类型</p>\n<h2 id=\"强类型-VS-弱类型\"><a href=\"#强类型-VS-弱类型\" class=\"headerlink\" title=\"强类型 VS 弱类型\"></a>强类型 VS 弱类型</h2><p>强弱之分，体现在对类型的检查严格程度上，弱类型语言对于变量类型的检查比较宽松，容忍隐式类型转换这种事情的发生。何为隐式类型转换，一般有两种形式：</p>\n<ol>\n<li>相关类型之间隐式转换</li>\n<li>不相关类型之隐式间转换<h2 id=\"一、基础类型\"><a href=\"#一、基础类型\" class=\"headerlink\" title=\"一、基础类型\"></a>一、基础类型</h2><h3 id=\"1-ts有哪些基础类型？\"><a href=\"#1-ts有哪些基础类型？\" class=\"headerlink\" title=\"1. ts有哪些基础类型？\"></a>1. ts有哪些基础类型？</h3>布尔、数字、字符串、数组、元祖、枚举、any、void、null、undefined、never、Object<h3 id=\"2-定义数组：\"><a href=\"#2-定义数组：\" class=\"headerlink\" title=\"2. 定义数组：\"></a>2. 定义数组：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>: <span class=\"title class_\">Array</span>&lt;number&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr2</span>: number[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-定义元组：\"><a href=\"#3-定义元组：\" class=\"headerlink\" title=\"3. 定义元组：\"></a>3. 定义元组：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: [string,number,string] = [<span class=\"string\">&#x27;aaa&#x27;</span>,<span class=\"number\">111</span>,<span class=\"string\">&#x27;aaa&#x27;</span>]</span><br></pre></td></tr></table></figure>\n注意：访问越界元素会报错<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">&quot;world&quot;</span>; <span class=\"comment\">// Error, Property &#x27;3&#x27; does not exist on type &#x27;[string, number]&#x27;.</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">5</span>].<span class=\"title function_\">toString</span>()); <span class=\"comment\">// Error, Property &#x27;5&#x27; does not exist on type &#x27;[string, number]&#x27;.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-枚举：定义类型\"><a href=\"#4-枚举：定义类型\" class=\"headerlink\" title=\"4. 枚举：定义类型\"></a>4. 枚举：定义类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Red</span> = <span class=\"string\">&#x27;#ff0000&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Green</span> = <span class=\"string\">&#x27;#00ff00&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Blue</span> = <span class=\"string\">&#x27;#0000ff&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">red</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-never\"><a href=\"#5-never\" class=\"headerlink\" title=\"5. never\"></a>5. never</h3>never是任何类型的子类型，可以复制给任何类型，但没有类型是never的子类型或可以赋值给never类型（除了never本身），即使是any也不能复制给never。<br>never经常用于<strong>抛出异常的函数</strong>，或是<strong>死循环</strong>。</li>\n</ol>\n<p>变量也可以是never类型，当他永不为真的类型保护所约束时。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>: never</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: number = <span class=\"number\">1</span> <span class=\"comment\">// 报错</span></span><br><span class=\"line\">n = num <span class=\"comment\">// 报错</span></span><br><span class=\"line\">num = n <span class=\"comment\">// ok</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回never的函数必须存在无法达到的终点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">error</span>(<span class=\"params\">message: string</span>): never &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 推断的返回值类型为never</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fail</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">error</span>(<span class=\"string\">&quot;Something failed&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回never的函数必须存在无法达到的终点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">infiniteLoop</span>(<span class=\"params\"></span>): never &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-void\"><a href=\"#6-void\" class=\"headerlink\" title=\"6. void\"></a>6. void</h3><p>void表示没有任何类型。和any完全相反。函数没有返回值时可以写void</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">warnUser</span>(<span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;This is my warning message&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>void变量没有什么作用，因为void变量只能赋值null或undefined。</p>\n<h3 id=\"7-类型断言\"><a href=\"#7-类型断言\" class=\"headerlink\" title=\"7. 类型断言\"></a>7. 类型断言</h3><p>我可能有时候比ts更了解这个变量是什么类型，这时就可以用类型断言<br>语法有两种<br>第一种：<strong>尖括号</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: any = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>: number =(&lt;string&gt;someValue).<span class=\"property\">length</span>;</span><br></pre></td></tr></table></figure>\n<p>第二种：<strong>as</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: any = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength = (someValue <span class=\"keyword\">as</span> number).<span class=\"property\">length</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、变量声明\"><a href=\"#二、变量声明\" class=\"headerlink\" title=\"二、变量声明\"></a>二、变量声明</h2><p>ts用const、let代替了var</p>\n<h2 id=\"三、接口\"><a href=\"#三、接口\" class=\"headerlink\" title=\"三、接口\"></a>三、接口</h2><h3 id=\"1-对象类型\"><a href=\"#1-对象类型\" class=\"headerlink\" title=\"1. 对象类型\"></a>1. 对象类型</h3><p>定义一个类型，让变量按照这个类型来具体实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">LabelType</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">label</span>: string,</span><br><span class=\"line\">  name?: string, <span class=\"comment\">// name可选</span></span><br><span class=\"line\">  <span class=\"attr\">id</span>: string|number,</span><br><span class=\"line\">  readonly <span class=\"attr\">size</span>: number, <span class=\"comment\">// 只读</span></span><br><span class=\"line\">  [<span class=\"attr\">propName</span>: string]: any, <span class=\"comment\">// 表示接口还可以有其他的属性，且属性名字任意，类型any</span></span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"attr\">arg1</span>: string): string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">labelObj</span>: <span class=\"title class_\">LabelType</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">label</span>: <span class=\"string\">&#x27;标签1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">size</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"attr\">aaa</span>: <span class=\"number\">32482093840</span>, <span class=\"comment\">// [propName: string]: any;</span></span><br><span class=\"line\">    <span class=\"attr\">bbb</span>: <span class=\"string\">&#x27;whatever&#x27;</span>,   <span class=\"comment\">// [propName: string]: any;</span></span><br><span class=\"line\">    <span class=\"title function_\">fn</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-函数类型\"><a href=\"#2-函数类型\" class=\"headerlink\" title=\"2. 函数类型\"></a>2. 函数类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Square</span>&#123;</span><br><span class=\"line\">  (<span class=\"attr\">source</span>: string,<span class=\"attr\">subString</span>: string):boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码意思是，一个函数类型叫Square，它应该有两个参数，一个source类型string，一个subString类型string，返回boolean类型的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">sq</span>: <span class=\"title class_\">Square</span> = <span class=\"keyword\">function</span>(<span class=\"params\">source: string,subString: string</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-类类型\"><a href=\"#3-类类型\" class=\"headerlink\" title=\"3. 类类型\"></a>3. 类类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Clock</span> implements <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口亦可以继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">PenStroke</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">penWidth</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Shape</span>, <span class=\"title class_\">PenStroke</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">sideLength</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> square = &lt;<span class=\"title class_\">Square</span>&gt;&#123;&#125;;</span><br><span class=\"line\">square.<span class=\"property\">color</span> = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">square.<span class=\"property\">sideLength</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\">square.<span class=\"property\">penWidth</span> = <span class=\"number\">5.0</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、类\"><a href=\"#四、类\" class=\"headerlink\" title=\"四、类\"></a>四、类</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 基本使用class Person</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 继承</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 公共、私有、保护</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 抽象类和接口的区别</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    private <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: string</span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rhino</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">super</span>(<span class=\"string\">&quot;Rhino&quot;</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    private <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: string</span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&quot;Goat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> rhino = <span class=\"keyword\">new</span> <span class=\"title class_\">Rhino</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> employee = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;Bob&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">animal = rhino;</span><br><span class=\"line\">animal = employee; <span class=\"comment\">// 错误: Animal 与 Employee 不兼容.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-public、protected、private的区别：\"><a href=\"#1-public、protected、private的区别：\" class=\"headerlink\" title=\"1. public、protected、private的区别：\"></a>1. public、protected、private的区别：</h3><p>protected：可以继承，不可以在类外部使用<br>private：不可以继承，不可以在类外部使用<br>public：可以继承，可以在类外部使用</p>\n<h3 id=\"2-readonly：\"><a href=\"#2-readonly：\" class=\"headerlink\" title=\"2. readonly：\"></a>2. readonly：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  readonly <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">  readonly <span class=\"attr\">sex</span>: string = <span class=\"string\">&#x27;F&#x27;</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (<span class=\"attr\">name</span>: string) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;小鸣&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-getter、setter\"><a href=\"#3-getter、setter\" class=\"headerlink\" title=\"3. getter、setter\"></a>3. getter、setter</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> passcode = <span class=\"string\">&quot;secret passcode&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    private <span class=\"attr\">_fullName</span>: string;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">fullName</span>(): string &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_fullName</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">fullName</span>(<span class=\"params\">newName: string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (passcode &amp;&amp; passcode == <span class=\"string\">&quot;secret passcode&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">_fullName</span> = newName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Error: Unauthorized update of employee!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> employee = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">employee.<span class=\"property\">fullName</span> = <span class=\"string\">&quot;Bob Smith&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (employee.<span class=\"property\">fullName</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(employee.<span class=\"property\">fullName</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-静态属性、静态方法\"><a href=\"#4-静态属性、静态方法\" class=\"headerlink\" title=\"4. 静态属性、静态方法\"></a>4. 静态属性、静态方法</h3><p>使用static定义，只能用类名.方法/属性使用</p>\n<h3 id=\"5-抽象类与抽象方法\"><a href=\"#5-抽象类与抽象方法\" class=\"headerlink\" title=\"5. 抽象类与抽象方法\"></a>5. 抽象类与抽象方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstract <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    abstract <span class=\"title function_\">makeSound</span>(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    <span class=\"title function_\">move</span>(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;roaming the earch...&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-抽象类和接口的区别\"><a href=\"#6-抽象类和接口的区别\" class=\"headerlink\" title=\"6. 抽象类和接口的区别\"></a>6. 抽象类和接口的区别</h3><h4 id=\"（1）abstract类\"><a href=\"#（1）abstract类\" class=\"headerlink\" title=\"（1）abstract类\"></a>（1）abstract类</h4><p>abstract类是定义用来被继承的类。<br>抽象类中<strong>可以有抽象方法，可以有普通方法</strong>。非抽象类也可以。<br>但抽象类<strong>不能创建对象</strong>，普通类继承抽象类<strong>必须实现其方法，或将其定义为抽象方法</strong>。<br>抽象类必须在类前用abstract关键字修饰。<br><strong>因为抽象类中含有无具体实现的方法，所以不能用抽象类创建对象。</strong></p>\n<h5 id=\"1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。\"><a href=\"#1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。\" class=\"headerlink\" title=\"1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。\"></a>1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。</h5><h5 id=\"2）抽象类不能用来创建对象；\"><a href=\"#2）抽象类不能用来创建对象；\" class=\"headerlink\" title=\"2）抽象类不能用来创建对象；\"></a>2）抽象类不能用来创建对象；</h5><h5 id=\"3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。\"><a href=\"#3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。\" class=\"headerlink\" title=\"3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。\"></a>3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。</h5><h5 id=\"4）非抽象类中可以有抽象方法，比如继承的时候，如果子类不想实现父类的抽象方法，则必须将该方法也定义为抽象方法\"><a href=\"#4）非抽象类中可以有抽象方法，比如继承的时候，如果子类不想实现父类的抽象方法，则必须将该方法也定义为抽象方法\" class=\"headerlink\" title=\"4）非抽象类中可以有抽象方法，比如继承的时候，如果子类不想实现父类的抽象方法，则必须将该方法也定义为抽象方法\"></a>4）非抽象类中可以有抽象方法，比如继承的时候，如果子类不想实现父类的抽象方法，则必须将该方法也定义为抽象方法</h5><h4 id=\"2-interface接口：-是对类的补充\"><a href=\"#2-interface接口：-是对类的补充\" class=\"headerlink\" title=\"(2) interface接口： 是对类的补充\"></a>(2) interface接口： 是对类的补充</h4><p>接口中可以含有 变量和方法。但是要注意，接口中的变量会被隐式地指定为<code>public static final</code>变量（并且只能是<code>public static final</code>变量，用<code>private</code>修饰会报编译错误）</p>\n<p>而方法会被隐式地指定为public abstract方法且只能是public abstract方法（用其他关键字，比如private、protected、static、 final等修饰会报编译错误），并且接口中所有的方法不能有具体的实现</p>\n<p><strong>抽象方法是一种特殊的方法：它只有声明，而没有具体的实现。</strong></p>\n<h2 id=\"五、函数\"><a href=\"#五、函数\" class=\"headerlink\" title=\"五、函数\"></a>五、函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a: number,b:number</span>): number &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">addNum</span>: number = <span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"六、泛型（尖括号）\"><a href=\"#六、泛型（尖括号）\" class=\"headerlink\" title=\"六、泛型（尖括号）\"></a>六、泛型（尖括号）</h3><h4 id=\"1-泛型变量\"><a href=\"#1-泛型变量\" class=\"headerlink\" title=\"1. 泛型变量\"></a>1. 泛型变量</h4><p>一个函数在公用的时候，若同一个参数可能有多个类型or可能有多种返回值的情况下，如果写成any会不严谨</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">identify</span>(<span class=\"params\">arg: any</span>) : any &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> arg <span class=\"comment\">// 如果我想让arg和函数返回值是一个类型，这种写法并不能保证是一个类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用下面这个就可以保证返回值与参数相同类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> identity&lt;T,Y&gt;(<span class=\"attr\">arg</span>: T,<span class=\"attr\">arg2</span>: Y): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg; <span class=\"comment\">// 这里T作为新类型可以保证返回值与参数是一个类型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用：</span></span><br><span class=\"line\">identity&lt;number,string&gt;(<span class=\"number\">1</span>,<span class=\"string\">&#x27;aaa&#x27;</span>)</span><br><span class=\"line\">identity&lt;string,number&gt;(<span class=\"string\">&#x27;aaa&#x27;</span>,<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-泛型类、泛型接口\"><a href=\"#2-泛型类、泛型接口\" class=\"headerlink\" title=\"2. 泛型类、泛型接口\"></a>2. 泛型类、泛型接口</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  public <span class=\"attr\">zeroValue</span>: T</span><br><span class=\"line\">  public <span class=\"title function_\">add</span>(<span class=\"attr\">num1</span>:T,<span class=\"attr\">num2</span>:T): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> g = <span class=\"keyword\">new</span> <span class=\"title class_\">GenericNumber</span>().<span class=\"property\">zeroValue</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Person</span>&lt;<span class=\"variable constant_\">TT</span>,<span class=\"variable constant_\">YY</span>&gt; &#123;</span><br><span class=\"line\">  name?: <span class=\"variable constant_\">TT</span>,</span><br><span class=\"line\">  sex?: <span class=\"variable constant_\">TT</span>,</span><br><span class=\"line\">  age?: <span class=\"variable constant_\">YY</span>,</span><br><span class=\"line\">  [<span class=\"attr\">propName</span>:string]: any,</span><br><span class=\"line\">  identity?() : <span class=\"variable constant_\">YY</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">pe</span>: <span class=\"title class_\">Person</span>&lt;string,number&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;111&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;nv&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">aaa</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、枚举\"><a href=\"#七、枚举\" class=\"headerlink\" title=\"七、枚举\"></a>七、枚举</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">RED</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">GREEN</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">BLUE</span> = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Color.RED=<span class=\"subst\">$&#123;Color.RED&#125;</span>`</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">red</span>:<span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">RED</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八、高级类型\"><a href=\"#八、高级类型\" class=\"headerlink\" title=\"八、高级类型\"></a>八、高级类型</h2><h3 id=\"1-类型别名\"><a href=\"#1-类型别名\" class=\"headerlink\" title=\"1. 类型别名\"></a>1. 类型别名</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">NameOrId</span> = string | number</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n1</span>: <span class=\"title class_\">NameOrId</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n2</span>: <span class=\"title class_\">NameOrId</span> = <span class=\"string\">&#x27;n1&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-交叉类型\"><a href=\"#2-交叉类型\" class=\"headerlink\" title=\"2. 交叉类型\"></a>2. 交叉类型</h3><p>也就是用’&amp;‘</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">petName</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">petAge</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type <span class=\"title class_\">PersonAndPet</span> = <span class=\"title class_\">Person</span> &amp; <span class=\"title class_\">Pet</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p1</span>: <span class=\"title class_\">PersonAndPet</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小鸣&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"string\">&#x27;11&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">petName</span>: <span class=\"string\">&#x27;喵&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">petAge</span>: <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-联合类型\"><a href=\"#3-联合类型\" class=\"headerlink\" title=\"3. 联合类型\"></a>3. 联合类型</h3><p>也就是用’|’<br>let arg: number | string = ‘sfsdfds’<br>###4. 类型保护和类型断言<br>typeof和instanceof</p>\n<h4 id=\"（1）typeof\"><a href=\"#（1）typeof\" class=\"headerlink\" title=\"（1）typeof\"></a>（1）typeof</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Name</span> = string;</span><br><span class=\"line\">type <span class=\"title class_\">NameResolver</span> = <span class=\"function\">() =&gt;</span> string;</span><br><span class=\"line\">type <span class=\"title class_\">NameOrResolver</span> = <span class=\"title class_\">Name</span> | <span class=\"title class_\">NameResolver</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>: <span class=\"title class_\">NameOrResolver</span> = <span class=\"string\">&#x27;111&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> n === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">n</span>();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"（2）instanceof只对类有用。\"><a href=\"#（2）instanceof只对类有用。\" class=\"headerlink\" title=\"（2）instanceof只对类有用。\"></a>（2）instanceof只对类有用。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: A = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> A <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"九、Symbols\"><a href=\"#九、Symbols\" class=\"headerlink\" title=\"九、Symbols\"></a>九、Symbols</h2><h2 id=\"十、迭代器\"><a href=\"#十、迭代器\" class=\"headerlink\" title=\"十、迭代器\"></a>十、迭代器</h2><p>for of 与for in</p>\n<h2 id=\"十一、模块（原：外部模块）\"><a href=\"#十一、模块（原：外部模块）\" class=\"headerlink\" title=\"十一、模块（原：外部模块）\"></a>十一、模块（原：外部模块）</h2><p> “内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”，这是为了与 <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">ECMAScript 2015</a>里的术语保持一致，(也就是说 <code>module X &#123;</code> 相当于现在推荐的写法 <code>namespace X &#123;</code>)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">ModuleA</span>,<span class=\"title class_\">ModuleB</span>,<span class=\"title class_\">ModuleC</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./module&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>用法和js一致。</p>\n<h2 id=\"十二、命名空间（原：内部模块）\"><a href=\"#十二、命名空间（原：内部模块）\" class=\"headerlink\" title=\"十二、命名空间（原：内部模块）\"></a>十二、命名空间（原：内部模块）</h2><p> “内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”，这是为了与 <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">ECMAScript 2015</a>里的术语保持一致，(也就是说 <code>module X &#123;</code> 相当于现在推荐的写法 <code>namespace X &#123;</code>)。</p>\n<h3 id=\"1-命名空间的基本用法\"><a href=\"#1-命名空间的基本用法\" class=\"headerlink\" title=\"1. 命名空间的基本用法\"></a>1. 命名空间的基本用法</h3><p>在一个文件中，有时候有些变量是不想定义为全局的，比如有ab两个类被c类引用，如果都定义为全局的变量，不好维护容易出错，可以只对外暴露出c类接口（export class C）给该文件其他部分使用。。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"title class_\">Home</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> abc = <span class=\"keyword\">new</span> <span class=\"title class_\">Home</span>.<span class=\"title function_\">C</span>()</span><br><span class=\"line\"><span class=\"comment\">// let abc1 = new A() // 报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-复用\"><a href=\"#2-复用\" class=\"headerlink\" title=\"2. 复用\"></a>2. 复用</h3><p>将逻辑与业务分离，可以将一个namespace用另一个namespace引入<br>如下面，用page引入components的命名空间<br>components.ts文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"title class_\">Components</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">D</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>page.ts文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"title class_\">Home</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Components</span>.<span class=\"title function_\">C</span>()</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Components</span>.<span class=\"title function_\">D</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> abc = <span class=\"keyword\">new</span> <span class=\"title class_\">Home</span>.<span class=\"title function_\">C</span>()</span><br></pre></td></tr></table></figure>\n<p>由于这种写法很难搞懂命名空间是在哪个文件中，所以最好在path.ts头部中用三斜线指定进行指定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;components.ts&quot; /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>###3. 子命名空间</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"title class_\">Components</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">export</span> namespace E &#123;</span><br><span class=\"line\">        <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">F</span> &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">G</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十三、三斜线指令\"><a href=\"#十三、三斜线指令\" class=\"headerlink\" title=\"十三、三斜线指令\"></a>十三、三斜线指令</h2><p>三斜线指令<em><strong>仅可放在包含它的文件的最顶端。</strong></em>放在其他地方则会被当做<em><strong>注释</strong></em>去解析的。<br>包括下面几个指令，去看<a href=\"https://www.tslang.cn/docs/handbook/triple-slash-directives.html\">官网</a>吧</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;...&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// 在编译过程中要引入的额外的文件。</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference types=&quot;...&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// 用来声明依赖，被/// &lt;reference path=&quot;...&quot; /&gt;引用</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;amd-module /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>tsc -w 监听，自动编译<br>tsc init 生成tsconfig.<br>tsconfig的配置：<br>outFile<br>outDir<br>module<br>rootDir<br>target</p>\n<h2 id=\"十四、声明文件\"><a href=\"#十四、声明文件\" class=\"headerlink\" title=\"十四、声明文件\"></a>十四、声明文件</h2><p>使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。<br>说人话：就是第三方库定义的一些东西直接引进来ts识别不了，ts只能识别js有的和ts已经定义的东西。所以需要另外写一份声明文件告诉ts，然后ts就知道这个第三方库有这些变量就不会报错了。<br>文件叫*.d.ts</p>\n<p>declare 就是用在声明文件中的。</p>\n<ul>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#global-variables\">全局变量</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#global-functions\">全局函数</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#objects-with-properties\">带属性的对象</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#overloaded-functions\">函数重载</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#reusable-types-interfaces\">可重用类型（接口）</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#reusable-types-type-aliases\">可重用类型（类型别名）</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#organizing-types\">组织类型</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#classes\">类</a></li>\n</ul>\n<h2 id=\"十五、项目配置\"><a href=\"#十五、项目配置\" class=\"headerlink\" title=\"十五、项目配置\"></a>十五、项目配置</h2><p>tsconfig.json</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"什么是typescript？\"><a href=\"#什么是typescript？\" class=\"headerlink\" title=\"什么是typescript？\"></a>什么是typescript？</h2><p>typescpt是一种<em><strong>静态类型语言</strong></em>。<br>添加了类型的js，完全兼容js，写完后可以编译为js<br>我觉得是用另一种更为严格和规范的方式去写js<br>##静态类型语言<br>静态类型语言中，变量的类型必须先声明，即在创建的那一刻就已经确定好变量的类型，而后的使用中，你只能将这一指定类型的数据赋值给变量。如果强行将其他不相干类型的数据赋值给它，就会引发错误。<br>在静态语言中，一旦声明一个变量是int类型，之后就只能将int类型的数据赋值给它，否则就会引发错误，而动态类型则没有这样的限制，你将什么类型的数据赋值给变量，这个变量就是什么类型</p>\n<h2 id=\"强类型-VS-弱类型\"><a href=\"#强类型-VS-弱类型\" class=\"headerlink\" title=\"强类型 VS 弱类型\"></a>强类型 VS 弱类型</h2><p>强弱之分，体现在对类型的检查严格程度上，弱类型语言对于变量类型的检查比较宽松，容忍隐式类型转换这种事情的发生。何为隐式类型转换，一般有两种形式：</p>\n<ol>\n<li>相关类型之间隐式转换</li>\n<li>不相关类型之隐式间转换<h2 id=\"一、基础类型\"><a href=\"#一、基础类型\" class=\"headerlink\" title=\"一、基础类型\"></a>一、基础类型</h2><h3 id=\"1-ts有哪些基础类型？\"><a href=\"#1-ts有哪些基础类型？\" class=\"headerlink\" title=\"1. ts有哪些基础类型？\"></a>1. ts有哪些基础类型？</h3>布尔、数字、字符串、数组、元祖、枚举、any、void、null、undefined、never、Object<h3 id=\"2-定义数组：\"><a href=\"#2-定义数组：\" class=\"headerlink\" title=\"2. 定义数组：\"></a>2. 定义数组：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>: <span class=\"title class_\">Array</span>&lt;number&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr2</span>: number[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-定义元组：\"><a href=\"#3-定义元组：\" class=\"headerlink\" title=\"3. 定义元组：\"></a>3. 定义元组：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: [string,number,string] = [<span class=\"string\">&#x27;aaa&#x27;</span>,<span class=\"number\">111</span>,<span class=\"string\">&#x27;aaa&#x27;</span>]</span><br></pre></td></tr></table></figure>\n注意：访问越界元素会报错<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">&quot;world&quot;</span>; <span class=\"comment\">// Error, Property &#x27;3&#x27; does not exist on type &#x27;[string, number]&#x27;.</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">5</span>].<span class=\"title function_\">toString</span>()); <span class=\"comment\">// Error, Property &#x27;5&#x27; does not exist on type &#x27;[string, number]&#x27;.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-枚举：定义类型\"><a href=\"#4-枚举：定义类型\" class=\"headerlink\" title=\"4. 枚举：定义类型\"></a>4. 枚举：定义类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Red</span> = <span class=\"string\">&#x27;#ff0000&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Green</span> = <span class=\"string\">&#x27;#00ff00&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Blue</span> = <span class=\"string\">&#x27;#0000ff&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">red</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-never\"><a href=\"#5-never\" class=\"headerlink\" title=\"5. never\"></a>5. never</h3>never是任何类型的子类型，可以复制给任何类型，但没有类型是never的子类型或可以赋值给never类型（除了never本身），即使是any也不能复制给never。<br>never经常用于<strong>抛出异常的函数</strong>，或是<strong>死循环</strong>。</li>\n</ol>\n<p>变量也可以是never类型，当他永不为真的类型保护所约束时。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>: never</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: number = <span class=\"number\">1</span> <span class=\"comment\">// 报错</span></span><br><span class=\"line\">n = num <span class=\"comment\">// 报错</span></span><br><span class=\"line\">num = n <span class=\"comment\">// ok</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回never的函数必须存在无法达到的终点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">error</span>(<span class=\"params\">message: string</span>): never &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 推断的返回值类型为never</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fail</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">error</span>(<span class=\"string\">&quot;Something failed&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回never的函数必须存在无法达到的终点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">infiniteLoop</span>(<span class=\"params\"></span>): never &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-void\"><a href=\"#6-void\" class=\"headerlink\" title=\"6. void\"></a>6. void</h3><p>void表示没有任何类型。和any完全相反。函数没有返回值时可以写void</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">warnUser</span>(<span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;This is my warning message&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>void变量没有什么作用，因为void变量只能赋值null或undefined。</p>\n<h3 id=\"7-类型断言\"><a href=\"#7-类型断言\" class=\"headerlink\" title=\"7. 类型断言\"></a>7. 类型断言</h3><p>我可能有时候比ts更了解这个变量是什么类型，这时就可以用类型断言<br>语法有两种<br>第一种：<strong>尖括号</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: any = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>: number =(&lt;string&gt;someValue).<span class=\"property\">length</span>;</span><br></pre></td></tr></table></figure>\n<p>第二种：<strong>as</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: any = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength = (someValue <span class=\"keyword\">as</span> number).<span class=\"property\">length</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、变量声明\"><a href=\"#二、变量声明\" class=\"headerlink\" title=\"二、变量声明\"></a>二、变量声明</h2><p>ts用const、let代替了var</p>\n<h2 id=\"三、接口\"><a href=\"#三、接口\" class=\"headerlink\" title=\"三、接口\"></a>三、接口</h2><h3 id=\"1-对象类型\"><a href=\"#1-对象类型\" class=\"headerlink\" title=\"1. 对象类型\"></a>1. 对象类型</h3><p>定义一个类型，让变量按照这个类型来具体实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">LabelType</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">label</span>: string,</span><br><span class=\"line\">  name?: string, <span class=\"comment\">// name可选</span></span><br><span class=\"line\">  <span class=\"attr\">id</span>: string|number,</span><br><span class=\"line\">  readonly <span class=\"attr\">size</span>: number, <span class=\"comment\">// 只读</span></span><br><span class=\"line\">  [<span class=\"attr\">propName</span>: string]: any, <span class=\"comment\">// 表示接口还可以有其他的属性，且属性名字任意，类型any</span></span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"attr\">arg1</span>: string): string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">labelObj</span>: <span class=\"title class_\">LabelType</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">label</span>: <span class=\"string\">&#x27;标签1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">size</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"attr\">aaa</span>: <span class=\"number\">32482093840</span>, <span class=\"comment\">// [propName: string]: any;</span></span><br><span class=\"line\">    <span class=\"attr\">bbb</span>: <span class=\"string\">&#x27;whatever&#x27;</span>,   <span class=\"comment\">// [propName: string]: any;</span></span><br><span class=\"line\">    <span class=\"title function_\">fn</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-函数类型\"><a href=\"#2-函数类型\" class=\"headerlink\" title=\"2. 函数类型\"></a>2. 函数类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Square</span>&#123;</span><br><span class=\"line\">  (<span class=\"attr\">source</span>: string,<span class=\"attr\">subString</span>: string):boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码意思是，一个函数类型叫Square，它应该有两个参数，一个source类型string，一个subString类型string，返回boolean类型的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">sq</span>: <span class=\"title class_\">Square</span> = <span class=\"keyword\">function</span>(<span class=\"params\">source: string,subString: string</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-类类型\"><a href=\"#3-类类型\" class=\"headerlink\" title=\"3. 类类型\"></a>3. 类类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Clock</span> implements <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口亦可以继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">PenStroke</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">penWidth</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Shape</span>, <span class=\"title class_\">PenStroke</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">sideLength</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> square = &lt;<span class=\"title class_\">Square</span>&gt;&#123;&#125;;</span><br><span class=\"line\">square.<span class=\"property\">color</span> = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">square.<span class=\"property\">sideLength</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\">square.<span class=\"property\">penWidth</span> = <span class=\"number\">5.0</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、类\"><a href=\"#四、类\" class=\"headerlink\" title=\"四、类\"></a>四、类</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 基本使用class Person</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 继承</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 公共、私有、保护</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 抽象类和接口的区别</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    private <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: string</span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rhino</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">super</span>(<span class=\"string\">&quot;Rhino&quot;</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    private <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: string</span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&quot;Goat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> rhino = <span class=\"keyword\">new</span> <span class=\"title class_\">Rhino</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> employee = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;Bob&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">animal = rhino;</span><br><span class=\"line\">animal = employee; <span class=\"comment\">// 错误: Animal 与 Employee 不兼容.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-public、protected、private的区别：\"><a href=\"#1-public、protected、private的区别：\" class=\"headerlink\" title=\"1. public、protected、private的区别：\"></a>1. public、protected、private的区别：</h3><p>protected：可以继承，不可以在类外部使用<br>private：不可以继承，不可以在类外部使用<br>public：可以继承，可以在类外部使用</p>\n<h3 id=\"2-readonly：\"><a href=\"#2-readonly：\" class=\"headerlink\" title=\"2. readonly：\"></a>2. readonly：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  readonly <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">  readonly <span class=\"attr\">sex</span>: string = <span class=\"string\">&#x27;F&#x27;</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (<span class=\"attr\">name</span>: string) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;小鸣&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-getter、setter\"><a href=\"#3-getter、setter\" class=\"headerlink\" title=\"3. getter、setter\"></a>3. getter、setter</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> passcode = <span class=\"string\">&quot;secret passcode&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    private <span class=\"attr\">_fullName</span>: string;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">fullName</span>(): string &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_fullName</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">fullName</span>(<span class=\"params\">newName: string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (passcode &amp;&amp; passcode == <span class=\"string\">&quot;secret passcode&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">_fullName</span> = newName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Error: Unauthorized update of employee!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> employee = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">employee.<span class=\"property\">fullName</span> = <span class=\"string\">&quot;Bob Smith&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (employee.<span class=\"property\">fullName</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(employee.<span class=\"property\">fullName</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-静态属性、静态方法\"><a href=\"#4-静态属性、静态方法\" class=\"headerlink\" title=\"4. 静态属性、静态方法\"></a>4. 静态属性、静态方法</h3><p>使用static定义，只能用类名.方法/属性使用</p>\n<h3 id=\"5-抽象类与抽象方法\"><a href=\"#5-抽象类与抽象方法\" class=\"headerlink\" title=\"5. 抽象类与抽象方法\"></a>5. 抽象类与抽象方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstract <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    abstract <span class=\"title function_\">makeSound</span>(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    <span class=\"title function_\">move</span>(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;roaming the earch...&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-抽象类和接口的区别\"><a href=\"#6-抽象类和接口的区别\" class=\"headerlink\" title=\"6. 抽象类和接口的区别\"></a>6. 抽象类和接口的区别</h3><h4 id=\"（1）abstract类\"><a href=\"#（1）abstract类\" class=\"headerlink\" title=\"（1）abstract类\"></a>（1）abstract类</h4><p>abstract类是定义用来被继承的类。<br>抽象类中<strong>可以有抽象方法，可以有普通方法</strong>。非抽象类也可以。<br>但抽象类<strong>不能创建对象</strong>，普通类继承抽象类<strong>必须实现其方法，或将其定义为抽象方法</strong>。<br>抽象类必须在类前用abstract关键字修饰。<br><strong>因为抽象类中含有无具体实现的方法，所以不能用抽象类创建对象。</strong></p>\n<h5 id=\"1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。\"><a href=\"#1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。\" class=\"headerlink\" title=\"1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。\"></a>1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。</h5><h5 id=\"2）抽象类不能用来创建对象；\"><a href=\"#2）抽象类不能用来创建对象；\" class=\"headerlink\" title=\"2）抽象类不能用来创建对象；\"></a>2）抽象类不能用来创建对象；</h5><h5 id=\"3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。\"><a href=\"#3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。\" class=\"headerlink\" title=\"3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。\"></a>3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。</h5><h5 id=\"4）非抽象类中可以有抽象方法，比如继承的时候，如果子类不想实现父类的抽象方法，则必须将该方法也定义为抽象方法\"><a href=\"#4）非抽象类中可以有抽象方法，比如继承的时候，如果子类不想实现父类的抽象方法，则必须将该方法也定义为抽象方法\" class=\"headerlink\" title=\"4）非抽象类中可以有抽象方法，比如继承的时候，如果子类不想实现父类的抽象方法，则必须将该方法也定义为抽象方法\"></a>4）非抽象类中可以有抽象方法，比如继承的时候，如果子类不想实现父类的抽象方法，则必须将该方法也定义为抽象方法</h5><h4 id=\"2-interface接口：-是对类的补充\"><a href=\"#2-interface接口：-是对类的补充\" class=\"headerlink\" title=\"(2) interface接口： 是对类的补充\"></a>(2) interface接口： 是对类的补充</h4><p>接口中可以含有 变量和方法。但是要注意，接口中的变量会被隐式地指定为<code>public static final</code>变量（并且只能是<code>public static final</code>变量，用<code>private</code>修饰会报编译错误）</p>\n<p>而方法会被隐式地指定为public abstract方法且只能是public abstract方法（用其他关键字，比如private、protected、static、 final等修饰会报编译错误），并且接口中所有的方法不能有具体的实现</p>\n<p><strong>抽象方法是一种特殊的方法：它只有声明，而没有具体的实现。</strong></p>\n<h2 id=\"五、函数\"><a href=\"#五、函数\" class=\"headerlink\" title=\"五、函数\"></a>五、函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a: number,b:number</span>): number &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">addNum</span>: number = <span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"六、泛型（尖括号）\"><a href=\"#六、泛型（尖括号）\" class=\"headerlink\" title=\"六、泛型（尖括号）\"></a>六、泛型（尖括号）</h3><h4 id=\"1-泛型变量\"><a href=\"#1-泛型变量\" class=\"headerlink\" title=\"1. 泛型变量\"></a>1. 泛型变量</h4><p>一个函数在公用的时候，若同一个参数可能有多个类型or可能有多种返回值的情况下，如果写成any会不严谨</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">identify</span>(<span class=\"params\">arg: any</span>) : any &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> arg <span class=\"comment\">// 如果我想让arg和函数返回值是一个类型，这种写法并不能保证是一个类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用下面这个就可以保证返回值与参数相同类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> identity&lt;T,Y&gt;(<span class=\"attr\">arg</span>: T,<span class=\"attr\">arg2</span>: Y): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg; <span class=\"comment\">// 这里T作为新类型可以保证返回值与参数是一个类型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用：</span></span><br><span class=\"line\">identity&lt;number,string&gt;(<span class=\"number\">1</span>,<span class=\"string\">&#x27;aaa&#x27;</span>)</span><br><span class=\"line\">identity&lt;string,number&gt;(<span class=\"string\">&#x27;aaa&#x27;</span>,<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-泛型类、泛型接口\"><a href=\"#2-泛型类、泛型接口\" class=\"headerlink\" title=\"2. 泛型类、泛型接口\"></a>2. 泛型类、泛型接口</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  public <span class=\"attr\">zeroValue</span>: T</span><br><span class=\"line\">  public <span class=\"title function_\">add</span>(<span class=\"attr\">num1</span>:T,<span class=\"attr\">num2</span>:T): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> g = <span class=\"keyword\">new</span> <span class=\"title class_\">GenericNumber</span>().<span class=\"property\">zeroValue</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Person</span>&lt;<span class=\"variable constant_\">TT</span>,<span class=\"variable constant_\">YY</span>&gt; &#123;</span><br><span class=\"line\">  name?: <span class=\"variable constant_\">TT</span>,</span><br><span class=\"line\">  sex?: <span class=\"variable constant_\">TT</span>,</span><br><span class=\"line\">  age?: <span class=\"variable constant_\">YY</span>,</span><br><span class=\"line\">  [<span class=\"attr\">propName</span>:string]: any,</span><br><span class=\"line\">  identity?() : <span class=\"variable constant_\">YY</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">pe</span>: <span class=\"title class_\">Person</span>&lt;string,number&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;111&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;nv&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">aaa</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、枚举\"><a href=\"#七、枚举\" class=\"headerlink\" title=\"七、枚举\"></a>七、枚举</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">RED</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">GREEN</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">BLUE</span> = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Color.RED=<span class=\"subst\">$&#123;Color.RED&#125;</span>`</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">red</span>:<span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">RED</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八、高级类型\"><a href=\"#八、高级类型\" class=\"headerlink\" title=\"八、高级类型\"></a>八、高级类型</h2><h3 id=\"1-类型别名\"><a href=\"#1-类型别名\" class=\"headerlink\" title=\"1. 类型别名\"></a>1. 类型别名</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">NameOrId</span> = string | number</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n1</span>: <span class=\"title class_\">NameOrId</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n2</span>: <span class=\"title class_\">NameOrId</span> = <span class=\"string\">&#x27;n1&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-交叉类型\"><a href=\"#2-交叉类型\" class=\"headerlink\" title=\"2. 交叉类型\"></a>2. 交叉类型</h3><p>也就是用’&amp;‘</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">petName</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">petAge</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type <span class=\"title class_\">PersonAndPet</span> = <span class=\"title class_\">Person</span> &amp; <span class=\"title class_\">Pet</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p1</span>: <span class=\"title class_\">PersonAndPet</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小鸣&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"string\">&#x27;11&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">petName</span>: <span class=\"string\">&#x27;喵&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">petAge</span>: <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-联合类型\"><a href=\"#3-联合类型\" class=\"headerlink\" title=\"3. 联合类型\"></a>3. 联合类型</h3><p>也就是用’|’<br>let arg: number | string = ‘sfsdfds’<br>###4. 类型保护和类型断言<br>typeof和instanceof</p>\n<h4 id=\"（1）typeof\"><a href=\"#（1）typeof\" class=\"headerlink\" title=\"（1）typeof\"></a>（1）typeof</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Name</span> = string;</span><br><span class=\"line\">type <span class=\"title class_\">NameResolver</span> = <span class=\"function\">() =&gt;</span> string;</span><br><span class=\"line\">type <span class=\"title class_\">NameOrResolver</span> = <span class=\"title class_\">Name</span> | <span class=\"title class_\">NameResolver</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>: <span class=\"title class_\">NameOrResolver</span> = <span class=\"string\">&#x27;111&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> n === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">n</span>();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"（2）instanceof只对类有用。\"><a href=\"#（2）instanceof只对类有用。\" class=\"headerlink\" title=\"（2）instanceof只对类有用。\"></a>（2）instanceof只对类有用。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: A = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> A <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"九、Symbols\"><a href=\"#九、Symbols\" class=\"headerlink\" title=\"九、Symbols\"></a>九、Symbols</h2><h2 id=\"十、迭代器\"><a href=\"#十、迭代器\" class=\"headerlink\" title=\"十、迭代器\"></a>十、迭代器</h2><p>for of 与for in</p>\n<h2 id=\"十一、模块（原：外部模块）\"><a href=\"#十一、模块（原：外部模块）\" class=\"headerlink\" title=\"十一、模块（原：外部模块）\"></a>十一、模块（原：外部模块）</h2><p> “内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”，这是为了与 <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">ECMAScript 2015</a>里的术语保持一致，(也就是说 <code>module X &#123;</code> 相当于现在推荐的写法 <code>namespace X &#123;</code>)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">ModuleA</span>,<span class=\"title class_\">ModuleB</span>,<span class=\"title class_\">ModuleC</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./module&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>用法和js一致。</p>\n<h2 id=\"十二、命名空间（原：内部模块）\"><a href=\"#十二、命名空间（原：内部模块）\" class=\"headerlink\" title=\"十二、命名空间（原：内部模块）\"></a>十二、命名空间（原：内部模块）</h2><p> “内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”，这是为了与 <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">ECMAScript 2015</a>里的术语保持一致，(也就是说 <code>module X &#123;</code> 相当于现在推荐的写法 <code>namespace X &#123;</code>)。</p>\n<h3 id=\"1-命名空间的基本用法\"><a href=\"#1-命名空间的基本用法\" class=\"headerlink\" title=\"1. 命名空间的基本用法\"></a>1. 命名空间的基本用法</h3><p>在一个文件中，有时候有些变量是不想定义为全局的，比如有ab两个类被c类引用，如果都定义为全局的变量，不好维护容易出错，可以只对外暴露出c类接口（export class C）给该文件其他部分使用。。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"title class_\">Home</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> abc = <span class=\"keyword\">new</span> <span class=\"title class_\">Home</span>.<span class=\"title function_\">C</span>()</span><br><span class=\"line\"><span class=\"comment\">// let abc1 = new A() // 报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-复用\"><a href=\"#2-复用\" class=\"headerlink\" title=\"2. 复用\"></a>2. 复用</h3><p>将逻辑与业务分离，可以将一个namespace用另一个namespace引入<br>如下面，用page引入components的命名空间<br>components.ts文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"title class_\">Components</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">D</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>page.ts文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"title class_\">Home</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Components</span>.<span class=\"title function_\">C</span>()</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Components</span>.<span class=\"title function_\">D</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> abc = <span class=\"keyword\">new</span> <span class=\"title class_\">Home</span>.<span class=\"title function_\">C</span>()</span><br></pre></td></tr></table></figure>\n<p>由于这种写法很难搞懂命名空间是在哪个文件中，所以最好在path.ts头部中用三斜线指定进行指定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;components.ts&quot; /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>###3. 子命名空间</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"title class_\">Components</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">export</span> namespace E &#123;</span><br><span class=\"line\">        <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">F</span> &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">G</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十三、三斜线指令\"><a href=\"#十三、三斜线指令\" class=\"headerlink\" title=\"十三、三斜线指令\"></a>十三、三斜线指令</h2><p>三斜线指令<em><strong>仅可放在包含它的文件的最顶端。</strong></em>放在其他地方则会被当做<em><strong>注释</strong></em>去解析的。<br>包括下面几个指令，去看<a href=\"https://www.tslang.cn/docs/handbook/triple-slash-directives.html\">官网</a>吧</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;...&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// 在编译过程中要引入的额外的文件。</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference types=&quot;...&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// 用来声明依赖，被/// &lt;reference path=&quot;...&quot; /&gt;引用</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;amd-module /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>tsc -w 监听，自动编译<br>tsc init 生成tsconfig.<br>tsconfig的配置：<br>outFile<br>outDir<br>module<br>rootDir<br>target</p>\n<h2 id=\"十四、声明文件\"><a href=\"#十四、声明文件\" class=\"headerlink\" title=\"十四、声明文件\"></a>十四、声明文件</h2><p>使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。<br>说人话：就是第三方库定义的一些东西直接引进来ts识别不了，ts只能识别js有的和ts已经定义的东西。所以需要另外写一份声明文件告诉ts，然后ts就知道这个第三方库有这些变量就不会报错了。<br>文件叫*.d.ts</p>\n<p>declare 就是用在声明文件中的。</p>\n<ul>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#global-variables\">全局变量</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#global-functions\">全局函数</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#objects-with-properties\">带属性的对象</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#overloaded-functions\">函数重载</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#reusable-types-interfaces\">可重用类型（接口）</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#reusable-types-type-aliases\">可重用类型（类型别名）</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#organizing-types\">组织类型</a></li>\n<li>  <a href=\"https://www.tslang.cn/docs/handbook/declaration-files/by-example.html#classes\">类</a></li>\n</ul>\n<h2 id=\"十五、项目配置\"><a href=\"#十五、项目配置\" class=\"headerlink\" title=\"十五、项目配置\"></a>十五、项目配置</h2><p>tsconfig.json</p>\n"},{"title":"bodymovin使用","date":"2021-08-11T10:48:34.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n最近要做一个复杂嘅年度报告交互动画，年底惊喜夜又要做年度报告又要做，时间只有一晚黑。。\n搵了好耐终于畀我搵到一個bodymovin同埋lottie-web可以用嘅。捻住記下先la~\n\n## Bodymovin 简介\nBodymovin是一个开源的JavaScript库，它用于将After Effects动画转换为可在Web上播放的HTML5动画。它使用Adobe After Effects的动画数据，将其转换为可在Web浏览器中播放的JSON文件。\n\n## 使用Bodymovin的步骤：\n\n1. 在After Effects中创建动画，确保它们满足Bodymovin的要求：所有元素都必须使用2D变换，而不是3D变换，并且不能使用任何第三方插件。\n\n2. 在After Effects中安装Bodymovin插件，它可以从Github上下载。\n\n3. 将动画导出为JSON文件。\n\n4. 将JSON文件上传到您的网站，并使用Bodymovin JavaScript库在网页上播放动画。\n\n5. 在网页上定制动画，以获得最佳效果。\n\n## AE端：\n#### 1. 官网下载bodymovin后，安装并打开\n[github地址](https://github.com/airbnb/lottie-web)\n![](https://upload-images.jianshu.io/upload_images/20892169-ea3e73c5d9863146.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n提示：mac m1系统请通过ZXP Installer安装。\n\n#### 2. 左侧选择要导出json的图层，右侧选择导出json的文件夹。完成后点击\"render\"即可。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-c4c0e960e23036a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n提示：若遇到写入不成功的问题，请检查是否开启脚本写入文件。\n位置：After-Effect - 首选项 - 脚本和表达式\n\n![](https://upload-images.jianshu.io/upload_images/20892169-a4de95cf6641153c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 详细代码（js）\n#### webpack(5)中，处理图片和json\n```js\n\n\t\t\t\ttest: /\\.(png|jpeg|jpg)$/,\n\t\t\t\ttype: \"asset/resource\",\n\t\t\t\tgenerator: {\n\t\t\t\t\tfilename: \"static/images/[name][ext]\"\n\t\t\t\t},\n\t\t\t\tparser: {\n\t\t\t\t\tdataUrlCondition: {\n\t\t\t\t\t\t// 位将小于10kb的图片转为base64\n\t\t\t\t\t\tmaxSize: 10 * 1024\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest: /\\.json$/,\n\t\t\t\ttype: \"asset/resource\",\n\t\t\t\tgenerator: {\n\t\t\t\t\tfilename: \"static/[name][ext]\"\n\t\t\t\t}\n\t\t\t}\n```\nwebpack4用file-loader同埋url-loader处理，代码不写了。\n#### 入口文件，安装并引入bodymovin同埋json同埋图片\n如果图片较多，可以像我一样处理，用webpack的require.context方法，一次性引入所有图片（es6的按需引入也行，看自己呗。）\n> require.context是webpack提供的一个函数，它可以接受三个参数：一个要搜索的文件夹目录，一个是否搜索子目录的布尔值，一个匹配文件的正则表达式。它可以返回一个函数，这个函数可以接受一个参数，这个参数是要引入的文件的相对路径，然后它就会返回这个文件的模块。require.context可以帮助我们实现按需引入模块的功能，从而减少代码体积。\n\n```js\nnpm i bodymovin\n```\n```js\nimport bodymovin from \"bodymovin\";\nimport \"./data.json\";\nconst context = require.context(\"./images\", false, /\\.(png|jpg|jpeg|gif)$/);\n\ncontext.keys().forEach((key) => {\n\tconst component = context(key);\n}); // 一次性将某文件夹下的所有图片引入\nconsole.log(bodymovin);\nbodymovin.loadAnimation({\n\tcontainer: document.querySelector(\".lottie\"), // the dom element that will contain the animation\n\trenderer: \"svg\",\n\tloop: true,\n\tautoplay: true,\n\tpath: \"./static/data.json\" // the path to the animation json\n});\nbodymovin.play();\n\n```\n扩展：(svg矢量图形转换为<svg>标签)[https://www.npmjs.com/package/svg2html]\n完成。！。！。！。！。！。！。！。！。！。！。！。！。！。","source":"_posts/cxy/other/bodymovin.md","raw":"---\ntitle: 'bodymovin使用'\ndate: 2021-08-11 18:48:34\ntags: '实用开源代码or工具'\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n最近要做一个复杂嘅年度报告交互动画，年底惊喜夜又要做年度报告又要做，时间只有一晚黑。。\n搵了好耐终于畀我搵到一個bodymovin同埋lottie-web可以用嘅。捻住記下先la~\n\n## Bodymovin 简介\nBodymovin是一个开源的JavaScript库，它用于将After Effects动画转换为可在Web上播放的HTML5动画。它使用Adobe After Effects的动画数据，将其转换为可在Web浏览器中播放的JSON文件。\n\n## 使用Bodymovin的步骤：\n\n1. 在After Effects中创建动画，确保它们满足Bodymovin的要求：所有元素都必须使用2D变换，而不是3D变换，并且不能使用任何第三方插件。\n\n2. 在After Effects中安装Bodymovin插件，它可以从Github上下载。\n\n3. 将动画导出为JSON文件。\n\n4. 将JSON文件上传到您的网站，并使用Bodymovin JavaScript库在网页上播放动画。\n\n5. 在网页上定制动画，以获得最佳效果。\n\n## AE端：\n#### 1. 官网下载bodymovin后，安装并打开\n[github地址](https://github.com/airbnb/lottie-web)\n![](https://upload-images.jianshu.io/upload_images/20892169-ea3e73c5d9863146.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n提示：mac m1系统请通过ZXP Installer安装。\n\n#### 2. 左侧选择要导出json的图层，右侧选择导出json的文件夹。完成后点击\"render\"即可。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-c4c0e960e23036a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n提示：若遇到写入不成功的问题，请检查是否开启脚本写入文件。\n位置：After-Effect - 首选项 - 脚本和表达式\n\n![](https://upload-images.jianshu.io/upload_images/20892169-a4de95cf6641153c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 详细代码（js）\n#### webpack(5)中，处理图片和json\n```js\n\n\t\t\t\ttest: /\\.(png|jpeg|jpg)$/,\n\t\t\t\ttype: \"asset/resource\",\n\t\t\t\tgenerator: {\n\t\t\t\t\tfilename: \"static/images/[name][ext]\"\n\t\t\t\t},\n\t\t\t\tparser: {\n\t\t\t\t\tdataUrlCondition: {\n\t\t\t\t\t\t// 位将小于10kb的图片转为base64\n\t\t\t\t\t\tmaxSize: 10 * 1024\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest: /\\.json$/,\n\t\t\t\ttype: \"asset/resource\",\n\t\t\t\tgenerator: {\n\t\t\t\t\tfilename: \"static/[name][ext]\"\n\t\t\t\t}\n\t\t\t}\n```\nwebpack4用file-loader同埋url-loader处理，代码不写了。\n#### 入口文件，安装并引入bodymovin同埋json同埋图片\n如果图片较多，可以像我一样处理，用webpack的require.context方法，一次性引入所有图片（es6的按需引入也行，看自己呗。）\n> require.context是webpack提供的一个函数，它可以接受三个参数：一个要搜索的文件夹目录，一个是否搜索子目录的布尔值，一个匹配文件的正则表达式。它可以返回一个函数，这个函数可以接受一个参数，这个参数是要引入的文件的相对路径，然后它就会返回这个文件的模块。require.context可以帮助我们实现按需引入模块的功能，从而减少代码体积。\n\n```js\nnpm i bodymovin\n```\n```js\nimport bodymovin from \"bodymovin\";\nimport \"./data.json\";\nconst context = require.context(\"./images\", false, /\\.(png|jpg|jpeg|gif)$/);\n\ncontext.keys().forEach((key) => {\n\tconst component = context(key);\n}); // 一次性将某文件夹下的所有图片引入\nconsole.log(bodymovin);\nbodymovin.loadAnimation({\n\tcontainer: document.querySelector(\".lottie\"), // the dom element that will contain the animation\n\trenderer: \"svg\",\n\tloop: true,\n\tautoplay: true,\n\tpath: \"./static/data.json\" // the path to the animation json\n});\nbodymovin.play();\n\n```\n扩展：(svg矢量图形转换为<svg>标签)[https://www.npmjs.com/package/svg2html]\n完成。！。！。！。！。！。！。！。！。！。！。！。！。！。","slug":"cxy/other/bodymovin","published":1,"updated":"2023-02-05T17:30:54.286Z","_id":"cldqqvwbz00002vwi04s4313m","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>最近要做一个复杂嘅年度报告交互动画，年底惊喜夜又要做年度报告又要做，时间只有一晚黑。。<br>搵了好耐终于畀我搵到一個bodymovin同埋lottie-web可以用嘅。捻住記下先la~</p>\n<h2 id=\"Bodymovin-简介\"><a href=\"#Bodymovin-简介\" class=\"headerlink\" title=\"Bodymovin 简介\"></a>Bodymovin 简介</h2><p>Bodymovin是一个开源的JavaScript库，它用于将After Effects动画转换为可在Web上播放的HTML5动画。它使用Adobe After Effects的动画数据，将其转换为可在Web浏览器中播放的JSON文件。</p>\n<h2 id=\"使用Bodymovin的步骤：\"><a href=\"#使用Bodymovin的步骤：\" class=\"headerlink\" title=\"使用Bodymovin的步骤：\"></a>使用Bodymovin的步骤：</h2><ol>\n<li><p>在After Effects中创建动画，确保它们满足Bodymovin的要求：所有元素都必须使用2D变换，而不是3D变换，并且不能使用任何第三方插件。</p>\n</li>\n<li><p>在After Effects中安装Bodymovin插件，它可以从Github上下载。</p>\n</li>\n<li><p>将动画导出为JSON文件。</p>\n</li>\n<li><p>将JSON文件上传到您的网站，并使用Bodymovin JavaScript库在网页上播放动画。</p>\n</li>\n<li><p>在网页上定制动画，以获得最佳效果。</p>\n</li>\n</ol>\n<h2 id=\"AE端：\"><a href=\"#AE端：\" class=\"headerlink\" title=\"AE端：\"></a>AE端：</h2><h4 id=\"1-官网下载bodymovin后，安装并打开\"><a href=\"#1-官网下载bodymovin后，安装并打开\" class=\"headerlink\" title=\"1. 官网下载bodymovin后，安装并打开\"></a>1. 官网下载bodymovin后，安装并打开</h4><p><a href=\"https://github.com/airbnb/lottie-web\">github地址</a><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ea3e73c5d9863146.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>提示：mac m1系统请通过ZXP Installer安装。</p>\n<h4 id=\"2-左侧选择要导出json的图层，右侧选择导出json的文件夹。完成后点击”render”即可。\"><a href=\"#2-左侧选择要导出json的图层，右侧选择导出json的文件夹。完成后点击”render”即可。\" class=\"headerlink\" title=\"2. 左侧选择要导出json的图层，右侧选择导出json的文件夹。完成后点击”render”即可。\"></a>2. 左侧选择要导出json的图层，右侧选择导出json的文件夹。完成后点击”render”即可。</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c4c0e960e23036a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>提示：若遇到写入不成功的问题，请检查是否开启脚本写入文件。<br>位置：After-Effect - 首选项 - 脚本和表达式</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a4de95cf6641153c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"详细代码（js）\"><a href=\"#详细代码（js）\" class=\"headerlink\" title=\"详细代码（js）\"></a>详细代码（js）</h2><h4 id=\"webpack-5-中，处理图片和json\"><a href=\"#webpack-5-中，处理图片和json\" class=\"headerlink\" title=\"webpack(5)中，处理图片和json\"></a>webpack(5)中，处理图片和json</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpeg|jpg)$/</span>,</span><br><span class=\"line\">\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;asset/resource&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/images/[name][ext]&quot;</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 位将小于10kb的图片转为base64</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.json$/</span>,</span><br><span class=\"line\">\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;asset/resource&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/[name][ext]&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack4用file-loader同埋url-loader处理，代码不写了。</p>\n<h4 id=\"入口文件，安装并引入bodymovin同埋json同埋图片\"><a href=\"#入口文件，安装并引入bodymovin同埋json同埋图片\" class=\"headerlink\" title=\"入口文件，安装并引入bodymovin同埋json同埋图片\"></a>入口文件，安装并引入bodymovin同埋json同埋图片</h4><p>如果图片较多，可以像我一样处理，用webpack的require.context方法，一次性引入所有图片（es6的按需引入也行，看自己呗。）</p>\n<blockquote>\n<p>require.context是webpack提供的一个函数，它可以接受三个参数：一个要搜索的文件夹目录，一个是否搜索子目录的布尔值，一个匹配文件的正则表达式。它可以返回一个函数，这个函数可以接受一个参数，这个参数是要引入的文件的相对路径，然后它就会返回这个文件的模块。require.context可以帮助我们实现按需引入模块的功能，从而减少代码体积。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i bodymovin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bodymovin <span class=\"keyword\">from</span> <span class=\"string\">&quot;bodymovin&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./data.json&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> context = <span class=\"built_in\">require</span>.<span class=\"title function_\">context</span>(<span class=\"string\">&quot;./images&quot;</span>, <span class=\"literal\">false</span>, <span class=\"regexp\">/\\.(png|jpg|jpeg|gif)$/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">context.<span class=\"title function_\">keys</span>().<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> component = <span class=\"title function_\">context</span>(key);</span><br><span class=\"line\">&#125;); <span class=\"comment\">// 一次性将某文件夹下的所有图片引入</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bodymovin);</span><br><span class=\"line\">bodymovin.<span class=\"title function_\">loadAnimation</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">container</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.lottie&quot;</span>), <span class=\"comment\">// the dom element that will contain the animation</span></span><br><span class=\"line\">\t<span class=\"attr\">renderer</span>: <span class=\"string\">&quot;svg&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">loop</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"attr\">autoplay</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"attr\">path</span>: <span class=\"string\">&quot;./static/data.json&quot;</span> <span class=\"comment\">// the path to the animation json</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">bodymovin.<span class=\"title function_\">play</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>扩展：(svg矢量图形转换为<svg>标签)[<a href=\"https://www.npmjs.com/package/svg2html]\">https://www.npmjs.com/package/svg2html]</a><br/>完成。！。！。！。！。！。！。！。！。！。！。！。！。！。</svg></p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<p>最近要做一个复杂嘅年度报告交互动画，年底惊喜夜又要做年度报告又要做，时间只有一晚黑。。<br>搵了好耐终于畀我搵到一個bodymovin同埋lottie-web可以用嘅。捻住記下先la~</p>\n<h2 id=\"Bodymovin-简介\"><a href=\"#Bodymovin-简介\" class=\"headerlink\" title=\"Bodymovin 简介\"></a>Bodymovin 简介</h2><p>Bodymovin是一个开源的JavaScript库，它用于将After Effects动画转换为可在Web上播放的HTML5动画。它使用Adobe After Effects的动画数据，将其转换为可在Web浏览器中播放的JSON文件。</p>\n<h2 id=\"使用Bodymovin的步骤：\"><a href=\"#使用Bodymovin的步骤：\" class=\"headerlink\" title=\"使用Bodymovin的步骤：\"></a>使用Bodymovin的步骤：</h2><ol>\n<li><p>在After Effects中创建动画，确保它们满足Bodymovin的要求：所有元素都必须使用2D变换，而不是3D变换，并且不能使用任何第三方插件。</p>\n</li>\n<li><p>在After Effects中安装Bodymovin插件，它可以从Github上下载。</p>\n</li>\n<li><p>将动画导出为JSON文件。</p>\n</li>\n<li><p>将JSON文件上传到您的网站，并使用Bodymovin JavaScript库在网页上播放动画。</p>\n</li>\n<li><p>在网页上定制动画，以获得最佳效果。</p>\n</li>\n</ol>\n<h2 id=\"AE端：\"><a href=\"#AE端：\" class=\"headerlink\" title=\"AE端：\"></a>AE端：</h2><h4 id=\"1-官网下载bodymovin后，安装并打开\"><a href=\"#1-官网下载bodymovin后，安装并打开\" class=\"headerlink\" title=\"1. 官网下载bodymovin后，安装并打开\"></a>1. 官网下载bodymovin后，安装并打开</h4><p><a href=\"https://github.com/airbnb/lottie-web\">github地址</a><br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-ea3e73c5d9863146.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>提示：mac m1系统请通过ZXP Installer安装。</p>\n<h4 id=\"2-左侧选择要导出json的图层，右侧选择导出json的文件夹。完成后点击”render”即可。\"><a href=\"#2-左侧选择要导出json的图层，右侧选择导出json的文件夹。完成后点击”render”即可。\" class=\"headerlink\" title=\"2. 左侧选择要导出json的图层，右侧选择导出json的文件夹。完成后点击”render”即可。\"></a>2. 左侧选择要导出json的图层，右侧选择导出json的文件夹。完成后点击”render”即可。</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c4c0e960e23036a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>提示：若遇到写入不成功的问题，请检查是否开启脚本写入文件。<br>位置：After-Effect - 首选项 - 脚本和表达式</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a4de95cf6641153c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"详细代码（js）\"><a href=\"#详细代码（js）\" class=\"headerlink\" title=\"详细代码（js）\"></a>详细代码（js）</h2><h4 id=\"webpack-5-中，处理图片和json\"><a href=\"#webpack-5-中，处理图片和json\" class=\"headerlink\" title=\"webpack(5)中，处理图片和json\"></a>webpack(5)中，处理图片和json</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpeg|jpg)$/</span>,</span><br><span class=\"line\">\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;asset/resource&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/images/[name][ext]&quot;</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 位将小于10kb的图片转为base64</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.json$/</span>,</span><br><span class=\"line\">\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;asset/resource&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/[name][ext]&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack4用file-loader同埋url-loader处理，代码不写了。</p>\n<h4 id=\"入口文件，安装并引入bodymovin同埋json同埋图片\"><a href=\"#入口文件，安装并引入bodymovin同埋json同埋图片\" class=\"headerlink\" title=\"入口文件，安装并引入bodymovin同埋json同埋图片\"></a>入口文件，安装并引入bodymovin同埋json同埋图片</h4><p>如果图片较多，可以像我一样处理，用webpack的require.context方法，一次性引入所有图片（es6的按需引入也行，看自己呗。）</p>\n<blockquote>\n<p>require.context是webpack提供的一个函数，它可以接受三个参数：一个要搜索的文件夹目录，一个是否搜索子目录的布尔值，一个匹配文件的正则表达式。它可以返回一个函数，这个函数可以接受一个参数，这个参数是要引入的文件的相对路径，然后它就会返回这个文件的模块。require.context可以帮助我们实现按需引入模块的功能，从而减少代码体积。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i bodymovin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bodymovin <span class=\"keyword\">from</span> <span class=\"string\">&quot;bodymovin&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./data.json&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> context = <span class=\"built_in\">require</span>.<span class=\"title function_\">context</span>(<span class=\"string\">&quot;./images&quot;</span>, <span class=\"literal\">false</span>, <span class=\"regexp\">/\\.(png|jpg|jpeg|gif)$/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">context.<span class=\"title function_\">keys</span>().<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> component = <span class=\"title function_\">context</span>(key);</span><br><span class=\"line\">&#125;); <span class=\"comment\">// 一次性将某文件夹下的所有图片引入</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bodymovin);</span><br><span class=\"line\">bodymovin.<span class=\"title function_\">loadAnimation</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">container</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.lottie&quot;</span>), <span class=\"comment\">// the dom element that will contain the animation</span></span><br><span class=\"line\">\t<span class=\"attr\">renderer</span>: <span class=\"string\">&quot;svg&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">loop</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"attr\">autoplay</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"attr\">path</span>: <span class=\"string\">&quot;./static/data.json&quot;</span> <span class=\"comment\">// the path to the animation json</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">bodymovin.<span class=\"title function_\">play</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>扩展：(svg矢量图形转换为<svg>标签)[<a href=\"https://www.npmjs.com/package/svg2html]\">https://www.npmjs.com/package/svg2html]</a><br/>完成。！。！。！。！。！。！。！。！。！。！。！。！。！。</svg></p>\n"},{"title":"【复习整理】vue生命周期","date":"2023-02-07T03:30:34.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、vue2的生命周期\nvue生命周期分别有创建、初始化数据、编译模板、挂在DOM、渲染-更新-渲染、卸载利用钩子函数完成对应的项目效果\n#### beforeCreate( 创建前 )\n在实例初始化之后,进行数据侦听和事件/侦听器的配置之前同步调用。\n此时组件的选项对象还未创建，**el 和 data 并未初始化**，因此**无法访问methods， data， computed等上的方法和数据**\n#### created ( 创建后）\n在实例创建之后使用，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件/侦听器的回调函数。**完成了data 数据的初始化**。因为未挂载，所以**el不可用**。 可以**使用数据，更改数据**，在这里更改数据**不会触发updated函数**。\n#### beforeMount (挂载前)\n在挂载开始之前被调用,在这个阶段是**获取不到dom操作**的,把data里面的数据和模板**生成html**，完成了data等初始化,注意此时还**没有挂在html到页面上**\n#### mounted (挂载后)\n用于挂载之后使用，这时 el 被新创建的 vm.\\$el 替换了。在这个时候**可以获取到dom操作**，也可以通过vm.\\$el获取元素。比如可以获取到ref等，操作dom，\n在这个时候只能调用一次ajax，在这个时候**el和data都可以获取的到**\n注意这个不能保证所有子元素挂载完成了！\nvm.$el：vue实例使用的dom根元素。\n#### beforeUpdate (更新前)\n在**数据发生改变后，DOM 被更新之前**被调用。这里适合在现有 DOM 将要被更新之前访问它，比如**移除手动添加的事件监听器**。\n#### updated (更新后)\n在由于**数据更改导致地虚拟DOM重新渲染并更新完毕之后会调用**，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该**避免在此期间更改状态，因为这可能会导致更新无限循环**，但是在服务器端渲染期间不被调用，可以用于监听某些数据的时候使用钩子\n#### beforeDestroy（销毁前）\n实例销毁之前调用。在这一步，实例仍然完全可用。\n可以用于销毁计时器时候使用，为了防止跳转到其它页面该事件还在执行，还可以清除dom事件等\n#### destroy（销毁后）\n实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。\n#### activated\n被 keep-alive 缓存的组件激活时调用。\n#### deactivated\n被 keep-alive 缓存的组件失活时调用。\n\n## 二、vue3的生命周期\n大多相同，只是将beforeCreate和created合并成了setup，并且新增了renderTracked与renderTriggered，并且将destroy和beforeDestory改成了unmounted和beforeUnmounted\n#### renderTracked\n在一个响应式依赖被组件的渲染作用追踪后调用。\n这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。\n#### renderTriggered\n在一个响应式依赖被组件触发了重新渲染之后调用。\n这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。\n#### serverPrefetch\n当组件实例在服务器上被渲染之前要完成的异步函数。\n### Vue2--------------vue3\n`beforeCreate` -> `setup()`\n`created` -> `setup()`\n`beforeMount` -> `onBeforeMount`\n`mounted` -> `onMounted`\n`beforeUpdate` -> `onBeforeUpdate`\n`updated` -> `onUpdated`\n`beforeDestroy` -> `onBeforeUnmount`\n`destroyed` -> `onUnmounted`\n`activated` -> `onActivated`\n`deactivated` -> `onDeactivated`\n`errorCaptured` -> `onErrorCaptured`\n### 父子组件生命周期的调用顺序\ncreated：先初始化父组件，再初始化子组件\nmounted：先渲染子组件，再渲染父组件\nbeforeupdated：先调用父组件，再调用子组件\nupdated：先更新子组件，再更新父组件\nbeforedestroy：先调用父组件，再调用子组件\ndestroy：先调用子组件，再调用父组件\n\n实测的图\n![](https://upload-images.jianshu.io/upload_images/20892169-f8d9c42d63cf20e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/vue-smcq.md","raw":"---\ntitle: 【复习整理】vue生命周期\ndate: 2023-02-07 11:30:34\ncategories: 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、vue2的生命周期\nvue生命周期分别有创建、初始化数据、编译模板、挂在DOM、渲染-更新-渲染、卸载利用钩子函数完成对应的项目效果\n#### beforeCreate( 创建前 )\n在实例初始化之后,进行数据侦听和事件/侦听器的配置之前同步调用。\n此时组件的选项对象还未创建，**el 和 data 并未初始化**，因此**无法访问methods， data， computed等上的方法和数据**\n#### created ( 创建后）\n在实例创建之后使用，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件/侦听器的回调函数。**完成了data 数据的初始化**。因为未挂载，所以**el不可用**。 可以**使用数据，更改数据**，在这里更改数据**不会触发updated函数**。\n#### beforeMount (挂载前)\n在挂载开始之前被调用,在这个阶段是**获取不到dom操作**的,把data里面的数据和模板**生成html**，完成了data等初始化,注意此时还**没有挂在html到页面上**\n#### mounted (挂载后)\n用于挂载之后使用，这时 el 被新创建的 vm.\\$el 替换了。在这个时候**可以获取到dom操作**，也可以通过vm.\\$el获取元素。比如可以获取到ref等，操作dom，\n在这个时候只能调用一次ajax，在这个时候**el和data都可以获取的到**\n注意这个不能保证所有子元素挂载完成了！\nvm.$el：vue实例使用的dom根元素。\n#### beforeUpdate (更新前)\n在**数据发生改变后，DOM 被更新之前**被调用。这里适合在现有 DOM 将要被更新之前访问它，比如**移除手动添加的事件监听器**。\n#### updated (更新后)\n在由于**数据更改导致地虚拟DOM重新渲染并更新完毕之后会调用**，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该**避免在此期间更改状态，因为这可能会导致更新无限循环**，但是在服务器端渲染期间不被调用，可以用于监听某些数据的时候使用钩子\n#### beforeDestroy（销毁前）\n实例销毁之前调用。在这一步，实例仍然完全可用。\n可以用于销毁计时器时候使用，为了防止跳转到其它页面该事件还在执行，还可以清除dom事件等\n#### destroy（销毁后）\n实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。\n#### activated\n被 keep-alive 缓存的组件激活时调用。\n#### deactivated\n被 keep-alive 缓存的组件失活时调用。\n\n## 二、vue3的生命周期\n大多相同，只是将beforeCreate和created合并成了setup，并且新增了renderTracked与renderTriggered，并且将destroy和beforeDestory改成了unmounted和beforeUnmounted\n#### renderTracked\n在一个响应式依赖被组件的渲染作用追踪后调用。\n这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。\n#### renderTriggered\n在一个响应式依赖被组件触发了重新渲染之后调用。\n这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。\n#### serverPrefetch\n当组件实例在服务器上被渲染之前要完成的异步函数。\n### Vue2--------------vue3\n`beforeCreate` -> `setup()`\n`created` -> `setup()`\n`beforeMount` -> `onBeforeMount`\n`mounted` -> `onMounted`\n`beforeUpdate` -> `onBeforeUpdate`\n`updated` -> `onUpdated`\n`beforeDestroy` -> `onBeforeUnmount`\n`destroyed` -> `onUnmounted`\n`activated` -> `onActivated`\n`deactivated` -> `onDeactivated`\n`errorCaptured` -> `onErrorCaptured`\n### 父子组件生命周期的调用顺序\ncreated：先初始化父组件，再初始化子组件\nmounted：先渲染子组件，再渲染父组件\nbeforeupdated：先调用父组件，再调用子组件\nupdated：先更新子组件，再更新父组件\nbeforedestroy：先调用父组件，再调用子组件\ndestroy：先调用子组件，再调用父组件\n\n实测的图\n![](https://upload-images.jianshu.io/upload_images/20892169-f8d9c42d63cf20e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"vue-smcq","published":1,"updated":"2023-02-07T03:32:57.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldtoud1w0000u3wifxds8u6n","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、vue2的生命周期\"><a href=\"#一、vue2的生命周期\" class=\"headerlink\" title=\"一、vue2的生命周期\"></a>一、vue2的生命周期</h2><p>vue生命周期分别有创建、初始化数据、编译模板、挂在DOM、渲染-更新-渲染、卸载利用钩子函数完成对应的项目效果</p>\n<h4 id=\"beforeCreate-创建前\"><a href=\"#beforeCreate-创建前\" class=\"headerlink\" title=\"beforeCreate( 创建前 )\"></a>beforeCreate( 创建前 )</h4><p>在实例初始化之后,进行数据侦听和事件/侦听器的配置之前同步调用。<br>此时组件的选项对象还未创建，<strong>el 和 data 并未初始化</strong>，因此<strong>无法访问methods， data， computed等上的方法和数据</strong></p>\n<h4 id=\"created-创建后）\"><a href=\"#created-创建后）\" class=\"headerlink\" title=\"created ( 创建后）\"></a>created ( 创建后）</h4><p>在实例创建之后使用，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件/侦听器的回调函数。<strong>完成了data 数据的初始化</strong>。因为未挂载，所以<strong>el不可用</strong>。 可以<strong>使用数据，更改数据</strong>，在这里更改数据<strong>不会触发updated函数</strong>。</p>\n<h4 id=\"beforeMount-挂载前\"><a href=\"#beforeMount-挂载前\" class=\"headerlink\" title=\"beforeMount (挂载前)\"></a>beforeMount (挂载前)</h4><p>在挂载开始之前被调用,在这个阶段是<strong>获取不到dom操作</strong>的,把data里面的数据和模板<strong>生成html</strong>，完成了data等初始化,注意此时还<strong>没有挂在html到页面上</strong></p>\n<h4 id=\"mounted-挂载后\"><a href=\"#mounted-挂载后\" class=\"headerlink\" title=\"mounted (挂载后)\"></a>mounted (挂载后)</h4><p>用于挂载之后使用，这时 el 被新创建的 vm.$el 替换了。在这个时候<strong>可以获取到dom操作</strong>，也可以通过vm.$el获取元素。比如可以获取到ref等，操作dom，<br>在这个时候只能调用一次ajax，在这个时候<strong>el和data都可以获取的到</strong><br>注意这个不能保证所有子元素挂载完成了！<br>vm.$el：vue实例使用的dom根元素。</p>\n<h4 id=\"beforeUpdate-更新前\"><a href=\"#beforeUpdate-更新前\" class=\"headerlink\" title=\"beforeUpdate (更新前)\"></a>beforeUpdate (更新前)</h4><p>在<strong>数据发生改变后，DOM 被更新之前</strong>被调用。这里适合在现有 DOM 将要被更新之前访问它，比如<strong>移除手动添加的事件监听器</strong>。</p>\n<h4 id=\"updated-更新后\"><a href=\"#updated-更新后\" class=\"headerlink\" title=\"updated (更新后)\"></a>updated (更新后)</h4><p>在由于<strong>数据更改导致地虚拟DOM重新渲染并更新完毕之后会调用</strong>，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该<strong>避免在此期间更改状态，因为这可能会导致更新无限循环</strong>，但是在服务器端渲染期间不被调用，可以用于监听某些数据的时候使用钩子</p>\n<h4 id=\"beforeDestroy（销毁前）\"><a href=\"#beforeDestroy（销毁前）\" class=\"headerlink\" title=\"beforeDestroy（销毁前）\"></a>beforeDestroy（销毁前）</h4><p>实例销毁之前调用。在这一步，实例仍然完全可用。<br>可以用于销毁计时器时候使用，为了防止跳转到其它页面该事件还在执行，还可以清除dom事件等</p>\n<h4 id=\"destroy（销毁后）\"><a href=\"#destroy（销毁后）\" class=\"headerlink\" title=\"destroy（销毁后）\"></a>destroy（销毁后）</h4><p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p>\n<h4 id=\"activated\"><a href=\"#activated\" class=\"headerlink\" title=\"activated\"></a>activated</h4><p>被 keep-alive 缓存的组件激活时调用。</p>\n<h4 id=\"deactivated\"><a href=\"#deactivated\" class=\"headerlink\" title=\"deactivated\"></a>deactivated</h4><p>被 keep-alive 缓存的组件失活时调用。</p>\n<h2 id=\"二、vue3的生命周期\"><a href=\"#二、vue3的生命周期\" class=\"headerlink\" title=\"二、vue3的生命周期\"></a>二、vue3的生命周期</h2><p>大多相同，只是将beforeCreate和created合并成了setup，并且新增了renderTracked与renderTriggered，并且将destroy和beforeDestory改成了unmounted和beforeUnmounted</p>\n<h4 id=\"renderTracked\"><a href=\"#renderTracked\" class=\"headerlink\" title=\"renderTracked\"></a>renderTracked</h4><p>在一个响应式依赖被组件的渲染作用追踪后调用。<br>这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。</p>\n<h4 id=\"renderTriggered\"><a href=\"#renderTriggered\" class=\"headerlink\" title=\"renderTriggered\"></a>renderTriggered</h4><p>在一个响应式依赖被组件触发了重新渲染之后调用。<br>这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。</p>\n<h4 id=\"serverPrefetch\"><a href=\"#serverPrefetch\" class=\"headerlink\" title=\"serverPrefetch\"></a>serverPrefetch</h4><p>当组件实例在服务器上被渲染之前要完成的异步函数。</p>\n<h3 id=\"Vue2————–vue3\"><a href=\"#Vue2————–vue3\" class=\"headerlink\" title=\"Vue2————–vue3\"></a>Vue2————–vue3</h3><p><code>beforeCreate</code> -&gt; <code>setup()</code><br><code>created</code> -&gt; <code>setup()</code><br><code>beforeMount</code> -&gt; <code>onBeforeMount</code><br><code>mounted</code> -&gt; <code>onMounted</code><br><code>beforeUpdate</code> -&gt; <code>onBeforeUpdate</code><br><code>updated</code> -&gt; <code>onUpdated</code><br><code>beforeDestroy</code> -&gt; <code>onBeforeUnmount</code><br><code>destroyed</code> -&gt; <code>onUnmounted</code><br><code>activated</code> -&gt; <code>onActivated</code><br><code>deactivated</code> -&gt; <code>onDeactivated</code><br><code>errorCaptured</code> -&gt; <code>onErrorCaptured</code></p>\n<h3 id=\"父子组件生命周期的调用顺序\"><a href=\"#父子组件生命周期的调用顺序\" class=\"headerlink\" title=\"父子组件生命周期的调用顺序\"></a>父子组件生命周期的调用顺序</h3><p>created：先初始化父组件，再初始化子组件<br>mounted：先渲染子组件，再渲染父组件<br>beforeupdated：先调用父组件，再调用子组件<br>updated：先更新子组件，再更新父组件<br>beforedestroy：先调用父组件，再调用子组件<br>destroy：先调用子组件，再调用父组件</p>\n<p>实测的图<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f8d9c42d63cf20e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、vue2的生命周期\"><a href=\"#一、vue2的生命周期\" class=\"headerlink\" title=\"一、vue2的生命周期\"></a>一、vue2的生命周期</h2><p>vue生命周期分别有创建、初始化数据、编译模板、挂在DOM、渲染-更新-渲染、卸载利用钩子函数完成对应的项目效果</p>\n<h4 id=\"beforeCreate-创建前\"><a href=\"#beforeCreate-创建前\" class=\"headerlink\" title=\"beforeCreate( 创建前 )\"></a>beforeCreate( 创建前 )</h4><p>在实例初始化之后,进行数据侦听和事件/侦听器的配置之前同步调用。<br>此时组件的选项对象还未创建，<strong>el 和 data 并未初始化</strong>，因此<strong>无法访问methods， data， computed等上的方法和数据</strong></p>\n<h4 id=\"created-创建后）\"><a href=\"#created-创建后）\" class=\"headerlink\" title=\"created ( 创建后）\"></a>created ( 创建后）</h4><p>在实例创建之后使用，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件/侦听器的回调函数。<strong>完成了data 数据的初始化</strong>。因为未挂载，所以<strong>el不可用</strong>。 可以<strong>使用数据，更改数据</strong>，在这里更改数据<strong>不会触发updated函数</strong>。</p>\n<h4 id=\"beforeMount-挂载前\"><a href=\"#beforeMount-挂载前\" class=\"headerlink\" title=\"beforeMount (挂载前)\"></a>beforeMount (挂载前)</h4><p>在挂载开始之前被调用,在这个阶段是<strong>获取不到dom操作</strong>的,把data里面的数据和模板<strong>生成html</strong>，完成了data等初始化,注意此时还<strong>没有挂在html到页面上</strong></p>\n<h4 id=\"mounted-挂载后\"><a href=\"#mounted-挂载后\" class=\"headerlink\" title=\"mounted (挂载后)\"></a>mounted (挂载后)</h4><p>用于挂载之后使用，这时 el 被新创建的 vm.$el 替换了。在这个时候<strong>可以获取到dom操作</strong>，也可以通过vm.$el获取元素。比如可以获取到ref等，操作dom，<br>在这个时候只能调用一次ajax，在这个时候<strong>el和data都可以获取的到</strong><br>注意这个不能保证所有子元素挂载完成了！<br>vm.$el：vue实例使用的dom根元素。</p>\n<h4 id=\"beforeUpdate-更新前\"><a href=\"#beforeUpdate-更新前\" class=\"headerlink\" title=\"beforeUpdate (更新前)\"></a>beforeUpdate (更新前)</h4><p>在<strong>数据发生改变后，DOM 被更新之前</strong>被调用。这里适合在现有 DOM 将要被更新之前访问它，比如<strong>移除手动添加的事件监听器</strong>。</p>\n<h4 id=\"updated-更新后\"><a href=\"#updated-更新后\" class=\"headerlink\" title=\"updated (更新后)\"></a>updated (更新后)</h4><p>在由于<strong>数据更改导致地虚拟DOM重新渲染并更新完毕之后会调用</strong>，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该<strong>避免在此期间更改状态，因为这可能会导致更新无限循环</strong>，但是在服务器端渲染期间不被调用，可以用于监听某些数据的时候使用钩子</p>\n<h4 id=\"beforeDestroy（销毁前）\"><a href=\"#beforeDestroy（销毁前）\" class=\"headerlink\" title=\"beforeDestroy（销毁前）\"></a>beforeDestroy（销毁前）</h4><p>实例销毁之前调用。在这一步，实例仍然完全可用。<br>可以用于销毁计时器时候使用，为了防止跳转到其它页面该事件还在执行，还可以清除dom事件等</p>\n<h4 id=\"destroy（销毁后）\"><a href=\"#destroy（销毁后）\" class=\"headerlink\" title=\"destroy（销毁后）\"></a>destroy（销毁后）</h4><p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p>\n<h4 id=\"activated\"><a href=\"#activated\" class=\"headerlink\" title=\"activated\"></a>activated</h4><p>被 keep-alive 缓存的组件激活时调用。</p>\n<h4 id=\"deactivated\"><a href=\"#deactivated\" class=\"headerlink\" title=\"deactivated\"></a>deactivated</h4><p>被 keep-alive 缓存的组件失活时调用。</p>\n<h2 id=\"二、vue3的生命周期\"><a href=\"#二、vue3的生命周期\" class=\"headerlink\" title=\"二、vue3的生命周期\"></a>二、vue3的生命周期</h2><p>大多相同，只是将beforeCreate和created合并成了setup，并且新增了renderTracked与renderTriggered，并且将destroy和beforeDestory改成了unmounted和beforeUnmounted</p>\n<h4 id=\"renderTracked\"><a href=\"#renderTracked\" class=\"headerlink\" title=\"renderTracked\"></a>renderTracked</h4><p>在一个响应式依赖被组件的渲染作用追踪后调用。<br>这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。</p>\n<h4 id=\"renderTriggered\"><a href=\"#renderTriggered\" class=\"headerlink\" title=\"renderTriggered\"></a>renderTriggered</h4><p>在一个响应式依赖被组件触发了重新渲染之后调用。<br>这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。</p>\n<h4 id=\"serverPrefetch\"><a href=\"#serverPrefetch\" class=\"headerlink\" title=\"serverPrefetch\"></a>serverPrefetch</h4><p>当组件实例在服务器上被渲染之前要完成的异步函数。</p>\n<h3 id=\"Vue2————–vue3\"><a href=\"#Vue2————–vue3\" class=\"headerlink\" title=\"Vue2————–vue3\"></a>Vue2————–vue3</h3><p><code>beforeCreate</code> -&gt; <code>setup()</code><br><code>created</code> -&gt; <code>setup()</code><br><code>beforeMount</code> -&gt; <code>onBeforeMount</code><br><code>mounted</code> -&gt; <code>onMounted</code><br><code>beforeUpdate</code> -&gt; <code>onBeforeUpdate</code><br><code>updated</code> -&gt; <code>onUpdated</code><br><code>beforeDestroy</code> -&gt; <code>onBeforeUnmount</code><br><code>destroyed</code> -&gt; <code>onUnmounted</code><br><code>activated</code> -&gt; <code>onActivated</code><br><code>deactivated</code> -&gt; <code>onDeactivated</code><br><code>errorCaptured</code> -&gt; <code>onErrorCaptured</code></p>\n<h3 id=\"父子组件生命周期的调用顺序\"><a href=\"#父子组件生命周期的调用顺序\" class=\"headerlink\" title=\"父子组件生命周期的调用顺序\"></a>父子组件生命周期的调用顺序</h3><p>created：先初始化父组件，再初始化子组件<br>mounted：先渲染子组件，再渲染父组件<br>beforeupdated：先调用父组件，再调用子组件<br>updated：先更新子组件，再更新父组件<br>beforedestroy：先调用父组件，再调用子组件<br>destroy：先调用子组件，再调用父组件</p>\n<p>实测的图<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-f8d9c42d63cf20e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"【闭包的典型运用】防抖与节流","date":"2019-03-17T04:13:35.000Z","_content":"<div id=\"cnblogs_post_body\" class=\"blogpost-body cnblogs-markdown\">\n<p>闭包的典型应用就是函数防抖和节流，本文详细介绍函数防抖和节流的应用场景和实现。</p>\n<h3 id=\"函数防抖debounce\">函数防抖（debounce）</h3>\n<p>函数防抖，就是指触发事件后，在 n 秒后只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数的执行时间。</p>\n<blockquote>\n<p>简单的说，当一个动作连续触发，只执行最后一次。</p>\n</blockquote>\n<p>打个比方，坐公交，司机需要等最后一个人进入才能关门。每次进入一个人，司机就会多等待几秒再关门。</p>\n<h3 id=\"函数节流throttle\">函数节流（throttle）</h3>\n<blockquote>\n<p>限制一个函数在一定时间内只能执行一次</p>\n</blockquote>\n<p>举个例子，乘坐地铁，过闸机时，每个人进入后3秒后门关闭，等待下一个人进入。</p>\n<h3 id=\"常见的应用场景\">常见的应用场景</h3>\n<h4 id=\"函数防抖debounce的应用场景\">函数防抖（debounce）的应用场景</h4>\n<p>连续的事件，只需触发一次的回调场景有：</p>\n<ul>\n<li>搜索框搜索输入。只需要用户最后一次输入完再发送请求</li>\n<li>手机号、邮箱格式的输入验证检测</li>\n<li>窗口大小的 resize 。只需窗口调整完成后，计算窗口的大小，防止重复渲染。</li>\n</ul>\n<h4 id=\"函数节流throttle的应用场景\">函数节流（throttle）的应用场景</h4>\n<p>间隔一段时间执行一次回调的场景有：</p>\n<ul>\n<li>滚动加载，加载更多或滚动到底部监听</li>\n<li>谷歌搜索框，搜索联想功能</li>\n<li>高频点击提交，表单重复提交</li>\n<li>省市信息对应字母快速选择</li>\n</ul>\n<h3 id=\"实现原理\">实现原理</h3>\n<h4 id=\"函数防抖debounce-1\">函数防抖（debounce）</h4>\n<p><strong>简单实现：</strong></p>\n```js\nconst debounce = (func, wait) => {\n    let timer\n    return () => {\n\t\tclearTimeout(timer)\n        timer = setTimeout(func, wait);\n    }\n}\n```\n<p>函数防抖在执行目标方法时，会等待一段时间。当又执行相同方法时，若前一个定时任务未执行完，则 清除掉定时任务，重新定时。</p>\n<p><strong>封装：</strong></p>\n```js\nfunction debounce(fn, delay = 500) {\n    // timer 是在闭包中的\n    let timer = null;\n    \n    return function() {\n        if (timer) {\n            clearTimeout(timer)\n        }\n        timer = setTimeout(() => {\n            fn.apply(this, arguments)\n            timer = null\n        }, delay)\n    }\n}\n\n// test debounce 返回一个函数\ninput1 = document.getElementById('input1')\ninput1.addEventListener('keyup', debounce(function () {\n    console.log(input1.value)\n}, 600))\n```\n<p><strong>绑定事件解释：</strong>addEventListener 第一个参数是监听的事件，第二个参数是对应事件的回调函数。将 debounce 函数作为回调函数，这个 debounce 回调函数返回一个防抖之后的函数，因此实现了防抖的功能。</p>\n<p><strong>防抖解释：</strong>当 按下某个键的时候触发 <code>keydown</code> 事件，并执行回调。timer 默认为 null，在 return 的函数中定时器 timer 被赋值，如果在 delay 延迟之内再次触发了 keydown 事件，那么 timer 就会被重置为null...，当用户输入完成之后（delay 时间已过），那么就会触发 debounce 中的回调函数，也就是 keydown 最终要执行的事件。</p>\n<h4 id=\"函数节流throttle-1\">函数节流（throttle）</h4>\n<p><strong>简单实现</strong></p>\n\n```js\nconst throttle = (func, wait) => {\n    let timer;\n    \n    return () => {\n        if (timer) {\n            return\n        }\n        timer = setTimeout(() => {\n            func();\n            timer = null\n        }, wait)\n    }\n}\n```\n\n<p>函数节流的目的，是为了限制函数一段时间内只能执行一次。因此，通过使用定时任务，延时方法执行。<strong>在延时的时间内，方法若被触发，则直接退出方法。</strong>从而实现一段时间内只执行一次。</p>\n<p><strong>封装：</strong></p>\n```js\nfunction throttled(fn, delay = 500) {\n    let timer = null\n    return function (...args) {\n        if (!timer) {\n            timer = setTimeout(() => {\n                fn.apply(this, args)\n                timer = null\n            }, delay);\n        }\n    }\n}\n// test\nlet div1 = document.getElementById('div1')\ndiv1.addEventListener('drag', throttle(function(e) {\n    console.log(e.offsetX, e.offsetY)\n}, 100))\n```\n<p><strong>解释：</strong>如果 timer 存在，那就直接返回，不再往下执行了。这样就实现了一段时间内执行一次的目的。</p>\n<h4 id=\"异同比较\">异同比较</h4>\n<p><strong>相同点：</strong></p>\n<ul>\n<li>都可以通过使用 <code>setTimeout</code> 实现</li>\n<li>目的都是，降低回调函数的执行频率，节省计算资源</li>\n</ul>\n<p><strong>不同点：</strong></p>\n<ul>\n<li>函数防抖，是在一段连续操作结束之后，处理回调，利用 clearTimout 和 setTimeout 实现。函数节流，是在一段连续操作中，每一段时间只执行一次，在频率较高的事件中使用来提高性能。</li>\n<li>函数防抖关注一段时间内连续触发，只在最后一次执行；而函数节流侧重于在一段时间内只执行一次。</li>\n</ul>\n\n节流其实还有另一种不用定时器的方法。\n新的时间戳 - 旧的时间戳 > delay时间的话，执行方法。否则将此时的时间戳赋值为旧的时间戳\n```js\nfunction throttled1(fn, delay = 500) {\n    let oldtime = Date.now()\n    return function (...args) {\n        let newtime = Date.now()\n        if (newtime - oldtime >= delay) {\n            fn.apply(null, args)\n            oldtime = Date.now()\n        }\n    }\n}\n\n```\n</div>","source":"_posts/cxy/js/js-bibao-debounce&throttle.md","raw":"---\ntitle: '【闭包的典型运用】防抖与节流'\ndate: 2019-03-17 12:13:35\ntags: js\ncategories:\n  - 程序员的自我修养\n---\n<div id=\"cnblogs_post_body\" class=\"blogpost-body cnblogs-markdown\">\n<p>闭包的典型应用就是函数防抖和节流，本文详细介绍函数防抖和节流的应用场景和实现。</p>\n<h3 id=\"函数防抖debounce\">函数防抖（debounce）</h3>\n<p>函数防抖，就是指触发事件后，在 n 秒后只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数的执行时间。</p>\n<blockquote>\n<p>简单的说，当一个动作连续触发，只执行最后一次。</p>\n</blockquote>\n<p>打个比方，坐公交，司机需要等最后一个人进入才能关门。每次进入一个人，司机就会多等待几秒再关门。</p>\n<h3 id=\"函数节流throttle\">函数节流（throttle）</h3>\n<blockquote>\n<p>限制一个函数在一定时间内只能执行一次</p>\n</blockquote>\n<p>举个例子，乘坐地铁，过闸机时，每个人进入后3秒后门关闭，等待下一个人进入。</p>\n<h3 id=\"常见的应用场景\">常见的应用场景</h3>\n<h4 id=\"函数防抖debounce的应用场景\">函数防抖（debounce）的应用场景</h4>\n<p>连续的事件，只需触发一次的回调场景有：</p>\n<ul>\n<li>搜索框搜索输入。只需要用户最后一次输入完再发送请求</li>\n<li>手机号、邮箱格式的输入验证检测</li>\n<li>窗口大小的 resize 。只需窗口调整完成后，计算窗口的大小，防止重复渲染。</li>\n</ul>\n<h4 id=\"函数节流throttle的应用场景\">函数节流（throttle）的应用场景</h4>\n<p>间隔一段时间执行一次回调的场景有：</p>\n<ul>\n<li>滚动加载，加载更多或滚动到底部监听</li>\n<li>谷歌搜索框，搜索联想功能</li>\n<li>高频点击提交，表单重复提交</li>\n<li>省市信息对应字母快速选择</li>\n</ul>\n<h3 id=\"实现原理\">实现原理</h3>\n<h4 id=\"函数防抖debounce-1\">函数防抖（debounce）</h4>\n<p><strong>简单实现：</strong></p>\n```js\nconst debounce = (func, wait) => {\n    let timer\n    return () => {\n\t\tclearTimeout(timer)\n        timer = setTimeout(func, wait);\n    }\n}\n```\n<p>函数防抖在执行目标方法时，会等待一段时间。当又执行相同方法时，若前一个定时任务未执行完，则 清除掉定时任务，重新定时。</p>\n<p><strong>封装：</strong></p>\n```js\nfunction debounce(fn, delay = 500) {\n    // timer 是在闭包中的\n    let timer = null;\n    \n    return function() {\n        if (timer) {\n            clearTimeout(timer)\n        }\n        timer = setTimeout(() => {\n            fn.apply(this, arguments)\n            timer = null\n        }, delay)\n    }\n}\n\n// test debounce 返回一个函数\ninput1 = document.getElementById('input1')\ninput1.addEventListener('keyup', debounce(function () {\n    console.log(input1.value)\n}, 600))\n```\n<p><strong>绑定事件解释：</strong>addEventListener 第一个参数是监听的事件，第二个参数是对应事件的回调函数。将 debounce 函数作为回调函数，这个 debounce 回调函数返回一个防抖之后的函数，因此实现了防抖的功能。</p>\n<p><strong>防抖解释：</strong>当 按下某个键的时候触发 <code>keydown</code> 事件，并执行回调。timer 默认为 null，在 return 的函数中定时器 timer 被赋值，如果在 delay 延迟之内再次触发了 keydown 事件，那么 timer 就会被重置为null...，当用户输入完成之后（delay 时间已过），那么就会触发 debounce 中的回调函数，也就是 keydown 最终要执行的事件。</p>\n<h4 id=\"函数节流throttle-1\">函数节流（throttle）</h4>\n<p><strong>简单实现</strong></p>\n\n```js\nconst throttle = (func, wait) => {\n    let timer;\n    \n    return () => {\n        if (timer) {\n            return\n        }\n        timer = setTimeout(() => {\n            func();\n            timer = null\n        }, wait)\n    }\n}\n```\n\n<p>函数节流的目的，是为了限制函数一段时间内只能执行一次。因此，通过使用定时任务，延时方法执行。<strong>在延时的时间内，方法若被触发，则直接退出方法。</strong>从而实现一段时间内只执行一次。</p>\n<p><strong>封装：</strong></p>\n```js\nfunction throttled(fn, delay = 500) {\n    let timer = null\n    return function (...args) {\n        if (!timer) {\n            timer = setTimeout(() => {\n                fn.apply(this, args)\n                timer = null\n            }, delay);\n        }\n    }\n}\n// test\nlet div1 = document.getElementById('div1')\ndiv1.addEventListener('drag', throttle(function(e) {\n    console.log(e.offsetX, e.offsetY)\n}, 100))\n```\n<p><strong>解释：</strong>如果 timer 存在，那就直接返回，不再往下执行了。这样就实现了一段时间内执行一次的目的。</p>\n<h4 id=\"异同比较\">异同比较</h4>\n<p><strong>相同点：</strong></p>\n<ul>\n<li>都可以通过使用 <code>setTimeout</code> 实现</li>\n<li>目的都是，降低回调函数的执行频率，节省计算资源</li>\n</ul>\n<p><strong>不同点：</strong></p>\n<ul>\n<li>函数防抖，是在一段连续操作结束之后，处理回调，利用 clearTimout 和 setTimeout 实现。函数节流，是在一段连续操作中，每一段时间只执行一次，在频率较高的事件中使用来提高性能。</li>\n<li>函数防抖关注一段时间内连续触发，只在最后一次执行；而函数节流侧重于在一段时间内只执行一次。</li>\n</ul>\n\n节流其实还有另一种不用定时器的方法。\n新的时间戳 - 旧的时间戳 > delay时间的话，执行方法。否则将此时的时间戳赋值为旧的时间戳\n```js\nfunction throttled1(fn, delay = 500) {\n    let oldtime = Date.now()\n    return function (...args) {\n        let newtime = Date.now()\n        if (newtime - oldtime >= delay) {\n            fn.apply(null, args)\n            oldtime = Date.now()\n        }\n    }\n}\n\n```\n</div>","slug":"cxy/js/js-bibao-debounce&throttle","published":1,"updated":"2023-02-08T10:19:18.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldvissie0000obwi6rkz6da5","content":"<div id=\"cnblogs_post_body\" class=\"blogpost-body cnblogs-markdown\">\n<p>闭包的典型应用就是函数防抖和节流，本文详细介绍函数防抖和节流的应用场景和实现。</p>\n<h3 id=\"函数防抖debounce\">函数防抖（debounce）</h3>\n<p>函数防抖，就是指触发事件后，在 n 秒后只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数的执行时间。</p>\n<blockquote>\n<p>简单的说，当一个动作连续触发，只执行最后一次。</p>\n</blockquote>\n<p>打个比方，坐公交，司机需要等最后一个人进入才能关门。每次进入一个人，司机就会多等待几秒再关门。</p>\n<h3 id=\"函数节流throttle\">函数节流（throttle）</h3>\n<blockquote>\n<p>限制一个函数在一定时间内只能执行一次</p>\n</blockquote>\n<p>举个例子，乘坐地铁，过闸机时，每个人进入后3秒后门关闭，等待下一个人进入。</p>\n<h3 id=\"常见的应用场景\">常见的应用场景</h3>\n<h4 id=\"函数防抖debounce的应用场景\">函数防抖（debounce）的应用场景</h4>\n<p>连续的事件，只需触发一次的回调场景有：</p>\n<ul>\n<li>搜索框搜索输入。只需要用户最后一次输入完再发送请求</li>\n<li>手机号、邮箱格式的输入验证检测</li>\n<li>窗口大小的 resize 。只需窗口调整完成后，计算窗口的大小，防止重复渲染。</li>\n</ul>\n<h4 id=\"函数节流throttle的应用场景\">函数节流（throttle）的应用场景</h4>\n<p>间隔一段时间执行一次回调的场景有：</p>\n<ul>\n<li>滚动加载，加载更多或滚动到底部监听</li>\n<li>谷歌搜索框，搜索联想功能</li>\n<li>高频点击提交，表单重复提交</li>\n<li>省市信息对应字母快速选择</li>\n</ul>\n<h3 id=\"实现原理\">实现原理</h3>\n<h4 id=\"函数防抖debounce-1\">函数防抖（debounce）</h4>\n<p><strong>简单实现：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">debounce</span> = (<span class=\"params\">func, wait</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(func, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数防抖在执行目标方法时，会等待一段时间。当又执行相同方法时，若前一个定时任务未执行完，则 清除掉定时任务，重新定时。</p>\n<p><strong>封装：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// timer 是在闭包中的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test debounce 返回一个函数</span></span><br><span class=\"line\">input1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;input1&#x27;</span>)</span><br><span class=\"line\">input1.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>, <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(input1.<span class=\"property\">value</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">600</span>))</span><br></pre></td></tr></table></figure>\n<p><strong>绑定事件解释：</strong>addEventListener 第一个参数是监听的事件，第二个参数是对应事件的回调函数。将 debounce 函数作为回调函数，这个 debounce 回调函数返回一个防抖之后的函数，因此实现了防抖的功能。</p>\n<p><strong>防抖解释：</strong>当 按下某个键的时候触发 <code>keydown</code> 事件，并执行回调。timer 默认为 null，在 return 的函数中定时器 timer 被赋值，如果在 delay 延迟之内再次触发了 keydown 事件，那么 timer 就会被重置为null...，当用户输入完成之后（delay 时间已过），那么就会触发 debounce 中的回调函数，也就是 keydown 最终要执行的事件。</p>\n<h4 id=\"函数节流throttle-1\">函数节流（throttle）</h4>\n<p><strong>简单实现</strong></p>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">throttle</span> = (<span class=\"params\">func, wait</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">func</span>();</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数节流的目的，是为了限制函数一段时间内只能执行一次。因此，通过使用定时任务，延时方法执行。<strong>在延时的时间内，方法若被触发，则直接退出方法。</strong>从而实现一段时间内只执行一次。</p>\n<p><strong>封装：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttled</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// test</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> div1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;div1&#x27;</span>)</span><br><span class=\"line\">div1.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;drag&#x27;</span>, <span class=\"title function_\">throttle</span>(<span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">offsetX</span>, e.<span class=\"property\">offsetY</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>))</span><br></pre></td></tr></table></figure>\n<p><strong>解释：</strong>如果 timer 存在，那就直接返回，不再往下执行了。这样就实现了一段时间内执行一次的目的。</p>\n<h4 id=\"异同比较\">异同比较</h4>\n<p><strong>相同点：</strong></p>\n<ul>\n<li>都可以通过使用 <code>setTimeout</code> 实现</li>\n<li>目的都是，降低回调函数的执行频率，节省计算资源</li>\n</ul>\n<p><strong>不同点：</strong></p>\n<ul>\n<li>函数防抖，是在一段连续操作结束之后，处理回调，利用 clearTimout 和 setTimeout 实现。函数节流，是在一段连续操作中，每一段时间只执行一次，在频率较高的事件中使用来提高性能。</li>\n<li>函数防抖关注一段时间内连续触发，只在最后一次执行；而函数节流侧重于在一段时间内只执行一次。</li>\n</ul>\n\n<p>节流其实还有另一种不用定时器的方法。<br>新的时间戳 - 旧的时间戳 &gt; delay时间的话，执行方法。否则将此时的时间戳赋值为旧的时间戳</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttled1</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldtime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newtime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newtime - oldtime &gt;= delay) &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, args)</span><br><span class=\"line\">            oldtime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>","site":{"data":{}},"excerpt":"","more":"<div id=\"cnblogs_post_body\" class=\"blogpost-body cnblogs-markdown\">\n<p>闭包的典型应用就是函数防抖和节流，本文详细介绍函数防抖和节流的应用场景和实现。</p>\n<h3 id=\"函数防抖debounce\">函数防抖（debounce）</h3>\n<p>函数防抖，就是指触发事件后，在 n 秒后只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数的执行时间。</p>\n<blockquote>\n<p>简单的说，当一个动作连续触发，只执行最后一次。</p>\n</blockquote>\n<p>打个比方，坐公交，司机需要等最后一个人进入才能关门。每次进入一个人，司机就会多等待几秒再关门。</p>\n<h3 id=\"函数节流throttle\">函数节流（throttle）</h3>\n<blockquote>\n<p>限制一个函数在一定时间内只能执行一次</p>\n</blockquote>\n<p>举个例子，乘坐地铁，过闸机时，每个人进入后3秒后门关闭，等待下一个人进入。</p>\n<h3 id=\"常见的应用场景\">常见的应用场景</h3>\n<h4 id=\"函数防抖debounce的应用场景\">函数防抖（debounce）的应用场景</h4>\n<p>连续的事件，只需触发一次的回调场景有：</p>\n<ul>\n<li>搜索框搜索输入。只需要用户最后一次输入完再发送请求</li>\n<li>手机号、邮箱格式的输入验证检测</li>\n<li>窗口大小的 resize 。只需窗口调整完成后，计算窗口的大小，防止重复渲染。</li>\n</ul>\n<h4 id=\"函数节流throttle的应用场景\">函数节流（throttle）的应用场景</h4>\n<p>间隔一段时间执行一次回调的场景有：</p>\n<ul>\n<li>滚动加载，加载更多或滚动到底部监听</li>\n<li>谷歌搜索框，搜索联想功能</li>\n<li>高频点击提交，表单重复提交</li>\n<li>省市信息对应字母快速选择</li>\n</ul>\n<h3 id=\"实现原理\">实现原理</h3>\n<h4 id=\"函数防抖debounce-1\">函数防抖（debounce）</h4>\n<p><strong>简单实现：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">debounce</span> = (<span class=\"params\">func, wait</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(func, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数防抖在执行目标方法时，会等待一段时间。当又执行相同方法时，若前一个定时任务未执行完，则 清除掉定时任务，重新定时。</p>\n<p><strong>封装：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// timer 是在闭包中的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test debounce 返回一个函数</span></span><br><span class=\"line\">input1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;input1&#x27;</span>)</span><br><span class=\"line\">input1.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>, <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(input1.<span class=\"property\">value</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">600</span>))</span><br></pre></td></tr></table></figure>\n<p><strong>绑定事件解释：</strong>addEventListener 第一个参数是监听的事件，第二个参数是对应事件的回调函数。将 debounce 函数作为回调函数，这个 debounce 回调函数返回一个防抖之后的函数，因此实现了防抖的功能。</p>\n<p><strong>防抖解释：</strong>当 按下某个键的时候触发 <code>keydown</code> 事件，并执行回调。timer 默认为 null，在 return 的函数中定时器 timer 被赋值，如果在 delay 延迟之内再次触发了 keydown 事件，那么 timer 就会被重置为null...，当用户输入完成之后（delay 时间已过），那么就会触发 debounce 中的回调函数，也就是 keydown 最终要执行的事件。</p>\n<h4 id=\"函数节流throttle-1\">函数节流（throttle）</h4>\n<p><strong>简单实现</strong></p>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">throttle</span> = (<span class=\"params\">func, wait</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">func</span>();</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;, wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数节流的目的，是为了限制函数一段时间内只能执行一次。因此，通过使用定时任务，延时方法执行。<strong>在延时的时间内，方法若被触发，则直接退出方法。</strong>从而实现一段时间内只执行一次。</p>\n<p><strong>封装：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttled</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// test</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> div1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;div1&#x27;</span>)</span><br><span class=\"line\">div1.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;drag&#x27;</span>, <span class=\"title function_\">throttle</span>(<span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">offsetX</span>, e.<span class=\"property\">offsetY</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>))</span><br></pre></td></tr></table></figure>\n<p><strong>解释：</strong>如果 timer 存在，那就直接返回，不再往下执行了。这样就实现了一段时间内执行一次的目的。</p>\n<h4 id=\"异同比较\">异同比较</h4>\n<p><strong>相同点：</strong></p>\n<ul>\n<li>都可以通过使用 <code>setTimeout</code> 实现</li>\n<li>目的都是，降低回调函数的执行频率，节省计算资源</li>\n</ul>\n<p><strong>不同点：</strong></p>\n<ul>\n<li>函数防抖，是在一段连续操作结束之后，处理回调，利用 clearTimout 和 setTimeout 实现。函数节流，是在一段连续操作中，每一段时间只执行一次，在频率较高的事件中使用来提高性能。</li>\n<li>函数防抖关注一段时间内连续触发，只在最后一次执行；而函数节流侧重于在一段时间内只执行一次。</li>\n</ul>\n\n<p>节流其实还有另一种不用定时器的方法。<br>新的时间戳 - 旧的时间戳 &gt; delay时间的话，执行方法。否则将此时的时间戳赋值为旧的时间戳</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttled1</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldtime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newtime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newtime - oldtime &gt;= delay) &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, args)</span><br><span class=\"line\">            oldtime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>"},{"title":"typescript总结笔记(2)","date":"2023-03-08T11:24:13.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、函数类型表达式\n描述函数可以使用函数类型表达式。\n格式：\n```js\nfn: (arg: string) => void\n```\n比如在接口中使用\n```js\ninterface pringStrToConsole {\n  str: string;\n  printStr: (str: string) => void;\n  // printStr: (string)=>void 不可以这么写，这么写表示函数有一个参数any，类型为string\n}\n```\n```js\nlet ps: pringStrToConsole = {\n  str: \"aaa\",\n  printStr: (str) => {\n    console.log(str);\n  },\n};\nps.printStr(ps.str);\n```\n或使用类型别名（type）定义一个函数类型\n```js\ntype GreetFunction = (string)=>void\n```\n### 调用签名\n由于在js中，函数不仅可以被调用，函数本身也可以具有属性值。用**函数类型表达式**无法支持声明属性，这时候可以使用**调用签名**\n格式：\n```js\n(str: string): void\n```\n具体应用：\n```js\ntype DescribableFunction = {\n  description: string,\n  (str: string): void\n}\nfunction doSomething(fn: DescribableFunction) {\n  console.log(fn.description + \" returned \" + fn(6));\n}\n```\n### 构造签名\n即，使用new Function时的用法，构造函数。\n说实话，我没看太懂\n```js\ntype SomeConstructor = {\n  new (s: string): SomeObject;\n};\nfunction fn(ctor: SomeConstructor) {\n  return new ctor(\"hello\");\n}\n```\n\n### 泛型函数\n定义一个函数，返回数组的第一个元素。\n由于数组的类型不一定，用any没有用泛型好。\n泛型和强制类型转换都是尖括号`<>`，泛型放在变量后，强制类型转换放在变量前。\n```js\nfunction firstElement<Type>(arr: Type[]): Type | undefined {\n  return arr[0];\n}\n```\n```js\nlet strArr: string[] = [\"aaa\", \"bbb\", \"ccc\"];\nlet fe1 = firstElement(strArr); // aaa\n\nlet nArr: number[] = [111, 222, 333];\nlet fe2 = firstElement(nArr); // 111\n```\n\n## 二、对象类型\n## 三、泛型\n```js\nfunction consoleLog<T,Y>(content: T | Y): void {\n  console.log(content)\n}\n```\n## 四、工具类型\n### 1. Partial\n构造一个类型，所有的属性均为可选。\n```ts\ninterface TODO {\n  title: string;\n  description: string;\n}\n\ntype TODO2 = Partial<TODO>\nlet todo2: TODO2 = {\n  title: 'sdfsdfsdf'\n}\n```\n### 2. Required\n构造一个类型，所有的属性均为必选\n```ts\ninterface Props {\n  a?: number;\n  b?: string;\n}\nconst obj: Props = { a: 5 };\nconst obj2: Required<Props> = { a: 5 };\n```\n### 3. Readonly\n构造一个类型，所有的属性均为只读\n```ts\ninterface Todo {\n  title: string;\n}\n\nconst todo: Readonly<Todo> = {\n  title: \"Delete inactive users\",\n};\n\ntodo.title = \"Hello\";\n// TypeError: Cannot assign to 'title' because it is a read-only property.\n```\n### 4. Record<Keys, Type>\n构造一个类型，它的所有key是Keys类型，所有value是Type类型\n```ts\ninterface Employee {\n  name: string;\n  age: number;\n}\nlet employee1: Record<number, Employee> = {\n  0: { name: \"zhao\", age: 11111 },\n  1: { name: \"qian\", age: 22222 },\n  2: { name: \"sun\", age: 33333 },\n  3: { name: \"li\", age: 44444 },\n};\n```\n```ts\ntype Key = \"zhaoID\" | \"qianID\" | \"sunID\" | \"liID\";\nlet employee2: Record<Key, Employee> = {\n  zhaoID: { name: \"zhao\", age: 11111 },\n  qianID: { name: \"qian\", age: 22222 },\n  sunID: { name: \"sun\", age: 33333 },\n  liID: { name: \"li\", age: 44444 },\n};\n```\n### 5. Pick<Type, Keys>\n构造一个类型，保留Type中的Keys属性。\n### 6. Omit<Type, Keys>\n构造一个类型，从Type中过滤掉Keys属性\n### 7. Exclude<UnionType, ExcludedMembers>\n构造一个类型，从UnionType中排除所有可以赋给ExcludedMembers的类型。\n其中UnionType和ExcludedMembers都是**联合类型**。\n### 8. Extract<Type, Union>\n构造一个类型，从Type中提取所有可以赋给Union的类型","source":"_posts/cxy/js/typescript2.md","raw":"---\ntitle: 'typescript总结笔记(2)'\ndate: 2023-03-08 19:24:13\ntags: \n  - typescript\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n## 一、函数类型表达式\n描述函数可以使用函数类型表达式。\n格式：\n```js\nfn: (arg: string) => void\n```\n比如在接口中使用\n```js\ninterface pringStrToConsole {\n  str: string;\n  printStr: (str: string) => void;\n  // printStr: (string)=>void 不可以这么写，这么写表示函数有一个参数any，类型为string\n}\n```\n```js\nlet ps: pringStrToConsole = {\n  str: \"aaa\",\n  printStr: (str) => {\n    console.log(str);\n  },\n};\nps.printStr(ps.str);\n```\n或使用类型别名（type）定义一个函数类型\n```js\ntype GreetFunction = (string)=>void\n```\n### 调用签名\n由于在js中，函数不仅可以被调用，函数本身也可以具有属性值。用**函数类型表达式**无法支持声明属性，这时候可以使用**调用签名**\n格式：\n```js\n(str: string): void\n```\n具体应用：\n```js\ntype DescribableFunction = {\n  description: string,\n  (str: string): void\n}\nfunction doSomething(fn: DescribableFunction) {\n  console.log(fn.description + \" returned \" + fn(6));\n}\n```\n### 构造签名\n即，使用new Function时的用法，构造函数。\n说实话，我没看太懂\n```js\ntype SomeConstructor = {\n  new (s: string): SomeObject;\n};\nfunction fn(ctor: SomeConstructor) {\n  return new ctor(\"hello\");\n}\n```\n\n### 泛型函数\n定义一个函数，返回数组的第一个元素。\n由于数组的类型不一定，用any没有用泛型好。\n泛型和强制类型转换都是尖括号`<>`，泛型放在变量后，强制类型转换放在变量前。\n```js\nfunction firstElement<Type>(arr: Type[]): Type | undefined {\n  return arr[0];\n}\n```\n```js\nlet strArr: string[] = [\"aaa\", \"bbb\", \"ccc\"];\nlet fe1 = firstElement(strArr); // aaa\n\nlet nArr: number[] = [111, 222, 333];\nlet fe2 = firstElement(nArr); // 111\n```\n\n## 二、对象类型\n## 三、泛型\n```js\nfunction consoleLog<T,Y>(content: T | Y): void {\n  console.log(content)\n}\n```\n## 四、工具类型\n### 1. Partial\n构造一个类型，所有的属性均为可选。\n```ts\ninterface TODO {\n  title: string;\n  description: string;\n}\n\ntype TODO2 = Partial<TODO>\nlet todo2: TODO2 = {\n  title: 'sdfsdfsdf'\n}\n```\n### 2. Required\n构造一个类型，所有的属性均为必选\n```ts\ninterface Props {\n  a?: number;\n  b?: string;\n}\nconst obj: Props = { a: 5 };\nconst obj2: Required<Props> = { a: 5 };\n```\n### 3. Readonly\n构造一个类型，所有的属性均为只读\n```ts\ninterface Todo {\n  title: string;\n}\n\nconst todo: Readonly<Todo> = {\n  title: \"Delete inactive users\",\n};\n\ntodo.title = \"Hello\";\n// TypeError: Cannot assign to 'title' because it is a read-only property.\n```\n### 4. Record<Keys, Type>\n构造一个类型，它的所有key是Keys类型，所有value是Type类型\n```ts\ninterface Employee {\n  name: string;\n  age: number;\n}\nlet employee1: Record<number, Employee> = {\n  0: { name: \"zhao\", age: 11111 },\n  1: { name: \"qian\", age: 22222 },\n  2: { name: \"sun\", age: 33333 },\n  3: { name: \"li\", age: 44444 },\n};\n```\n```ts\ntype Key = \"zhaoID\" | \"qianID\" | \"sunID\" | \"liID\";\nlet employee2: Record<Key, Employee> = {\n  zhaoID: { name: \"zhao\", age: 11111 },\n  qianID: { name: \"qian\", age: 22222 },\n  sunID: { name: \"sun\", age: 33333 },\n  liID: { name: \"li\", age: 44444 },\n};\n```\n### 5. Pick<Type, Keys>\n构造一个类型，保留Type中的Keys属性。\n### 6. Omit<Type, Keys>\n构造一个类型，从Type中过滤掉Keys属性\n### 7. Exclude<UnionType, ExcludedMembers>\n构造一个类型，从UnionType中排除所有可以赋给ExcludedMembers的类型。\n其中UnionType和ExcludedMembers都是**联合类型**。\n### 8. Extract<Type, Union>\n构造一个类型，从Type中提取所有可以赋给Union的类型","slug":"cxy/js/typescript2","published":1,"updated":"2023-03-08T11:40:57.126Z","_id":"clezlha2t0000iawi37vw9421","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、函数类型表达式\"><a href=\"#一、函数类型表达式\" class=\"headerlink\" title=\"一、函数类型表达式\"></a>一、函数类型表达式</h2><p>描述函数可以使用函数类型表达式。<br>格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">fn</span>: <span class=\"function\">(<span class=\"params\">arg: string</span>) =&gt;</span> <span class=\"keyword\">void</span></span><br></pre></td></tr></table></figure>\n<p>比如在接口中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface pringStrToConsole &#123;</span><br><span class=\"line\">  <span class=\"attr\">str</span>: string;</span><br><span class=\"line\">  <span class=\"attr\">printStr</span>: <span class=\"function\">(<span class=\"params\">str: string</span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// printStr: (string)=&gt;void 不可以这么写，这么写表示函数有一个参数any，类型为string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">ps</span>: pringStrToConsole = &#123;</span><br><span class=\"line\">  <span class=\"attr\">str</span>: <span class=\"string\">&quot;aaa&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">printStr</span>: <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ps.<span class=\"title function_\">printStr</span>(ps.<span class=\"property\">str</span>);</span><br></pre></td></tr></table></figure>\n<p>或使用类型别名（type）定义一个函数类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">GreetFunction</span> = <span class=\"function\">(<span class=\"params\">string</span>)=&gt;</span><span class=\"keyword\">void</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"调用签名\"><a href=\"#调用签名\" class=\"headerlink\" title=\"调用签名\"></a>调用签名</h3><p>由于在js中，函数不仅可以被调用，函数本身也可以具有属性值。用<strong>函数类型表达式</strong>无法支持声明属性，这时候可以使用<strong>调用签名</strong><br>格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"attr\">str</span>: string): <span class=\"keyword\">void</span></span><br></pre></td></tr></table></figure>\n<p>具体应用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">DescribableFunction</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">description</span>: string,</span><br><span class=\"line\">  (<span class=\"attr\">str</span>: string): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\">fn: DescribableFunction</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn.<span class=\"property\">description</span> + <span class=\"string\">&quot; returned &quot;</span> + <span class=\"title function_\">fn</span>(<span class=\"number\">6</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造签名\"><a href=\"#构造签名\" class=\"headerlink\" title=\"构造签名\"></a>构造签名</h3><p>即，使用new Function时的用法，构造函数。<br>说实话，我没看太懂</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">SomeConstructor</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (<span class=\"attr\">s</span>: string): <span class=\"title class_\">SomeObject</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">ctor: SomeConstructor</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">ctor</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型函数\"><a href=\"#泛型函数\" class=\"headerlink\" title=\"泛型函数\"></a>泛型函数</h3><p>定义一个函数，返回数组的第一个元素。<br>由于数组的类型不一定，用any没有用泛型好。<br>泛型和强制类型转换都是尖括号<code>&lt;&gt;</code>，泛型放在变量后，强制类型转换放在变量前。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> firstElement&lt;<span class=\"title class_\">Type</span>&gt;(<span class=\"attr\">arr</span>: <span class=\"title class_\">Type</span>[]): <span class=\"title class_\">Type</span> | <span class=\"literal\">undefined</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strArr</span>: string[] = [<span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>, <span class=\"string\">&quot;ccc&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> fe1 = <span class=\"title function_\">firstElement</span>(strArr); <span class=\"comment\">// aaa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">nArr</span>: number[] = [<span class=\"number\">111</span>, <span class=\"number\">222</span>, <span class=\"number\">333</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> fe2 = <span class=\"title function_\">firstElement</span>(nArr); <span class=\"comment\">// 111</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、对象类型\"><a href=\"#二、对象类型\" class=\"headerlink\" title=\"二、对象类型\"></a>二、对象类型</h2><h2 id=\"三、泛型\"><a href=\"#三、泛型\" class=\"headerlink\" title=\"三、泛型\"></a>三、泛型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> consoleLog&lt;T,Y&gt;(<span class=\"attr\">content</span>: T | Y): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(content)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、工具类型\"><a href=\"#四、工具类型\" class=\"headerlink\" title=\"四、工具类型\"></a>四、工具类型</h2><h3 id=\"1-Partial\"><a href=\"#1-Partial\" class=\"headerlink\" title=\"1. Partial\"></a>1. Partial</h3><p>构造一个类型，所有的属性均为可选。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> TODO &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">description</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TODO2</span> = <span class=\"title class_\">Partial</span>&lt;<span class=\"variable constant_\">TODO</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">todo2</span>: <span class=\"title class_\">TODO2</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&#x27;sdfsdfsdf&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Required\"><a href=\"#2-Required\" class=\"headerlink\" title=\"2. Required\"></a>2. Required</h3><p>构造一个类型，所有的属性均为必选</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Props</span> &#123;</span><br><span class=\"line\">  a?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  b?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">obj</span>: <span class=\"title class_\">Props</span> = &#123; <span class=\"attr\">a</span>: <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">obj2</span>: <span class=\"title class_\">Required</span>&lt;<span class=\"title class_\">Props</span>&gt; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">5</span> &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Readonly\"><a href=\"#3-Readonly\" class=\"headerlink\" title=\"3. Readonly\"></a>3. Readonly</h3><p>构造一个类型，所有的属性均为只读</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Todo</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">todo</span>: <span class=\"title class_\">Readonly</span>&lt;<span class=\"title class_\">Todo</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&quot;Delete inactive users&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">todo.<span class=\"property\">title</span> = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Cannot assign to &#x27;title&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Record-lt-Keys-Type-gt\"><a href=\"#4-Record-lt-Keys-Type-gt\" class=\"headerlink\" title=\"4. Record&lt;Keys, Type&gt;\"></a>4. Record&lt;Keys, Type&gt;</h3><p>构造一个类型，它的所有key是Keys类型，所有value是Type类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">employee1</span>: <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">number</span>, <span class=\"title class_\">Employee</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;zhao&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">11111</span> &#125;,</span><br><span class=\"line\">  <span class=\"number\">1</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;qian&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22222</span> &#125;,</span><br><span class=\"line\">  <span class=\"number\">2</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;sun&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">33333</span> &#125;,</span><br><span class=\"line\">  <span class=\"number\">3</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;li&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">44444</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Key</span> = <span class=\"string\">&quot;zhaoID&quot;</span> | <span class=\"string\">&quot;qianID&quot;</span> | <span class=\"string\">&quot;sunID&quot;</span> | <span class=\"string\">&quot;liID&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">employee2</span>: <span class=\"title class_\">Record</span>&lt;<span class=\"title class_\">Key</span>, <span class=\"title class_\">Employee</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">zhaoID</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;zhao&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">11111</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">qianID</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;qian&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22222</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">sunID</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;sun&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">33333</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">liID</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;li&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">44444</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-Pick-lt-Type-Keys-gt\"><a href=\"#5-Pick-lt-Type-Keys-gt\" class=\"headerlink\" title=\"5. Pick&lt;Type, Keys&gt;\"></a>5. Pick&lt;Type, Keys&gt;</h3><p>构造一个类型，保留Type中的Keys属性。</p>\n<h3 id=\"6-Omit-lt-Type-Keys-gt\"><a href=\"#6-Omit-lt-Type-Keys-gt\" class=\"headerlink\" title=\"6. Omit&lt;Type, Keys&gt;\"></a>6. Omit&lt;Type, Keys&gt;</h3><p>构造一个类型，从Type中过滤掉Keys属性</p>\n<h3 id=\"7-Exclude-lt-UnionType-ExcludedMembers-gt\"><a href=\"#7-Exclude-lt-UnionType-ExcludedMembers-gt\" class=\"headerlink\" title=\"7. Exclude&lt;UnionType, ExcludedMembers&gt;\"></a>7. Exclude&lt;UnionType, ExcludedMembers&gt;</h3><p>构造一个类型，从UnionType中排除所有可以赋给ExcludedMembers的类型。<br>其中UnionType和ExcludedMembers都是<strong>联合类型</strong>。</p>\n<h3 id=\"8-Extract-lt-Type-Union-gt\"><a href=\"#8-Extract-lt-Type-Union-gt\" class=\"headerlink\" title=\"8. Extract&lt;Type, Union&gt;\"></a>8. Extract&lt;Type, Union&gt;</h3><p>构造一个类型，从Type中提取所有可以赋给Union的类型</p>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、函数类型表达式\"><a href=\"#一、函数类型表达式\" class=\"headerlink\" title=\"一、函数类型表达式\"></a>一、函数类型表达式</h2><p>描述函数可以使用函数类型表达式。<br>格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">fn</span>: <span class=\"function\">(<span class=\"params\">arg: string</span>) =&gt;</span> <span class=\"keyword\">void</span></span><br></pre></td></tr></table></figure>\n<p>比如在接口中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface pringStrToConsole &#123;</span><br><span class=\"line\">  <span class=\"attr\">str</span>: string;</span><br><span class=\"line\">  <span class=\"attr\">printStr</span>: <span class=\"function\">(<span class=\"params\">str: string</span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// printStr: (string)=&gt;void 不可以这么写，这么写表示函数有一个参数any，类型为string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">ps</span>: pringStrToConsole = &#123;</span><br><span class=\"line\">  <span class=\"attr\">str</span>: <span class=\"string\">&quot;aaa&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">printStr</span>: <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ps.<span class=\"title function_\">printStr</span>(ps.<span class=\"property\">str</span>);</span><br></pre></td></tr></table></figure>\n<p>或使用类型别名（type）定义一个函数类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">GreetFunction</span> = <span class=\"function\">(<span class=\"params\">string</span>)=&gt;</span><span class=\"keyword\">void</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"调用签名\"><a href=\"#调用签名\" class=\"headerlink\" title=\"调用签名\"></a>调用签名</h3><p>由于在js中，函数不仅可以被调用，函数本身也可以具有属性值。用<strong>函数类型表达式</strong>无法支持声明属性，这时候可以使用<strong>调用签名</strong><br>格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"attr\">str</span>: string): <span class=\"keyword\">void</span></span><br></pre></td></tr></table></figure>\n<p>具体应用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">DescribableFunction</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">description</span>: string,</span><br><span class=\"line\">  (<span class=\"attr\">str</span>: string): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\">fn: DescribableFunction</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn.<span class=\"property\">description</span> + <span class=\"string\">&quot; returned &quot;</span> + <span class=\"title function_\">fn</span>(<span class=\"number\">6</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造签名\"><a href=\"#构造签名\" class=\"headerlink\" title=\"构造签名\"></a>构造签名</h3><p>即，使用new Function时的用法，构造函数。<br>说实话，我没看太懂</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">SomeConstructor</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (<span class=\"attr\">s</span>: string): <span class=\"title class_\">SomeObject</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">ctor: SomeConstructor</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">ctor</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型函数\"><a href=\"#泛型函数\" class=\"headerlink\" title=\"泛型函数\"></a>泛型函数</h3><p>定义一个函数，返回数组的第一个元素。<br>由于数组的类型不一定，用any没有用泛型好。<br>泛型和强制类型转换都是尖括号<code>&lt;&gt;</code>，泛型放在变量后，强制类型转换放在变量前。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> firstElement&lt;<span class=\"title class_\">Type</span>&gt;(<span class=\"attr\">arr</span>: <span class=\"title class_\">Type</span>[]): <span class=\"title class_\">Type</span> | <span class=\"literal\">undefined</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strArr</span>: string[] = [<span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>, <span class=\"string\">&quot;ccc&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> fe1 = <span class=\"title function_\">firstElement</span>(strArr); <span class=\"comment\">// aaa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">nArr</span>: number[] = [<span class=\"number\">111</span>, <span class=\"number\">222</span>, <span class=\"number\">333</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> fe2 = <span class=\"title function_\">firstElement</span>(nArr); <span class=\"comment\">// 111</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、对象类型\"><a href=\"#二、对象类型\" class=\"headerlink\" title=\"二、对象类型\"></a>二、对象类型</h2><h2 id=\"三、泛型\"><a href=\"#三、泛型\" class=\"headerlink\" title=\"三、泛型\"></a>三、泛型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> consoleLog&lt;T,Y&gt;(<span class=\"attr\">content</span>: T | Y): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(content)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、工具类型\"><a href=\"#四、工具类型\" class=\"headerlink\" title=\"四、工具类型\"></a>四、工具类型</h2><h3 id=\"1-Partial\"><a href=\"#1-Partial\" class=\"headerlink\" title=\"1. Partial\"></a>1. Partial</h3><p>构造一个类型，所有的属性均为可选。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> TODO &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">description</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TODO2</span> = <span class=\"title class_\">Partial</span>&lt;<span class=\"variable constant_\">TODO</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">todo2</span>: <span class=\"title class_\">TODO2</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&#x27;sdfsdfsdf&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Required\"><a href=\"#2-Required\" class=\"headerlink\" title=\"2. Required\"></a>2. Required</h3><p>构造一个类型，所有的属性均为必选</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Props</span> &#123;</span><br><span class=\"line\">  a?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  b?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">obj</span>: <span class=\"title class_\">Props</span> = &#123; <span class=\"attr\">a</span>: <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">obj2</span>: <span class=\"title class_\">Required</span>&lt;<span class=\"title class_\">Props</span>&gt; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">5</span> &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Readonly\"><a href=\"#3-Readonly\" class=\"headerlink\" title=\"3. Readonly\"></a>3. Readonly</h3><p>构造一个类型，所有的属性均为只读</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Todo</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">todo</span>: <span class=\"title class_\">Readonly</span>&lt;<span class=\"title class_\">Todo</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&quot;Delete inactive users&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">todo.<span class=\"property\">title</span> = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Cannot assign to &#x27;title&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Record-lt-Keys-Type-gt\"><a href=\"#4-Record-lt-Keys-Type-gt\" class=\"headerlink\" title=\"4. Record&lt;Keys, Type&gt;\"></a>4. Record&lt;Keys, Type&gt;</h3><p>构造一个类型，它的所有key是Keys类型，所有value是Type类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">employee1</span>: <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">number</span>, <span class=\"title class_\">Employee</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;zhao&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">11111</span> &#125;,</span><br><span class=\"line\">  <span class=\"number\">1</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;qian&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22222</span> &#125;,</span><br><span class=\"line\">  <span class=\"number\">2</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;sun&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">33333</span> &#125;,</span><br><span class=\"line\">  <span class=\"number\">3</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;li&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">44444</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Key</span> = <span class=\"string\">&quot;zhaoID&quot;</span> | <span class=\"string\">&quot;qianID&quot;</span> | <span class=\"string\">&quot;sunID&quot;</span> | <span class=\"string\">&quot;liID&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">employee2</span>: <span class=\"title class_\">Record</span>&lt;<span class=\"title class_\">Key</span>, <span class=\"title class_\">Employee</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">zhaoID</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;zhao&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">11111</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">qianID</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;qian&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22222</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">sunID</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;sun&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">33333</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">liID</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;li&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">44444</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-Pick-lt-Type-Keys-gt\"><a href=\"#5-Pick-lt-Type-Keys-gt\" class=\"headerlink\" title=\"5. Pick&lt;Type, Keys&gt;\"></a>5. Pick&lt;Type, Keys&gt;</h3><p>构造一个类型，保留Type中的Keys属性。</p>\n<h3 id=\"6-Omit-lt-Type-Keys-gt\"><a href=\"#6-Omit-lt-Type-Keys-gt\" class=\"headerlink\" title=\"6. Omit&lt;Type, Keys&gt;\"></a>6. Omit&lt;Type, Keys&gt;</h3><p>构造一个类型，从Type中过滤掉Keys属性</p>\n<h3 id=\"7-Exclude-lt-UnionType-ExcludedMembers-gt\"><a href=\"#7-Exclude-lt-UnionType-ExcludedMembers-gt\" class=\"headerlink\" title=\"7. Exclude&lt;UnionType, ExcludedMembers&gt;\"></a>7. Exclude&lt;UnionType, ExcludedMembers&gt;</h3><p>构造一个类型，从UnionType中排除所有可以赋给ExcludedMembers的类型。<br>其中UnionType和ExcludedMembers都是<strong>联合类型</strong>。</p>\n<h3 id=\"8-Extract-lt-Type-Union-gt\"><a href=\"#8-Extract-lt-Type-Union-gt\" class=\"headerlink\" title=\"8. Extract&lt;Type, Union&gt;\"></a>8. Extract&lt;Type, Union&gt;</h3><p>构造一个类型，从Type中提取所有可以赋给Union的类型</p>\n"},{"title":"react-hooks","date":"2023-03-14T09:11:14.000Z","_content":"## 一、基本介绍\nreact是基于数据是不可变的（每次setState都会返回一个新数据），这也是为什么需要setState()来更新数据而不能使用像vue的this.state = newState的形式更新数据的原因，其实你用this.state=newState确实可以改数据，但是react不知道数据变了。\n\n## 二、useMemo、useCallback的执行时机对比\n\nuseMemo和useCallback都会在**组件第一次渲染的时候执行**，之后会在其**依赖的变量发生改变时再次执行**；并且这两个`hooks`都返回缓存的值，`useMemo`返回**缓存的变量**，`useCallback`返回**缓存的函数**。\n\n## 三、useEffect 和 useMemo 区别\nuseEffect是在DOM改变之后触发，useMemo在DOM渲染之前就触发\nuseMemo是在DOM更新前触发的，就像官方所说的，类比生命周期就是[shouldComponentUpdate]\nuseEffect可以帮助我们在DOM更新完成后执行某些副作用操作，如数据获取，设置订阅以及手动更改 React 组件中的 DOM 等\n不要在这个useMemo函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 useEffect 的适用范畴，而不是 useMemo\n在useMemo中使用setState你会发现会产生死循环，并且会有警告，因为useMemo是在渲染中进行的，你在其中操作DOM后，又会导致触发memo\n\n## 三、useMemo\n可以把它理解成vue里面的computed，是一种数据的缓存，而这个缓存依赖后面的第二个参数数组。\n\n如果页面上展示的数据是通过某些state计算得来的一个数据，那么你每次这个组件里面无关的state变化引起的重新渲染，都会导致这个数据重新计算。\n\n这时候就需要用`useMemo(()=>{}, [])`去包裹你的计算的方法体，这样那些无关的`state`改变引起的渲染不会重新计算这个方法体，而是返回之前计算的结果，达到一种缓存的效果。\n```js\nimport \"./App.css\";\nimport React, { useState, useMemo } from \"react\";\n```\n```js\nfunction renderColor() {\n  // 获得随机颜色\n  const r = Math.floor(Math.random() * 255);\n  const g = Math.floor(Math.random() * 255);\n  const b = Math.floor(Math.random() * 255);\n  const a = Math.random();\n  const color = `rgba(${r},${g},${b},${a})`;\n  return color;\n}\n```\n```js\nfunction App() {\n  const [n, setN] = useState(0);\n  const [color, setColor] = useState(\"\");\n  const styleSheet = {\n    backgroundColor: renderColor(),\n  };\n  // 使用useMemo创建有缓存的组件\n  // 1. useMemo相当于vue computed\n  // 2. useMemo必须有return的内容，所以在模板中调用是直接写 { TestComponent }\n  // 3. 只有当color变化时，才会触发 TestComponent 的更新\n  const TestComponent = useMemo(() => {\n    console.log(\"子组件也更新了\");\n    return (\n      <div className=\"button\" style={styleSheet}>\n        {color}\n      </div>\n    );\n  }, [color]);\n  const inputHandlerColor = (event) => {\n    setColor(event.target.value);\n    console.log(\"color\");\n  };\n  const inputHandler = (event) => {\n    setN(event.target.value);\n    console.log(\"n\");\n  };\n  return (\n    <div>\n      <input\n        type=\"text\"\n        className=\"input_border\"\n        onChange={(event) => {\n          inputHandler(event);\n        }}\n      />\n      <input\n        type=\"text\"\n        className=\"input_border\"\n        onChange={(event) => {\n          inputHandlerColor(event);\n        }}\n      />\n      <div className=\"button\">{n}</div>\n      {TestComponent}\n    </div>\n  );\n}\nexport default App;\n```\n\n## 四、useCallback\nuseCallback跟useMemo比较类似，但它返回的是缓存的函数。\n\n使用场景：有一个父组件，其中包含子组件，子组件接收一个函数作为props；通常而言，如果父组件更新了，子组件也会执行更新；但是大多数场景下，更新是没有必要的，我们可以借助useCallback来返回函数，然后把这个函数作为props传递给子组件；由于useCallback返回的函数实例在第二个参数，也就是依赖项未发生变化时不会被重新创建，因此，每次父组件的更新不会导致子组件内部的函数实例发生变化。\n这样，子组件就能避免不必要的更新。\n\n**useCallback一般要配合React.memo来使用：**\nreact的Hooks组件对props的浅比较是在memo里面比较的（类组件是在shouldComponentUpdate里面），如果没有memo，那么你使用useCallback就没啥意义，反而浪费性能（因为useCallback来包裹函数也是需要开销的）。因为子组件还是会重新渲染。\n\n```js\nfunction APP() {\n\n    const [value, setValue] = useState(123)\n    const [otherValue, setOtherValue] = useState(999)\n\n    const changeValue = useCallback(() => {\n        setValue(value => value+1)\n    }, [])\n    \n    console.log('APP');\n\n    return (\n        <div>\n            <div>与Message渲染无关的数据==={otherValue}</div>\n            <br />\n            <button onClick={() => setOtherValue(value => value-=5)}>改变无关的数据</button>\n            <br />\n            <br />\n            <Message value={value} changeValue={changeValue} />\n        </div>\n    )\n}\n```\n```js\nconst Message = memo(\n    function Message({value, changeValue}) {\n    \n        console.log('Message');\n    \n        return (\n            <div>\n                <button onClick={changeValue}>改变有关数据</button>\n                <p>与Message渲染有关的数据{value}</p>\n            </div>\n        )\n    }\n)\n```\n### React.memo与useMemo的区别和联系\n在React的组件中，如果子组件没有被React.memo包裹，或者没有使用useMemo来处理props传递参数，那么**当父组件的任何值更新时，整个组件都将会进行重新渲染**，包括父组件下面的所有子组件。多数情况下对于子组件来说没有必要。毕竟不是父组件的每一次更新都需要修改子组件的值，而频繁的更新却会导致不需要更新的子组件被迫更新，造成资源的浪费。\n针对上述问题，React提供了React.memo和useMemo。\n\n#### React.memo：\nReact.memo()本质是一个高阶组件（HOC），高阶组件和高阶函数类似，高阶函数是接收一个函数，然后经过一些判断和处理后再返回这个函数。\n对应到高阶组件，就是接收一个组件，然后经过一些判断和处理后再返回这个组件。\n再回归到React.memo(), 这个高阶组件接收一个组件A作为参数并返回一个组件B，如果组件B的props没有改变，则组件B会阻止组件A重新渲染。A和B本质上是同一个组件，但A是否进行重新渲染，需要由Props是否发生改变来决定。\n```js\n// 父组件\nimport {useMemo, useState} from \"react\";\nimport ReactMemoChild from \"./ReactMemoChild\";\n\nexport const ReactMemoFather = () => {\n    const [count, setCount] = useState(0);\n    return (\n        <>\n            <p>按钮点击次数：{count}</p>\n            <ReactMemoChild/>\n            <button onClick={() => setCount(n => n + 1)}>按钮</button>\n        </>\n    );\n}\n```\n```js\nimport React, {useMemo, useRef} from \"react\";\n\nfunction ReactMemoChild() {\n    const ref = useRef(0);\n    return (\n        <>\n            <p>页面渲染次数：{ref.current++}</p>\n         </>\n    );\n}\n\nexport default React.memo(ReactMemoChild);\n```\n#### useMemo：\nReact提供的一个hook函数，他不是高阶组件。\n使用useMemo定义的变量，只会在useMemo的第二个依赖参数发生修改时才会发生修改。\n使用useMemo时，应保证第一个参数函数里所使用的变量都出现在第二个依赖参数数组中，这样可以避免一些额外的错误。\n```js\n// 父组件\nimport {useState, useRef, useMemo} from \"react\";\nimport UseMemoChild from \"./UseMemoChild\";\n\nexport default function UseMemoFather() {\n    const [count, setCount] = useState(0);\n    const [times, setTimes] = useState(0);\n    const useMemoRef = useRef(0);\n\n    const incrementUseMemoRef = () => useMemoRef.current++;\n\n    const memoizedValue = useMemo(() => incrementUseMemoRef(), [times]);\n\n    return (\n        <div>\n            <div>\n                <p>按钮点击次数：{count}</p>\n                <button onClick={() => setCount(count + 1)}>按钮</button>\n\n                <button onClick={() => setTimes(times + 1)}>\n                    Force render\n                </button>\n\n                <UseMemoChild memoizedValue={memoizedValue}/>\n            </div>\n        </div>\n    );\n}\n\n```\n```js\n// 子组件\ninterface PropType{\n    memoizedValue: number\n}\n\nfunction UseMemoChild({memoizedValue}: PropType) {\n    return (\n        <div className=\"mt-3\">\n            <p className=\"dark:text-white max-w-md\">\n                I'll only re-render when you click <span className=\"font-bold text-indigo-400\">Force render.</span>\n            </p>\n            <p className=\"dark:text-white\">I've now rendered: <span className=\"text-green-400\">{memoizedValue} time(s)</span> </p>\n        </div>\n    );\n}\nexport default UseMemoChild;\n\n```\n\n![image-20230330145149288](/images/image-20230330145149288.png)","source":"_posts/cxy/framework/react/react-hooks.md","raw":"---\ntitle: react-hooks\ndate: 2023-03-14 17:11:14\ntags:\n---\n## 一、基本介绍\nreact是基于数据是不可变的（每次setState都会返回一个新数据），这也是为什么需要setState()来更新数据而不能使用像vue的this.state = newState的形式更新数据的原因，其实你用this.state=newState确实可以改数据，但是react不知道数据变了。\n\n## 二、useMemo、useCallback的执行时机对比\n\nuseMemo和useCallback都会在**组件第一次渲染的时候执行**，之后会在其**依赖的变量发生改变时再次执行**；并且这两个`hooks`都返回缓存的值，`useMemo`返回**缓存的变量**，`useCallback`返回**缓存的函数**。\n\n## 三、useEffect 和 useMemo 区别\nuseEffect是在DOM改变之后触发，useMemo在DOM渲染之前就触发\nuseMemo是在DOM更新前触发的，就像官方所说的，类比生命周期就是[shouldComponentUpdate]\nuseEffect可以帮助我们在DOM更新完成后执行某些副作用操作，如数据获取，设置订阅以及手动更改 React 组件中的 DOM 等\n不要在这个useMemo函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 useEffect 的适用范畴，而不是 useMemo\n在useMemo中使用setState你会发现会产生死循环，并且会有警告，因为useMemo是在渲染中进行的，你在其中操作DOM后，又会导致触发memo\n\n## 三、useMemo\n可以把它理解成vue里面的computed，是一种数据的缓存，而这个缓存依赖后面的第二个参数数组。\n\n如果页面上展示的数据是通过某些state计算得来的一个数据，那么你每次这个组件里面无关的state变化引起的重新渲染，都会导致这个数据重新计算。\n\n这时候就需要用`useMemo(()=>{}, [])`去包裹你的计算的方法体，这样那些无关的`state`改变引起的渲染不会重新计算这个方法体，而是返回之前计算的结果，达到一种缓存的效果。\n```js\nimport \"./App.css\";\nimport React, { useState, useMemo } from \"react\";\n```\n```js\nfunction renderColor() {\n  // 获得随机颜色\n  const r = Math.floor(Math.random() * 255);\n  const g = Math.floor(Math.random() * 255);\n  const b = Math.floor(Math.random() * 255);\n  const a = Math.random();\n  const color = `rgba(${r},${g},${b},${a})`;\n  return color;\n}\n```\n```js\nfunction App() {\n  const [n, setN] = useState(0);\n  const [color, setColor] = useState(\"\");\n  const styleSheet = {\n    backgroundColor: renderColor(),\n  };\n  // 使用useMemo创建有缓存的组件\n  // 1. useMemo相当于vue computed\n  // 2. useMemo必须有return的内容，所以在模板中调用是直接写 { TestComponent }\n  // 3. 只有当color变化时，才会触发 TestComponent 的更新\n  const TestComponent = useMemo(() => {\n    console.log(\"子组件也更新了\");\n    return (\n      <div className=\"button\" style={styleSheet}>\n        {color}\n      </div>\n    );\n  }, [color]);\n  const inputHandlerColor = (event) => {\n    setColor(event.target.value);\n    console.log(\"color\");\n  };\n  const inputHandler = (event) => {\n    setN(event.target.value);\n    console.log(\"n\");\n  };\n  return (\n    <div>\n      <input\n        type=\"text\"\n        className=\"input_border\"\n        onChange={(event) => {\n          inputHandler(event);\n        }}\n      />\n      <input\n        type=\"text\"\n        className=\"input_border\"\n        onChange={(event) => {\n          inputHandlerColor(event);\n        }}\n      />\n      <div className=\"button\">{n}</div>\n      {TestComponent}\n    </div>\n  );\n}\nexport default App;\n```\n\n## 四、useCallback\nuseCallback跟useMemo比较类似，但它返回的是缓存的函数。\n\n使用场景：有一个父组件，其中包含子组件，子组件接收一个函数作为props；通常而言，如果父组件更新了，子组件也会执行更新；但是大多数场景下，更新是没有必要的，我们可以借助useCallback来返回函数，然后把这个函数作为props传递给子组件；由于useCallback返回的函数实例在第二个参数，也就是依赖项未发生变化时不会被重新创建，因此，每次父组件的更新不会导致子组件内部的函数实例发生变化。\n这样，子组件就能避免不必要的更新。\n\n**useCallback一般要配合React.memo来使用：**\nreact的Hooks组件对props的浅比较是在memo里面比较的（类组件是在shouldComponentUpdate里面），如果没有memo，那么你使用useCallback就没啥意义，反而浪费性能（因为useCallback来包裹函数也是需要开销的）。因为子组件还是会重新渲染。\n\n```js\nfunction APP() {\n\n    const [value, setValue] = useState(123)\n    const [otherValue, setOtherValue] = useState(999)\n\n    const changeValue = useCallback(() => {\n        setValue(value => value+1)\n    }, [])\n    \n    console.log('APP');\n\n    return (\n        <div>\n            <div>与Message渲染无关的数据==={otherValue}</div>\n            <br />\n            <button onClick={() => setOtherValue(value => value-=5)}>改变无关的数据</button>\n            <br />\n            <br />\n            <Message value={value} changeValue={changeValue} />\n        </div>\n    )\n}\n```\n```js\nconst Message = memo(\n    function Message({value, changeValue}) {\n    \n        console.log('Message');\n    \n        return (\n            <div>\n                <button onClick={changeValue}>改变有关数据</button>\n                <p>与Message渲染有关的数据{value}</p>\n            </div>\n        )\n    }\n)\n```\n### React.memo与useMemo的区别和联系\n在React的组件中，如果子组件没有被React.memo包裹，或者没有使用useMemo来处理props传递参数，那么**当父组件的任何值更新时，整个组件都将会进行重新渲染**，包括父组件下面的所有子组件。多数情况下对于子组件来说没有必要。毕竟不是父组件的每一次更新都需要修改子组件的值，而频繁的更新却会导致不需要更新的子组件被迫更新，造成资源的浪费。\n针对上述问题，React提供了React.memo和useMemo。\n\n#### React.memo：\nReact.memo()本质是一个高阶组件（HOC），高阶组件和高阶函数类似，高阶函数是接收一个函数，然后经过一些判断和处理后再返回这个函数。\n对应到高阶组件，就是接收一个组件，然后经过一些判断和处理后再返回这个组件。\n再回归到React.memo(), 这个高阶组件接收一个组件A作为参数并返回一个组件B，如果组件B的props没有改变，则组件B会阻止组件A重新渲染。A和B本质上是同一个组件，但A是否进行重新渲染，需要由Props是否发生改变来决定。\n```js\n// 父组件\nimport {useMemo, useState} from \"react\";\nimport ReactMemoChild from \"./ReactMemoChild\";\n\nexport const ReactMemoFather = () => {\n    const [count, setCount] = useState(0);\n    return (\n        <>\n            <p>按钮点击次数：{count}</p>\n            <ReactMemoChild/>\n            <button onClick={() => setCount(n => n + 1)}>按钮</button>\n        </>\n    );\n}\n```\n```js\nimport React, {useMemo, useRef} from \"react\";\n\nfunction ReactMemoChild() {\n    const ref = useRef(0);\n    return (\n        <>\n            <p>页面渲染次数：{ref.current++}</p>\n         </>\n    );\n}\n\nexport default React.memo(ReactMemoChild);\n```\n#### useMemo：\nReact提供的一个hook函数，他不是高阶组件。\n使用useMemo定义的变量，只会在useMemo的第二个依赖参数发生修改时才会发生修改。\n使用useMemo时，应保证第一个参数函数里所使用的变量都出现在第二个依赖参数数组中，这样可以避免一些额外的错误。\n```js\n// 父组件\nimport {useState, useRef, useMemo} from \"react\";\nimport UseMemoChild from \"./UseMemoChild\";\n\nexport default function UseMemoFather() {\n    const [count, setCount] = useState(0);\n    const [times, setTimes] = useState(0);\n    const useMemoRef = useRef(0);\n\n    const incrementUseMemoRef = () => useMemoRef.current++;\n\n    const memoizedValue = useMemo(() => incrementUseMemoRef(), [times]);\n\n    return (\n        <div>\n            <div>\n                <p>按钮点击次数：{count}</p>\n                <button onClick={() => setCount(count + 1)}>按钮</button>\n\n                <button onClick={() => setTimes(times + 1)}>\n                    Force render\n                </button>\n\n                <UseMemoChild memoizedValue={memoizedValue}/>\n            </div>\n        </div>\n    );\n}\n\n```\n```js\n// 子组件\ninterface PropType{\n    memoizedValue: number\n}\n\nfunction UseMemoChild({memoizedValue}: PropType) {\n    return (\n        <div className=\"mt-3\">\n            <p className=\"dark:text-white max-w-md\">\n                I'll only re-render when you click <span className=\"font-bold text-indigo-400\">Force render.</span>\n            </p>\n            <p className=\"dark:text-white\">I've now rendered: <span className=\"text-green-400\">{memoizedValue} time(s)</span> </p>\n        </div>\n    );\n}\nexport default UseMemoChild;\n\n```\n\n![image-20230330145149288](/images/image-20230330145149288.png)","slug":"cxy/framework/react/react-hooks","published":1,"updated":"2023-03-30T07:14:30.437Z","_id":"clf8224jo0000tewidf4a6gp3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、基本介绍\"><a href=\"#一、基本介绍\" class=\"headerlink\" title=\"一、基本介绍\"></a>一、基本介绍</h2><p>react是基于数据是不可变的（每次setState都会返回一个新数据），这也是为什么需要setState()来更新数据而不能使用像vue的this.state = newState的形式更新数据的原因，其实你用this.state=newState确实可以改数据，但是react不知道数据变了。</p>\n<h2 id=\"二、useMemo、useCallback的执行时机对比\"><a href=\"#二、useMemo、useCallback的执行时机对比\" class=\"headerlink\" title=\"二、useMemo、useCallback的执行时机对比\"></a>二、useMemo、useCallback的执行时机对比</h2><p>useMemo和useCallback都会在<strong>组件第一次渲染的时候执行</strong>，之后会在其<strong>依赖的变量发生改变时再次执行</strong>；并且这两个<code>hooks</code>都返回缓存的值，<code>useMemo</code>返回<strong>缓存的变量</strong>，<code>useCallback</code>返回<strong>缓存的函数</strong>。</p>\n<h2 id=\"三、useEffect-和-useMemo-区别\"><a href=\"#三、useEffect-和-useMemo-区别\" class=\"headerlink\" title=\"三、useEffect 和 useMemo 区别\"></a>三、useEffect 和 useMemo 区别</h2><p>useEffect是在DOM改变之后触发，useMemo在DOM渲染之前就触发<br>useMemo是在DOM更新前触发的，就像官方所说的，类比生命周期就是[shouldComponentUpdate]<br>useEffect可以帮助我们在DOM更新完成后执行某些副作用操作，如数据获取，设置订阅以及手动更改 React 组件中的 DOM 等<br>不要在这个useMemo函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 useEffect 的适用范畴，而不是 useMemo<br>在useMemo中使用setState你会发现会产生死循环，并且会有警告，因为useMemo是在渲染中进行的，你在其中操作DOM后，又会导致触发memo</p>\n<h2 id=\"三、useMemo\"><a href=\"#三、useMemo\" class=\"headerlink\" title=\"三、useMemo\"></a>三、useMemo</h2><p>可以把它理解成vue里面的computed，是一种数据的缓存，而这个缓存依赖后面的第二个参数数组。</p>\n<p>如果页面上展示的数据是通过某些state计算得来的一个数据，那么你每次这个组件里面无关的state变化引起的重新渲染，都会导致这个数据重新计算。</p>\n<p>这时候就需要用<code>useMemo(()=&gt;&#123;&#125;, [])</code>去包裹你的计算的方法体，这样那些无关的<code>state</code>改变引起的渲染不会重新计算这个方法体，而是返回之前计算的结果，达到一种缓存的效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState, useMemo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderColor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获得随机颜色</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> r = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> g = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> color = <span class=\"string\">`rgba(<span class=\"subst\">$&#123;r&#125;</span>,<span class=\"subst\">$&#123;g&#125;</span>,<span class=\"subst\">$&#123;b&#125;</span>,<span class=\"subst\">$&#123;a&#125;</span>)`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [n, setN] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [color, setColor] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> styleSheet = &#123;</span><br><span class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"title function_\">renderColor</span>(),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 使用useMemo创建有缓存的组件</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. useMemo相当于vue computed</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. useMemo必须有return的内容，所以在模板中调用是直接写 &#123; TestComponent &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 只有当color变化时，才会触发 TestComponent 的更新</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">TestComponent</span> = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;子组件也更新了&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styleSheet&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;color&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;, [color]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">inputHandlerColor</span> = (<span class=\"params\">event</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setColor</span>(event.<span class=\"property\">target</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;color&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">inputHandler</span> = (<span class=\"params\">event</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setN</span>(event.<span class=\"property\">target</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;n&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;input_border&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(event)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          inputHandler(event);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;input_border&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(event)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          inputHandlerColor(event);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>&#123;n&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;TestComponent&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、useCallback\"><a href=\"#四、useCallback\" class=\"headerlink\" title=\"四、useCallback\"></a>四、useCallback</h2><p>useCallback跟useMemo比较类似，但它返回的是缓存的函数。</p>\n<p>使用场景：有一个父组件，其中包含子组件，子组件接收一个函数作为props；通常而言，如果父组件更新了，子组件也会执行更新；但是大多数场景下，更新是没有必要的，我们可以借助useCallback来返回函数，然后把这个函数作为props传递给子组件；由于useCallback返回的函数实例在第二个参数，也就是依赖项未发生变化时不会被重新创建，因此，每次父组件的更新不会导致子组件内部的函数实例发生变化。<br>这样，子组件就能避免不必要的更新。</p>\n<p><strong>useCallback一般要配合React.memo来使用：</strong><br>react的Hooks组件对props的浅比较是在memo里面比较的（类组件是在shouldComponentUpdate里面），如果没有memo，那么你使用useCallback就没啥意义，反而浪费性能（因为useCallback来包裹函数也是需要开销的）。因为子组件还是会重新渲染。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">APP</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [value, setValue] = <span class=\"title function_\">useState</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [otherValue, setOtherValue] = <span class=\"title function_\">useState</span>(<span class=\"number\">999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeValue = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setValue</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value+<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;APP&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>与Message渲染无关的数据===&#123;otherValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setOtherValue(value =&gt; value-=5)&#125;&gt;改变无关的数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Message</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span> <span class=\"attr\">changeValue</span>=<span class=\"string\">&#123;changeValue&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Message</span> = <span class=\"title function_\">memo</span>(</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Message</span>(<span class=\"params\">&#123;value, changeValue&#125;</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Message&#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;changeValue&#125;</span>&gt;</span>改变有关数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>与Message渲染有关的数据&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"React-memo与useMemo的区别和联系\"><a href=\"#React-memo与useMemo的区别和联系\" class=\"headerlink\" title=\"React.memo与useMemo的区别和联系\"></a>React.memo与useMemo的区别和联系</h3><p>在React的组件中，如果子组件没有被React.memo包裹，或者没有使用useMemo来处理props传递参数，那么<strong>当父组件的任何值更新时，整个组件都将会进行重新渲染</strong>，包括父组件下面的所有子组件。多数情况下对于子组件来说没有必要。毕竟不是父组件的每一次更新都需要修改子组件的值，而频繁的更新却会导致不需要更新的子组件被迫更新，造成资源的浪费。<br>针对上述问题，React提供了React.memo和useMemo。</p>\n<h4 id=\"React-memo：\"><a href=\"#React-memo：\" class=\"headerlink\" title=\"React.memo：\"></a>React.memo：</h4><p>React.memo()本质是一个高阶组件（HOC），高阶组件和高阶函数类似，高阶函数是接收一个函数，然后经过一些判断和处理后再返回这个函数。<br>对应到高阶组件，就是接收一个组件，然后经过一些判断和处理后再返回这个组件。<br>再回归到React.memo(), 这个高阶组件接收一个组件A作为参数并返回一个组件B，如果组件B的props没有改变，则组件B会阻止组件A重新渲染。A和B本质上是同一个组件，但A是否进行重新渲染，需要由Props是否发生改变来决定。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;useMemo, useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactMemoChild</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactMemoChild&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">ReactMemoFather</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>按钮点击次数：&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">ReactMemoChild</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(n =&gt; n + 1)&#125;&gt;按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;useMemo, useRef&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactMemoChild</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = <span class=\"title function_\">useRef</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>页面渲染次数：&#123;ref.current++&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"title class_\">ReactMemoChild</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"useMemo：\"><a href=\"#useMemo：\" class=\"headerlink\" title=\"useMemo：\"></a>useMemo：</h4><p>React提供的一个hook函数，他不是高阶组件。<br>使用useMemo定义的变量，只会在useMemo的第二个依赖参数发生修改时才会发生修改。<br>使用useMemo时，应保证第一个参数函数里所使用的变量都出现在第二个依赖参数数组中，这样可以避免一些额外的错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;useState, useRef, useMemo&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UseMemoChild</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./UseMemoChild&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">UseMemoFather</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [times, setTimes] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> useMemoRef = <span class=\"title function_\">useRef</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">incrementUseMemoRef</span> = (<span class=\"params\"></span>) =&gt; useMemoRef.<span class=\"property\">current</span>++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> memoizedValue = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">incrementUseMemoRef</span>(), [times]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>按钮点击次数：&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setTimes(times + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    Force render</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">UseMemoChild</span> <span class=\"attr\">memoizedValue</span>=<span class=\"string\">&#123;memoizedValue&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">interface <span class=\"title class_\">PropType</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">memoizedValue</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">UseMemoChild</span>(<span class=\"params\">&#123;memoizedValue&#125;: PropType</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;dark:text-white max-w-md&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                I&#x27;ll only re-render when you click <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;font-bold text-indigo-400&quot;</span>&gt;</span>Force render.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;dark:text-white&quot;</span>&gt;</span>I&#x27;ve now rendered: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-green-400&quot;</span>&gt;</span>&#123;memoizedValue&#125; time(s)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseMemoChild</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/image-20230330145149288.png\" alt=\"image-20230330145149288\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、基本介绍\"><a href=\"#一、基本介绍\" class=\"headerlink\" title=\"一、基本介绍\"></a>一、基本介绍</h2><p>react是基于数据是不可变的（每次setState都会返回一个新数据），这也是为什么需要setState()来更新数据而不能使用像vue的this.state = newState的形式更新数据的原因，其实你用this.state=newState确实可以改数据，但是react不知道数据变了。</p>\n<h2 id=\"二、useMemo、useCallback的执行时机对比\"><a href=\"#二、useMemo、useCallback的执行时机对比\" class=\"headerlink\" title=\"二、useMemo、useCallback的执行时机对比\"></a>二、useMemo、useCallback的执行时机对比</h2><p>useMemo和useCallback都会在<strong>组件第一次渲染的时候执行</strong>，之后会在其<strong>依赖的变量发生改变时再次执行</strong>；并且这两个<code>hooks</code>都返回缓存的值，<code>useMemo</code>返回<strong>缓存的变量</strong>，<code>useCallback</code>返回<strong>缓存的函数</strong>。</p>\n<h2 id=\"三、useEffect-和-useMemo-区别\"><a href=\"#三、useEffect-和-useMemo-区别\" class=\"headerlink\" title=\"三、useEffect 和 useMemo 区别\"></a>三、useEffect 和 useMemo 区别</h2><p>useEffect是在DOM改变之后触发，useMemo在DOM渲染之前就触发<br>useMemo是在DOM更新前触发的，就像官方所说的，类比生命周期就是[shouldComponentUpdate]<br>useEffect可以帮助我们在DOM更新完成后执行某些副作用操作，如数据获取，设置订阅以及手动更改 React 组件中的 DOM 等<br>不要在这个useMemo函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 useEffect 的适用范畴，而不是 useMemo<br>在useMemo中使用setState你会发现会产生死循环，并且会有警告，因为useMemo是在渲染中进行的，你在其中操作DOM后，又会导致触发memo</p>\n<h2 id=\"三、useMemo\"><a href=\"#三、useMemo\" class=\"headerlink\" title=\"三、useMemo\"></a>三、useMemo</h2><p>可以把它理解成vue里面的computed，是一种数据的缓存，而这个缓存依赖后面的第二个参数数组。</p>\n<p>如果页面上展示的数据是通过某些state计算得来的一个数据，那么你每次这个组件里面无关的state变化引起的重新渲染，都会导致这个数据重新计算。</p>\n<p>这时候就需要用<code>useMemo(()=&gt;&#123;&#125;, [])</code>去包裹你的计算的方法体，这样那些无关的<code>state</code>改变引起的渲染不会重新计算这个方法体，而是返回之前计算的结果，达到一种缓存的效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState, useMemo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderColor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获得随机颜色</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> r = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> g = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> color = <span class=\"string\">`rgba(<span class=\"subst\">$&#123;r&#125;</span>,<span class=\"subst\">$&#123;g&#125;</span>,<span class=\"subst\">$&#123;b&#125;</span>,<span class=\"subst\">$&#123;a&#125;</span>)`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [n, setN] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [color, setColor] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> styleSheet = &#123;</span><br><span class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"title function_\">renderColor</span>(),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 使用useMemo创建有缓存的组件</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. useMemo相当于vue computed</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. useMemo必须有return的内容，所以在模板中调用是直接写 &#123; TestComponent &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 只有当color变化时，才会触发 TestComponent 的更新</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">TestComponent</span> = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;子组件也更新了&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styleSheet&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;color&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;, [color]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">inputHandlerColor</span> = (<span class=\"params\">event</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setColor</span>(event.<span class=\"property\">target</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;color&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">inputHandler</span> = (<span class=\"params\">event</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setN</span>(event.<span class=\"property\">target</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;n&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;input_border&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(event)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          inputHandler(event);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;input_border&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(event)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          inputHandlerColor(event);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>&#123;n&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;TestComponent&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、useCallback\"><a href=\"#四、useCallback\" class=\"headerlink\" title=\"四、useCallback\"></a>四、useCallback</h2><p>useCallback跟useMemo比较类似，但它返回的是缓存的函数。</p>\n<p>使用场景：有一个父组件，其中包含子组件，子组件接收一个函数作为props；通常而言，如果父组件更新了，子组件也会执行更新；但是大多数场景下，更新是没有必要的，我们可以借助useCallback来返回函数，然后把这个函数作为props传递给子组件；由于useCallback返回的函数实例在第二个参数，也就是依赖项未发生变化时不会被重新创建，因此，每次父组件的更新不会导致子组件内部的函数实例发生变化。<br>这样，子组件就能避免不必要的更新。</p>\n<p><strong>useCallback一般要配合React.memo来使用：</strong><br>react的Hooks组件对props的浅比较是在memo里面比较的（类组件是在shouldComponentUpdate里面），如果没有memo，那么你使用useCallback就没啥意义，反而浪费性能（因为useCallback来包裹函数也是需要开销的）。因为子组件还是会重新渲染。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">APP</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> [value, setValue] = <span class=\"title function_\">useState</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [otherValue, setOtherValue] = <span class=\"title function_\">useState</span>(<span class=\"number\">999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeValue = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setValue</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value+<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;APP&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>与Message渲染无关的数据===&#123;otherValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setOtherValue(value =&gt; value-=5)&#125;&gt;改变无关的数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Message</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span> <span class=\"attr\">changeValue</span>=<span class=\"string\">&#123;changeValue&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Message</span> = <span class=\"title function_\">memo</span>(</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Message</span>(<span class=\"params\">&#123;value, changeValue&#125;</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Message&#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;changeValue&#125;</span>&gt;</span>改变有关数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>与Message渲染有关的数据&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"React-memo与useMemo的区别和联系\"><a href=\"#React-memo与useMemo的区别和联系\" class=\"headerlink\" title=\"React.memo与useMemo的区别和联系\"></a>React.memo与useMemo的区别和联系</h3><p>在React的组件中，如果子组件没有被React.memo包裹，或者没有使用useMemo来处理props传递参数，那么<strong>当父组件的任何值更新时，整个组件都将会进行重新渲染</strong>，包括父组件下面的所有子组件。多数情况下对于子组件来说没有必要。毕竟不是父组件的每一次更新都需要修改子组件的值，而频繁的更新却会导致不需要更新的子组件被迫更新，造成资源的浪费。<br>针对上述问题，React提供了React.memo和useMemo。</p>\n<h4 id=\"React-memo：\"><a href=\"#React-memo：\" class=\"headerlink\" title=\"React.memo：\"></a>React.memo：</h4><p>React.memo()本质是一个高阶组件（HOC），高阶组件和高阶函数类似，高阶函数是接收一个函数，然后经过一些判断和处理后再返回这个函数。<br>对应到高阶组件，就是接收一个组件，然后经过一些判断和处理后再返回这个组件。<br>再回归到React.memo(), 这个高阶组件接收一个组件A作为参数并返回一个组件B，如果组件B的props没有改变，则组件B会阻止组件A重新渲染。A和B本质上是同一个组件，但A是否进行重新渲染，需要由Props是否发生改变来决定。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;useMemo, useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactMemoChild</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactMemoChild&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">ReactMemoFather</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>按钮点击次数：&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">ReactMemoChild</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(n =&gt; n + 1)&#125;&gt;按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;useMemo, useRef&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactMemoChild</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = <span class=\"title function_\">useRef</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>页面渲染次数：&#123;ref.current++&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"title class_\">ReactMemoChild</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"useMemo：\"><a href=\"#useMemo：\" class=\"headerlink\" title=\"useMemo：\"></a>useMemo：</h4><p>React提供的一个hook函数，他不是高阶组件。<br>使用useMemo定义的变量，只会在useMemo的第二个依赖参数发生修改时才会发生修改。<br>使用useMemo时，应保证第一个参数函数里所使用的变量都出现在第二个依赖参数数组中，这样可以避免一些额外的错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;useState, useRef, useMemo&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UseMemoChild</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./UseMemoChild&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">UseMemoFather</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [times, setTimes] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> useMemoRef = <span class=\"title function_\">useRef</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">incrementUseMemoRef</span> = (<span class=\"params\"></span>) =&gt; useMemoRef.<span class=\"property\">current</span>++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> memoizedValue = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">incrementUseMemoRef</span>(), [times]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>按钮点击次数：&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setTimes(times + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    Force render</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">UseMemoChild</span> <span class=\"attr\">memoizedValue</span>=<span class=\"string\">&#123;memoizedValue&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">interface <span class=\"title class_\">PropType</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">memoizedValue</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">UseMemoChild</span>(<span class=\"params\">&#123;memoizedValue&#125;: PropType</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;dark:text-white max-w-md&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                I&#x27;ll only re-render when you click <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;font-bold text-indigo-400&quot;</span>&gt;</span>Force render.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;dark:text-white&quot;</span>&gt;</span>I&#x27;ve now rendered: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-green-400&quot;</span>&gt;</span>&#123;memoizedValue&#125; time(s)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UseMemoChild</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/image-20230330145149288.png\" alt=\"image-20230330145149288\"></p>\n"},{"title":"react18基础知识梳理","date":"2021-03-25T05:03:49.000Z","_content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 思维导图\n\n![](https://upload-images.jianshu.io/upload_images/20892169-c7559513f639bb9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 一、jsx\n### jsx中使用js表达式\n在jsx中js表达式是用`{}`括起来的，和vue一样。可以调用的有\n1.常规变量\n2.原生js\n3.三元运算符\n```javascript\nconst name=\"myname\"\nconst getAge = ()=>{\n\treturn 18\n}\nconst flag = true\n\nfunction App() {\n  return (\n    <div className=\"wrapper-box\">\n        <div className=\"content-box\">\n          {name}\n        </div>\n        <div className=\"content-box\">\n          {getAge()}\n        </div>\n        <div className=\"content-box\">\n          {flag ? 1:0}\n        </div>\n    </div>\n)\n```\n\n### 列表渲染：map\n使用Object.keys去获取obj列表，再用map循环\n```javascript\n        <div className=\"wrapper-obj-list\">\n            {Object.keys(obj).map((key)=><div key={key}>\n              {obj[key]}\n            </div>)}\n        </div>\n```\n### style: 使用`\\{\\{\\}\\}`\n```javascript\n<div className=\"wrapper-style\" style={{\n          color: 'red',\n          backgroundColor:'blue'\n        }}>sdfsdfsdfsdfsdfdsfsdfsdfsdfdsfdsfsdfdsfsdfsdfsdfdsfsdfsdfsdfdsfdsfsdfdsfsdfdsfsdfsdfsdfdsfdsfsdfdsf</div>\n```\n### 条件渲染：三元表达式\n模版太长时，可以使用括号包裹，并可以换行。\n```javascript\nconst spanflag = true\n```\n```javascript\n<div>{spanflag?(\n          <span>span内的内容</span>\n          ):null}\n        </div>\n```\n### 模板精简\n将重合的部分提出放入函数中，在App()中可以调用\n```javascript\nconst getHTag = (n)=>{\n  if(n == 1) {\n    return <h2>数字是{n}</h2>\n  } else if (n == 2) {\n    return <h2>数字是{n}</h2>\n  } else if (n == 3) {\n    return <h2>数字是{n}</h2>\n  } else {\n    return <h2>数字不是123</h2>\n  }\n}\nfunction App() {\n  return (\n    <div>\n      {getHTag(3)}\n    </div>\n  );\n}\n```\n### 其他注意事项\n1. jsx标签必须闭合，只有一个根节点\n2. jsx标签换行，必须加小括号\n3. jsx属性名采用驼峰命名法，如\n`class->className`\n`for->htmlfor`\n\n## 二、组件\n### 1. 函数组件\n+ 组件名称必须首字母大写\n+ 组件必须有返回值，且返回值为jsx模板，什么jsx都不返回则为null\n+ 使用函数名作为组件标签名。\n```javascript\nimport \"./App.css\";\n\nfunction DivTemplate() {\n  return (\n    <div>\n      <span>函数式组件</span>\n    </div>\n  );\n}\nfunction App() {\n  return <DivTemplate />;\n}\n\nexport default App;\n\n```\n### 2. 类组件\n+ 类组件类组件中必须使用render()方法去返回一个jsx结构，render方法必须要有返回值\n+ 类组件必须继承React.Component，并引入react\n```javascript\nimport \"./App.css\";\nimport React from \"react\";\n\nclass DivTemplate extends React.Component {\n  render() {\n    return <div>这是一个类组件</div>;\n  }\n}\nfunction App() {\n  return <DivTemplate />;\n}\n\nexport default App;\n\n```\n### 3. 事件绑定\n+ 事件格式为on+事件，函数组件可以直接调用方法，类组件调用用this.xxx方法\n+ 传递自定义参数的话，如果同时需要使用事件对象e和自定义参数的话，需要在外层套一层箭头函数传入\n```\n// 函数组件绑定时间\nfunction DivTemplateF() {\n  const clickHandler = (e, msg) => {\n    console.log(\"函数组件中的点击事件被触发了\");\n    console.log(`函数组件中：${e.target},${msg}`);\n  };\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"60px\",\n        lineHeight: \"60px\",\n        backgroundColor: \"#00ffff\",\n        textAlign: \"center\",\n      }}\n      onClick={(e) => {\n        clickHandler(e, \"this is msg\");\n      }}\n    >\n      点击触发函数组件事件\n    </div>\n  );\n}\n```\n\n```javascript\n// 类组件绑定事件\nclass DivTemplateC extends React.Component {\n  clickHandler(e, str) {\n    console.log(\"类组件绑定事件被触发了\");\n    console.log(`类组件中：${e.target},${str}`);\n  }\n  render() {\n    return (\n      <div\n        style={{\n          width: \"100%\",\n          height: \"60px\",\n          lineHeight: \"60px\",\n          backgroundColor: \"#00ffff\",\n          textAlign: \"center\",\n        }}\n        onClick={(e) => {\n          this.clickHandler(e, \"this is a msg\");\n        }}\n      >\n        点击触发类组件绑定事件\n      </div>\n    );\n  }\n}\n```\n## 三、组件状态\n### 1. 类组件中数据驱动视图的基本写法\n在`react hook`出来之前，函数组件是没有状态的，所以这里统一通过类组件来讲解。\n现在，**类组件**已经不太常用了\n+ 使用state，修改state通过setState实现，setState通过继承而来\n+ this有指向问题，要当心。在指定onClick中的方法时，必须要用this.xxx，如果没有传，则为undefined\n```javascript\nclass DivTemplate extends React.Component {\n  state = {\n    name: \"state name\",\n  };\n  clickHandler(e) {\n    this.setState({\n      name: \"state name is changed\",\n    });\n  }\n  render() {\n    return (\n      <div\n        className=\"button\"\n        onClick={(e) => {\n          this.clickHandler(e);\n        }}\n      >\n        {this.state.name}\n      </div>\n    );\n  }\n}\n```\n### 2. react的状态不可变\n不要直接去修改state，修改数组和对象要重新使用setState去整体赋值\n\n## 四、表单处理（input）\n使用react处理表单，一般有两种方式\n1. 受控组件\n2. 非受控组件（不常用）\n\n### 1. 受控表单组件\n> 受控组件就是`input框可以被react组件状态控制`的组件，可以实现双向绑定\n\n**双向绑定的步骤**\n1. input绑定onChange或onInput事件\n2. value指定某个变量\n3. 事件在类中写好，然后在事件中使用setState去将input的value赋值给变量\n\n```javascript\nclass DivTemplate extends React.Component {\n  state = {\n    message: \"this is a push\",\n  };\n  inputChange = (e) => {\n    console.log(\"input changed!\");\n    this.setState({\n      message: e.target.value,\n    });\n  };\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          value={this.state.message}\n          onInput={(e) => {\n            this.inputChange(e);\n          }}\n        />\n        <span>{this.state.message}</span>\n      </div>\n    );\n  }\n}\n```\n### 2. 非受控组件\n> 组件的状态和表单控件状态不同步(只是表单控件的初值和组件的`state`一致)。没有双向绑定\n使用createRef\n\n```javascript\nimport React, { createRef } from \"react\";\n\nclass DivTemplate extends React.Component {\n  msgRef = createRef();\n  clickHandler(e) {\n    console.log(this.msgRef.current.value);\n  }\n  render() {\n    return (\n      <div>\n        <input type=\"text\" className=\"input_border\" ref={this.msgRef} />\n        <div\n          className=\"button\"\n          onClick={(e) => {\n            this.clickHandler(e);\n          }}\n        >\n          点击获取input的value内容\n        </div>\n      </div>\n    );\n  }\n}\n```\n## 五、组件通信\n### 1. 父子组件通信\n函数子组件通过参数`props`，类子组件通过`this.props`，函数组件可以通过参数解构接收， v也可以通过props接收的。\n父组件上定义传入子组件的变量\n\n**`props`：**\n**1. 只能单向，不能反过来修改。**\n**2. 可以解构赋值**\n\n如下，现在父组件的`state`种有一个`message`变量，想传入到子组件中 \n父组件App.js：\n```javascript\nclass App extends React.Component {\n  state = {\n    message: \"this is message\",\n  };\n  render() {\n    return (\n      <div>\n        <SonC msg={this.state.message}></SonC>\n        <SonF msg={this.state.message}></SonF>\n      </div>\n    );\n  }\n}\n```\n子组件SonF（函数组件）\n```javascript\nfunction SonF(props) {\n  // props是一个对象，里面存着通过父组件传入的所有数据\n  return (\n    <div>\n      函数子组件：<span>{props.msg}</span>\n    </div>\n  );\n}\n```\n子组件SonC（类组件）\n```javascript\nclass SonC extends React.Component {\n  render() {\n    return (\n      <div>\n        类子组件：<span>{this.props.msg}</span>\n      </div>\n    );\n  }\n}\n\n```\n### 2. 通过子组件传递给父组件\n**原理：子组件调用父组件传递过来的函数，并且将想要传递的数据当成函数的实参**\n\n不管是类组件或是函数组件都是以下步骤：\n>1. 在父组件建立函数，传入子组件中\n>2. 子组件用props接收父组件的函数，在函数中传递参数，然后在模板中执行函数\n>3. 父组件形参接收子组件的传值即可。\n\n以类组件举例：\n```javascript\nclass Son extends React.Component {\n  getSonMsg = this.props.getSonMsg;\n  render() {\n    return (\n      <div>\n        <div\n          className=\"button\"\n          onClick={(str) => {\n            this.getSonMsg(\"aaaaaaa\");\n          }}\n        >\n          点击\n        </div>\n      </div>\n    );\n  }\n}\n```\nApp.js中：\n```javascript\nclass App extends React.Component {\n  state = {\n    messageFromSon: \"\",\n  };\n  getSonMsg = (str) => {\n    this.setState({ messageFromSon: str });\n  };\n  render() {\n    return (\n      <div>\n        <Son getSonMsg={this.getSonMsg}></Son>\n        <span>从子组件中传过来的内容为：{this.state.messageFromSon}</span>\n      </div>\n    );\n  }\n}\n```\n### 3.兄弟组件通信\n不想写了，反正就是两兄弟会通过父组件，进行数据的传递。一个子组件将数据传给父组件，父组件再将数据props给另一个子组件。\n### 4.跨组件通信Context\n父组件像任意的子孙组件传值，可以使用Context。\n相当于vue的依赖传值。\n\n步骤：\n1. 新建一个组件，专门用来导出Provider和Consumer，然后让需要Provider和Consumer的组件引入该组件。不可以在需要的文件中直接用React.createContext去新建，因为在不同文件中生成的是不同实例。  \n\n根组件App.js\n```javascript\nimport Context from \"./ContextComponent.js\";\n\nclass App extends React.Component {\n  state = {\n    message: \"this is message\",\n  };\n  render() {\n    let message = this.state.message;\n    console.log(message);\n    return (\n      <Context.Provider value={message}>\n        <div className=\"app\">\n          <SonA />\n        </div>\n      </Context.Provider>\n    );\n  }\n}\n\n```\n需要引入的组件ContextComponent\n```javascript\nimport \"./App.css\";\nimport React from \"react\";\nimport { createContext } from \"react\";\n\nconst Context = createContext();\nconst { Provider, Consumer } = Context;\n\nexport default { Provider, Consumer };\n```\n中间组件SonA的内容\n```javascript\nimport \"./App.css\";\nimport React from \"react\";\nimport SonB from \"./SonB.js\";\n\nfunction SonA() {\n  return <SonB />;\n}\nexport default SonA;\n```\n\n子孙组件内容\n```javascript\nimport \"./App.css\";\nimport React from \"react\";\nimport Context from \"./ContextComponent.js\";\n\nfunction SonB() {\n  return <Context.Consumer>{(value) => <div>{value}</div>}</Context.Consumer>;\n}\n\nexport default SonB;\n```\n## 六、组件进阶\n### 1. children 属性（slot）\nchildren存在于props里面，所以可以通过解构赋值，也可以通过props.children去获取使用。\n表示该组件的子节点，只要组件内部有子节点，props中就有这个属性。\n类型包括：\n>1. 普通文本\n>2. 普通标签\n>3. jsx\n>4. 函数\n\n```javascript\nfunction ListItem({ children }) {\n  return (\n    <div>\n      ListItem:<div>{children}</div>\n    </div>\n  );\n}\nclass App extends React.Component {\n  render() {\n    return <ListItem>this is child</ListItem>;\n  }\n}\n```\n\n### 2. props校验\n有时候从父组件传过来的props，类型会不正确，比如子组件需要一个数组，而父组件传过来一个number，那么遍历就会出现问题。\n这种情况下，就需要props校验。\n相当于vue的\n\n```javascript\nprops: [\n  {\n      str: String\n      default () {\n        return ''\n      }\n  }\n]\n```\n支持类型：\n\n>1. 基础类型（array、bool、func、number、object、string）\n>2. react元素类型： element\n>3. 必填项： isRequired，也就是传属性时不能缺少这个属性。\n>4. 特定的结构对象：shape\n\n**步骤：**\n1. 安装`prop-types`\n```javascript\nyarn add prop-types\n```\n2. 在需要的组件中导入`prop-types`\n```javascript\nimport propTypes from 'prop-types'\n```\n3. 对应`组件.propTypes = {}`设定规则\n如下，表示名为`ListItem`的组件有一个lists被传进来，类型必须为`array`\n```javascript\nListItem.propTypes = {\n  lists: propTypes.array,\n};\n```\n完整代码：\n```javascript\nimport propTypes from \"prop-types\";\n// 里面有各种校验规则\n\n// eslint-disable-next-line\n\nimport React from \"react\";\n\nListItem.propTypes = {\n  lists: propTypes.array,\n};\n```\n```javascript\nfunction ListItem({ children, lists = [] }) {\n  return (\n    <div>\n      <div>\n        ListItem:<div>{children}</div>\n      </div>\n      <div>\n        {lists.map((list, index) => (\n          <div key={list.id}>{list.name}</div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n```javascript\nclass App extends React.Component {\n  state = {\n    lists: [\n      { id: 1, name: \"sdfdsf\" },\n      { id: 2, name: \"sdfdsf\" },\n      { id: 3, name: \"sdfdsf\" },\n      { id: 4, name: \"sdfdsf\" },\n    ],\n    message: \"sdfdsfsdfdsfegwegwe\",\n  };\n  render() {\n    return <ListItem lists={this.state.lists}>this is child</ListItem>;\n  }\n}\n```\n## 七、组件生命周期\n只有类组件才有生命周期，因为类组件要实例化，而函数组件不需要。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-644b0a5e86b588e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 初始化阶段：\n\n**1. 执行顺序：**\n`constructor` --> `render` --> `componentDidMount`\n**2. 功能：**\n`constructor`：创建组件时最先执行，初始化时只执行一次，现在用的不多了。\n`render`: 每次渲染时都会触发，所以不要在里面调用setState，有可能造成死循环。\n`componetDidMount`：组件挂载（dom渲染完成）后执行，初始化的时候只执行一次。所以一般进行网络请求和dom操作。\n\n#### 更新阶段：\n**1. 执行顺序：**\n`render` --> `componentDidUpdate`\n**2. 功能：**\n`render`：每次渲染都会触发\n`componentDidUpdate`：组件更新后（dom渲染完成）触发。\n两个钩子里面都不要调用setState()\n\n#### 卸载阶段：\ncomponentWillUnmount：组件卸载（从页面中消失）时触发，一般用来执行清理工作（比如：清理定时器等）\n\n三个阶段，五個鉤子\n```javascript\nclass App extends React.Component {\n  constructor() {\n    super();\n    console.log(\"constructor\");\n  }\n  componentDidMount() {\n    console.log(\"mounted\");\n  }\n  componentDidUpdate() {\n    console.log(\"update\");\n  }\n  componentWillUnmount() {\n    console.log(\"unmount\");\n  }\n  render() {\n    return <div></div>;\n  }\n}\n```\n\n## 八、React Hooks\nHooks：使函數組件更強大，更靈活的鉤子\n現在hooks暫時只能在函數組件中使用。因為它的作用就是為了讓hooks擁有狀態。\n### 1. useState\nuseState提供給變量修改數據的方法。\n\n步驟：\n1.  從react中引入useState\n2. 使用useState聲明變量，聲明修改變量的方法[變量，修改變量的方法]\n3. 使用修改變量的方法修改數據\n注意：不能直接修改原值，必須調用修改變量的方法，在下面的例子就是setCount\n```javascript\nimport React from \"react\";\nimport { useState } from \"react\";\nfunction App() {\n  const [count, setCount] = useState(0);\n  // 聲明變量，聲明修改變量的方法\n  const clickHandler = () => {\n    // 點擊時通過setCount修改count\n    setCount(count + 1);\n  };\n  return (\n    <div\n      className=\"button\"\n      onClick={() => {\n        clickHandler();\n      }}\n    >\n      {count}\n    </div>\n  );\n}\n```\n### 2. useState數據的讀取和修改\n一句話：useState生成的初始值只在初次渲染生成，之後再次生成j都是用setstate修改得到的值！\n注意事項：\n1. 只能出現在函數組件中\n2. 不能用於if/for等嵌套結構中，只能寫在函數組件最外層處。\n### 3. useEffect 函數副作用\n對於react組件來說，祝作用時根據數據渲染ui，那麼副作用就是除此之外的全部操作。\n\n#### 常見的组件副作用\n**1. 數據請求ajax發送**\n**2. 手動修改dom**\n**3. localStorage操作**\n**4. 当watch用：**\nuseEffect有两个参数，第一个是函数，第二个参数是数组，用来存放变量，当数组存放变量发生改变时，第一个参数逻辑处理函数将会被执行（类似于监听）\nvue的watch不一定是在dom渲染完畢之後執行，而useEffect一定是在dom渲染完畢後執行。\n**5. 可以作为生命周期钩子使用，在每次render後執行（dom渲染後觸發）**\n    + 没有第二个参数时,组件的初始话和更新都会执行 \n    + 空数组时，初始化调用一次之后不再执行，相当于componentDidMount\n    + 有一个值的数组时，该值有变化就执行\n    + 有多个值的数组时，只要有一个值有变化就执行\n\n```javascript\nfunction App() {\n  let [count, setCount] = useState(0);\n  let clickHandler = () => {\n    setCount(count + 1);\n  };\n  let [str, setStr] = useState(\"this is a message\");\n\n  useEffect(() => {\n    document.title = count;\n  }, [str]);\n\n  let strClickHandler = () => {\n    let tempStr = str;\n    if (tempStr.length < 25) {\n      tempStr = tempStr + \"a\";\n      setStr(tempStr);\n      setCount(count + 1);\n    } else {\n      console.log(\"標題不再更新\");\n    }\n  };\n  return (\n    <div>\n      <div\n        className=\"button\"\n        onClick={() => {\n          clickHandler();\n        }}\n      >\n        点击增加count\n      </div>\n      <div\n        className=\"button\"\n        onClick={() => {\n          strClickHandler();\n        }}\n      >\n        点击更改{str}，触发标题更新\n      </div>\n    </div>\n  );\n}\n```\n### 4. useRef 用於獲取真實dom的方法\n>函數組件的useRef相當於類組件的createRef\n綁定在元素上獲取該元素，綁定在組件上可以獲取該組件的所有屬性和方法。\n\n步驟：\n1. 引入`useRef`\n2. 使用`useRef`新建一個變量，傳入參數為null，在其中有current可以獲取到組件信息或dom元素\n3. 將該變量通過`ref`綁定到元素或組件上\n\n假設現在有一個Test組件\n```javascript\nclass Test extends React.Component {\n  render() {\n    return <div>aabbcc</div>;\n  }\n}\n```\n 需要在App組件中獲取Test組件的方法和屬性\n```javascript\nfunction App() {\n  let testRef = useRef(null);\n  let h1Ref = useRef(null);\n  useEffect(() => {\n    console.log(\"testRef\", testRef.current);\n    console.log(\"h1Ref\", h1Ref.current);\n  });\n  return (\n    <div>\n      <Test ref={testRef}></Test>\n      <h1 ref={h1Ref}>標題標題標題</h1>\n    </div>\n  );\n}\n```\ntestRef可以獲取到Test組件的方法與屬性，h1Ref可以獲取到h1這個dom元素。\n\n對比類組件的createRef的用法\n```javascript\nclass Test extends React.Component {\n  state = {\n    message: \"this is a message\",\n  };\n  divRef = createRef();\n  clickHanlder() {\n    console.log(this.divRef.current);\n  }\n  render() {\n    return (\n      <div\n        className=\"button\"\n        ref={this.divRef}\n        onClick={() => {\n          this.clickHanlder();\n        }}\n      >\n        aabbcc\n      </div>\n    );\n  }\n}\n```\n\n### 4. useContext 函数组件中的通信\n在类组件中使用`createContext`进行后代组件通信。\n函数组件中也需要使用`createContext`，两者在祖先组件中的写法一致。但函数组件中`Consumer`的部分需要变成使用`useContext`\n\n```javascript\nimport React, { createContext, useContext, useState } from \"react\";\nlet Context = createContext();\n```\n```javascript\nfunction SonA() {\n  return <SonB></SonB>;\n}\n```\n在SonB这个后代组件中，使用`useContext`去代替`Consumer`，就可以获取到`App`传过来的`count`数据\n```javascript\nfunction SonB() {\n  let count = useContext(Context);\n  return <h3 style={{ textAlign: \"center\" }}>{count}</h3>;\n}\n```\n```javascript\nfunction App() {\n  let [count, SetCount] = useState(0);\n  let addCount = () => {\n    SetCount(count + 1);\n  };\n  return (\n    <div>\n      <Context.Provider value={count}>\n        <SonA></SonA>\n      </Context.Provider>\n      <div\n        className=\"button\"\n        onClick={() => {\n          addCount();\n        }}\n      >\n        从顶层组件像任意后代组件传递的count\n      </div>\n    </div>\n  );\n}\n```\n### 5. useCallback()\n## 九、react-router\n### 1. 安装router\n```javascript\nnpm i react-router-dom\n```\n###1. BrowerRouter和HashRouter\n**作用**：包裹整个应用，一个react应用只需要使用一次\n**两种常用的router**: `HashRouter`和`BrowerRouter`\n##### HashRouter相当于vue的`Hash`模式\n地址域名后面会多一个#，比如\nhttp://localhost:3000/#/first\n##### BrowerRouter相当于vue的`History`（html5）模式\n但这种模式需要后端配合，这个地址相当于前端为了好看生成的，不是真实的地址。如果直接访问某个二次跳转的链接，有可能404\nhttp://localhost:3000/first\n### 2. Link\n用来指定导航链接\n### 3. Routes\n符合Link条件的试图会渲染到Routes里。\n### 4. Route\n用于指定导航链接，完成路由匹配。相当于vue的router-view\n### 5. 编程式导航 - 跳转\n***`react-router`***的跳转可以分为用***`Link`***跳转，和用***`useNavigate`***跳转两种。这里主要说***`useNavigate`***的用法。\n\n**useNavigate直接跳转**：对应vue的\\$router.push()，会在地址栈留下记录，可以回退。\n\n**useNavigate添加` { replace: true } `参数**：对应vue的`\\$router.replace()`，不会在地址栈中留下记录，无法回退到该页面，一般用于登录后的回退。\n\n步骤：\n1. 导入useNavigate\n```javascript\nimport { useNavigate } from \"react-router-dom\";\n```\n2. 声明一个useNavigate方法\n```javascript\nlet navigateLink = useNavigate();\n```\n3. 使用该方法，传入参数，第一个参数为地址，第二个参数为补充项，如上面说的是否要使用replace模式。\n```javascript\nnavigateLink('/About',{replace:true})\n```\n完整例子：\n```javascript\nimport { useNavigate } from \"react-router-dom\";\nfunction Login() {\n\tlet navigateLink = useNavigate();\n\treturn (\n\t\t<div className=\"wrapper-index\">\n\t\t\t<div\n\t\t\t\tclassName=\"button\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tnavigateLink(\"/about\");\n\t\t\t\t}}>\n\t\t\t\t跳转到关于页\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n### 6. 跳转传参 searchParams & params\n##### searchParams 和 params的区别：\nsearchParams：地址为/index?name=xxx&id=xxx的形式，可以获取问号后的参数\nparams：地址为/index/111的形式，可以获取到111\n\n#####步骤：\n1. 首先引入useSearchParams或useParams\n```javascript\nimport { useSearchParams, useParams } from \"react-router-dom\";\n```\n2. 初始化变量\n```javascript\nlet [searchParams] = useSearchParams();\nlet params = useParams();\n```\n3. 通过变量获取参数\n若为searchParams，则使用以下的的形式获取：\n```javascript\n{searchParams.get(\"id\")}\n```\n若为params，则使用一下的形式获取：\n```javascript\n{params.id}\n```\n### 7. 二级路由\n在route里面再配置route，然后在需要二级页面的地方导入outlet\nApp.js中\n```javascript\nfunction App() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Routes>\n\t\t\t\t<Route\n\t\t\t\t\tpath=\"/\"\n\t\t\t\t\telement={<Layout />}>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/article\"\n\t\t\t\t\t\telement={<Article />}></Route>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/board\"\n\t\t\t\t\t\telement={<Board />}></Route>\n\t\t\t\t</Route>\n\t\t\t\t<Route\n\t\t\t\t\tpath=\"/login\"\n\t\t\t\t\telement={<Login2 />}></Route>\n\t\t\t</Routes>\n\t\t</BrowserRouter>\n\t);\n}\n```\nLayout.js中\n```javascript\n// 引入必要的内置组件\nimport { Outlet } from \"react-router-dom\";\nfunction Layout() {\n\treturn (\n\t\t<div>\n\t\t\tLayout\n\t\t\t<Outlet />\n\t\t</div>\n\t);\n}\n\nexport default Layout;\n\n```","source":"_posts/cxy/framework/react/react.md","raw":"---\ntitle: 'react18基础知识梳理'\ndate: 2021-03-25 13:03:49\ntags: react\ncategories:\n  - 程序员的自我修养\n---\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 思维导图\n\n![](https://upload-images.jianshu.io/upload_images/20892169-c7559513f639bb9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 一、jsx\n### jsx中使用js表达式\n在jsx中js表达式是用`{}`括起来的，和vue一样。可以调用的有\n1.常规变量\n2.原生js\n3.三元运算符\n```javascript\nconst name=\"myname\"\nconst getAge = ()=>{\n\treturn 18\n}\nconst flag = true\n\nfunction App() {\n  return (\n    <div className=\"wrapper-box\">\n        <div className=\"content-box\">\n          {name}\n        </div>\n        <div className=\"content-box\">\n          {getAge()}\n        </div>\n        <div className=\"content-box\">\n          {flag ? 1:0}\n        </div>\n    </div>\n)\n```\n\n### 列表渲染：map\n使用Object.keys去获取obj列表，再用map循环\n```javascript\n        <div className=\"wrapper-obj-list\">\n            {Object.keys(obj).map((key)=><div key={key}>\n              {obj[key]}\n            </div>)}\n        </div>\n```\n### style: 使用`\\{\\{\\}\\}`\n```javascript\n<div className=\"wrapper-style\" style={{\n          color: 'red',\n          backgroundColor:'blue'\n        }}>sdfsdfsdfsdfsdfdsfsdfsdfsdfdsfdsfsdfdsfsdfsdfsdfdsfsdfsdfsdfdsfdsfsdfdsfsdfdsfsdfsdfsdfdsfdsfsdfdsf</div>\n```\n### 条件渲染：三元表达式\n模版太长时，可以使用括号包裹，并可以换行。\n```javascript\nconst spanflag = true\n```\n```javascript\n<div>{spanflag?(\n          <span>span内的内容</span>\n          ):null}\n        </div>\n```\n### 模板精简\n将重合的部分提出放入函数中，在App()中可以调用\n```javascript\nconst getHTag = (n)=>{\n  if(n == 1) {\n    return <h2>数字是{n}</h2>\n  } else if (n == 2) {\n    return <h2>数字是{n}</h2>\n  } else if (n == 3) {\n    return <h2>数字是{n}</h2>\n  } else {\n    return <h2>数字不是123</h2>\n  }\n}\nfunction App() {\n  return (\n    <div>\n      {getHTag(3)}\n    </div>\n  );\n}\n```\n### 其他注意事项\n1. jsx标签必须闭合，只有一个根节点\n2. jsx标签换行，必须加小括号\n3. jsx属性名采用驼峰命名法，如\n`class->className`\n`for->htmlfor`\n\n## 二、组件\n### 1. 函数组件\n+ 组件名称必须首字母大写\n+ 组件必须有返回值，且返回值为jsx模板，什么jsx都不返回则为null\n+ 使用函数名作为组件标签名。\n```javascript\nimport \"./App.css\";\n\nfunction DivTemplate() {\n  return (\n    <div>\n      <span>函数式组件</span>\n    </div>\n  );\n}\nfunction App() {\n  return <DivTemplate />;\n}\n\nexport default App;\n\n```\n### 2. 类组件\n+ 类组件类组件中必须使用render()方法去返回一个jsx结构，render方法必须要有返回值\n+ 类组件必须继承React.Component，并引入react\n```javascript\nimport \"./App.css\";\nimport React from \"react\";\n\nclass DivTemplate extends React.Component {\n  render() {\n    return <div>这是一个类组件</div>;\n  }\n}\nfunction App() {\n  return <DivTemplate />;\n}\n\nexport default App;\n\n```\n### 3. 事件绑定\n+ 事件格式为on+事件，函数组件可以直接调用方法，类组件调用用this.xxx方法\n+ 传递自定义参数的话，如果同时需要使用事件对象e和自定义参数的话，需要在外层套一层箭头函数传入\n```\n// 函数组件绑定时间\nfunction DivTemplateF() {\n  const clickHandler = (e, msg) => {\n    console.log(\"函数组件中的点击事件被触发了\");\n    console.log(`函数组件中：${e.target},${msg}`);\n  };\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"60px\",\n        lineHeight: \"60px\",\n        backgroundColor: \"#00ffff\",\n        textAlign: \"center\",\n      }}\n      onClick={(e) => {\n        clickHandler(e, \"this is msg\");\n      }}\n    >\n      点击触发函数组件事件\n    </div>\n  );\n}\n```\n\n```javascript\n// 类组件绑定事件\nclass DivTemplateC extends React.Component {\n  clickHandler(e, str) {\n    console.log(\"类组件绑定事件被触发了\");\n    console.log(`类组件中：${e.target},${str}`);\n  }\n  render() {\n    return (\n      <div\n        style={{\n          width: \"100%\",\n          height: \"60px\",\n          lineHeight: \"60px\",\n          backgroundColor: \"#00ffff\",\n          textAlign: \"center\",\n        }}\n        onClick={(e) => {\n          this.clickHandler(e, \"this is a msg\");\n        }}\n      >\n        点击触发类组件绑定事件\n      </div>\n    );\n  }\n}\n```\n## 三、组件状态\n### 1. 类组件中数据驱动视图的基本写法\n在`react hook`出来之前，函数组件是没有状态的，所以这里统一通过类组件来讲解。\n现在，**类组件**已经不太常用了\n+ 使用state，修改state通过setState实现，setState通过继承而来\n+ this有指向问题，要当心。在指定onClick中的方法时，必须要用this.xxx，如果没有传，则为undefined\n```javascript\nclass DivTemplate extends React.Component {\n  state = {\n    name: \"state name\",\n  };\n  clickHandler(e) {\n    this.setState({\n      name: \"state name is changed\",\n    });\n  }\n  render() {\n    return (\n      <div\n        className=\"button\"\n        onClick={(e) => {\n          this.clickHandler(e);\n        }}\n      >\n        {this.state.name}\n      </div>\n    );\n  }\n}\n```\n### 2. react的状态不可变\n不要直接去修改state，修改数组和对象要重新使用setState去整体赋值\n\n## 四、表单处理（input）\n使用react处理表单，一般有两种方式\n1. 受控组件\n2. 非受控组件（不常用）\n\n### 1. 受控表单组件\n> 受控组件就是`input框可以被react组件状态控制`的组件，可以实现双向绑定\n\n**双向绑定的步骤**\n1. input绑定onChange或onInput事件\n2. value指定某个变量\n3. 事件在类中写好，然后在事件中使用setState去将input的value赋值给变量\n\n```javascript\nclass DivTemplate extends React.Component {\n  state = {\n    message: \"this is a push\",\n  };\n  inputChange = (e) => {\n    console.log(\"input changed!\");\n    this.setState({\n      message: e.target.value,\n    });\n  };\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          value={this.state.message}\n          onInput={(e) => {\n            this.inputChange(e);\n          }}\n        />\n        <span>{this.state.message}</span>\n      </div>\n    );\n  }\n}\n```\n### 2. 非受控组件\n> 组件的状态和表单控件状态不同步(只是表单控件的初值和组件的`state`一致)。没有双向绑定\n使用createRef\n\n```javascript\nimport React, { createRef } from \"react\";\n\nclass DivTemplate extends React.Component {\n  msgRef = createRef();\n  clickHandler(e) {\n    console.log(this.msgRef.current.value);\n  }\n  render() {\n    return (\n      <div>\n        <input type=\"text\" className=\"input_border\" ref={this.msgRef} />\n        <div\n          className=\"button\"\n          onClick={(e) => {\n            this.clickHandler(e);\n          }}\n        >\n          点击获取input的value内容\n        </div>\n      </div>\n    );\n  }\n}\n```\n## 五、组件通信\n### 1. 父子组件通信\n函数子组件通过参数`props`，类子组件通过`this.props`，函数组件可以通过参数解构接收， v也可以通过props接收的。\n父组件上定义传入子组件的变量\n\n**`props`：**\n**1. 只能单向，不能反过来修改。**\n**2. 可以解构赋值**\n\n如下，现在父组件的`state`种有一个`message`变量，想传入到子组件中 \n父组件App.js：\n```javascript\nclass App extends React.Component {\n  state = {\n    message: \"this is message\",\n  };\n  render() {\n    return (\n      <div>\n        <SonC msg={this.state.message}></SonC>\n        <SonF msg={this.state.message}></SonF>\n      </div>\n    );\n  }\n}\n```\n子组件SonF（函数组件）\n```javascript\nfunction SonF(props) {\n  // props是一个对象，里面存着通过父组件传入的所有数据\n  return (\n    <div>\n      函数子组件：<span>{props.msg}</span>\n    </div>\n  );\n}\n```\n子组件SonC（类组件）\n```javascript\nclass SonC extends React.Component {\n  render() {\n    return (\n      <div>\n        类子组件：<span>{this.props.msg}</span>\n      </div>\n    );\n  }\n}\n\n```\n### 2. 通过子组件传递给父组件\n**原理：子组件调用父组件传递过来的函数，并且将想要传递的数据当成函数的实参**\n\n不管是类组件或是函数组件都是以下步骤：\n>1. 在父组件建立函数，传入子组件中\n>2. 子组件用props接收父组件的函数，在函数中传递参数，然后在模板中执行函数\n>3. 父组件形参接收子组件的传值即可。\n\n以类组件举例：\n```javascript\nclass Son extends React.Component {\n  getSonMsg = this.props.getSonMsg;\n  render() {\n    return (\n      <div>\n        <div\n          className=\"button\"\n          onClick={(str) => {\n            this.getSonMsg(\"aaaaaaa\");\n          }}\n        >\n          点击\n        </div>\n      </div>\n    );\n  }\n}\n```\nApp.js中：\n```javascript\nclass App extends React.Component {\n  state = {\n    messageFromSon: \"\",\n  };\n  getSonMsg = (str) => {\n    this.setState({ messageFromSon: str });\n  };\n  render() {\n    return (\n      <div>\n        <Son getSonMsg={this.getSonMsg}></Son>\n        <span>从子组件中传过来的内容为：{this.state.messageFromSon}</span>\n      </div>\n    );\n  }\n}\n```\n### 3.兄弟组件通信\n不想写了，反正就是两兄弟会通过父组件，进行数据的传递。一个子组件将数据传给父组件，父组件再将数据props给另一个子组件。\n### 4.跨组件通信Context\n父组件像任意的子孙组件传值，可以使用Context。\n相当于vue的依赖传值。\n\n步骤：\n1. 新建一个组件，专门用来导出Provider和Consumer，然后让需要Provider和Consumer的组件引入该组件。不可以在需要的文件中直接用React.createContext去新建，因为在不同文件中生成的是不同实例。  \n\n根组件App.js\n```javascript\nimport Context from \"./ContextComponent.js\";\n\nclass App extends React.Component {\n  state = {\n    message: \"this is message\",\n  };\n  render() {\n    let message = this.state.message;\n    console.log(message);\n    return (\n      <Context.Provider value={message}>\n        <div className=\"app\">\n          <SonA />\n        </div>\n      </Context.Provider>\n    );\n  }\n}\n\n```\n需要引入的组件ContextComponent\n```javascript\nimport \"./App.css\";\nimport React from \"react\";\nimport { createContext } from \"react\";\n\nconst Context = createContext();\nconst { Provider, Consumer } = Context;\n\nexport default { Provider, Consumer };\n```\n中间组件SonA的内容\n```javascript\nimport \"./App.css\";\nimport React from \"react\";\nimport SonB from \"./SonB.js\";\n\nfunction SonA() {\n  return <SonB />;\n}\nexport default SonA;\n```\n\n子孙组件内容\n```javascript\nimport \"./App.css\";\nimport React from \"react\";\nimport Context from \"./ContextComponent.js\";\n\nfunction SonB() {\n  return <Context.Consumer>{(value) => <div>{value}</div>}</Context.Consumer>;\n}\n\nexport default SonB;\n```\n## 六、组件进阶\n### 1. children 属性（slot）\nchildren存在于props里面，所以可以通过解构赋值，也可以通过props.children去获取使用。\n表示该组件的子节点，只要组件内部有子节点，props中就有这个属性。\n类型包括：\n>1. 普通文本\n>2. 普通标签\n>3. jsx\n>4. 函数\n\n```javascript\nfunction ListItem({ children }) {\n  return (\n    <div>\n      ListItem:<div>{children}</div>\n    </div>\n  );\n}\nclass App extends React.Component {\n  render() {\n    return <ListItem>this is child</ListItem>;\n  }\n}\n```\n\n### 2. props校验\n有时候从父组件传过来的props，类型会不正确，比如子组件需要一个数组，而父组件传过来一个number，那么遍历就会出现问题。\n这种情况下，就需要props校验。\n相当于vue的\n\n```javascript\nprops: [\n  {\n      str: String\n      default () {\n        return ''\n      }\n  }\n]\n```\n支持类型：\n\n>1. 基础类型（array、bool、func、number、object、string）\n>2. react元素类型： element\n>3. 必填项： isRequired，也就是传属性时不能缺少这个属性。\n>4. 特定的结构对象：shape\n\n**步骤：**\n1. 安装`prop-types`\n```javascript\nyarn add prop-types\n```\n2. 在需要的组件中导入`prop-types`\n```javascript\nimport propTypes from 'prop-types'\n```\n3. 对应`组件.propTypes = {}`设定规则\n如下，表示名为`ListItem`的组件有一个lists被传进来，类型必须为`array`\n```javascript\nListItem.propTypes = {\n  lists: propTypes.array,\n};\n```\n完整代码：\n```javascript\nimport propTypes from \"prop-types\";\n// 里面有各种校验规则\n\n// eslint-disable-next-line\n\nimport React from \"react\";\n\nListItem.propTypes = {\n  lists: propTypes.array,\n};\n```\n```javascript\nfunction ListItem({ children, lists = [] }) {\n  return (\n    <div>\n      <div>\n        ListItem:<div>{children}</div>\n      </div>\n      <div>\n        {lists.map((list, index) => (\n          <div key={list.id}>{list.name}</div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n```javascript\nclass App extends React.Component {\n  state = {\n    lists: [\n      { id: 1, name: \"sdfdsf\" },\n      { id: 2, name: \"sdfdsf\" },\n      { id: 3, name: \"sdfdsf\" },\n      { id: 4, name: \"sdfdsf\" },\n    ],\n    message: \"sdfdsfsdfdsfegwegwe\",\n  };\n  render() {\n    return <ListItem lists={this.state.lists}>this is child</ListItem>;\n  }\n}\n```\n## 七、组件生命周期\n只有类组件才有生命周期，因为类组件要实例化，而函数组件不需要。\n\n![](https://upload-images.jianshu.io/upload_images/20892169-644b0a5e86b588e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 初始化阶段：\n\n**1. 执行顺序：**\n`constructor` --> `render` --> `componentDidMount`\n**2. 功能：**\n`constructor`：创建组件时最先执行，初始化时只执行一次，现在用的不多了。\n`render`: 每次渲染时都会触发，所以不要在里面调用setState，有可能造成死循环。\n`componetDidMount`：组件挂载（dom渲染完成）后执行，初始化的时候只执行一次。所以一般进行网络请求和dom操作。\n\n#### 更新阶段：\n**1. 执行顺序：**\n`render` --> `componentDidUpdate`\n**2. 功能：**\n`render`：每次渲染都会触发\n`componentDidUpdate`：组件更新后（dom渲染完成）触发。\n两个钩子里面都不要调用setState()\n\n#### 卸载阶段：\ncomponentWillUnmount：组件卸载（从页面中消失）时触发，一般用来执行清理工作（比如：清理定时器等）\n\n三个阶段，五個鉤子\n```javascript\nclass App extends React.Component {\n  constructor() {\n    super();\n    console.log(\"constructor\");\n  }\n  componentDidMount() {\n    console.log(\"mounted\");\n  }\n  componentDidUpdate() {\n    console.log(\"update\");\n  }\n  componentWillUnmount() {\n    console.log(\"unmount\");\n  }\n  render() {\n    return <div></div>;\n  }\n}\n```\n\n## 八、React Hooks\nHooks：使函數組件更強大，更靈活的鉤子\n現在hooks暫時只能在函數組件中使用。因為它的作用就是為了讓hooks擁有狀態。\n### 1. useState\nuseState提供給變量修改數據的方法。\n\n步驟：\n1.  從react中引入useState\n2. 使用useState聲明變量，聲明修改變量的方法[變量，修改變量的方法]\n3. 使用修改變量的方法修改數據\n注意：不能直接修改原值，必須調用修改變量的方法，在下面的例子就是setCount\n```javascript\nimport React from \"react\";\nimport { useState } from \"react\";\nfunction App() {\n  const [count, setCount] = useState(0);\n  // 聲明變量，聲明修改變量的方法\n  const clickHandler = () => {\n    // 點擊時通過setCount修改count\n    setCount(count + 1);\n  };\n  return (\n    <div\n      className=\"button\"\n      onClick={() => {\n        clickHandler();\n      }}\n    >\n      {count}\n    </div>\n  );\n}\n```\n### 2. useState數據的讀取和修改\n一句話：useState生成的初始值只在初次渲染生成，之後再次生成j都是用setstate修改得到的值！\n注意事項：\n1. 只能出現在函數組件中\n2. 不能用於if/for等嵌套結構中，只能寫在函數組件最外層處。\n### 3. useEffect 函數副作用\n對於react組件來說，祝作用時根據數據渲染ui，那麼副作用就是除此之外的全部操作。\n\n#### 常見的组件副作用\n**1. 數據請求ajax發送**\n**2. 手動修改dom**\n**3. localStorage操作**\n**4. 当watch用：**\nuseEffect有两个参数，第一个是函数，第二个参数是数组，用来存放变量，当数组存放变量发生改变时，第一个参数逻辑处理函数将会被执行（类似于监听）\nvue的watch不一定是在dom渲染完畢之後執行，而useEffect一定是在dom渲染完畢後執行。\n**5. 可以作为生命周期钩子使用，在每次render後執行（dom渲染後觸發）**\n    + 没有第二个参数时,组件的初始话和更新都会执行 \n    + 空数组时，初始化调用一次之后不再执行，相当于componentDidMount\n    + 有一个值的数组时，该值有变化就执行\n    + 有多个值的数组时，只要有一个值有变化就执行\n\n```javascript\nfunction App() {\n  let [count, setCount] = useState(0);\n  let clickHandler = () => {\n    setCount(count + 1);\n  };\n  let [str, setStr] = useState(\"this is a message\");\n\n  useEffect(() => {\n    document.title = count;\n  }, [str]);\n\n  let strClickHandler = () => {\n    let tempStr = str;\n    if (tempStr.length < 25) {\n      tempStr = tempStr + \"a\";\n      setStr(tempStr);\n      setCount(count + 1);\n    } else {\n      console.log(\"標題不再更新\");\n    }\n  };\n  return (\n    <div>\n      <div\n        className=\"button\"\n        onClick={() => {\n          clickHandler();\n        }}\n      >\n        点击增加count\n      </div>\n      <div\n        className=\"button\"\n        onClick={() => {\n          strClickHandler();\n        }}\n      >\n        点击更改{str}，触发标题更新\n      </div>\n    </div>\n  );\n}\n```\n### 4. useRef 用於獲取真實dom的方法\n>函數組件的useRef相當於類組件的createRef\n綁定在元素上獲取該元素，綁定在組件上可以獲取該組件的所有屬性和方法。\n\n步驟：\n1. 引入`useRef`\n2. 使用`useRef`新建一個變量，傳入參數為null，在其中有current可以獲取到組件信息或dom元素\n3. 將該變量通過`ref`綁定到元素或組件上\n\n假設現在有一個Test組件\n```javascript\nclass Test extends React.Component {\n  render() {\n    return <div>aabbcc</div>;\n  }\n}\n```\n 需要在App組件中獲取Test組件的方法和屬性\n```javascript\nfunction App() {\n  let testRef = useRef(null);\n  let h1Ref = useRef(null);\n  useEffect(() => {\n    console.log(\"testRef\", testRef.current);\n    console.log(\"h1Ref\", h1Ref.current);\n  });\n  return (\n    <div>\n      <Test ref={testRef}></Test>\n      <h1 ref={h1Ref}>標題標題標題</h1>\n    </div>\n  );\n}\n```\ntestRef可以獲取到Test組件的方法與屬性，h1Ref可以獲取到h1這個dom元素。\n\n對比類組件的createRef的用法\n```javascript\nclass Test extends React.Component {\n  state = {\n    message: \"this is a message\",\n  };\n  divRef = createRef();\n  clickHanlder() {\n    console.log(this.divRef.current);\n  }\n  render() {\n    return (\n      <div\n        className=\"button\"\n        ref={this.divRef}\n        onClick={() => {\n          this.clickHanlder();\n        }}\n      >\n        aabbcc\n      </div>\n    );\n  }\n}\n```\n\n### 4. useContext 函数组件中的通信\n在类组件中使用`createContext`进行后代组件通信。\n函数组件中也需要使用`createContext`，两者在祖先组件中的写法一致。但函数组件中`Consumer`的部分需要变成使用`useContext`\n\n```javascript\nimport React, { createContext, useContext, useState } from \"react\";\nlet Context = createContext();\n```\n```javascript\nfunction SonA() {\n  return <SonB></SonB>;\n}\n```\n在SonB这个后代组件中，使用`useContext`去代替`Consumer`，就可以获取到`App`传过来的`count`数据\n```javascript\nfunction SonB() {\n  let count = useContext(Context);\n  return <h3 style={{ textAlign: \"center\" }}>{count}</h3>;\n}\n```\n```javascript\nfunction App() {\n  let [count, SetCount] = useState(0);\n  let addCount = () => {\n    SetCount(count + 1);\n  };\n  return (\n    <div>\n      <Context.Provider value={count}>\n        <SonA></SonA>\n      </Context.Provider>\n      <div\n        className=\"button\"\n        onClick={() => {\n          addCount();\n        }}\n      >\n        从顶层组件像任意后代组件传递的count\n      </div>\n    </div>\n  );\n}\n```\n### 5. useCallback()\n## 九、react-router\n### 1. 安装router\n```javascript\nnpm i react-router-dom\n```\n###1. BrowerRouter和HashRouter\n**作用**：包裹整个应用，一个react应用只需要使用一次\n**两种常用的router**: `HashRouter`和`BrowerRouter`\n##### HashRouter相当于vue的`Hash`模式\n地址域名后面会多一个#，比如\nhttp://localhost:3000/#/first\n##### BrowerRouter相当于vue的`History`（html5）模式\n但这种模式需要后端配合，这个地址相当于前端为了好看生成的，不是真实的地址。如果直接访问某个二次跳转的链接，有可能404\nhttp://localhost:3000/first\n### 2. Link\n用来指定导航链接\n### 3. Routes\n符合Link条件的试图会渲染到Routes里。\n### 4. Route\n用于指定导航链接，完成路由匹配。相当于vue的router-view\n### 5. 编程式导航 - 跳转\n***`react-router`***的跳转可以分为用***`Link`***跳转，和用***`useNavigate`***跳转两种。这里主要说***`useNavigate`***的用法。\n\n**useNavigate直接跳转**：对应vue的\\$router.push()，会在地址栈留下记录，可以回退。\n\n**useNavigate添加` { replace: true } `参数**：对应vue的`\\$router.replace()`，不会在地址栈中留下记录，无法回退到该页面，一般用于登录后的回退。\n\n步骤：\n1. 导入useNavigate\n```javascript\nimport { useNavigate } from \"react-router-dom\";\n```\n2. 声明一个useNavigate方法\n```javascript\nlet navigateLink = useNavigate();\n```\n3. 使用该方法，传入参数，第一个参数为地址，第二个参数为补充项，如上面说的是否要使用replace模式。\n```javascript\nnavigateLink('/About',{replace:true})\n```\n完整例子：\n```javascript\nimport { useNavigate } from \"react-router-dom\";\nfunction Login() {\n\tlet navigateLink = useNavigate();\n\treturn (\n\t\t<div className=\"wrapper-index\">\n\t\t\t<div\n\t\t\t\tclassName=\"button\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tnavigateLink(\"/about\");\n\t\t\t\t}}>\n\t\t\t\t跳转到关于页\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n### 6. 跳转传参 searchParams & params\n##### searchParams 和 params的区别：\nsearchParams：地址为/index?name=xxx&id=xxx的形式，可以获取问号后的参数\nparams：地址为/index/111的形式，可以获取到111\n\n#####步骤：\n1. 首先引入useSearchParams或useParams\n```javascript\nimport { useSearchParams, useParams } from \"react-router-dom\";\n```\n2. 初始化变量\n```javascript\nlet [searchParams] = useSearchParams();\nlet params = useParams();\n```\n3. 通过变量获取参数\n若为searchParams，则使用以下的的形式获取：\n```javascript\n{searchParams.get(\"id\")}\n```\n若为params，则使用一下的形式获取：\n```javascript\n{params.id}\n```\n### 7. 二级路由\n在route里面再配置route，然后在需要二级页面的地方导入outlet\nApp.js中\n```javascript\nfunction App() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Routes>\n\t\t\t\t<Route\n\t\t\t\t\tpath=\"/\"\n\t\t\t\t\telement={<Layout />}>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/article\"\n\t\t\t\t\t\telement={<Article />}></Route>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/board\"\n\t\t\t\t\t\telement={<Board />}></Route>\n\t\t\t\t</Route>\n\t\t\t\t<Route\n\t\t\t\t\tpath=\"/login\"\n\t\t\t\t\telement={<Login2 />}></Route>\n\t\t\t</Routes>\n\t\t</BrowserRouter>\n\t);\n}\n```\nLayout.js中\n```javascript\n// 引入必要的内置组件\nimport { Outlet } from \"react-router-dom\";\nfunction Layout() {\n\treturn (\n\t\t<div>\n\t\t\tLayout\n\t\t\t<Outlet />\n\t\t</div>\n\t);\n}\n\nexport default Layout;\n\n```","slug":"cxy/framework/react/react","published":1,"updated":"2023-03-14T09:34:15.339Z","_id":"clf8224jp0001tewi3zv39kj4","comments":1,"layout":"post","photos":[],"link":"","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c7559513f639bb9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"一、jsx\"><a href=\"#一、jsx\" class=\"headerlink\" title=\"一、jsx\"></a>一、jsx</h2><h3 id=\"jsx中使用js表达式\"><a href=\"#jsx中使用js表达式\" class=\"headerlink\" title=\"jsx中使用js表达式\"></a>jsx中使用js表达式</h3><p>在jsx中js表达式是用<code>&#123;&#125;</code>括起来的，和vue一样。可以调用的有<br>1.常规变量<br>2.原生js<br>3.三元运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name=<span class=\"string\">&quot;myname&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getAge</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;wrapper-box&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content-box&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;name&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content-box&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;getAge()&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content-box&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;flag ? 1:0&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列表渲染：map\"><a href=\"#列表渲染：map\" class=\"headerlink\" title=\"列表渲染：map\"></a>列表渲染：map</h3><p>使用Object.keys去获取obj列表，再用map循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">&quot;wrapper-obj-list&quot;</span>&gt;</span><br><span class=\"line\">    &#123;<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">key</span>)=&gt;</span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;key&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;obj[key]&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>)&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"style-使用\"><a href=\"#style-使用\" class=\"headerlink\" title=\"style: 使用\\{\\{\\}\\}\"></a>style: 使用<code>\\&#123;\\&#123;\\&#125;\\&#125;</code></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">&quot;wrapper-style&quot;</span> style=&#123;&#123;</span><br><span class=\"line\">          <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">backgroundColor</span>:<span class=\"string\">&#x27;blue&#x27;</span></span><br><span class=\"line\">        &#125;&#125;&gt;sdfsdfsdfsdfsdfdsfsdfsdfsdfdsfdsfsdfdsfsdfsdfsdfdsfsdfsdfsdfdsfdsfsdfdsfsdfdsfsdfsdfsdfdsfdsfsdfdsf&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"条件渲染：三元表达式\"><a href=\"#条件渲染：三元表达式\" class=\"headerlink\" title=\"条件渲染：三元表达式\"></a>条件渲染：三元表达式</h3><p>模版太长时，可以使用括号包裹，并可以换行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> spanflag = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&#123;spanflag?(</span><br><span class=\"line\">          <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>span内的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">          ):<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">        &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"模板精简\"><a href=\"#模板精简\" class=\"headerlink\" title=\"模板精简\"></a>模板精简</h3><p>将重合的部分提出放入函数中，在App()中可以调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getHTag</span> = (<span class=\"params\">n</span>)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>数字是&#123;n&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>数字是&#123;n&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>数字是&#123;n&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>数字不是123<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;getHTag(3)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h3><ol>\n<li>jsx标签必须闭合，只有一个根节点</li>\n<li>jsx标签换行，必须加小括号</li>\n<li>jsx属性名采用驼峰命名法，如<br><code>class-&gt;className</code><br><code>for-&gt;htmlfor</code></li>\n</ol>\n<h2 id=\"二、组件\"><a href=\"#二、组件\" class=\"headerlink\" title=\"二、组件\"></a>二、组件</h2><h3 id=\"1-函数组件\"><a href=\"#1-函数组件\" class=\"headerlink\" title=\"1. 函数组件\"></a>1. 函数组件</h3><ul>\n<li>组件名称必须首字母大写</li>\n<li>组件必须有返回值，且返回值为jsx模板，什么jsx都不返回则为null</li>\n<li>使用函数名作为组件标签名。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">DivTemplate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>函数式组件<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">DivTemplate</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-类组件\"><a href=\"#2-类组件\" class=\"headerlink\" title=\"2. 类组件\"></a>2. 类组件</h3></li>\n<li>类组件类组件中必须使用render()方法去返回一个jsx结构，render方法必须要有返回值</li>\n<li>类组件必须继承React.Component，并引入react<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是一个类组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">DivTemplate</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-事件绑定\"><a href=\"#3-事件绑定\" class=\"headerlink\" title=\"3. 事件绑定\"></a>3. 事件绑定</h3></li>\n<li>事件格式为on+事件，函数组件可以直接调用方法，类组件调用用this.xxx方法</li>\n<li>传递自定义参数的话，如果同时需要使用事件对象e和自定义参数的话，需要在外层套一层箭头函数传入<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 函数组件绑定时间</span><br><span class=\"line\">function DivTemplateF() &#123;</span><br><span class=\"line\">  const clickHandler = (e, msg) =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot;函数组件中的点击事件被触发了&quot;);</span><br><span class=\"line\">    console.log(`函数组件中：$&#123;e.target&#125;,$&#123;msg&#125;`);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      style=&#123;&#123;</span><br><span class=\"line\">        width: &quot;100%&quot;,</span><br><span class=\"line\">        height: &quot;60px&quot;,</span><br><span class=\"line\">        lineHeight: &quot;60px&quot;,</span><br><span class=\"line\">        backgroundColor: &quot;#00ffff&quot;,</span><br><span class=\"line\">        textAlign: &quot;center&quot;,</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">      onClick=&#123;(e) =&gt; &#123;</span><br><span class=\"line\">        clickHandler(e, &quot;this is msg&quot;);</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      点击触发函数组件事件</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类组件绑定事件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivTemplateC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">clickHandler</span>(<span class=\"params\">e, str</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;类组件绑定事件被触发了&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`类组件中：<span class=\"subst\">$&#123;e.target&#125;</span>,<span class=\"subst\">$&#123;str&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">width:</span> &quot;<span class=\"attr\">100</span>%&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">height:</span> &quot;<span class=\"attr\">60px</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">lineHeight:</span> &quot;<span class=\"attr\">60px</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">backgroundColor:</span> &quot;#<span class=\"attr\">00ffff</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">textAlign:</span> &quot;<span class=\"attr\">center</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          this.clickHandler(e, &quot;this is a msg&quot;);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        点击触发类组件绑定事件</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、组件状态\"><a href=\"#三、组件状态\" class=\"headerlink\" title=\"三、组件状态\"></a>三、组件状态</h2><h3 id=\"1-类组件中数据驱动视图的基本写法\"><a href=\"#1-类组件中数据驱动视图的基本写法\" class=\"headerlink\" title=\"1. 类组件中数据驱动视图的基本写法\"></a>1. 类组件中数据驱动视图的基本写法</h3><p>在<code>react hook</code>出来之前，函数组件是没有状态的，所以这里统一通过类组件来讲解。<br>现在，<strong>类组件</strong>已经不太常用了</p>\n<ul>\n<li>使用state，修改state通过setState实现，setState通过继承而来</li>\n<li>this有指向问题，要当心。在指定onClick中的方法时，必须要用this.xxx，如果没有传，则为undefined<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;state name&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">clickHandler</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;state name is changed&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          this.clickHandler(e);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;this.state.name&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-react的状态不可变\"><a href=\"#2-react的状态不可变\" class=\"headerlink\" title=\"2. react的状态不可变\"></a>2. react的状态不可变</h3>不要直接去修改state，修改数组和对象要重新使用setState去整体赋值</li>\n</ul>\n<h2 id=\"四、表单处理（input）\"><a href=\"#四、表单处理（input）\" class=\"headerlink\" title=\"四、表单处理（input）\"></a>四、表单处理（input）</h2><p>使用react处理表单，一般有两种方式</p>\n<ol>\n<li>受控组件</li>\n<li>非受控组件（不常用）</li>\n</ol>\n<h3 id=\"1-受控表单组件\"><a href=\"#1-受控表单组件\" class=\"headerlink\" title=\"1. 受控表单组件\"></a>1. 受控表单组件</h3><blockquote>\n<p>受控组件就是<code>input框可以被react组件状态控制</code>的组件，可以实现双向绑定</p>\n</blockquote>\n<p><strong>双向绑定的步骤</strong></p>\n<ol>\n<li>input绑定onChange或onInput事件</li>\n<li>value指定某个变量</li>\n<li>事件在类中写好，然后在事件中使用setState去将input的value赋值给变量</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;this is a push&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  inputChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;input changed!&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: e.<span class=\"property\">target</span>.<span class=\"property\">value</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.message&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onInput</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            this.inputChange(e);</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;this.state.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-非受控组件\"><a href=\"#2-非受控组件\" class=\"headerlink\" title=\"2. 非受控组件\"></a>2. 非受控组件</h3><blockquote>\n<p>组件的状态和表单控件状态不同步(只是表单控件的初值和组件的<code>state</code>一致)。没有双向绑定<br>使用createRef</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  msgRef = <span class=\"title function_\">createRef</span>();</span><br><span class=\"line\">  <span class=\"title function_\">clickHandler</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">msgRef</span>.<span class=\"property\">current</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;input_border&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.msgRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            this.clickHandler(e);</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          点击获取input的value内容</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、组件通信\"><a href=\"#五、组件通信\" class=\"headerlink\" title=\"五、组件通信\"></a>五、组件通信</h2><h3 id=\"1-父子组件通信\"><a href=\"#1-父子组件通信\" class=\"headerlink\" title=\"1. 父子组件通信\"></a>1. 父子组件通信</h3><p>函数子组件通过参数<code>props</code>，类子组件通过<code>this.props</code>，函数组件可以通过参数解构接收， v也可以通过props接收的。<br>父组件上定义传入子组件的变量</p>\n<p><strong><code>props</code>：</strong><br><strong>1. 只能单向，不能反过来修改。</strong><br><strong>2. 可以解构赋值</strong></p>\n<p>如下，现在父组件的<code>state</code>种有一个<code>message</code>变量，想传入到子组件中<br>父组件App.js：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;this is message&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SonC</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SonC</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SonF</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SonF</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子组件SonF（函数组件）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonF</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// props是一个对象，里面存着通过父组件传入的所有数据</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      函数子组件：<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;props.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子组件SonC（类组件）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SonC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        类子组件：<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;this.props.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-通过子组件传递给父组件\"><a href=\"#2-通过子组件传递给父组件\" class=\"headerlink\" title=\"2. 通过子组件传递给父组件\"></a>2. 通过子组件传递给父组件</h3><p><strong>原理：子组件调用父组件传递过来的函数，并且将想要传递的数据当成函数的实参</strong></p>\n<p>不管是类组件或是函数组件都是以下步骤：</p>\n<blockquote>\n<ol>\n<li>在父组件建立函数，传入子组件中</li>\n<li>子组件用props接收父组件的函数，在函数中传递参数，然后在模板中执行函数</li>\n<li>父组件形参接收子组件的传值即可。</li>\n</ol>\n</blockquote>\n<p>以类组件举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  getSonMsg = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">getSonMsg</span>;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;(str)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            this.getSonMsg(&quot;aaaaaaa&quot;);</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          点击</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>App.js中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">messageFromSon</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  getSonMsg = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">messageFromSon</span>: str &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Son</span> <span class=\"attr\">getSonMsg</span>=<span class=\"string\">&#123;this.getSonMsg&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Son</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>从子组件中传过来的内容为：&#123;this.state.messageFromSon&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-兄弟组件通信\"><a href=\"#3-兄弟组件通信\" class=\"headerlink\" title=\"3.兄弟组件通信\"></a>3.兄弟组件通信</h3><p>不想写了，反正就是两兄弟会通过父组件，进行数据的传递。一个子组件将数据传给父组件，父组件再将数据props给另一个子组件。</p>\n<h3 id=\"4-跨组件通信Context\"><a href=\"#4-跨组件通信Context\" class=\"headerlink\" title=\"4.跨组件通信Context\"></a>4.跨组件通信Context</h3><p>父组件像任意的子孙组件传值，可以使用Context。<br>相当于vue的依赖传值。</p>\n<p>步骤：</p>\n<ol>\n<li>新建一个组件，专门用来导出Provider和Consumer，然后让需要Provider和Consumer的组件引入该组件。不可以在需要的文件中直接用React.createContext去新建，因为在不同文件中生成的是不同实例。  </li>\n</ol>\n<p>根组件App.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Context</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ContextComponent.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;this is message&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">message</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;message&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">SonA</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>需要引入的组件ContextComponent</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title function_\">createContext</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Provider</span>, <span class=\"title class_\">Consumer</span> &#125; = <span class=\"title class_\">Context</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; <span class=\"title class_\">Provider</span>, <span class=\"title class_\">Consumer</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p>中间组件SonA的内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">SonB</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./SonB.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SonB</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">SonA</span>;</span><br></pre></td></tr></table></figure>\n\n<p>子孙组件内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Context</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ContextComponent.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Consumer</span>&gt;</span>&#123;(value) =&gt; <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Consumer</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">SonB</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、组件进阶\"><a href=\"#六、组件进阶\" class=\"headerlink\" title=\"六、组件进阶\"></a>六、组件进阶</h2><h3 id=\"1-children-属性（slot）\"><a href=\"#1-children-属性（slot）\" class=\"headerlink\" title=\"1. children 属性（slot）\"></a>1. children 属性（slot）</h3><p>children存在于props里面，所以可以通过解构赋值，也可以通过props.children去获取使用。<br>表示该组件的子节点，只要组件内部有子节点，props中就有这个属性。<br>类型包括：</p>\n<blockquote>\n<ol>\n<li>普通文本</li>\n<li>普通标签</li>\n<li>jsx</li>\n<li>函数</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ListItem</span>(<span class=\"params\">&#123; children &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      ListItem:<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ListItem</span>&gt;</span>this is child<span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-props校验\"><a href=\"#2-props校验\" class=\"headerlink\" title=\"2. props校验\"></a>2. props校验</h3><p>有时候从父组件传过来的props，类型会不正确，比如子组件需要一个数组，而父组件传过来一个number，那么遍历就会出现问题。<br>这种情况下，就需要props校验。<br>相当于vue的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">props</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"attr\">str</span>: <span class=\"title class_\">String</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>支持类型：</p>\n<blockquote>\n<ol>\n<li>基础类型（array、bool、func、number、object、string）</li>\n<li>react元素类型： element</li>\n<li>必填项： isRequired，也就是传属性时不能缺少这个属性。</li>\n<li>特定的结构对象：shape</li>\n</ol>\n</blockquote>\n<p><strong>步骤：</strong></p>\n<ol>\n<li>安装<code>prop-types</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add prop-types</span><br></pre></td></tr></table></figure></li>\n<li>在需要的组件中导入<code>prop-types</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> propTypes <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>对应<code>组件.propTypes = &#123;&#125;</code>设定规则<br>如下，表示名为<code>ListItem</code>的组件有一个lists被传进来，类型必须为<code>array</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ListItem</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">lists</span>: propTypes.<span class=\"property\">array</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n完整代码：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> propTypes <span class=\"keyword\">from</span> <span class=\"string\">&quot;prop-types&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 里面有各种校验规则</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ListItem</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">lists</span>: propTypes.<span class=\"property\">array</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ListItem</span>(<span class=\"params\">&#123; children, lists = [] &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        ListItem:<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;lists.map((list, index) =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;list.id&#125;</span>&gt;</span>&#123;list.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        ))&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">lists</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;sdfdsf&quot;</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;sdfdsf&quot;</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;sdfdsf&quot;</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;sdfdsf&quot;</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;sdfdsfsdfdsfegwegwe&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">lists</span>=<span class=\"string\">&#123;this.state.lists&#125;</span>&gt;</span>this is child<span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、组件生命周期\"><a href=\"#七、组件生命周期\" class=\"headerlink\" title=\"七、组件生命周期\"></a>七、组件生命周期</h2>只有类组件才有生命周期，因为类组件要实例化，而函数组件不需要。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-644b0a5e86b588e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"初始化阶段：\"><a href=\"#初始化阶段：\" class=\"headerlink\" title=\"初始化阶段：\"></a>初始化阶段：</h4><p><strong>1. 执行顺序：</strong><br><code>constructor</code> –&gt; <code>render</code> –&gt; <code>componentDidMount</code><br><strong>2. 功能：</strong><br><code>constructor</code>：创建组件时最先执行，初始化时只执行一次，现在用的不多了。<br><code>render</code>: 每次渲染时都会触发，所以不要在里面调用setState，有可能造成死循环。<br><code>componetDidMount</code>：组件挂载（dom渲染完成）后执行，初始化的时候只执行一次。所以一般进行网络请求和dom操作。</p>\n<h4 id=\"更新阶段：\"><a href=\"#更新阶段：\" class=\"headerlink\" title=\"更新阶段：\"></a>更新阶段：</h4><p><strong>1. 执行顺序：</strong><br><code>render</code> –&gt; <code>componentDidUpdate</code><br><strong>2. 功能：</strong><br><code>render</code>：每次渲染都会触发<br><code>componentDidUpdate</code>：组件更新后（dom渲染完成）触发。<br>两个钩子里面都不要调用setState()</p>\n<h4 id=\"卸载阶段：\"><a href=\"#卸载阶段：\" class=\"headerlink\" title=\"卸载阶段：\"></a>卸载阶段：</h4><p>componentWillUnmount：组件卸载（从页面中消失）时触发，一般用来执行清理工作（比如：清理定时器等）</p>\n<p>三个阶段，五個鉤子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;constructor&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;mounted&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;update&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;unmount&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八、React-Hooks\"><a href=\"#八、React-Hooks\" class=\"headerlink\" title=\"八、React Hooks\"></a>八、React Hooks</h2><p>Hooks：使函數組件更強大，更靈活的鉤子<br>現在hooks暫時只能在函數組件中使用。因為它的作用就是為了讓hooks擁有狀態。</p>\n<h3 id=\"1-useState\"><a href=\"#1-useState\" class=\"headerlink\" title=\"1. useState\"></a>1. useState</h3><p>useState提供給變量修改數據的方法。</p>\n<p>步驟：</p>\n<ol>\n<li> 從react中引入useState</li>\n<li>使用useState聲明變量，聲明修改變量的方法[變量，修改變量的方法]</li>\n<li>使用修改變量的方法修改數據<br>注意：不能直接修改原值，必須調用修改變量的方法，在下面的例子就是setCount<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 聲明變量，聲明修改變量的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 點擊時通過setCount修改count</span></span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        clickHandler();</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-useState數據的讀取和修改\"><a href=\"#2-useState數據的讀取和修改\" class=\"headerlink\" title=\"2. useState數據的讀取和修改\"></a>2. useState數據的讀取和修改</h3>一句話：useState生成的初始值只在初次渲染生成，之後再次生成j都是用setstate修改得到的值！<br>注意事項：</li>\n<li>只能出現在函數組件中</li>\n<li>不能用於if/for等嵌套結構中，只能寫在函數組件最外層處。<h3 id=\"3-useEffect-函數副作用\"><a href=\"#3-useEffect-函數副作用\" class=\"headerlink\" title=\"3. useEffect 函數副作用\"></a>3. useEffect 函數副作用</h3>對於react組件來說，祝作用時根據數據渲染ui，那麼副作用就是除此之外的全部操作。</li>\n</ol>\n<h4 id=\"常見的组件副作用\"><a href=\"#常見的组件副作用\" class=\"headerlink\" title=\"常見的组件副作用\"></a>常見的组件副作用</h4><p><strong>1. 數據請求ajax發送</strong><br><strong>2. 手動修改dom</strong><br><strong>3. localStorage操作</strong><br><strong>4. 当watch用：</strong><br>useEffect有两个参数，第一个是函数，第二个参数是数组，用来存放变量，当数组存放变量发生改变时，第一个参数逻辑处理函数将会被执行（类似于监听）<br>vue的watch不一定是在dom渲染完畢之後執行，而useEffect一定是在dom渲染完畢後執行。<br><strong>5. 可以作为生命周期钩子使用，在每次render後執行（dom渲染後觸發）</strong><br>    + 没有第二个参数时,组件的初始话和更新都会执行<br>    + 空数组时，初始化调用一次之后不再执行，相当于componentDidMount<br>    + 有一个值的数组时，该值有变化就执行<br>    + 有多个值的数组时，只要有一个值有变化就执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [str, setStr] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;this is a message&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = count;</span><br><span class=\"line\">  &#125;, [str]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">strClickHandler</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempStr = str;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tempStr.<span class=\"property\">length</span> &lt; <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">      tempStr = tempStr + <span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">      <span class=\"title function_\">setStr</span>(tempStr);</span><br><span class=\"line\">      <span class=\"title function_\">setCount</span>(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;標題不再更新&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          clickHandler();</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        点击增加count</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          strClickHandler();</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        点击更改&#123;str&#125;，触发标题更新</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-useRef-用於獲取真實dom的方法\"><a href=\"#4-useRef-用於獲取真實dom的方法\" class=\"headerlink\" title=\"4. useRef 用於獲取真實dom的方法\"></a>4. useRef 用於獲取真實dom的方法</h3><blockquote>\n<p>函數組件的useRef相當於類組件的createRef<br>綁定在元素上獲取該元素，綁定在組件上可以獲取該組件的所有屬性和方法。</p>\n</blockquote>\n<p>步驟：</p>\n<ol>\n<li>引入<code>useRef</code></li>\n<li>使用<code>useRef</code>新建一個變量，傳入參數為null，在其中有current可以獲取到組件信息或dom元素</li>\n<li>將該變量通過<code>ref</code>綁定到元素或組件上</li>\n</ol>\n<p>假設現在有一個Test組件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>aabbcc<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 需要在App組件中獲取Test組件的方法和屬性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> testRef = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h1Ref = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;testRef&quot;</span>, testRef.<span class=\"property\">current</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;h1Ref&quot;</span>, h1Ref.<span class=\"property\">current</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Test</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;testRef&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Test</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;h1Ref&#125;</span>&gt;</span>標題標題標題<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>testRef可以獲取到Test組件的方法與屬性，h1Ref可以獲取到h1這個dom元素。</p>\n<p>對比類組件的createRef的用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;this is a message&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  divRef = <span class=\"title function_\">createRef</span>();</span><br><span class=\"line\">  <span class=\"title function_\">clickHanlder</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">divRef</span>.<span class=\"property\">current</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.divRef&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          this.clickHanlder();</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        aabbcc</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-useContext-函数组件中的通信\"><a href=\"#4-useContext-函数组件中的通信\" class=\"headerlink\" title=\"4. useContext 函数组件中的通信\"></a>4. useContext 函数组件中的通信</h3><p>在类组件中使用<code>createContext</code>进行后代组件通信。<br>函数组件中也需要使用<code>createContext</code>，两者在祖先组件中的写法一致。但函数组件中<code>Consumer</code>的部分需要变成使用<code>useContext</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createContext, useContext, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Context</span> = <span class=\"title function_\">createContext</span>();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SonB</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SonB</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在SonB这个后代组件中，使用<code>useContext</code>去代替<code>Consumer</code>，就可以获取到<code>App</code>传过来的<code>count</code>数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">textAlign:</span> &quot;<span class=\"attr\">center</span>&quot; &#125;&#125;&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [count, <span class=\"title class_\">SetCount</span>] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">addCount</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title class_\">SetCount</span>(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;count&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SonA</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SonA</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          addCount();</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        从顶层组件像任意后代组件传递的count</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-useCallback\"><a href=\"#5-useCallback\" class=\"headerlink\" title=\"5. useCallback()\"></a>5. useCallback()</h3><h2 id=\"九、react-router\"><a href=\"#九、react-router\" class=\"headerlink\" title=\"九、react-router\"></a>九、react-router</h2><h3 id=\"1-安装router\"><a href=\"#1-安装router\" class=\"headerlink\" title=\"1. 安装router\"></a>1. 安装router</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react-router-dom</span><br></pre></td></tr></table></figure>\n<p>###1. BrowerRouter和HashRouter<br><strong>作用</strong>：包裹整个应用，一个react应用只需要使用一次<br><strong>两种常用的router</strong>: <code>HashRouter</code>和<code>BrowerRouter</code></p>\n<h5 id=\"HashRouter相当于vue的Hash模式\"><a href=\"#HashRouter相当于vue的Hash模式\" class=\"headerlink\" title=\"HashRouter相当于vue的Hash模式\"></a>HashRouter相当于vue的<code>Hash</code>模式</h5><p>地址域名后面会多一个#，比如<br><a href=\"http://localhost:3000/#/first\">http://localhost:3000/#/first</a></p>\n<h5 id=\"BrowerRouter相当于vue的History（html5）模式\"><a href=\"#BrowerRouter相当于vue的History（html5）模式\" class=\"headerlink\" title=\"BrowerRouter相当于vue的History（html5）模式\"></a>BrowerRouter相当于vue的<code>History</code>（html5）模式</h5><p>但这种模式需要后端配合，这个地址相当于前端为了好看生成的，不是真实的地址。如果直接访问某个二次跳转的链接，有可能404<br><a href=\"http://localhost:3000/first\">http://localhost:3000/first</a></p>\n<h3 id=\"2-Link\"><a href=\"#2-Link\" class=\"headerlink\" title=\"2. Link\"></a>2. Link</h3><p>用来指定导航链接</p>\n<h3 id=\"3-Routes\"><a href=\"#3-Routes\" class=\"headerlink\" title=\"3. Routes\"></a>3. Routes</h3><p>符合Link条件的试图会渲染到Routes里。</p>\n<h3 id=\"4-Route\"><a href=\"#4-Route\" class=\"headerlink\" title=\"4. Route\"></a>4. Route</h3><p>用于指定导航链接，完成路由匹配。相当于vue的router-view</p>\n<h3 id=\"5-编程式导航-跳转\"><a href=\"#5-编程式导航-跳转\" class=\"headerlink\" title=\"5. 编程式导航 - 跳转\"></a>5. 编程式导航 - 跳转</h3><p>***<code>react-router</code><em><strong>的跳转可以分为用</strong></em><code>Link</code><em><strong>跳转，和用</strong></em><code>useNavigate</code><em><strong>跳转两种。这里主要说</strong></em><code>useNavigate</code>***的用法。</p>\n<p><strong>useNavigate直接跳转</strong>：对应vue的$router.push()，会在地址栈留下记录，可以回退。</p>\n<p><strong>useNavigate添加<code>&#123; replace: true &#125;</code>参数</strong>：对应vue的<code>\\$router.replace()</code>，不会在地址栈中留下记录，无法回退到该页面，一般用于登录后的回退。</p>\n<p>步骤：</p>\n<ol>\n<li>导入useNavigate<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useNavigate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>声明一个useNavigate方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> navigateLink = <span class=\"title function_\">useNavigate</span>();</span><br></pre></td></tr></table></figure></li>\n<li>使用该方法，传入参数，第一个参数为地址，第二个参数为补充项，如上面说的是否要使用replace模式。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">navigateLink</span>(<span class=\"string\">&#x27;/About&#x27;</span>,&#123;<span class=\"attr\">replace</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n完整例子：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useNavigate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Login</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> navigateLink = <span class=\"title function_\">useNavigate</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;wrapper-index&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t<span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t<span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\tnavigateLink(&quot;/about&quot;);</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t&#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t跳转到关于页</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"6-跳转传参-searchParams-amp-params\"><a href=\"#6-跳转传参-searchParams-amp-params\" class=\"headerlink\" title=\"6. 跳转传参 searchParams &amp; params\"></a>6. 跳转传参 searchParams &amp; params</h3><h5 id=\"searchParams-和-params的区别：\"><a href=\"#searchParams-和-params的区别：\" class=\"headerlink\" title=\"searchParams 和 params的区别：\"></a>searchParams 和 params的区别：</h5><p>searchParams：地址为/index?name=xxx&amp;id=xxx的形式，可以获取问号后的参数<br>params：地址为/index/111的形式，可以获取到111</p>\n<p>#####步骤：</p>\n<ol>\n<li>首先引入useSearchParams或useParams<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useSearchParams, useParams &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>初始化变量<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [searchParams] = <span class=\"title function_\">useSearchParams</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> params = <span class=\"title function_\">useParams</span>();</span><br></pre></td></tr></table></figure></li>\n<li>通过变量获取参数<br>若为searchParams，则使用以下的的形式获取：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;searchParams.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;id&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n若为params，则使用一下的形式获取：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;params.<span class=\"property\">id</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-二级路由\"><a href=\"#7-二级路由\" class=\"headerlink\" title=\"7. 二级路由\"></a>7. 二级路由</h3>在route里面再配置route，然后在需要二级页面的地方导入outlet<br>App.js中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Route</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"attr\">path</span>=<span class=\"string\">&quot;/&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Layout</span> /&gt;</span>&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Route</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"attr\">path</span>=<span class=\"string\">&quot;/article&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Article</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Route</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"attr\">path</span>=<span class=\"string\">&quot;/board&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Board</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Route</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"attr\">path</span>=<span class=\"string\">&quot;/login&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Login2</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nLayout.js中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入必要的内置组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Outlet</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Layout</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\tLayout</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Outlet</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Layout</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-c7559513f639bb9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"一、jsx\"><a href=\"#一、jsx\" class=\"headerlink\" title=\"一、jsx\"></a>一、jsx</h2><h3 id=\"jsx中使用js表达式\"><a href=\"#jsx中使用js表达式\" class=\"headerlink\" title=\"jsx中使用js表达式\"></a>jsx中使用js表达式</h3><p>在jsx中js表达式是用<code>&#123;&#125;</code>括起来的，和vue一样。可以调用的有<br>1.常规变量<br>2.原生js<br>3.三元运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name=<span class=\"string\">&quot;myname&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getAge</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;wrapper-box&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content-box&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;name&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content-box&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;getAge()&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;content-box&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;flag ? 1:0&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列表渲染：map\"><a href=\"#列表渲染：map\" class=\"headerlink\" title=\"列表渲染：map\"></a>列表渲染：map</h3><p>使用Object.keys去获取obj列表，再用map循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">&quot;wrapper-obj-list&quot;</span>&gt;</span><br><span class=\"line\">    &#123;<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">key</span>)=&gt;</span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;key&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;obj[key]&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>)&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"style-使用\"><a href=\"#style-使用\" class=\"headerlink\" title=\"style: 使用\\{\\{\\}\\}\"></a>style: 使用<code>\\&#123;\\&#123;\\&#125;\\&#125;</code></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">&quot;wrapper-style&quot;</span> style=&#123;&#123;</span><br><span class=\"line\">          <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">backgroundColor</span>:<span class=\"string\">&#x27;blue&#x27;</span></span><br><span class=\"line\">        &#125;&#125;&gt;sdfsdfsdfsdfsdfdsfsdfsdfsdfdsfdsfsdfdsfsdfsdfsdfdsfsdfsdfsdfdsfdsfsdfdsfsdfdsfsdfsdfsdfdsfdsfsdfdsf&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"条件渲染：三元表达式\"><a href=\"#条件渲染：三元表达式\" class=\"headerlink\" title=\"条件渲染：三元表达式\"></a>条件渲染：三元表达式</h3><p>模版太长时，可以使用括号包裹，并可以换行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> spanflag = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&#123;spanflag?(</span><br><span class=\"line\">          <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>span内的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">          ):<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">        &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"模板精简\"><a href=\"#模板精简\" class=\"headerlink\" title=\"模板精简\"></a>模板精简</h3><p>将重合的部分提出放入函数中，在App()中可以调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getHTag</span> = (<span class=\"params\">n</span>)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>数字是&#123;n&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>数字是&#123;n&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>数字是&#123;n&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>数字不是123<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;getHTag(3)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h3><ol>\n<li>jsx标签必须闭合，只有一个根节点</li>\n<li>jsx标签换行，必须加小括号</li>\n<li>jsx属性名采用驼峰命名法，如<br><code>class-&gt;className</code><br><code>for-&gt;htmlfor</code></li>\n</ol>\n<h2 id=\"二、组件\"><a href=\"#二、组件\" class=\"headerlink\" title=\"二、组件\"></a>二、组件</h2><h3 id=\"1-函数组件\"><a href=\"#1-函数组件\" class=\"headerlink\" title=\"1. 函数组件\"></a>1. 函数组件</h3><ul>\n<li>组件名称必须首字母大写</li>\n<li>组件必须有返回值，且返回值为jsx模板，什么jsx都不返回则为null</li>\n<li>使用函数名作为组件标签名。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">DivTemplate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>函数式组件<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">DivTemplate</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-类组件\"><a href=\"#2-类组件\" class=\"headerlink\" title=\"2. 类组件\"></a>2. 类组件</h3></li>\n<li>类组件类组件中必须使用render()方法去返回一个jsx结构，render方法必须要有返回值</li>\n<li>类组件必须继承React.Component，并引入react<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是一个类组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">DivTemplate</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-事件绑定\"><a href=\"#3-事件绑定\" class=\"headerlink\" title=\"3. 事件绑定\"></a>3. 事件绑定</h3></li>\n<li>事件格式为on+事件，函数组件可以直接调用方法，类组件调用用this.xxx方法</li>\n<li>传递自定义参数的话，如果同时需要使用事件对象e和自定义参数的话，需要在外层套一层箭头函数传入<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 函数组件绑定时间</span><br><span class=\"line\">function DivTemplateF() &#123;</span><br><span class=\"line\">  const clickHandler = (e, msg) =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot;函数组件中的点击事件被触发了&quot;);</span><br><span class=\"line\">    console.log(`函数组件中：$&#123;e.target&#125;,$&#123;msg&#125;`);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      style=&#123;&#123;</span><br><span class=\"line\">        width: &quot;100%&quot;,</span><br><span class=\"line\">        height: &quot;60px&quot;,</span><br><span class=\"line\">        lineHeight: &quot;60px&quot;,</span><br><span class=\"line\">        backgroundColor: &quot;#00ffff&quot;,</span><br><span class=\"line\">        textAlign: &quot;center&quot;,</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">      onClick=&#123;(e) =&gt; &#123;</span><br><span class=\"line\">        clickHandler(e, &quot;this is msg&quot;);</span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      点击触发函数组件事件</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类组件绑定事件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivTemplateC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">clickHandler</span>(<span class=\"params\">e, str</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;类组件绑定事件被触发了&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`类组件中：<span class=\"subst\">$&#123;e.target&#125;</span>,<span class=\"subst\">$&#123;str&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">width:</span> &quot;<span class=\"attr\">100</span>%&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">height:</span> &quot;<span class=\"attr\">60px</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">lineHeight:</span> &quot;<span class=\"attr\">60px</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">backgroundColor:</span> &quot;#<span class=\"attr\">00ffff</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">textAlign:</span> &quot;<span class=\"attr\">center</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          this.clickHandler(e, &quot;this is a msg&quot;);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        点击触发类组件绑定事件</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、组件状态\"><a href=\"#三、组件状态\" class=\"headerlink\" title=\"三、组件状态\"></a>三、组件状态</h2><h3 id=\"1-类组件中数据驱动视图的基本写法\"><a href=\"#1-类组件中数据驱动视图的基本写法\" class=\"headerlink\" title=\"1. 类组件中数据驱动视图的基本写法\"></a>1. 类组件中数据驱动视图的基本写法</h3><p>在<code>react hook</code>出来之前，函数组件是没有状态的，所以这里统一通过类组件来讲解。<br>现在，<strong>类组件</strong>已经不太常用了</p>\n<ul>\n<li>使用state，修改state通过setState实现，setState通过继承而来</li>\n<li>this有指向问题，要当心。在指定onClick中的方法时，必须要用this.xxx，如果没有传，则为undefined<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;state name&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">clickHandler</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;state name is changed&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          this.clickHandler(e);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;this.state.name&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-react的状态不可变\"><a href=\"#2-react的状态不可变\" class=\"headerlink\" title=\"2. react的状态不可变\"></a>2. react的状态不可变</h3>不要直接去修改state，修改数组和对象要重新使用setState去整体赋值</li>\n</ul>\n<h2 id=\"四、表单处理（input）\"><a href=\"#四、表单处理（input）\" class=\"headerlink\" title=\"四、表单处理（input）\"></a>四、表单处理（input）</h2><p>使用react处理表单，一般有两种方式</p>\n<ol>\n<li>受控组件</li>\n<li>非受控组件（不常用）</li>\n</ol>\n<h3 id=\"1-受控表单组件\"><a href=\"#1-受控表单组件\" class=\"headerlink\" title=\"1. 受控表单组件\"></a>1. 受控表单组件</h3><blockquote>\n<p>受控组件就是<code>input框可以被react组件状态控制</code>的组件，可以实现双向绑定</p>\n</blockquote>\n<p><strong>双向绑定的步骤</strong></p>\n<ol>\n<li>input绑定onChange或onInput事件</li>\n<li>value指定某个变量</li>\n<li>事件在类中写好，然后在事件中使用setState去将input的value赋值给变量</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;this is a push&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  inputChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;input changed!&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: e.<span class=\"property\">target</span>.<span class=\"property\">value</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.message&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onInput</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            this.inputChange(e);</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;this.state.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-非受控组件\"><a href=\"#2-非受控组件\" class=\"headerlink\" title=\"2. 非受控组件\"></a>2. 非受控组件</h3><blockquote>\n<p>组件的状态和表单控件状态不同步(只是表单控件的初值和组件的<code>state</code>一致)。没有双向绑定<br>使用createRef</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  msgRef = <span class=\"title function_\">createRef</span>();</span><br><span class=\"line\">  <span class=\"title function_\">clickHandler</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">msgRef</span>.<span class=\"property\">current</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;input_border&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.msgRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            this.clickHandler(e);</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          点击获取input的value内容</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、组件通信\"><a href=\"#五、组件通信\" class=\"headerlink\" title=\"五、组件通信\"></a>五、组件通信</h2><h3 id=\"1-父子组件通信\"><a href=\"#1-父子组件通信\" class=\"headerlink\" title=\"1. 父子组件通信\"></a>1. 父子组件通信</h3><p>函数子组件通过参数<code>props</code>，类子组件通过<code>this.props</code>，函数组件可以通过参数解构接收， v也可以通过props接收的。<br>父组件上定义传入子组件的变量</p>\n<p><strong><code>props</code>：</strong><br><strong>1. 只能单向，不能反过来修改。</strong><br><strong>2. 可以解构赋值</strong></p>\n<p>如下，现在父组件的<code>state</code>种有一个<code>message</code>变量，想传入到子组件中<br>父组件App.js：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;this is message&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SonC</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SonC</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SonF</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SonF</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子组件SonF（函数组件）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonF</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// props是一个对象，里面存着通过父组件传入的所有数据</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      函数子组件：<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;props.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子组件SonC（类组件）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SonC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        类子组件：<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;this.props.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-通过子组件传递给父组件\"><a href=\"#2-通过子组件传递给父组件\" class=\"headerlink\" title=\"2. 通过子组件传递给父组件\"></a>2. 通过子组件传递给父组件</h3><p><strong>原理：子组件调用父组件传递过来的函数，并且将想要传递的数据当成函数的实参</strong></p>\n<p>不管是类组件或是函数组件都是以下步骤：</p>\n<blockquote>\n<ol>\n<li>在父组件建立函数，传入子组件中</li>\n<li>子组件用props接收父组件的函数，在函数中传递参数，然后在模板中执行函数</li>\n<li>父组件形参接收子组件的传值即可。</li>\n</ol>\n</blockquote>\n<p>以类组件举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  getSonMsg = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">getSonMsg</span>;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;(str)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            this.getSonMsg(&quot;aaaaaaa&quot;);</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          点击</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>App.js中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">messageFromSon</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  getSonMsg = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">messageFromSon</span>: str &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Son</span> <span class=\"attr\">getSonMsg</span>=<span class=\"string\">&#123;this.getSonMsg&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Son</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>从子组件中传过来的内容为：&#123;this.state.messageFromSon&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-兄弟组件通信\"><a href=\"#3-兄弟组件通信\" class=\"headerlink\" title=\"3.兄弟组件通信\"></a>3.兄弟组件通信</h3><p>不想写了，反正就是两兄弟会通过父组件，进行数据的传递。一个子组件将数据传给父组件，父组件再将数据props给另一个子组件。</p>\n<h3 id=\"4-跨组件通信Context\"><a href=\"#4-跨组件通信Context\" class=\"headerlink\" title=\"4.跨组件通信Context\"></a>4.跨组件通信Context</h3><p>父组件像任意的子孙组件传值，可以使用Context。<br>相当于vue的依赖传值。</p>\n<p>步骤：</p>\n<ol>\n<li>新建一个组件，专门用来导出Provider和Consumer，然后让需要Provider和Consumer的组件引入该组件。不可以在需要的文件中直接用React.createContext去新建，因为在不同文件中生成的是不同实例。  </li>\n</ol>\n<p>根组件App.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Context</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ContextComponent.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;this is message&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">message</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;message&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">SonA</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>需要引入的组件ContextComponent</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title function_\">createContext</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Provider</span>, <span class=\"title class_\">Consumer</span> &#125; = <span class=\"title class_\">Context</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; <span class=\"title class_\">Provider</span>, <span class=\"title class_\">Consumer</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p>中间组件SonA的内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">SonB</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./SonB.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SonB</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">SonA</span>;</span><br></pre></td></tr></table></figure>\n\n<p>子孙组件内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Context</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ContextComponent.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Consumer</span>&gt;</span>&#123;(value) =&gt; <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Consumer</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">SonB</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、组件进阶\"><a href=\"#六、组件进阶\" class=\"headerlink\" title=\"六、组件进阶\"></a>六、组件进阶</h2><h3 id=\"1-children-属性（slot）\"><a href=\"#1-children-属性（slot）\" class=\"headerlink\" title=\"1. children 属性（slot）\"></a>1. children 属性（slot）</h3><p>children存在于props里面，所以可以通过解构赋值，也可以通过props.children去获取使用。<br>表示该组件的子节点，只要组件内部有子节点，props中就有这个属性。<br>类型包括：</p>\n<blockquote>\n<ol>\n<li>普通文本</li>\n<li>普通标签</li>\n<li>jsx</li>\n<li>函数</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ListItem</span>(<span class=\"params\">&#123; children &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      ListItem:<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ListItem</span>&gt;</span>this is child<span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-props校验\"><a href=\"#2-props校验\" class=\"headerlink\" title=\"2. props校验\"></a>2. props校验</h3><p>有时候从父组件传过来的props，类型会不正确，比如子组件需要一个数组，而父组件传过来一个number，那么遍历就会出现问题。<br>这种情况下，就需要props校验。<br>相当于vue的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">props</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"attr\">str</span>: <span class=\"title class_\">String</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>支持类型：</p>\n<blockquote>\n<ol>\n<li>基础类型（array、bool、func、number、object、string）</li>\n<li>react元素类型： element</li>\n<li>必填项： isRequired，也就是传属性时不能缺少这个属性。</li>\n<li>特定的结构对象：shape</li>\n</ol>\n</blockquote>\n<p><strong>步骤：</strong></p>\n<ol>\n<li>安装<code>prop-types</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add prop-types</span><br></pre></td></tr></table></figure></li>\n<li>在需要的组件中导入<code>prop-types</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> propTypes <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>对应<code>组件.propTypes = &#123;&#125;</code>设定规则<br>如下，表示名为<code>ListItem</code>的组件有一个lists被传进来，类型必须为<code>array</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ListItem</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">lists</span>: propTypes.<span class=\"property\">array</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n完整代码：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> propTypes <span class=\"keyword\">from</span> <span class=\"string\">&quot;prop-types&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 里面有各种校验规则</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ListItem</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">lists</span>: propTypes.<span class=\"property\">array</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ListItem</span>(<span class=\"params\">&#123; children, lists = [] &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        ListItem:<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;lists.map((list, index) =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;list.id&#125;</span>&gt;</span>&#123;list.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        ))&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">lists</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;sdfdsf&quot;</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;sdfdsf&quot;</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;sdfdsf&quot;</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;sdfdsf&quot;</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;sdfdsfsdfdsfegwegwe&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">lists</span>=<span class=\"string\">&#123;this.state.lists&#125;</span>&gt;</span>this is child<span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、组件生命周期\"><a href=\"#七、组件生命周期\" class=\"headerlink\" title=\"七、组件生命周期\"></a>七、组件生命周期</h2>只有类组件才有生命周期，因为类组件要实例化，而函数组件不需要。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-644b0a5e86b588e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"初始化阶段：\"><a href=\"#初始化阶段：\" class=\"headerlink\" title=\"初始化阶段：\"></a>初始化阶段：</h4><p><strong>1. 执行顺序：</strong><br><code>constructor</code> –&gt; <code>render</code> –&gt; <code>componentDidMount</code><br><strong>2. 功能：</strong><br><code>constructor</code>：创建组件时最先执行，初始化时只执行一次，现在用的不多了。<br><code>render</code>: 每次渲染时都会触发，所以不要在里面调用setState，有可能造成死循环。<br><code>componetDidMount</code>：组件挂载（dom渲染完成）后执行，初始化的时候只执行一次。所以一般进行网络请求和dom操作。</p>\n<h4 id=\"更新阶段：\"><a href=\"#更新阶段：\" class=\"headerlink\" title=\"更新阶段：\"></a>更新阶段：</h4><p><strong>1. 执行顺序：</strong><br><code>render</code> –&gt; <code>componentDidUpdate</code><br><strong>2. 功能：</strong><br><code>render</code>：每次渲染都会触发<br><code>componentDidUpdate</code>：组件更新后（dom渲染完成）触发。<br>两个钩子里面都不要调用setState()</p>\n<h4 id=\"卸载阶段：\"><a href=\"#卸载阶段：\" class=\"headerlink\" title=\"卸载阶段：\"></a>卸载阶段：</h4><p>componentWillUnmount：组件卸载（从页面中消失）时触发，一般用来执行清理工作（比如：清理定时器等）</p>\n<p>三个阶段，五個鉤子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;constructor&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;mounted&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">componentDidUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;update&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;unmount&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八、React-Hooks\"><a href=\"#八、React-Hooks\" class=\"headerlink\" title=\"八、React Hooks\"></a>八、React Hooks</h2><p>Hooks：使函數組件更強大，更靈活的鉤子<br>現在hooks暫時只能在函數組件中使用。因為它的作用就是為了讓hooks擁有狀態。</p>\n<h3 id=\"1-useState\"><a href=\"#1-useState\" class=\"headerlink\" title=\"1. useState\"></a>1. useState</h3><p>useState提供給變量修改數據的方法。</p>\n<p>步驟：</p>\n<ol>\n<li> 從react中引入useState</li>\n<li>使用useState聲明變量，聲明修改變量的方法[變量，修改變量的方法]</li>\n<li>使用修改變量的方法修改數據<br>注意：不能直接修改原值，必須調用修改變量的方法，在下面的例子就是setCount<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 聲明變量，聲明修改變量的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 點擊時通過setCount修改count</span></span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        clickHandler();</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-useState數據的讀取和修改\"><a href=\"#2-useState數據的讀取和修改\" class=\"headerlink\" title=\"2. useState數據的讀取和修改\"></a>2. useState數據的讀取和修改</h3>一句話：useState生成的初始值只在初次渲染生成，之後再次生成j都是用setstate修改得到的值！<br>注意事項：</li>\n<li>只能出現在函數組件中</li>\n<li>不能用於if/for等嵌套結構中，只能寫在函數組件最外層處。<h3 id=\"3-useEffect-函數副作用\"><a href=\"#3-useEffect-函數副作用\" class=\"headerlink\" title=\"3. useEffect 函數副作用\"></a>3. useEffect 函數副作用</h3>對於react組件來說，祝作用時根據數據渲染ui，那麼副作用就是除此之外的全部操作。</li>\n</ol>\n<h4 id=\"常見的组件副作用\"><a href=\"#常見的组件副作用\" class=\"headerlink\" title=\"常見的组件副作用\"></a>常見的组件副作用</h4><p><strong>1. 數據請求ajax發送</strong><br><strong>2. 手動修改dom</strong><br><strong>3. localStorage操作</strong><br><strong>4. 当watch用：</strong><br>useEffect有两个参数，第一个是函数，第二个参数是数组，用来存放变量，当数组存放变量发生改变时，第一个参数逻辑处理函数将会被执行（类似于监听）<br>vue的watch不一定是在dom渲染完畢之後執行，而useEffect一定是在dom渲染完畢後執行。<br><strong>5. 可以作为生命周期钩子使用，在每次render後執行（dom渲染後觸發）</strong><br>    + 没有第二个参数时,组件的初始话和更新都会执行<br>    + 空数组时，初始化调用一次之后不再执行，相当于componentDidMount<br>    + 有一个值的数组时，该值有变化就执行<br>    + 有多个值的数组时，只要有一个值有变化就执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [str, setStr] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;this is a message&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = count;</span><br><span class=\"line\">  &#125;, [str]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">strClickHandler</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempStr = str;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tempStr.<span class=\"property\">length</span> &lt; <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">      tempStr = tempStr + <span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">      <span class=\"title function_\">setStr</span>(tempStr);</span><br><span class=\"line\">      <span class=\"title function_\">setCount</span>(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;標題不再更新&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          clickHandler();</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        点击增加count</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          strClickHandler();</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        点击更改&#123;str&#125;，触发标题更新</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-useRef-用於獲取真實dom的方法\"><a href=\"#4-useRef-用於獲取真實dom的方法\" class=\"headerlink\" title=\"4. useRef 用於獲取真實dom的方法\"></a>4. useRef 用於獲取真實dom的方法</h3><blockquote>\n<p>函數組件的useRef相當於類組件的createRef<br>綁定在元素上獲取該元素，綁定在組件上可以獲取該組件的所有屬性和方法。</p>\n</blockquote>\n<p>步驟：</p>\n<ol>\n<li>引入<code>useRef</code></li>\n<li>使用<code>useRef</code>新建一個變量，傳入參數為null，在其中有current可以獲取到組件信息或dom元素</li>\n<li>將該變量通過<code>ref</code>綁定到元素或組件上</li>\n</ol>\n<p>假設現在有一個Test組件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>aabbcc<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 需要在App組件中獲取Test組件的方法和屬性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> testRef = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h1Ref = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;testRef&quot;</span>, testRef.<span class=\"property\">current</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;h1Ref&quot;</span>, h1Ref.<span class=\"property\">current</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Test</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;testRef&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Test</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;h1Ref&#125;</span>&gt;</span>標題標題標題<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>testRef可以獲取到Test組件的方法與屬性，h1Ref可以獲取到h1這個dom元素。</p>\n<p>對比類組件的createRef的用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;this is a message&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  divRef = <span class=\"title function_\">createRef</span>();</span><br><span class=\"line\">  <span class=\"title function_\">clickHanlder</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">divRef</span>.<span class=\"property\">current</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.divRef&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          this.clickHanlder();</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        aabbcc</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-useContext-函数组件中的通信\"><a href=\"#4-useContext-函数组件中的通信\" class=\"headerlink\" title=\"4. useContext 函数组件中的通信\"></a>4. useContext 函数组件中的通信</h3><p>在类组件中使用<code>createContext</code>进行后代组件通信。<br>函数组件中也需要使用<code>createContext</code>，两者在祖先组件中的写法一致。但函数组件中<code>Consumer</code>的部分需要变成使用<code>useContext</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createContext, useContext, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Context</span> = <span class=\"title function_\">createContext</span>();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SonB</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SonB</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在SonB这个后代组件中，使用<code>useContext</code>去代替<code>Consumer</code>，就可以获取到<code>App</code>传过来的<code>count</code>数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">textAlign:</span> &quot;<span class=\"attr\">center</span>&quot; &#125;&#125;&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [count, <span class=\"title class_\">SetCount</span>] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">addCount</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title class_\">SetCount</span>(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;count&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SonA</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SonA</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          addCount();</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        从顶层组件像任意后代组件传递的count</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-useCallback\"><a href=\"#5-useCallback\" class=\"headerlink\" title=\"5. useCallback()\"></a>5. useCallback()</h3><h2 id=\"九、react-router\"><a href=\"#九、react-router\" class=\"headerlink\" title=\"九、react-router\"></a>九、react-router</h2><h3 id=\"1-安装router\"><a href=\"#1-安装router\" class=\"headerlink\" title=\"1. 安装router\"></a>1. 安装router</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react-router-dom</span><br></pre></td></tr></table></figure>\n<p>###1. BrowerRouter和HashRouter<br><strong>作用</strong>：包裹整个应用，一个react应用只需要使用一次<br><strong>两种常用的router</strong>: <code>HashRouter</code>和<code>BrowerRouter</code></p>\n<h5 id=\"HashRouter相当于vue的Hash模式\"><a href=\"#HashRouter相当于vue的Hash模式\" class=\"headerlink\" title=\"HashRouter相当于vue的Hash模式\"></a>HashRouter相当于vue的<code>Hash</code>模式</h5><p>地址域名后面会多一个#，比如<br><a href=\"http://localhost:3000/#/first\">http://localhost:3000/#/first</a></p>\n<h5 id=\"BrowerRouter相当于vue的History（html5）模式\"><a href=\"#BrowerRouter相当于vue的History（html5）模式\" class=\"headerlink\" title=\"BrowerRouter相当于vue的History（html5）模式\"></a>BrowerRouter相当于vue的<code>History</code>（html5）模式</h5><p>但这种模式需要后端配合，这个地址相当于前端为了好看生成的，不是真实的地址。如果直接访问某个二次跳转的链接，有可能404<br><a href=\"http://localhost:3000/first\">http://localhost:3000/first</a></p>\n<h3 id=\"2-Link\"><a href=\"#2-Link\" class=\"headerlink\" title=\"2. Link\"></a>2. Link</h3><p>用来指定导航链接</p>\n<h3 id=\"3-Routes\"><a href=\"#3-Routes\" class=\"headerlink\" title=\"3. Routes\"></a>3. Routes</h3><p>符合Link条件的试图会渲染到Routes里。</p>\n<h3 id=\"4-Route\"><a href=\"#4-Route\" class=\"headerlink\" title=\"4. Route\"></a>4. Route</h3><p>用于指定导航链接，完成路由匹配。相当于vue的router-view</p>\n<h3 id=\"5-编程式导航-跳转\"><a href=\"#5-编程式导航-跳转\" class=\"headerlink\" title=\"5. 编程式导航 - 跳转\"></a>5. 编程式导航 - 跳转</h3><p>***<code>react-router</code><em><strong>的跳转可以分为用</strong></em><code>Link</code><em><strong>跳转，和用</strong></em><code>useNavigate</code><em><strong>跳转两种。这里主要说</strong></em><code>useNavigate</code>***的用法。</p>\n<p><strong>useNavigate直接跳转</strong>：对应vue的$router.push()，会在地址栈留下记录，可以回退。</p>\n<p><strong>useNavigate添加<code>&#123; replace: true &#125;</code>参数</strong>：对应vue的<code>\\$router.replace()</code>，不会在地址栈中留下记录，无法回退到该页面，一般用于登录后的回退。</p>\n<p>步骤：</p>\n<ol>\n<li>导入useNavigate<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useNavigate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>声明一个useNavigate方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> navigateLink = <span class=\"title function_\">useNavigate</span>();</span><br></pre></td></tr></table></figure></li>\n<li>使用该方法，传入参数，第一个参数为地址，第二个参数为补充项，如上面说的是否要使用replace模式。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">navigateLink</span>(<span class=\"string\">&#x27;/About&#x27;</span>,&#123;<span class=\"attr\">replace</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n完整例子：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useNavigate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Login</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> navigateLink = <span class=\"title function_\">useNavigate</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;wrapper-index&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t<span class=\"attr\">className</span>=<span class=\"string\">&quot;button&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t<span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\tnavigateLink(&quot;/about&quot;);</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t&#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t跳转到关于页</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"6-跳转传参-searchParams-amp-params\"><a href=\"#6-跳转传参-searchParams-amp-params\" class=\"headerlink\" title=\"6. 跳转传参 searchParams &amp; params\"></a>6. 跳转传参 searchParams &amp; params</h3><h5 id=\"searchParams-和-params的区别：\"><a href=\"#searchParams-和-params的区别：\" class=\"headerlink\" title=\"searchParams 和 params的区别：\"></a>searchParams 和 params的区别：</h5><p>searchParams：地址为/index?name=xxx&amp;id=xxx的形式，可以获取问号后的参数<br>params：地址为/index/111的形式，可以获取到111</p>\n<p>#####步骤：</p>\n<ol>\n<li>首先引入useSearchParams或useParams<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useSearchParams, useParams &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>初始化变量<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [searchParams] = <span class=\"title function_\">useSearchParams</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> params = <span class=\"title function_\">useParams</span>();</span><br></pre></td></tr></table></figure></li>\n<li>通过变量获取参数<br>若为searchParams，则使用以下的的形式获取：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;searchParams.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;id&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n若为params，则使用一下的形式获取：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;params.<span class=\"property\">id</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-二级路由\"><a href=\"#7-二级路由\" class=\"headerlink\" title=\"7. 二级路由\"></a>7. 二级路由</h3>在route里面再配置route，然后在需要二级页面的地方导入outlet<br>App.js中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Route</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"attr\">path</span>=<span class=\"string\">&quot;/&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Layout</span> /&gt;</span>&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Route</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"attr\">path</span>=<span class=\"string\">&quot;/article&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Article</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Route</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"attr\">path</span>=<span class=\"string\">&quot;/board&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Board</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Route</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"attr\">path</span>=<span class=\"string\">&quot;/login&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"attr\">element</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">Login2</span> /&gt;</span>&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">Routes</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nLayout.js中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入必要的内置组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Outlet</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Layout</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\tLayout</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Outlet</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Layout</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"【vue3】总结","date":"2023-02-27T10:16:25.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## Vue3和Vue2的区别\n+ Vue3支持2的大多数写法\n+ 更好的支持Typescript\n+ 使用Proxy代替了defineProperty\n+ 重写了虚拟dom的实现，及Tree Shaking的实现。\n+ 从Option api变成Composition api\n  + setup\n     + ref和reactive\n     + computed和watch\n     + provide和inject\n     + 生命周期的更改\n  + 新组件\n     + Fragment\n     + Teleport\n     + Suspense\n  + 其他\n     + 全局api的修改\n     + 原来的全局api转移到应用对象\n     + 模板语法修改\n\n## 一、新建\n```\nnpm init vue\n```\n或\n```\nnpm create vite\n```\n\n## 二、Composition API（组合式API）和Options API\n#### 1. Composition API带来了什么？\n+ 代码组织的更加整齐\n+ 逻辑复用做的更加清晰\n+ 更好的类型推导\n![option api和composition api的对比](https://upload-images.jianshu.io/upload_images/20892169-a033ffcf9ab7f6a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\ncomposition api可以将声明的变量和方法等放在一起，这样会使代码更整齐，也方便逻辑复用。\n\n #### 2. 如何选择？\n+ 最好不要共用Options API和Compositions API\n+ 小型项目就用Options API，逻辑复杂用Composition API\n+ Compositon API 就像 Hooks在React\n\n## 三、 组合式api\n### 1. ref\nref用来定义**基本数据类型**的响应式。\n\n*备注：ref也可以用来定义对象或数组类型数据，它内部会自动通过 reactive 转为代理对象。*\n```js\nconst aaa = ref({\n  name: {\n    age: 12\n  },\n  age: 13333,\n  items: [{\n    id:2,\n    sex:'f'\n  }]\n})\nfunction changeName(){\n  aaa.value.items[0].id++\n}\n```\n```js\n<template>\n  <div class=\"greetings\">\n   <div>{{ aaa.items[0].id }}</div>\n   <div class=\"btn\" @click=\"changeName()\">点击</div>\n  </div>\n</template>\n```\n在setup中使用value去获取值，在vue模板中直接使用变量名去获取。\n```js\n<script setup lang = \"ts\">\n  let count = ref(0)\n  console.log(count.value)\n</script>\n```\n```js\n    <div>{{ count }}</div>\n```\n\n#### ref 可以用来获取dom元素\n在dom上绑定ref=xxx，在 setup 中定义\n\n```js\nlet xxx = ref(null)\n```\nxxx就是dom元素。\n当然，绑定在组件上就可以获取组件的元素和方法。\n### 2. reactive\nreactive用来定义多个对象的响应式。\n```js\nconst user = reactive({\n  name: \"小明\",\n  age: 20,\n  wife: {\n    name: \"小甜甜\",\n    age: 21,\n    cars: [\"奔驰\", \"宝马\", \"奥迪\"],\n  },\n});\n```\n### 3、reactive和ref的区别\n#### 3.1\\. 定义数据角度对比：\n`ref` 用来定义：基本类型数据\n`reactive` 用来定义：引用类型，例如对象、或[数组](https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020)类型的数据\n#### 3.2. 原理角度对比：\n`ref`通过 Class 的 get 与 set 来实现响应式的（数据劫持）\n`reactive` 通过使用 Proxy 来实现响应式（数据劫持），并通过Reflect 操作源对象内部的数据。\n#### 3.3. 使用角度对比：\n`ref` 定义的数据：操作数据需要 .value,读取数据时模版中直接读取不需要 .value\n`reactive` 定义的数据：操作数据与读取数据，均不需要 .value\n#### 3.4. reactive和ref的关系\n如果用ref对象/数组，内部会自动将对象/数组转为reactive的代理对象。\n### 5. setup\n#### 5.1. setup的执行时机\n在vue2的beforeCreate的生命周期之前执行，且只执行一次。\nsetup执行时，当前组件未创建，所以没有this\n#### 5.2. setup(props,context)\n`setup`函数的第一个参数为`props`，`props`不可以解构，如果解构会导致`props`失去响应式。\n`setup`函数的第二个参数为context，context可以解构，解构后为\n```js\n{ attrs, slots, emit, expose }\n```\n即：\n```js\nsetup(props, context) {\n    // 透传 Attributes（非响应式的对象，等价于 $attrs）\n    console.log(context.attrs)\n\n    // 插槽（非响应式的对象，等价于 $slots）\n    console.log(context.slots)\n\n    // 触发事件（函数，等价于 $emit）\n    console.log(context.emit)\n\n    // 暴露公共属性（函数）\n    console.log(context.expose)\n  }\n```\n或者：\n```js\n  setup(props,context) {\n    ...\n  }\n```\n都是ok的。\n在<script setup></script>中，引入defineProp使用props\n```js\nimport { defineEmits, defineProps } from \"vue\";\nlet props = defineProps<{\n  modelValue: string;\n}>();\nlet emit = defineEmits();\n```\n### 6. computed\n```js\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\";\nlet firstname = ref(\"john\");\nlet lastname = ref(\"watson\");\nlet fullname = computed(() => {\n  return `${firstname.value} ${lastname.value}`;\n});\n</script>\n```\n### 7. watch\nwatch有三个参数，第一个是监听的变量。（如果有多个变量想同时监听，可以使用数组）\n第二个是函数，可以监听到旧值与新值。\n第三个参数可以配置deep、immediate等\n\n```js\n<script setup lang=\"ts\">\nimport { ref, computed, watch } from \"vue\";\nlet firstname = ref(\"john\");\nlet lastname = ref(\"watson\");\nlet fullname = computed(() => {\n  return `${firstname.value} ${lastname.value}`;\n});\n// watch三个参数，第一个是监听的变量。（如果有多个变量想同时监听，可以使用数组）第二个是函数，可以监听到旧值与新值，第三个参数可以配置deep、immediate等\nwatch(\n  fullname,\n  (newVal, oldVal) => {\n    console.log(`newFullName=${newVal}`);\n    console.log(`oldFullName=${oldVal}`);\n  },\n  { deep: true }\n);\n</script>\n```\n### 8. watchEffect\n立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行。\n第一个参数是一个方法，方法的参数可以用来清理无效的副作用，清理回调会在该副作用下一次执行前被调用。\n第二个参数是一个可选的选项，可以用来调整副作用的刷新时机或调试副作用的依赖。\n#### flush的值\n默认情况下，侦听器将在组件渲染之前执行。\n\n设置 `flush: 'post'` 将会使侦听器延迟到组件渲染之后再执行。\n在某些特殊情况下 (例如要使缓存失效)，可能有必要在响应式依赖发生改变时立即触发侦听器。这可以通过设置 `flush: 'sync'` 来实现。（**该设置应谨慎使用，因为如果有多个属性同时更新，这将导致一些性能和数据一致性的问题。**）\n```js\n<script setup lang=\"ts\">\nimport { ref, watchEffect } from \"vue\";\nlet firstname = \"john\";\nlet lastname = ref(\"watson\");\nlet fullname = ref(\"\");\nwatchEffect(() => {\n  fullname.value = firstname + lastname.value;\n});\n\n</script>\n```\n#### 所以它经常被用来：\n+ 观察反应变量的变化\n+ 允许开发者执行副作用\n+ 提供一种取消副作用的方法（以防状态无效）\n#### watch和watchEffect之间的区别：\n+ watch可用于延迟触发副作用（watchEffect总是立即的）。\n+ watchEffect自动监视任何状态更改的更改（watch必须提供一个或多个要监视的变量）。\n+ watch提供对当前值和先前值的访问。\n+ watch也可以用来监听非响应式的数据，但写法比较麻烦。\n\n#### vue3 的 hooks（vue2的mixin）\nvue3在共享数据的时候，用的是`hooks`的方法。\n比如我想实现一个方法，在鼠标移动时去获取鼠标的坐标\n定义一个js/ts模块，封装useMousePosition\n```js\nimport { onMounted, ref } from \"vue\";\nexport default function () {\n  const x = ref(-1);\n  const y = ref(-1);\n  const clickHandler = (event: MouseEvent) => {\n    x.value = event.pageX;\n    y.value = event.pageY;\n  };\n  onMounted(() => {\n    window.addEventListener(\"mousemove\", clickHandler);\n  });\n  return { x, y };\n}\n\n```\n在某个vue组件中，直接用引入的方式调用\n```js\n<script setup lang=\"ts\">\nimport useMousePosition from \"../hooks/useMousePosition\";\nlet x = useMousePosition().x;\nlet y = useMousePosition().y;\n</script>\n<template>\n  <div>{{ x }},{{ y }}</div>\n</template>\n```\n### 9. toRefs \ntoRefs 可以将每一个响应式对象变为一个普通对象，该普通对象的每一个property都是一个ref。\n#### toRefs解决问题的场景：\n使用`reactive`去定义响应式对象的时候，如果对象层级较多，写起来会显得不简洁，而如果使用`...`解构赋值的话，对象的属性又会失去响应式。\n\n为了解构赋值的时候不失去响应式，可以使用`toRefs`将响应式对象内部的所有变量变成响应式的。\n\n不过这种方式现在在`script setup`中基本没有好的实现方法，只能在setup()里面用用。。\n```js\n<script lang=\"ts\">\n// 现在暂时没什么好方法，去在script setup里使用toRefs，所以用这种方式来写\nimport { toRefs, reactive } from \"vue\";\n\nexport default {\n  setup() {\n    const personReactive: Object = reactive({\n      name: \"john\",\n      age: 133,\n    });\n    const personObj = toRefs(personReactive);\n    return {\n      ...personObj,\n    };\n  },\n  data() {},\n};\n</script>\n```\n### 10. toRef()\n`toRef(obj,'propname')`可以将reactive的某一个属性转换为Ref\n```js\n<script setup lang=\"ts\">\nimport { reactive, isRef, toRef } from \"vue\";\nconst state = reactive({\n  name: \"john\",\n  age: 20,\n  other: {\n    employee: true,\n  },\n});\nlet name = toRef(state, \"name\");\nfunction clickHandler() {\n  name.value += name.value;\n}\n</script>\n```\n```js\n<template>\n  <div>name:{{ name }}</div>\n  <div class=\"btn btn-confirm\" @click=\"clickHandler\">确认</div>\n</template>\n```\n### 11. isRef()\n检查某个值是否为ref\n```js\nlet foo: unknown;\nif (isRef(foo)) {\n  // foo 的类型被收窄为了 Ref<unknown>\n  foo.value;\n}\n```\n## 四、组合式api 进阶\n### 1. shallowReactive和shallowRef\n\n`shallowReactive`包装对象，只让对象的第一层有响应。\n`shallowRef`包装对象，是生成一个非响应式的对象，就是说将对象重新赋值是可以有响应式的，但为对象的任意属性赋值都是没有响应式的。\n（可是就我自己实验观察。。好像ShallowRef也可以触发第一层的响应）\n`shallowRef`包装基本类型，和Ref用法一样。\nshallowRef官网的例子\n```js\nconst state = shallowRef({ count: 1 })\n\n// 不会触发更改\nstate.value.count = 2\n\n// 会触发更改\nstate.value = { count: 2 }\n```\nshallowReactive 官网的例子\n```js\nconst state = shallowReactive({\n  foo: 1,\n  nested: {\n    bar: 2\n  }\n})\n\n// 更改状态自身的属性是响应式的\nstate.foo++\n\n// ...但下层嵌套对象不会被转为响应式\nisReactive(state.nested) // false\n\n// 不是响应式的\nstate.nested.bar++\n\n```\n因为有疑惑，所以自己的代码先不贴了。\n#### 2. triggerRef()\n强制触发依赖于一个[浅层 ref](https://cn.vuejs.org/api/reactivity-advanced.html#shallowref) 的副作用，这通常在对浅引用的内部值进行深度变更后使用。\n```js\nfunction triggerRef(ref: ShallowRef): void\nconst shallow = shallowRef({\n  greet: 'Hello, world'\n})\n// 触发该副作用第一次应该会打印 \"Hello, world\"\nwatchEffect(() => {\n  console.log(shallow.value.greet)\n})\n\n// 这次变更不应触发副作用，因为这个 ref 是浅层的\nshallow.value.greet = 'Hello, universe'\n\n// 打印 \"Hello, universe\"\ntriggerRef(shallow)\n```\n#### 3. readonly、shallowReadonly、isReadonly\n`readonly()`接受一个对象 (不论是响应式还是普通的) 或是一个`ref`，返回一个原值的只读代理。只读代理是深层的。\n##### readonly()\n```js\nconst original = reactive({ count: 0 })\n\nconst copy \n= readonly(original)\n\nwatchEffect(() => {\n  // 用来做响应性追踪\n  console.log(copy.count)\n})\n\n// 更改源属性会触发其依赖的侦听器\noriginal.count++\n\n// 更改该只读副本将会失败，并会得到一个警告\ncopy.count++ // warning!\n```\n`shallowReadonly`只有表层是只读的\n`isReadonly`判断某个变量是不是只读的\n\n##### shallowReadonly\n```js\nconst state = shallowReadonly({\n  foo: 1,\n  nested: {\n    bar: 2\n  }\n})\n\n// 更改状态自身的属性会失败\nstate.foo++\n\n// ...但可以更改下层嵌套对象\nisReadonly(state.nested) // false\n\n// 这是可以通过的\nstate.nested.bar++\n```\n#### 4. toRaw()  markRaw()\ntoRaw 把代理的响应式对象变为了普通对象\n```js\n<script setup lang=\"ts\">\nimport { reactive, toRaw, markRaw } from \"vue\";\n// toRaw 把代理的响应式对象变为了普通对象\n// markRaw 将一个对象标记为不可被转为代理。返回该对象本身。\ninterface PersonInfo {\n  [props: string]: any; // 我为了省事儿这么写的，一般还是严谨些写阿。。\n}\nconst originObj: PersonInfo = reactive<PersonInfo>({\n  name: \"john\",\n  age: 20,\n});\nlet toRawObj = toRaw(originObj);\nfunction clickHandler() {\n  toRawObj.age--;\n  console.log(toRawObj);\n}\n</script>\n<template>\n  <div>{{ toRawObj }}</div>\n  <!-- <div>{{ markRawObj }}</div> -->\n  <div class=\"btn btn-confirm\" @click=\"clickHandler\">确定toRaw</div>\n  <div class=\"btn btn-confirm\" @click=\"clickHandler\">确定markRow</div>\n</template>\n```\nmarkRaw 将一个对象标记为不可被转为代理。返回该对象本身。\n```js\nconst foo = markRaw({})\nconsole.log(isReactive(reactive(foo))) // false\n\n// 也适用于嵌套在其他响应性对象\nconst bar = reactive({ foo })\nconsole.log(isReactive(bar.foo)) // false\n```\n#### 5. customRef()\n创建一个自定义的 ref，显式声明对其依赖追踪和更新触发的控制方式。\nmyRef接收一个值，返回customRef函数的执行 结果，这个函数接收2个参数，一个track（追踪）,一个trgger(触发)。\n返回一个存储器对象，有个get和set方法，取值时执行get,赋值时执行set。\n```js\nfunction myRef(value){\n  return customRef((track,trigger)=>{\n    return {\n      get(){\n        //追踪\n        track()\n        return value;\n      },\n      set(newValue){\n        value=newValue\n      //触发更新\n        trigger()\n      }\n    }\n  })\n}\n```\n官网写了一个防抖的例子。\n```js\n<script setup lang=\"ts\">\nimport { reactive, customRef, ref } from \"vue\";\ninterface PersonInfo {\n  [props: string]: any; // 我为了省事儿这么写的，一般还是严谨些写阿。。\n}\nconst originObj: PersonInfo = reactive<PersonInfo>({\n  name: \"john\",\n  age: 20,\n});\nconst keyword = useDebounceRef(\"abc\", 500);\n</script>\n```\n### 6. Fragment（碎片）和Teleport（瞬移）\n`Fragment`：vue3不需要根标签了。\n`Teleport`：让组件的html可以在父组件外的特定标签下面插入展示。（比如body）\n```js\n<template>\n  <div class=\"btn btn-confirm\" @click=\"showModal(true)\">打开对话框</div>\n  <Teleport to=\"body\">\n    <div class=\"modal-wrapper\" v-if=\"isShowModal\">对话框</div>\n    <div class=\"btn btn-confirm\" @click=\"showModal(false)\">关闭对话框</div>\n  </Teleport>\n</template>\n```\n用 <Teleport to=\"body\"></Teleport>标签将子组件内的一部分内容包裹，那么这部分内容就会在body中展示。\n### 7. Suspense\n比如页面里面要做一些异步操作，或者说调一些异步组件，这时候可能会出现等待的情况，那么在等待过程中，可以使用suspense渲染一些后备内容。\n","source":"_posts/cxy/framework/vue/vue3.md","raw":"---\ntitle: '【vue3】总结'\ndate: 2023-02-27 18:16:25\ntags: vue\ncategories: \n  - 程序员的自我修养\n---\n\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## Vue3和Vue2的区别\n+ Vue3支持2的大多数写法\n+ 更好的支持Typescript\n+ 使用Proxy代替了defineProperty\n+ 重写了虚拟dom的实现，及Tree Shaking的实现。\n+ 从Option api变成Composition api\n  + setup\n     + ref和reactive\n     + computed和watch\n     + provide和inject\n     + 生命周期的更改\n  + 新组件\n     + Fragment\n     + Teleport\n     + Suspense\n  + 其他\n     + 全局api的修改\n     + 原来的全局api转移到应用对象\n     + 模板语法修改\n\n## 一、新建\n```\nnpm init vue\n```\n或\n```\nnpm create vite\n```\n\n## 二、Composition API（组合式API）和Options API\n#### 1. Composition API带来了什么？\n+ 代码组织的更加整齐\n+ 逻辑复用做的更加清晰\n+ 更好的类型推导\n![option api和composition api的对比](https://upload-images.jianshu.io/upload_images/20892169-a033ffcf9ab7f6a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\ncomposition api可以将声明的变量和方法等放在一起，这样会使代码更整齐，也方便逻辑复用。\n\n #### 2. 如何选择？\n+ 最好不要共用Options API和Compositions API\n+ 小型项目就用Options API，逻辑复杂用Composition API\n+ Compositon API 就像 Hooks在React\n\n## 三、 组合式api\n### 1. ref\nref用来定义**基本数据类型**的响应式。\n\n*备注：ref也可以用来定义对象或数组类型数据，它内部会自动通过 reactive 转为代理对象。*\n```js\nconst aaa = ref({\n  name: {\n    age: 12\n  },\n  age: 13333,\n  items: [{\n    id:2,\n    sex:'f'\n  }]\n})\nfunction changeName(){\n  aaa.value.items[0].id++\n}\n```\n```js\n<template>\n  <div class=\"greetings\">\n   <div>{{ aaa.items[0].id }}</div>\n   <div class=\"btn\" @click=\"changeName()\">点击</div>\n  </div>\n</template>\n```\n在setup中使用value去获取值，在vue模板中直接使用变量名去获取。\n```js\n<script setup lang = \"ts\">\n  let count = ref(0)\n  console.log(count.value)\n</script>\n```\n```js\n    <div>{{ count }}</div>\n```\n\n#### ref 可以用来获取dom元素\n在dom上绑定ref=xxx，在 setup 中定义\n\n```js\nlet xxx = ref(null)\n```\nxxx就是dom元素。\n当然，绑定在组件上就可以获取组件的元素和方法。\n### 2. reactive\nreactive用来定义多个对象的响应式。\n```js\nconst user = reactive({\n  name: \"小明\",\n  age: 20,\n  wife: {\n    name: \"小甜甜\",\n    age: 21,\n    cars: [\"奔驰\", \"宝马\", \"奥迪\"],\n  },\n});\n```\n### 3、reactive和ref的区别\n#### 3.1\\. 定义数据角度对比：\n`ref` 用来定义：基本类型数据\n`reactive` 用来定义：引用类型，例如对象、或[数组](https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020)类型的数据\n#### 3.2. 原理角度对比：\n`ref`通过 Class 的 get 与 set 来实现响应式的（数据劫持）\n`reactive` 通过使用 Proxy 来实现响应式（数据劫持），并通过Reflect 操作源对象内部的数据。\n#### 3.3. 使用角度对比：\n`ref` 定义的数据：操作数据需要 .value,读取数据时模版中直接读取不需要 .value\n`reactive` 定义的数据：操作数据与读取数据，均不需要 .value\n#### 3.4. reactive和ref的关系\n如果用ref对象/数组，内部会自动将对象/数组转为reactive的代理对象。\n### 5. setup\n#### 5.1. setup的执行时机\n在vue2的beforeCreate的生命周期之前执行，且只执行一次。\nsetup执行时，当前组件未创建，所以没有this\n#### 5.2. setup(props,context)\n`setup`函数的第一个参数为`props`，`props`不可以解构，如果解构会导致`props`失去响应式。\n`setup`函数的第二个参数为context，context可以解构，解构后为\n```js\n{ attrs, slots, emit, expose }\n```\n即：\n```js\nsetup(props, context) {\n    // 透传 Attributes（非响应式的对象，等价于 $attrs）\n    console.log(context.attrs)\n\n    // 插槽（非响应式的对象，等价于 $slots）\n    console.log(context.slots)\n\n    // 触发事件（函数，等价于 $emit）\n    console.log(context.emit)\n\n    // 暴露公共属性（函数）\n    console.log(context.expose)\n  }\n```\n或者：\n```js\n  setup(props,context) {\n    ...\n  }\n```\n都是ok的。\n在<script setup></script>中，引入defineProp使用props\n```js\nimport { defineEmits, defineProps } from \"vue\";\nlet props = defineProps<{\n  modelValue: string;\n}>();\nlet emit = defineEmits();\n```\n### 6. computed\n```js\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\";\nlet firstname = ref(\"john\");\nlet lastname = ref(\"watson\");\nlet fullname = computed(() => {\n  return `${firstname.value} ${lastname.value}`;\n});\n</script>\n```\n### 7. watch\nwatch有三个参数，第一个是监听的变量。（如果有多个变量想同时监听，可以使用数组）\n第二个是函数，可以监听到旧值与新值。\n第三个参数可以配置deep、immediate等\n\n```js\n<script setup lang=\"ts\">\nimport { ref, computed, watch } from \"vue\";\nlet firstname = ref(\"john\");\nlet lastname = ref(\"watson\");\nlet fullname = computed(() => {\n  return `${firstname.value} ${lastname.value}`;\n});\n// watch三个参数，第一个是监听的变量。（如果有多个变量想同时监听，可以使用数组）第二个是函数，可以监听到旧值与新值，第三个参数可以配置deep、immediate等\nwatch(\n  fullname,\n  (newVal, oldVal) => {\n    console.log(`newFullName=${newVal}`);\n    console.log(`oldFullName=${oldVal}`);\n  },\n  { deep: true }\n);\n</script>\n```\n### 8. watchEffect\n立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行。\n第一个参数是一个方法，方法的参数可以用来清理无效的副作用，清理回调会在该副作用下一次执行前被调用。\n第二个参数是一个可选的选项，可以用来调整副作用的刷新时机或调试副作用的依赖。\n#### flush的值\n默认情况下，侦听器将在组件渲染之前执行。\n\n设置 `flush: 'post'` 将会使侦听器延迟到组件渲染之后再执行。\n在某些特殊情况下 (例如要使缓存失效)，可能有必要在响应式依赖发生改变时立即触发侦听器。这可以通过设置 `flush: 'sync'` 来实现。（**该设置应谨慎使用，因为如果有多个属性同时更新，这将导致一些性能和数据一致性的问题。**）\n```js\n<script setup lang=\"ts\">\nimport { ref, watchEffect } from \"vue\";\nlet firstname = \"john\";\nlet lastname = ref(\"watson\");\nlet fullname = ref(\"\");\nwatchEffect(() => {\n  fullname.value = firstname + lastname.value;\n});\n\n</script>\n```\n#### 所以它经常被用来：\n+ 观察反应变量的变化\n+ 允许开发者执行副作用\n+ 提供一种取消副作用的方法（以防状态无效）\n#### watch和watchEffect之间的区别：\n+ watch可用于延迟触发副作用（watchEffect总是立即的）。\n+ watchEffect自动监视任何状态更改的更改（watch必须提供一个或多个要监视的变量）。\n+ watch提供对当前值和先前值的访问。\n+ watch也可以用来监听非响应式的数据，但写法比较麻烦。\n\n#### vue3 的 hooks（vue2的mixin）\nvue3在共享数据的时候，用的是`hooks`的方法。\n比如我想实现一个方法，在鼠标移动时去获取鼠标的坐标\n定义一个js/ts模块，封装useMousePosition\n```js\nimport { onMounted, ref } from \"vue\";\nexport default function () {\n  const x = ref(-1);\n  const y = ref(-1);\n  const clickHandler = (event: MouseEvent) => {\n    x.value = event.pageX;\n    y.value = event.pageY;\n  };\n  onMounted(() => {\n    window.addEventListener(\"mousemove\", clickHandler);\n  });\n  return { x, y };\n}\n\n```\n在某个vue组件中，直接用引入的方式调用\n```js\n<script setup lang=\"ts\">\nimport useMousePosition from \"../hooks/useMousePosition\";\nlet x = useMousePosition().x;\nlet y = useMousePosition().y;\n</script>\n<template>\n  <div>{{ x }},{{ y }}</div>\n</template>\n```\n### 9. toRefs \ntoRefs 可以将每一个响应式对象变为一个普通对象，该普通对象的每一个property都是一个ref。\n#### toRefs解决问题的场景：\n使用`reactive`去定义响应式对象的时候，如果对象层级较多，写起来会显得不简洁，而如果使用`...`解构赋值的话，对象的属性又会失去响应式。\n\n为了解构赋值的时候不失去响应式，可以使用`toRefs`将响应式对象内部的所有变量变成响应式的。\n\n不过这种方式现在在`script setup`中基本没有好的实现方法，只能在setup()里面用用。。\n```js\n<script lang=\"ts\">\n// 现在暂时没什么好方法，去在script setup里使用toRefs，所以用这种方式来写\nimport { toRefs, reactive } from \"vue\";\n\nexport default {\n  setup() {\n    const personReactive: Object = reactive({\n      name: \"john\",\n      age: 133,\n    });\n    const personObj = toRefs(personReactive);\n    return {\n      ...personObj,\n    };\n  },\n  data() {},\n};\n</script>\n```\n### 10. toRef()\n`toRef(obj,'propname')`可以将reactive的某一个属性转换为Ref\n```js\n<script setup lang=\"ts\">\nimport { reactive, isRef, toRef } from \"vue\";\nconst state = reactive({\n  name: \"john\",\n  age: 20,\n  other: {\n    employee: true,\n  },\n});\nlet name = toRef(state, \"name\");\nfunction clickHandler() {\n  name.value += name.value;\n}\n</script>\n```\n```js\n<template>\n  <div>name:{{ name }}</div>\n  <div class=\"btn btn-confirm\" @click=\"clickHandler\">确认</div>\n</template>\n```\n### 11. isRef()\n检查某个值是否为ref\n```js\nlet foo: unknown;\nif (isRef(foo)) {\n  // foo 的类型被收窄为了 Ref<unknown>\n  foo.value;\n}\n```\n## 四、组合式api 进阶\n### 1. shallowReactive和shallowRef\n\n`shallowReactive`包装对象，只让对象的第一层有响应。\n`shallowRef`包装对象，是生成一个非响应式的对象，就是说将对象重新赋值是可以有响应式的，但为对象的任意属性赋值都是没有响应式的。\n（可是就我自己实验观察。。好像ShallowRef也可以触发第一层的响应）\n`shallowRef`包装基本类型，和Ref用法一样。\nshallowRef官网的例子\n```js\nconst state = shallowRef({ count: 1 })\n\n// 不会触发更改\nstate.value.count = 2\n\n// 会触发更改\nstate.value = { count: 2 }\n```\nshallowReactive 官网的例子\n```js\nconst state = shallowReactive({\n  foo: 1,\n  nested: {\n    bar: 2\n  }\n})\n\n// 更改状态自身的属性是响应式的\nstate.foo++\n\n// ...但下层嵌套对象不会被转为响应式\nisReactive(state.nested) // false\n\n// 不是响应式的\nstate.nested.bar++\n\n```\n因为有疑惑，所以自己的代码先不贴了。\n#### 2. triggerRef()\n强制触发依赖于一个[浅层 ref](https://cn.vuejs.org/api/reactivity-advanced.html#shallowref) 的副作用，这通常在对浅引用的内部值进行深度变更后使用。\n```js\nfunction triggerRef(ref: ShallowRef): void\nconst shallow = shallowRef({\n  greet: 'Hello, world'\n})\n// 触发该副作用第一次应该会打印 \"Hello, world\"\nwatchEffect(() => {\n  console.log(shallow.value.greet)\n})\n\n// 这次变更不应触发副作用，因为这个 ref 是浅层的\nshallow.value.greet = 'Hello, universe'\n\n// 打印 \"Hello, universe\"\ntriggerRef(shallow)\n```\n#### 3. readonly、shallowReadonly、isReadonly\n`readonly()`接受一个对象 (不论是响应式还是普通的) 或是一个`ref`，返回一个原值的只读代理。只读代理是深层的。\n##### readonly()\n```js\nconst original = reactive({ count: 0 })\n\nconst copy \n= readonly(original)\n\nwatchEffect(() => {\n  // 用来做响应性追踪\n  console.log(copy.count)\n})\n\n// 更改源属性会触发其依赖的侦听器\noriginal.count++\n\n// 更改该只读副本将会失败，并会得到一个警告\ncopy.count++ // warning!\n```\n`shallowReadonly`只有表层是只读的\n`isReadonly`判断某个变量是不是只读的\n\n##### shallowReadonly\n```js\nconst state = shallowReadonly({\n  foo: 1,\n  nested: {\n    bar: 2\n  }\n})\n\n// 更改状态自身的属性会失败\nstate.foo++\n\n// ...但可以更改下层嵌套对象\nisReadonly(state.nested) // false\n\n// 这是可以通过的\nstate.nested.bar++\n```\n#### 4. toRaw()  markRaw()\ntoRaw 把代理的响应式对象变为了普通对象\n```js\n<script setup lang=\"ts\">\nimport { reactive, toRaw, markRaw } from \"vue\";\n// toRaw 把代理的响应式对象变为了普通对象\n// markRaw 将一个对象标记为不可被转为代理。返回该对象本身。\ninterface PersonInfo {\n  [props: string]: any; // 我为了省事儿这么写的，一般还是严谨些写阿。。\n}\nconst originObj: PersonInfo = reactive<PersonInfo>({\n  name: \"john\",\n  age: 20,\n});\nlet toRawObj = toRaw(originObj);\nfunction clickHandler() {\n  toRawObj.age--;\n  console.log(toRawObj);\n}\n</script>\n<template>\n  <div>{{ toRawObj }}</div>\n  <!-- <div>{{ markRawObj }}</div> -->\n  <div class=\"btn btn-confirm\" @click=\"clickHandler\">确定toRaw</div>\n  <div class=\"btn btn-confirm\" @click=\"clickHandler\">确定markRow</div>\n</template>\n```\nmarkRaw 将一个对象标记为不可被转为代理。返回该对象本身。\n```js\nconst foo = markRaw({})\nconsole.log(isReactive(reactive(foo))) // false\n\n// 也适用于嵌套在其他响应性对象\nconst bar = reactive({ foo })\nconsole.log(isReactive(bar.foo)) // false\n```\n#### 5. customRef()\n创建一个自定义的 ref，显式声明对其依赖追踪和更新触发的控制方式。\nmyRef接收一个值，返回customRef函数的执行 结果，这个函数接收2个参数，一个track（追踪）,一个trgger(触发)。\n返回一个存储器对象，有个get和set方法，取值时执行get,赋值时执行set。\n```js\nfunction myRef(value){\n  return customRef((track,trigger)=>{\n    return {\n      get(){\n        //追踪\n        track()\n        return value;\n      },\n      set(newValue){\n        value=newValue\n      //触发更新\n        trigger()\n      }\n    }\n  })\n}\n```\n官网写了一个防抖的例子。\n```js\n<script setup lang=\"ts\">\nimport { reactive, customRef, ref } from \"vue\";\ninterface PersonInfo {\n  [props: string]: any; // 我为了省事儿这么写的，一般还是严谨些写阿。。\n}\nconst originObj: PersonInfo = reactive<PersonInfo>({\n  name: \"john\",\n  age: 20,\n});\nconst keyword = useDebounceRef(\"abc\", 500);\n</script>\n```\n### 6. Fragment（碎片）和Teleport（瞬移）\n`Fragment`：vue3不需要根标签了。\n`Teleport`：让组件的html可以在父组件外的特定标签下面插入展示。（比如body）\n```js\n<template>\n  <div class=\"btn btn-confirm\" @click=\"showModal(true)\">打开对话框</div>\n  <Teleport to=\"body\">\n    <div class=\"modal-wrapper\" v-if=\"isShowModal\">对话框</div>\n    <div class=\"btn btn-confirm\" @click=\"showModal(false)\">关闭对话框</div>\n  </Teleport>\n</template>\n```\n用 <Teleport to=\"body\"></Teleport>标签将子组件内的一部分内容包裹，那么这部分内容就会在body中展示。\n### 7. Suspense\n比如页面里面要做一些异步操作，或者说调一些异步组件，这时候可能会出现等待的情况，那么在等待过程中，可以使用suspense渲染一些后备内容。\n","slug":"cxy/framework/vue/vue3","published":1,"updated":"2023-03-08T11:13:36.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf8224jq0004tewi28wtgdp3","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"Vue3和Vue2的区别\"><a href=\"#Vue3和Vue2的区别\" class=\"headerlink\" title=\"Vue3和Vue2的区别\"></a>Vue3和Vue2的区别</h2><ul>\n<li>Vue3支持2的大多数写法</li>\n<li>更好的支持Typescript</li>\n<li>使用Proxy代替了defineProperty</li>\n<li>重写了虚拟dom的实现，及Tree Shaking的实现。</li>\n<li>从Option api变成Composition api<ul>\n<li>setup<ul>\n<li>ref和reactive</li>\n<li>computed和watch</li>\n<li>provide和inject</li>\n<li>生命周期的更改</li>\n</ul>\n</li>\n<li>新组件<ul>\n<li>Fragment</li>\n<li>Teleport</li>\n<li>Suspense</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>全局api的修改</li>\n<li>原来的全局api转移到应用对象</li>\n<li>模板语法修改</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"一、新建\"><a href=\"#一、新建\" class=\"headerlink\" title=\"一、新建\"></a>一、新建</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vue</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create vite</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、Composition-API（组合式API）和Options-API\"><a href=\"#二、Composition-API（组合式API）和Options-API\" class=\"headerlink\" title=\"二、Composition API（组合式API）和Options API\"></a>二、Composition API（组合式API）和Options API</h2><h4 id=\"1-Composition-API带来了什么？\"><a href=\"#1-Composition-API带来了什么？\" class=\"headerlink\" title=\"1. Composition API带来了什么？\"></a>1. Composition API带来了什么？</h4><ul>\n<li>代码组织的更加整齐</li>\n<li>逻辑复用做的更加清晰</li>\n<li>更好的类型推导<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a033ffcf9ab7f6a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"option api和composition api的对比\"></li>\n</ul>\n<p>composition api可以将声明的变量和方法等放在一起，这样会使代码更整齐，也方便逻辑复用。</p>\n<h4 id=\"2-如何选择？\"><a href=\"#2-如何选择？\" class=\"headerlink\" title=\"2. 如何选择？\"></a>2. 如何选择？</h4><ul>\n<li>最好不要共用Options API和Compositions API</li>\n<li>小型项目就用Options API，逻辑复杂用Composition API</li>\n<li>Compositon API 就像 Hooks在React</li>\n</ul>\n<h2 id=\"三、-组合式api\"><a href=\"#三、-组合式api\" class=\"headerlink\" title=\"三、 组合式api\"></a>三、 组合式api</h2><h3 id=\"1-ref\"><a href=\"#1-ref\" class=\"headerlink\" title=\"1. ref\"></a>1. ref</h3><p>ref用来定义<strong>基本数据类型</strong>的响应式。</p>\n<p><em>备注：ref也可以用来定义对象或数组类型数据，它内部会自动通过 reactive 转为代理对象。</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> aaa = <span class=\"title function_\">ref</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">12</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">13333</span>,</span><br><span class=\"line\">  <span class=\"attr\">items</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;f&#x27;</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeName</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  aaa.<span class=\"property\">value</span>.<span class=\"property\">items</span>[<span class=\"number\">0</span>].<span class=\"property\">id</span>++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;greetings&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; aaa.items[0].id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeName()&quot;</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<p>在setup中使用value去获取值，在vue模板中直接使用变量名去获取。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang = <span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count.<span class=\"property\">value</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ref-可以用来获取dom元素\"><a href=\"#ref-可以用来获取dom元素\" class=\"headerlink\" title=\"ref 可以用来获取dom元素\"></a>ref 可以用来获取dom元素</h4><p>在dom上绑定ref=xxx，在 setup 中定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xxx = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure>\n<p>xxx就是dom元素。<br>当然，绑定在组件上就可以获取组件的元素和方法。</p>\n<h3 id=\"2-reactive\"><a href=\"#2-reactive\" class=\"headerlink\" title=\"2. reactive\"></a>2. reactive</h3><p>reactive用来定义多个对象的响应式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"attr\">wife</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;小甜甜&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">cars</span>: [<span class=\"string\">&quot;奔驰&quot;</span>, <span class=\"string\">&quot;宝马&quot;</span>, <span class=\"string\">&quot;奥迪&quot;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、reactive和ref的区别\"><a href=\"#3、reactive和ref的区别\" class=\"headerlink\" title=\"3、reactive和ref的区别\"></a>3、reactive和ref的区别</h3><h4 id=\"3-1-定义数据角度对比：\"><a href=\"#3-1-定义数据角度对比：\" class=\"headerlink\" title=\"3.1. 定义数据角度对比：\"></a>3.1. 定义数据角度对比：</h4><p><code>ref</code> 用来定义：基本类型数据<br><code>reactive</code> 用来定义：引用类型，例如对象、或<a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020\">数组</a>类型的数据</p>\n<h4 id=\"3-2-原理角度对比：\"><a href=\"#3-2-原理角度对比：\" class=\"headerlink\" title=\"3.2. 原理角度对比：\"></a>3.2. 原理角度对比：</h4><p><code>ref</code>通过 Class 的 get 与 set 来实现响应式的（数据劫持）<br><code>reactive</code> 通过使用 Proxy 来实现响应式（数据劫持），并通过Reflect 操作源对象内部的数据。</p>\n<h4 id=\"3-3-使用角度对比：\"><a href=\"#3-3-使用角度对比：\" class=\"headerlink\" title=\"3.3. 使用角度对比：\"></a>3.3. 使用角度对比：</h4><p><code>ref</code> 定义的数据：操作数据需要 .value,读取数据时模版中直接读取不需要 .value<br><code>reactive</code> 定义的数据：操作数据与读取数据，均不需要 .value</p>\n<h4 id=\"3-4-reactive和ref的关系\"><a href=\"#3-4-reactive和ref的关系\" class=\"headerlink\" title=\"3.4. reactive和ref的关系\"></a>3.4. reactive和ref的关系</h4><p>如果用ref对象/数组，内部会自动将对象/数组转为reactive的代理对象。</p>\n<h3 id=\"5-setup\"><a href=\"#5-setup\" class=\"headerlink\" title=\"5. setup\"></a>5. setup</h3><h4 id=\"5-1-setup的执行时机\"><a href=\"#5-1-setup的执行时机\" class=\"headerlink\" title=\"5.1. setup的执行时机\"></a>5.1. setup的执行时机</h4><p>在vue2的beforeCreate的生命周期之前执行，且只执行一次。<br>setup执行时，当前组件未创建，所以没有this</p>\n<h4 id=\"5-2-setup-props-context\"><a href=\"#5-2-setup-props-context\" class=\"headerlink\" title=\"5.2. setup(props,context)\"></a>5.2. setup(props,context)</h4><p><code>setup</code>函数的第一个参数为<code>props</code>，<code>props</code>不可以解构，如果解构会导致<code>props</code>失去响应式。<br><code>setup</code>函数的第二个参数为context，context可以解构，解构后为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; attrs, slots, emit, expose &#125;</span><br></pre></td></tr></table></figure>\n<p>即：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setup</span>(<span class=\"params\">props, context</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 透传 Attributes（非响应式的对象，等价于 $attrs）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context.<span class=\"property\">attrs</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插槽（非响应式的对象，等价于 $slots）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context.<span class=\"property\">slots</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 触发事件（函数，等价于 $emit）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context.<span class=\"property\">emit</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暴露公共属性（函数）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context.<span class=\"property\">expose</span>)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setup</span>(<span class=\"params\">props,context</span>) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>都是ok的。<br>在<script setup></script>中，引入defineProp使用props</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineEmits, defineProps &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> props = defineProps&lt;&#123;</span><br><span class=\"line\">  <span class=\"attr\">modelValue</span>: string;</span><br><span class=\"line\">&#125;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">let</span> emit = <span class=\"title function_\">defineEmits</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-computed\"><a href=\"#6-computed\" class=\"headerlink\" title=\"6. computed\"></a>6. computed</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> firstname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;john&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;watson&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> fullname = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;firstname.value&#125;</span> <span class=\"subst\">$&#123;lastname.value&#125;</span>`</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-watch\"><a href=\"#7-watch\" class=\"headerlink\" title=\"7. watch\"></a>7. watch</h3><p>watch有三个参数，第一个是监听的变量。（如果有多个变量想同时监听，可以使用数组）<br>第二个是函数，可以监听到旧值与新值。<br>第三个参数可以配置deep、immediate等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, computed, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> firstname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;john&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;watson&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> fullname = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;firstname.value&#125;</span> <span class=\"subst\">$&#123;lastname.value&#125;</span>`</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// watch三个参数，第一个是监听的变量。（如果有多个变量想同时监听，可以使用数组）第二个是函数，可以监听到旧值与新值，第三个参数可以配置deep、immediate等</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">  fullname,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`newFullName=<span class=\"subst\">$&#123;newVal&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`oldFullName=<span class=\"subst\">$&#123;oldVal&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-watchEffect\"><a href=\"#8-watchEffect\" class=\"headerlink\" title=\"8. watchEffect\"></a>8. watchEffect</h3><p>立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行。<br>第一个参数是一个方法，方法的参数可以用来清理无效的副作用，清理回调会在该副作用下一次执行前被调用。<br>第二个参数是一个可选的选项，可以用来调整副作用的刷新时机或调试副作用的依赖。</p>\n<h4 id=\"flush的值\"><a href=\"#flush的值\" class=\"headerlink\" title=\"flush的值\"></a>flush的值</h4><p>默认情况下，侦听器将在组件渲染之前执行。</p>\n<p>设置 <code>flush: &#39;post&#39;</code> 将会使侦听器延迟到组件渲染之后再执行。<br>在某些特殊情况下 (例如要使缓存失效)，可能有必要在响应式依赖发生改变时立即触发侦听器。这可以通过设置 <code>flush: &#39;sync&#39;</code> 来实现。（<strong>该设置应谨慎使用，因为如果有多个属性同时更新，这将导致一些性能和数据一致性的问题。</strong>）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, watchEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> firstname = <span class=\"string\">&quot;john&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;watson&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> fullname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  fullname.<span class=\"property\">value</span> = firstname + lastname.<span class=\"property\">value</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"所以它经常被用来：\"><a href=\"#所以它经常被用来：\" class=\"headerlink\" title=\"所以它经常被用来：\"></a>所以它经常被用来：</h4><ul>\n<li>观察反应变量的变化</li>\n<li>允许开发者执行副作用</li>\n<li>提供一种取消副作用的方法（以防状态无效）<h4 id=\"watch和watchEffect之间的区别：\"><a href=\"#watch和watchEffect之间的区别：\" class=\"headerlink\" title=\"watch和watchEffect之间的区别：\"></a>watch和watchEffect之间的区别：</h4></li>\n<li>watch可用于延迟触发副作用（watchEffect总是立即的）。</li>\n<li>watchEffect自动监视任何状态更改的更改（watch必须提供一个或多个要监视的变量）。</li>\n<li>watch提供对当前值和先前值的访问。</li>\n<li>watch也可以用来监听非响应式的数据，但写法比较麻烦。</li>\n</ul>\n<h4 id=\"vue3-的-hooks（vue2的mixin）\"><a href=\"#vue3-的-hooks（vue2的mixin）\" class=\"headerlink\" title=\"vue3 的 hooks（vue2的mixin）\"></a>vue3 的 hooks（vue2的mixin）</h4><p>vue3在共享数据的时候，用的是<code>hooks</code>的方法。<br>比如我想实现一个方法，在鼠标移动时去获取鼠标的坐标<br>定义一个js/ts模块，封装useMousePosition</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; onMounted, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = <span class=\"title function_\">ref</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y = <span class=\"title function_\">ref</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\">event: MouseEvent</span>) =&gt; &#123;</span><br><span class=\"line\">    x.<span class=\"property\">value</span> = event.<span class=\"property\">pageX</span>;</span><br><span class=\"line\">    y.<span class=\"property\">value</span> = event.<span class=\"property\">pageY</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;mousemove&quot;</span>, clickHandler);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; x, y &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在某个vue组件中，直接用引入的方式调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> useMousePosition <span class=\"keyword\">from</span> <span class=\"string\">&quot;../hooks/useMousePosition&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"title function_\">useMousePosition</span>().<span class=\"property\">x</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"title function_\">useMousePosition</span>().<span class=\"property\">y</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; x &#125;&#125;,&#123;&#123; y &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-toRefs\"><a href=\"#9-toRefs\" class=\"headerlink\" title=\"9. toRefs\"></a>9. toRefs</h3><p>toRefs 可以将每一个响应式对象变为一个普通对象，该普通对象的每一个property都是一个ref。</p>\n<h4 id=\"toRefs解决问题的场景：\"><a href=\"#toRefs解决问题的场景：\" class=\"headerlink\" title=\"toRefs解决问题的场景：\"></a>toRefs解决问题的场景：</h4><p>使用<code>reactive</code>去定义响应式对象的时候，如果对象层级较多，写起来会显得不简洁，而如果使用<code>...</code>解构赋值的话，对象的属性又会失去响应式。</p>\n<p>为了解构赋值的时候不失去响应式，可以使用<code>toRefs</code>将响应式对象内部的所有变量变成响应式的。</p>\n<p>不过这种方式现在在<code>script setup</code>中基本没有好的实现方法，只能在setup()里面用用。。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// 现在暂时没什么好方法，去在script setup里使用toRefs，所以用这种方式来写</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; toRefs, reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">personReactive</span>: <span class=\"title class_\">Object</span> = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;john&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">age</span>: <span class=\"number\">133</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> personObj = <span class=\"title function_\">toRefs</span>(personReactive);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...personObj,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-toRef\"><a href=\"#10-toRef\" class=\"headerlink\" title=\"10. toRef()\"></a>10. toRef()</h3><p><code>toRef(obj,&#39;propname&#39;)</code>可以将reactive的某一个属性转换为Ref</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, isRef, toRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;john&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"attr\">other</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">employee</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"title function_\">toRef</span>(state, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clickHandler</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  name.<span class=\"property\">value</span> += name.<span class=\"property\">value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>name:&#123;&#123; name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-confirm&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;clickHandler&quot;</span>&gt;</span>确认<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-isRef\"><a href=\"#11-isRef\" class=\"headerlink\" title=\"11. isRef()\"></a>11. isRef()</h3><p>检查某个值是否为ref</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">foo</span>: unknown;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_\">isRef</span>(foo)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// foo 的类型被收窄为了 Ref&lt;unknown&gt;</span></span><br><span class=\"line\">  foo.<span class=\"property\">value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、组合式api-进阶\"><a href=\"#四、组合式api-进阶\" class=\"headerlink\" title=\"四、组合式api 进阶\"></a>四、组合式api 进阶</h2><h3 id=\"1-shallowReactive和shallowRef\"><a href=\"#1-shallowReactive和shallowRef\" class=\"headerlink\" title=\"1. shallowReactive和shallowRef\"></a>1. shallowReactive和shallowRef</h3><p><code>shallowReactive</code>包装对象，只让对象的第一层有响应。<br><code>shallowRef</code>包装对象，是生成一个非响应式的对象，就是说将对象重新赋值是可以有响应式的，但为对象的任意属性赋值都是没有响应式的。<br>（可是就我自己实验观察。。好像ShallowRef也可以触发第一层的响应）<br><code>shallowRef</code>包装基本类型，和Ref用法一样。<br>shallowRef官网的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"title function_\">shallowRef</span>(&#123; <span class=\"attr\">count</span>: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不会触发更改</span></span><br><span class=\"line\">state.<span class=\"property\">value</span>.<span class=\"property\">count</span> = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 会触发更改</span></span><br><span class=\"line\">state.<span class=\"property\">value</span> = &#123; <span class=\"attr\">count</span>: <span class=\"number\">2</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>shallowReactive 官网的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"title function_\">shallowReactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">nested</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更改状态自身的属性是响应式的</span></span><br><span class=\"line\">state.<span class=\"property\">foo</span>++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...但下层嵌套对象不会被转为响应式</span></span><br><span class=\"line\"><span class=\"title function_\">isReactive</span>(state.<span class=\"property\">nested</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不是响应式的</span></span><br><span class=\"line\">state.<span class=\"property\">nested</span>.<span class=\"property\">bar</span>++</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>因为有疑惑，所以自己的代码先不贴了。</p>\n<h4 id=\"2-triggerRef\"><a href=\"#2-triggerRef\" class=\"headerlink\" title=\"2. triggerRef()\"></a>2. triggerRef()</h4><p>强制触发依赖于一个<a href=\"https://cn.vuejs.org/api/reactivity-advanced.html#shallowref\">浅层 ref</a> 的副作用，这通常在对浅引用的内部值进行深度变更后使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">triggerRef</span>(<span class=\"params\">ref: ShallowRef</span>): <span class=\"keyword\">void</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> shallow = <span class=\"title function_\">shallowRef</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">greet</span>: <span class=\"string\">&#x27;Hello, world&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 触发该副作用第一次应该会打印 &quot;Hello, world&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(shallow.<span class=\"property\">value</span>.<span class=\"property\">greet</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这次变更不应触发副作用，因为这个 ref 是浅层的</span></span><br><span class=\"line\">shallow.<span class=\"property\">value</span>.<span class=\"property\">greet</span> = <span class=\"string\">&#x27;Hello, universe&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;Hello, universe&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">triggerRef</span>(shallow)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-readonly、shallowReadonly、isReadonly\"><a href=\"#3-readonly、shallowReadonly、isReadonly\" class=\"headerlink\" title=\"3. readonly、shallowReadonly、isReadonly\"></a>3. readonly、shallowReadonly、isReadonly</h4><p><code>readonly()</code>接受一个对象 (不论是响应式还是普通的) 或是一个<code>ref</code>，返回一个原值的只读代理。只读代理是深层的。</p>\n<h5 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly()\"></a>readonly()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> original = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> copy </span><br><span class=\"line\">= <span class=\"title function_\">readonly</span>(original)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用来做响应性追踪</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(copy.<span class=\"property\">count</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更改源属性会触发其依赖的侦听器</span></span><br><span class=\"line\">original.<span class=\"property\">count</span>++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更改该只读副本将会失败，并会得到一个警告</span></span><br><span class=\"line\">copy.<span class=\"property\">count</span>++ <span class=\"comment\">// warning!</span></span><br></pre></td></tr></table></figure>\n<p><code>shallowReadonly</code>只有表层是只读的<br><code>isReadonly</code>判断某个变量是不是只读的</p>\n<h5 id=\"shallowReadonly\"><a href=\"#shallowReadonly\" class=\"headerlink\" title=\"shallowReadonly\"></a>shallowReadonly</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"title function_\">shallowReadonly</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">nested</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更改状态自身的属性会失败</span></span><br><span class=\"line\">state.<span class=\"property\">foo</span>++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...但可以更改下层嵌套对象</span></span><br><span class=\"line\"><span class=\"title function_\">isReadonly</span>(state.<span class=\"property\">nested</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是可以通过的</span></span><br><span class=\"line\">state.<span class=\"property\">nested</span>.<span class=\"property\">bar</span>++</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-toRaw-markRaw\"><a href=\"#4-toRaw-markRaw\" class=\"headerlink\" title=\"4. toRaw()  markRaw()\"></a>4. toRaw()  markRaw()</h4><p>toRaw 把代理的响应式对象变为了普通对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, toRaw, markRaw &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// toRaw 把代理的响应式对象变为了普通对象</span></span><br><span class=\"line\"><span class=\"comment\">// markRaw 将一个对象标记为不可被转为代理。返回该对象本身。</span></span><br><span class=\"line\">interface <span class=\"title class_\">PersonInfo</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">props</span>: string]: any; <span class=\"comment\">// 我为了省事儿这么写的，一般还是严谨些写阿。。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">originObj</span>: <span class=\"title class_\">PersonInfo</span> = reactive&lt;<span class=\"title class_\">PersonInfo</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;john&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> toRawObj = <span class=\"title function_\">toRaw</span>(originObj);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clickHandler</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  toRawObj.<span class=\"property\">age</span>--;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(toRawObj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; toRawObj &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"comment\">&lt;!-- &lt;div&gt;&#123;&#123; markRawObj &#125;&#125;&lt;/div&gt; --&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-confirm&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;clickHandler&quot;</span>&gt;</span>确定toRaw<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-confirm&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;clickHandler&quot;</span>&gt;</span>确定markRow<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>markRaw 将一个对象标记为不可被转为代理。返回该对象本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"title function_\">markRaw</span>(&#123;&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isReactive</span>(<span class=\"title function_\">reactive</span>(foo))) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也适用于嵌套在其他响应性对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"title function_\">reactive</span>(&#123; foo &#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isReactive</span>(bar.<span class=\"property\">foo</span>)) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-customRef\"><a href=\"#5-customRef\" class=\"headerlink\" title=\"5. customRef()\"></a>5. customRef()</h4><p>创建一个自定义的 ref，显式声明对其依赖追踪和更新触发的控制方式。<br>myRef接收一个值，返回customRef函数的执行 结果，这个函数接收2个参数，一个track（追踪）,一个trgger(触发)。<br>返回一个存储器对象，有个get和set方法，取值时执行get,赋值时执行set。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myRef</span>(<span class=\"params\">value</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">customRef</span>(<span class=\"function\">(<span class=\"params\">track,trigger</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//追踪</span></span><br><span class=\"line\">        <span class=\"title function_\">track</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newValue</span>)&#123;</span><br><span class=\"line\">        value=newValue</span><br><span class=\"line\">      <span class=\"comment\">//触发更新</span></span><br><span class=\"line\">        <span class=\"title function_\">trigger</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>官网写了一个防抖的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, customRef, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\">interface <span class=\"title class_\">PersonInfo</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">props</span>: string]: any; <span class=\"comment\">// 我为了省事儿这么写的，一般还是严谨些写阿。。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">originObj</span>: <span class=\"title class_\">PersonInfo</span> = reactive&lt;<span class=\"title class_\">PersonInfo</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;john&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> keyword = <span class=\"title function_\">useDebounceRef</span>(<span class=\"string\">&quot;abc&quot;</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-Fragment（碎片）和Teleport（瞬移）\"><a href=\"#6-Fragment（碎片）和Teleport（瞬移）\" class=\"headerlink\" title=\"6. Fragment（碎片）和Teleport（瞬移）\"></a>6. Fragment（碎片）和Teleport（瞬移）</h3><p><code>Fragment</code>：vue3不需要根标签了。<br><code>Teleport</code>：让组件的html可以在父组件外的特定标签下面插入展示。（比如body）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-confirm&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showModal(true)&quot;</span>&gt;</span>打开对话框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Teleport</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;body&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;modal-wrapper&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isShowModal&quot;</span>&gt;</span>对话框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-confirm&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showModal(false)&quot;</span>&gt;</span>关闭对话框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Teleport</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<p>用 <Teleport to=\"body\"></Teleport>标签将子组件内的一部分内容包裹，那么这部分内容就会在body中展示。</p>\n<h3 id=\"7-Suspense\"><a href=\"#7-Suspense\" class=\"headerlink\" title=\"7. Suspense\"></a>7. Suspense</h3><p>比如页面里面要做一些异步操作，或者说调一些异步组件，这时候可能会出现等待的情况，那么在等待过程中，可以使用suspense渲染一些后备内容。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"Vue3和Vue2的区别\"><a href=\"#Vue3和Vue2的区别\" class=\"headerlink\" title=\"Vue3和Vue2的区别\"></a>Vue3和Vue2的区别</h2><ul>\n<li>Vue3支持2的大多数写法</li>\n<li>更好的支持Typescript</li>\n<li>使用Proxy代替了defineProperty</li>\n<li>重写了虚拟dom的实现，及Tree Shaking的实现。</li>\n<li>从Option api变成Composition api<ul>\n<li>setup<ul>\n<li>ref和reactive</li>\n<li>computed和watch</li>\n<li>provide和inject</li>\n<li>生命周期的更改</li>\n</ul>\n</li>\n<li>新组件<ul>\n<li>Fragment</li>\n<li>Teleport</li>\n<li>Suspense</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>全局api的修改</li>\n<li>原来的全局api转移到应用对象</li>\n<li>模板语法修改</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"一、新建\"><a href=\"#一、新建\" class=\"headerlink\" title=\"一、新建\"></a>一、新建</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vue</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create vite</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、Composition-API（组合式API）和Options-API\"><a href=\"#二、Composition-API（组合式API）和Options-API\" class=\"headerlink\" title=\"二、Composition API（组合式API）和Options API\"></a>二、Composition API（组合式API）和Options API</h2><h4 id=\"1-Composition-API带来了什么？\"><a href=\"#1-Composition-API带来了什么？\" class=\"headerlink\" title=\"1. Composition API带来了什么？\"></a>1. Composition API带来了什么？</h4><ul>\n<li>代码组织的更加整齐</li>\n<li>逻辑复用做的更加清晰</li>\n<li>更好的类型推导<br><img src=\"https://upload-images.jianshu.io/upload_images/20892169-a033ffcf9ab7f6a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"option api和composition api的对比\"></li>\n</ul>\n<p>composition api可以将声明的变量和方法等放在一起，这样会使代码更整齐，也方便逻辑复用。</p>\n<h4 id=\"2-如何选择？\"><a href=\"#2-如何选择？\" class=\"headerlink\" title=\"2. 如何选择？\"></a>2. 如何选择？</h4><ul>\n<li>最好不要共用Options API和Compositions API</li>\n<li>小型项目就用Options API，逻辑复杂用Composition API</li>\n<li>Compositon API 就像 Hooks在React</li>\n</ul>\n<h2 id=\"三、-组合式api\"><a href=\"#三、-组合式api\" class=\"headerlink\" title=\"三、 组合式api\"></a>三、 组合式api</h2><h3 id=\"1-ref\"><a href=\"#1-ref\" class=\"headerlink\" title=\"1. ref\"></a>1. ref</h3><p>ref用来定义<strong>基本数据类型</strong>的响应式。</p>\n<p><em>备注：ref也可以用来定义对象或数组类型数据，它内部会自动通过 reactive 转为代理对象。</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> aaa = <span class=\"title function_\">ref</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">12</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">13333</span>,</span><br><span class=\"line\">  <span class=\"attr\">items</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;f&#x27;</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeName</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  aaa.<span class=\"property\">value</span>.<span class=\"property\">items</span>[<span class=\"number\">0</span>].<span class=\"property\">id</span>++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;greetings&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; aaa.items[0].id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeName()&quot;</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<p>在setup中使用value去获取值，在vue模板中直接使用变量名去获取。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang = <span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count.<span class=\"property\">value</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ref-可以用来获取dom元素\"><a href=\"#ref-可以用来获取dom元素\" class=\"headerlink\" title=\"ref 可以用来获取dom元素\"></a>ref 可以用来获取dom元素</h4><p>在dom上绑定ref=xxx，在 setup 中定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xxx = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure>\n<p>xxx就是dom元素。<br>当然，绑定在组件上就可以获取组件的元素和方法。</p>\n<h3 id=\"2-reactive\"><a href=\"#2-reactive\" class=\"headerlink\" title=\"2. reactive\"></a>2. reactive</h3><p>reactive用来定义多个对象的响应式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"attr\">wife</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;小甜甜&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">cars</span>: [<span class=\"string\">&quot;奔驰&quot;</span>, <span class=\"string\">&quot;宝马&quot;</span>, <span class=\"string\">&quot;奥迪&quot;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、reactive和ref的区别\"><a href=\"#3、reactive和ref的区别\" class=\"headerlink\" title=\"3、reactive和ref的区别\"></a>3、reactive和ref的区别</h3><h4 id=\"3-1-定义数据角度对比：\"><a href=\"#3-1-定义数据角度对比：\" class=\"headerlink\" title=\"3.1. 定义数据角度对比：\"></a>3.1. 定义数据角度对比：</h4><p><code>ref</code> 用来定义：基本类型数据<br><code>reactive</code> 用来定义：引用类型，例如对象、或<a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020\">数组</a>类型的数据</p>\n<h4 id=\"3-2-原理角度对比：\"><a href=\"#3-2-原理角度对比：\" class=\"headerlink\" title=\"3.2. 原理角度对比：\"></a>3.2. 原理角度对比：</h4><p><code>ref</code>通过 Class 的 get 与 set 来实现响应式的（数据劫持）<br><code>reactive</code> 通过使用 Proxy 来实现响应式（数据劫持），并通过Reflect 操作源对象内部的数据。</p>\n<h4 id=\"3-3-使用角度对比：\"><a href=\"#3-3-使用角度对比：\" class=\"headerlink\" title=\"3.3. 使用角度对比：\"></a>3.3. 使用角度对比：</h4><p><code>ref</code> 定义的数据：操作数据需要 .value,读取数据时模版中直接读取不需要 .value<br><code>reactive</code> 定义的数据：操作数据与读取数据，均不需要 .value</p>\n<h4 id=\"3-4-reactive和ref的关系\"><a href=\"#3-4-reactive和ref的关系\" class=\"headerlink\" title=\"3.4. reactive和ref的关系\"></a>3.4. reactive和ref的关系</h4><p>如果用ref对象/数组，内部会自动将对象/数组转为reactive的代理对象。</p>\n<h3 id=\"5-setup\"><a href=\"#5-setup\" class=\"headerlink\" title=\"5. setup\"></a>5. setup</h3><h4 id=\"5-1-setup的执行时机\"><a href=\"#5-1-setup的执行时机\" class=\"headerlink\" title=\"5.1. setup的执行时机\"></a>5.1. setup的执行时机</h4><p>在vue2的beforeCreate的生命周期之前执行，且只执行一次。<br>setup执行时，当前组件未创建，所以没有this</p>\n<h4 id=\"5-2-setup-props-context\"><a href=\"#5-2-setup-props-context\" class=\"headerlink\" title=\"5.2. setup(props,context)\"></a>5.2. setup(props,context)</h4><p><code>setup</code>函数的第一个参数为<code>props</code>，<code>props</code>不可以解构，如果解构会导致<code>props</code>失去响应式。<br><code>setup</code>函数的第二个参数为context，context可以解构，解构后为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; attrs, slots, emit, expose &#125;</span><br></pre></td></tr></table></figure>\n<p>即：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setup</span>(<span class=\"params\">props, context</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 透传 Attributes（非响应式的对象，等价于 $attrs）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context.<span class=\"property\">attrs</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插槽（非响应式的对象，等价于 $slots）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context.<span class=\"property\">slots</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 触发事件（函数，等价于 $emit）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context.<span class=\"property\">emit</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暴露公共属性（函数）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context.<span class=\"property\">expose</span>)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setup</span>(<span class=\"params\">props,context</span>) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>都是ok的。<br>在<script setup></script>中，引入defineProp使用props</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineEmits, defineProps &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> props = defineProps&lt;&#123;</span><br><span class=\"line\">  <span class=\"attr\">modelValue</span>: string;</span><br><span class=\"line\">&#125;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">let</span> emit = <span class=\"title function_\">defineEmits</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-computed\"><a href=\"#6-computed\" class=\"headerlink\" title=\"6. computed\"></a>6. computed</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> firstname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;john&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;watson&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> fullname = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;firstname.value&#125;</span> <span class=\"subst\">$&#123;lastname.value&#125;</span>`</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-watch\"><a href=\"#7-watch\" class=\"headerlink\" title=\"7. watch\"></a>7. watch</h3><p>watch有三个参数，第一个是监听的变量。（如果有多个变量想同时监听，可以使用数组）<br>第二个是函数，可以监听到旧值与新值。<br>第三个参数可以配置deep、immediate等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, computed, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> firstname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;john&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;watson&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> fullname = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;firstname.value&#125;</span> <span class=\"subst\">$&#123;lastname.value&#125;</span>`</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// watch三个参数，第一个是监听的变量。（如果有多个变量想同时监听，可以使用数组）第二个是函数，可以监听到旧值与新值，第三个参数可以配置deep、immediate等</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">  fullname,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`newFullName=<span class=\"subst\">$&#123;newVal&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`oldFullName=<span class=\"subst\">$&#123;oldVal&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-watchEffect\"><a href=\"#8-watchEffect\" class=\"headerlink\" title=\"8. watchEffect\"></a>8. watchEffect</h3><p>立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行。<br>第一个参数是一个方法，方法的参数可以用来清理无效的副作用，清理回调会在该副作用下一次执行前被调用。<br>第二个参数是一个可选的选项，可以用来调整副作用的刷新时机或调试副作用的依赖。</p>\n<h4 id=\"flush的值\"><a href=\"#flush的值\" class=\"headerlink\" title=\"flush的值\"></a>flush的值</h4><p>默认情况下，侦听器将在组件渲染之前执行。</p>\n<p>设置 <code>flush: &#39;post&#39;</code> 将会使侦听器延迟到组件渲染之后再执行。<br>在某些特殊情况下 (例如要使缓存失效)，可能有必要在响应式依赖发生改变时立即触发侦听器。这可以通过设置 <code>flush: &#39;sync&#39;</code> 来实现。（<strong>该设置应谨慎使用，因为如果有多个属性同时更新，这将导致一些性能和数据一致性的问题。</strong>）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, watchEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> firstname = <span class=\"string\">&quot;john&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;watson&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> fullname = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  fullname.<span class=\"property\">value</span> = firstname + lastname.<span class=\"property\">value</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"所以它经常被用来：\"><a href=\"#所以它经常被用来：\" class=\"headerlink\" title=\"所以它经常被用来：\"></a>所以它经常被用来：</h4><ul>\n<li>观察反应变量的变化</li>\n<li>允许开发者执行副作用</li>\n<li>提供一种取消副作用的方法（以防状态无效）<h4 id=\"watch和watchEffect之间的区别：\"><a href=\"#watch和watchEffect之间的区别：\" class=\"headerlink\" title=\"watch和watchEffect之间的区别：\"></a>watch和watchEffect之间的区别：</h4></li>\n<li>watch可用于延迟触发副作用（watchEffect总是立即的）。</li>\n<li>watchEffect自动监视任何状态更改的更改（watch必须提供一个或多个要监视的变量）。</li>\n<li>watch提供对当前值和先前值的访问。</li>\n<li>watch也可以用来监听非响应式的数据，但写法比较麻烦。</li>\n</ul>\n<h4 id=\"vue3-的-hooks（vue2的mixin）\"><a href=\"#vue3-的-hooks（vue2的mixin）\" class=\"headerlink\" title=\"vue3 的 hooks（vue2的mixin）\"></a>vue3 的 hooks（vue2的mixin）</h4><p>vue3在共享数据的时候，用的是<code>hooks</code>的方法。<br>比如我想实现一个方法，在鼠标移动时去获取鼠标的坐标<br>定义一个js/ts模块，封装useMousePosition</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; onMounted, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = <span class=\"title function_\">ref</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y = <span class=\"title function_\">ref</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\">event: MouseEvent</span>) =&gt; &#123;</span><br><span class=\"line\">    x.<span class=\"property\">value</span> = event.<span class=\"property\">pageX</span>;</span><br><span class=\"line\">    y.<span class=\"property\">value</span> = event.<span class=\"property\">pageY</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;mousemove&quot;</span>, clickHandler);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; x, y &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在某个vue组件中，直接用引入的方式调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> useMousePosition <span class=\"keyword\">from</span> <span class=\"string\">&quot;../hooks/useMousePosition&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"title function_\">useMousePosition</span>().<span class=\"property\">x</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"title function_\">useMousePosition</span>().<span class=\"property\">y</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; x &#125;&#125;,&#123;&#123; y &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-toRefs\"><a href=\"#9-toRefs\" class=\"headerlink\" title=\"9. toRefs\"></a>9. toRefs</h3><p>toRefs 可以将每一个响应式对象变为一个普通对象，该普通对象的每一个property都是一个ref。</p>\n<h4 id=\"toRefs解决问题的场景：\"><a href=\"#toRefs解决问题的场景：\" class=\"headerlink\" title=\"toRefs解决问题的场景：\"></a>toRefs解决问题的场景：</h4><p>使用<code>reactive</code>去定义响应式对象的时候，如果对象层级较多，写起来会显得不简洁，而如果使用<code>...</code>解构赋值的话，对象的属性又会失去响应式。</p>\n<p>为了解构赋值的时候不失去响应式，可以使用<code>toRefs</code>将响应式对象内部的所有变量变成响应式的。</p>\n<p>不过这种方式现在在<code>script setup</code>中基本没有好的实现方法，只能在setup()里面用用。。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// 现在暂时没什么好方法，去在script setup里使用toRefs，所以用这种方式来写</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; toRefs, reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">personReactive</span>: <span class=\"title class_\">Object</span> = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;john&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">age</span>: <span class=\"number\">133</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> personObj = <span class=\"title function_\">toRefs</span>(personReactive);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...personObj,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-toRef\"><a href=\"#10-toRef\" class=\"headerlink\" title=\"10. toRef()\"></a>10. toRef()</h3><p><code>toRef(obj,&#39;propname&#39;)</code>可以将reactive的某一个属性转换为Ref</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, isRef, toRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;john&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"attr\">other</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">employee</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"title function_\">toRef</span>(state, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clickHandler</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  name.<span class=\"property\">value</span> += name.<span class=\"property\">value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>name:&#123;&#123; name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-confirm&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;clickHandler&quot;</span>&gt;</span>确认<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-isRef\"><a href=\"#11-isRef\" class=\"headerlink\" title=\"11. isRef()\"></a>11. isRef()</h3><p>检查某个值是否为ref</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">foo</span>: unknown;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_\">isRef</span>(foo)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// foo 的类型被收窄为了 Ref&lt;unknown&gt;</span></span><br><span class=\"line\">  foo.<span class=\"property\">value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、组合式api-进阶\"><a href=\"#四、组合式api-进阶\" class=\"headerlink\" title=\"四、组合式api 进阶\"></a>四、组合式api 进阶</h2><h3 id=\"1-shallowReactive和shallowRef\"><a href=\"#1-shallowReactive和shallowRef\" class=\"headerlink\" title=\"1. shallowReactive和shallowRef\"></a>1. shallowReactive和shallowRef</h3><p><code>shallowReactive</code>包装对象，只让对象的第一层有响应。<br><code>shallowRef</code>包装对象，是生成一个非响应式的对象，就是说将对象重新赋值是可以有响应式的，但为对象的任意属性赋值都是没有响应式的。<br>（可是就我自己实验观察。。好像ShallowRef也可以触发第一层的响应）<br><code>shallowRef</code>包装基本类型，和Ref用法一样。<br>shallowRef官网的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"title function_\">shallowRef</span>(&#123; <span class=\"attr\">count</span>: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不会触发更改</span></span><br><span class=\"line\">state.<span class=\"property\">value</span>.<span class=\"property\">count</span> = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 会触发更改</span></span><br><span class=\"line\">state.<span class=\"property\">value</span> = &#123; <span class=\"attr\">count</span>: <span class=\"number\">2</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>shallowReactive 官网的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"title function_\">shallowReactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">nested</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更改状态自身的属性是响应式的</span></span><br><span class=\"line\">state.<span class=\"property\">foo</span>++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...但下层嵌套对象不会被转为响应式</span></span><br><span class=\"line\"><span class=\"title function_\">isReactive</span>(state.<span class=\"property\">nested</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不是响应式的</span></span><br><span class=\"line\">state.<span class=\"property\">nested</span>.<span class=\"property\">bar</span>++</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>因为有疑惑，所以自己的代码先不贴了。</p>\n<h4 id=\"2-triggerRef\"><a href=\"#2-triggerRef\" class=\"headerlink\" title=\"2. triggerRef()\"></a>2. triggerRef()</h4><p>强制触发依赖于一个<a href=\"https://cn.vuejs.org/api/reactivity-advanced.html#shallowref\">浅层 ref</a> 的副作用，这通常在对浅引用的内部值进行深度变更后使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">triggerRef</span>(<span class=\"params\">ref: ShallowRef</span>): <span class=\"keyword\">void</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> shallow = <span class=\"title function_\">shallowRef</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">greet</span>: <span class=\"string\">&#x27;Hello, world&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 触发该副作用第一次应该会打印 &quot;Hello, world&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(shallow.<span class=\"property\">value</span>.<span class=\"property\">greet</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这次变更不应触发副作用，因为这个 ref 是浅层的</span></span><br><span class=\"line\">shallow.<span class=\"property\">value</span>.<span class=\"property\">greet</span> = <span class=\"string\">&#x27;Hello, universe&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 &quot;Hello, universe&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">triggerRef</span>(shallow)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-readonly、shallowReadonly、isReadonly\"><a href=\"#3-readonly、shallowReadonly、isReadonly\" class=\"headerlink\" title=\"3. readonly、shallowReadonly、isReadonly\"></a>3. readonly、shallowReadonly、isReadonly</h4><p><code>readonly()</code>接受一个对象 (不论是响应式还是普通的) 或是一个<code>ref</code>，返回一个原值的只读代理。只读代理是深层的。</p>\n<h5 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly()\"></a>readonly()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> original = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> copy </span><br><span class=\"line\">= <span class=\"title function_\">readonly</span>(original)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用来做响应性追踪</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(copy.<span class=\"property\">count</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更改源属性会触发其依赖的侦听器</span></span><br><span class=\"line\">original.<span class=\"property\">count</span>++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更改该只读副本将会失败，并会得到一个警告</span></span><br><span class=\"line\">copy.<span class=\"property\">count</span>++ <span class=\"comment\">// warning!</span></span><br></pre></td></tr></table></figure>\n<p><code>shallowReadonly</code>只有表层是只读的<br><code>isReadonly</code>判断某个变量是不是只读的</p>\n<h5 id=\"shallowReadonly\"><a href=\"#shallowReadonly\" class=\"headerlink\" title=\"shallowReadonly\"></a>shallowReadonly</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"title function_\">shallowReadonly</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">nested</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更改状态自身的属性会失败</span></span><br><span class=\"line\">state.<span class=\"property\">foo</span>++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...但可以更改下层嵌套对象</span></span><br><span class=\"line\"><span class=\"title function_\">isReadonly</span>(state.<span class=\"property\">nested</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是可以通过的</span></span><br><span class=\"line\">state.<span class=\"property\">nested</span>.<span class=\"property\">bar</span>++</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-toRaw-markRaw\"><a href=\"#4-toRaw-markRaw\" class=\"headerlink\" title=\"4. toRaw()  markRaw()\"></a>4. toRaw()  markRaw()</h4><p>toRaw 把代理的响应式对象变为了普通对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, toRaw, markRaw &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// toRaw 把代理的响应式对象变为了普通对象</span></span><br><span class=\"line\"><span class=\"comment\">// markRaw 将一个对象标记为不可被转为代理。返回该对象本身。</span></span><br><span class=\"line\">interface <span class=\"title class_\">PersonInfo</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">props</span>: string]: any; <span class=\"comment\">// 我为了省事儿这么写的，一般还是严谨些写阿。。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">originObj</span>: <span class=\"title class_\">PersonInfo</span> = reactive&lt;<span class=\"title class_\">PersonInfo</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;john&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> toRawObj = <span class=\"title function_\">toRaw</span>(originObj);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clickHandler</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  toRawObj.<span class=\"property\">age</span>--;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(toRawObj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; toRawObj &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"comment\">&lt;!-- &lt;div&gt;&#123;&#123; markRawObj &#125;&#125;&lt;/div&gt; --&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-confirm&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;clickHandler&quot;</span>&gt;</span>确定toRaw<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-confirm&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;clickHandler&quot;</span>&gt;</span>确定markRow<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>markRaw 将一个对象标记为不可被转为代理。返回该对象本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"title function_\">markRaw</span>(&#123;&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isReactive</span>(<span class=\"title function_\">reactive</span>(foo))) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也适用于嵌套在其他响应性对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"title function_\">reactive</span>(&#123; foo &#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isReactive</span>(bar.<span class=\"property\">foo</span>)) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-customRef\"><a href=\"#5-customRef\" class=\"headerlink\" title=\"5. customRef()\"></a>5. customRef()</h4><p>创建一个自定义的 ref，显式声明对其依赖追踪和更新触发的控制方式。<br>myRef接收一个值，返回customRef函数的执行 结果，这个函数接收2个参数，一个track（追踪）,一个trgger(触发)。<br>返回一个存储器对象，有个get和set方法，取值时执行get,赋值时执行set。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myRef</span>(<span class=\"params\">value</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">customRef</span>(<span class=\"function\">(<span class=\"params\">track,trigger</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//追踪</span></span><br><span class=\"line\">        <span class=\"title function_\">track</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newValue</span>)&#123;</span><br><span class=\"line\">        value=newValue</span><br><span class=\"line\">      <span class=\"comment\">//触发更新</span></span><br><span class=\"line\">        <span class=\"title function_\">trigger</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>官网写了一个防抖的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, customRef, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\">interface <span class=\"title class_\">PersonInfo</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">props</span>: string]: any; <span class=\"comment\">// 我为了省事儿这么写的，一般还是严谨些写阿。。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">originObj</span>: <span class=\"title class_\">PersonInfo</span> = reactive&lt;<span class=\"title class_\">PersonInfo</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;john&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> keyword = <span class=\"title function_\">useDebounceRef</span>(<span class=\"string\">&quot;abc&quot;</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-Fragment（碎片）和Teleport（瞬移）\"><a href=\"#6-Fragment（碎片）和Teleport（瞬移）\" class=\"headerlink\" title=\"6. Fragment（碎片）和Teleport（瞬移）\"></a>6. Fragment（碎片）和Teleport（瞬移）</h3><p><code>Fragment</code>：vue3不需要根标签了。<br><code>Teleport</code>：让组件的html可以在父组件外的特定标签下面插入展示。（比如body）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-confirm&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showModal(true)&quot;</span>&gt;</span>打开对话框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Teleport</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;body&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;modal-wrapper&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isShowModal&quot;</span>&gt;</span>对话框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-confirm&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showModal(false)&quot;</span>&gt;</span>关闭对话框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Teleport</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<p>用 <Teleport to=\"body\"></Teleport>标签将子组件内的一部分内容包裹，那么这部分内容就会在body中展示。</p>\n<h3 id=\"7-Suspense\"><a href=\"#7-Suspense\" class=\"headerlink\" title=\"7. Suspense\"></a>7. Suspense</h3><p>比如页面里面要做一些异步操作，或者说调一些异步组件，这时候可能会出现等待的情况，那么在等待过程中，可以使用suspense渲染一些后备内容。</p>\n"},{"title":"【vue】vue2和vue3分别实现数据侦听","date":"2020-08-21T10:16:25.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n## Object.defineProperty(obj, prop, descriptor)\n在js原生对象中，实现数据侦听的方法就是defineProperty。\n#### 使用示例如下：\n```javascript\nvar obj = new Object();\nvar value;\nObject.defineProperty(obj,'name',{\n    get: function () {\n        console.log(`get${obj['name']} `);\n        return value;//必须return一个值，作为name属性的值\n    },\n    set: function (newvalue) {\n        console.log('set it');\n        value = newvalue;//同步把value的值进行更新\n    }\n});\nconsole.log(obj);\nconsole.log(obj.name);//get it\nobj.name = ’aaaaa‘;//set it\nconsole.log(obj.name);//get it\n```\n#### vue2中使用defineProperty中实现数据侦听\n建立一个html文件，dom结构如下\n```javascript\n<div class=\"wrapper\"></div>\n```\n编写侦听函数\n```javascript\nfunction observe(target) {\n\tif (typeof target !== \"null\" && typeof target !== \"object\") {\n\t\treturn target;\n\t}\n\tfor (let key in target) {\n\t\tdefineReactive(target, key, target[key]);\n\t}\n}\n```\n实现侦听的函数\n```javascript\nfunction defineReactive(target, key, value) {\n\tobserve(value); // 使用递归，实现深度监听\n\tObject.defineProperty(target, key, {\n\t\tget() {\n\t\t\treturn value;\n\t\t},\n\t\tset(newValue) {\n\t\t\tif (value !== newValue) {\n\t\t\t\tvalue = newValue;\n\t\t\t\tupdateView(JSON.stringify(target));\n\t\t\t} else {\n\t\t\t\tconsole.log(\"value == newValue\");\n\t\t\t}\n\t\t}\n\t});\n}\n```\n当数据更改时，更新视图\n```javascript\nfunction updateView(value) {\n\tdocument.querySelector(\".wrapper\").innerText = value;\n}\n\nlet serveObj = {\n\tname: \"aaaccc\",\n\tage: 11,\n\tother: {\n\t\tsex: \"f\"\n\t}\n};\n```\n```javascript\nobserve(serveObj); \n\nserveObj.name = \"sdfdsfsdfsd\" // dom会实时改变innerHtml的内容 。\n```\n## proxy\n拦截代理，拦截对应的操作后，进行处理，会新生成一个对象，然后通过proxy生产的对象去改变原对象。\n#### 使用方法：\n```javascript\nlet obj = { a: 1 };\nlet proxy = new Proxy(obj, {\n\tget(target, key) {\n\t\treturn target[key];\n\t},\n\tset(target, key, value, proxy) {\n\t\ttarget[key] = value;\ndocument.querySelector(\".wrapper\").innerText = JSON.stringify(proxy);\n\t}\n});\n\nproxy.b = 1;\nobj // {a: 1, b: 1}\n```\n","source":"_posts/cxy/framework/vue/vue-defineProperty.md","raw":"---\ntitle: '【vue】vue2和vue3分别实现数据侦听'\ndate: 2020-08-21 18:16:25\ntags: vue\ncategories:\n  - 程序员的自我修养\n---\n<meta name=\"referrer\" content=\"no-referrer\">\n\n## Object.defineProperty(obj, prop, descriptor)\n在js原生对象中，实现数据侦听的方法就是defineProperty。\n#### 使用示例如下：\n```javascript\nvar obj = new Object();\nvar value;\nObject.defineProperty(obj,'name',{\n    get: function () {\n        console.log(`get${obj['name']} `);\n        return value;//必须return一个值，作为name属性的值\n    },\n    set: function (newvalue) {\n        console.log('set it');\n        value = newvalue;//同步把value的值进行更新\n    }\n});\nconsole.log(obj);\nconsole.log(obj.name);//get it\nobj.name = ’aaaaa‘;//set it\nconsole.log(obj.name);//get it\n```\n#### vue2中使用defineProperty中实现数据侦听\n建立一个html文件，dom结构如下\n```javascript\n<div class=\"wrapper\"></div>\n```\n编写侦听函数\n```javascript\nfunction observe(target) {\n\tif (typeof target !== \"null\" && typeof target !== \"object\") {\n\t\treturn target;\n\t}\n\tfor (let key in target) {\n\t\tdefineReactive(target, key, target[key]);\n\t}\n}\n```\n实现侦听的函数\n```javascript\nfunction defineReactive(target, key, value) {\n\tobserve(value); // 使用递归，实现深度监听\n\tObject.defineProperty(target, key, {\n\t\tget() {\n\t\t\treturn value;\n\t\t},\n\t\tset(newValue) {\n\t\t\tif (value !== newValue) {\n\t\t\t\tvalue = newValue;\n\t\t\t\tupdateView(JSON.stringify(target));\n\t\t\t} else {\n\t\t\t\tconsole.log(\"value == newValue\");\n\t\t\t}\n\t\t}\n\t});\n}\n```\n当数据更改时，更新视图\n```javascript\nfunction updateView(value) {\n\tdocument.querySelector(\".wrapper\").innerText = value;\n}\n\nlet serveObj = {\n\tname: \"aaaccc\",\n\tage: 11,\n\tother: {\n\t\tsex: \"f\"\n\t}\n};\n```\n```javascript\nobserve(serveObj); \n\nserveObj.name = \"sdfdsfsdfsd\" // dom会实时改变innerHtml的内容 。\n```\n## proxy\n拦截代理，拦截对应的操作后，进行处理，会新生成一个对象，然后通过proxy生产的对象去改变原对象。\n#### 使用方法：\n```javascript\nlet obj = { a: 1 };\nlet proxy = new Proxy(obj, {\n\tget(target, key) {\n\t\treturn target[key];\n\t},\n\tset(target, key, value, proxy) {\n\t\ttarget[key] = value;\ndocument.querySelector(\".wrapper\").innerText = JSON.stringify(proxy);\n\t}\n});\n\nproxy.b = 1;\nobj // {a: 1, b: 1}\n```\n","slug":"cxy/framework/vue/vue-defineProperty","published":1,"updated":"2023-02-05T02:07:38.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf8224jr0005tewi9iloamum","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"Object-defineProperty-obj-prop-descriptor\"><a href=\"#Object-defineProperty-obj-prop-descriptor\" class=\"headerlink\" title=\"Object.defineProperty(obj, prop, descriptor)\"></a>Object.defineProperty(obj, prop, descriptor)</h2><p>在js原生对象中，实现数据侦听的方法就是defineProperty。</p>\n<h4 id=\"使用示例如下：\"><a href=\"#使用示例如下：\" class=\"headerlink\" title=\"使用示例如下：\"></a>使用示例如下：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> value;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj,<span class=\"string\">&#x27;name&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`get<span class=\"subst\">$&#123;obj[<span class=\"string\">&#x27;name&#x27;</span>]&#125;</span> `</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;<span class=\"comment\">//必须return一个值，作为name属性的值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">newvalue</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;set it&#x27;</span>);</span><br><span class=\"line\">        value = newvalue;<span class=\"comment\">//同步把value的值进行更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>);<span class=\"comment\">//get it</span></span><br><span class=\"line\">obj.<span class=\"property\">name</span> = ’aaaaa‘;<span class=\"comment\">//set it</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>);<span class=\"comment\">//get it</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"vue2中使用defineProperty中实现数据侦听\"><a href=\"#vue2中使用defineProperty中实现数据侦听\" class=\"headerlink\" title=\"vue2中使用defineProperty中实现数据侦听\"></a>vue2中使用defineProperty中实现数据侦听</h4><p>建立一个html文件，dom结构如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;wrapper&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>编写侦听函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">observe</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target !== <span class=\"string\">&quot;null&quot;</span> &amp;&amp; <span class=\"keyword\">typeof</span> target !== <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">defineReactive</span>(target, key, target[key]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现侦听的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span>(<span class=\"params\">target, key, value</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">observe</span>(value); <span class=\"comment\">// 使用递归，实现深度监听</span></span><br><span class=\"line\">\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, key, &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"title function_\">set</span>(<span class=\"params\">newValue</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (value !== newValue) &#123;</span><br><span class=\"line\">\t\t\t\tvalue = newValue;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">updateView</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(target));</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;value == newValue&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当数据更改时，更新视图</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateView</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.wrapper&quot;</span>).<span class=\"property\">innerText</span> = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> serveObj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;aaaccc&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">\t<span class=\"attr\">other</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">sex</span>: <span class=\"string\">&quot;f&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">observe</span>(serveObj); </span><br><span class=\"line\"></span><br><span class=\"line\">serveObj.<span class=\"property\">name</span> = <span class=\"string\">&quot;sdfdsfsdfsd&quot;</span> <span class=\"comment\">// dom会实时改变innerHtml的内容 。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h2><p>拦截代理，拦截对应的操作后，进行处理，会新生成一个对象，然后通过proxy生产的对象去改变原对象。</p>\n<h4 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">get</span>(<span class=\"params\">target, key</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"title function_\">set</span>(<span class=\"params\">target, key, value, proxy</span>) &#123;</span><br><span class=\"line\">\t\ttarget[key] = value;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.wrapper&quot;</span>).<span class=\"property\">innerText</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(proxy);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.<span class=\"property\">b</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj <span class=\"comment\">// &#123;a: 1, b: 1&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"Object-defineProperty-obj-prop-descriptor\"><a href=\"#Object-defineProperty-obj-prop-descriptor\" class=\"headerlink\" title=\"Object.defineProperty(obj, prop, descriptor)\"></a>Object.defineProperty(obj, prop, descriptor)</h2><p>在js原生对象中，实现数据侦听的方法就是defineProperty。</p>\n<h4 id=\"使用示例如下：\"><a href=\"#使用示例如下：\" class=\"headerlink\" title=\"使用示例如下：\"></a>使用示例如下：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> value;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj,<span class=\"string\">&#x27;name&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`get<span class=\"subst\">$&#123;obj[<span class=\"string\">&#x27;name&#x27;</span>]&#125;</span> `</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;<span class=\"comment\">//必须return一个值，作为name属性的值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">newvalue</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;set it&#x27;</span>);</span><br><span class=\"line\">        value = newvalue;<span class=\"comment\">//同步把value的值进行更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>);<span class=\"comment\">//get it</span></span><br><span class=\"line\">obj.<span class=\"property\">name</span> = ’aaaaa‘;<span class=\"comment\">//set it</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>);<span class=\"comment\">//get it</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"vue2中使用defineProperty中实现数据侦听\"><a href=\"#vue2中使用defineProperty中实现数据侦听\" class=\"headerlink\" title=\"vue2中使用defineProperty中实现数据侦听\"></a>vue2中使用defineProperty中实现数据侦听</h4><p>建立一个html文件，dom结构如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;wrapper&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>编写侦听函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">observe</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target !== <span class=\"string\">&quot;null&quot;</span> &amp;&amp; <span class=\"keyword\">typeof</span> target !== <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">defineReactive</span>(target, key, target[key]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现侦听的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span>(<span class=\"params\">target, key, value</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">observe</span>(value); <span class=\"comment\">// 使用递归，实现深度监听</span></span><br><span class=\"line\">\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, key, &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"title function_\">set</span>(<span class=\"params\">newValue</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (value !== newValue) &#123;</span><br><span class=\"line\">\t\t\t\tvalue = newValue;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">updateView</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(target));</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;value == newValue&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当数据更改时，更新视图</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateView</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.wrapper&quot;</span>).<span class=\"property\">innerText</span> = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> serveObj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;aaaccc&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">\t<span class=\"attr\">other</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">sex</span>: <span class=\"string\">&quot;f&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">observe</span>(serveObj); </span><br><span class=\"line\"></span><br><span class=\"line\">serveObj.<span class=\"property\">name</span> = <span class=\"string\">&quot;sdfdsfsdfsd&quot;</span> <span class=\"comment\">// dom会实时改变innerHtml的内容 。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h2><p>拦截代理，拦截对应的操作后，进行处理，会新生成一个对象，然后通过proxy生产的对象去改变原对象。</p>\n<h4 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">get</span>(<span class=\"params\">target, key</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"title function_\">set</span>(<span class=\"params\">target, key, value, proxy</span>) &#123;</span><br><span class=\"line\">\t\ttarget[key] = value;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.wrapper&quot;</span>).<span class=\"property\">innerText</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(proxy);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.<span class=\"property\">b</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj <span class=\"comment\">// &#123;a: 1, b: 1&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"【复习整理】sass简单整理","date":"2023-02-05T17:28:59.000Z","_content":"\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 思维导图：\n![](https://upload-images.jianshu.io/upload_images/20892169-561721a3995a9bea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 一、css拓展功能\n### 1. 嵌套规则\nSass 内层的样式可以将它外层的选择器作为父选择器\n```css\n#main {\n  width: 97%;\n\n  p, div {\n    font-size: 2em;\n    a { font-weight: bold; }\n  }\n\n  pre { font-size: 3em; }\n}\n```\n编译为\n\n```css\n#main {\n  width: 97%; }\n  #main p, #main div {\n    font-size: 2em; }\n    #main p a, #main div a {\n      font-weight: bold; }\n  #main pre {\n    font-size: 3em; }\n```\n### 2. 父选择器（&）\n```css\na {\n  font-weight: bold;\n  text-decoration: none;\n  &:hover { text-decoration: underline; }\n  body.firefox & { font-weight: normal; }\n}\n```\n编译为\n```css\na {\n  font-weight: bold;\n  text-decoration: none; }\n  a:hover {\n    text-decoration: underline; }\n  body.firefox a {\n    font-weight: normal; }\n```\n### 3. 属性嵌套（：）\n```css\n.funky{\n  font: {\n    font-family: fantasy;\n    font-size: 30em;\n    font-weight: bold; \n  }\n}\n```\n编译为\n```css\n.funky {\n  font-family: fantasy;\n  font-size: 30em;\n  font-weight: bold; }\n```\n### 4. 占位符选择器（%foo）\n#### 4.1 @extend\n比如，你有一些按钮需要设置样式。这些按钮都具有相同的特征，只是每个按钮的颜色不同。\n你可以创建一个 .button 类以包含按钮的所有通用代码，然后为每个类创建额外的类，为了添加背景颜色之前扩展 .button 类。\n```css\n.button {\n  font-size: 1rem;\n  text-decoration: none;\n  color: #FFFFFF\n}\n```\n```css\n.button-red {\n  @extend .button;\n  background：#900；\n}\n.button-green {\n  @extend .button;\n  background：#090；\n}\n```\n\n#### 4.2 占位符选择器\n写法和class(.)以及id(#)是一致的，但前面的符号为%，必须配合@extend使用。\n它取代以前 CSS 中的基类造成的代码冗余的情形，因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码，\n```css\n%demo1 {\n  border-radius: 10px;\n}\n%demo2 {\n  background-color: #ff0000;\n}\ndiv {\n  @extend %demo1;\n  @extend %demo2;\n}\n```\n编译后：\n```css\ndiv {\n  border-radius: 10px;\n  background-color: #ff0000\n}\n```\n### 5. 注释/* */与 //\n没啥说的\n多行注释会被完整输出到编译后的文件，单行注释则不会。\n\n### 6. SassScript\n#### 6.1 Interactive Shell\n用来测试SassScript的功能，在命令行中输入`sass -i`燃弧输入想要的测试SassScript查看输出结果\n```css\n$ sass -i\n>> \"Hello, Sassy World!\"\n\"Hello, Sassy World!\"\n>> 1px + 1px + 1px\n3px\n>> #777 + #777\n#eeeeee\n```\n#### 6.2 变量$\n```css\n  $width: 5em;\n  .main {\n    width: $width;\n  }\n```\n变量有块级作用域，如果想转换为全局作用域，需要添加!global声明\n```css\n#main {\n  $width: 5em !global;\n  width: $width;\n}\n\n#sidebar {\n  width: $width;\n}\n```\n编译为：\n```css\n#main {\n  width: 5em;\n}\n#sidebar {\n  width: 5em;\n}\n```\n#### 6.3 数据类型\nsass支持6种（喵？）数据类型\n+ 数字，`1, 2, 3, 10px`\n+ 字符串，`\"foo\", 'bar', baz`\n+ 颜色，`blue，#04a3f9`\n+ 布尔，`true，false`\n+ 空值，`null`\n+ 数组，`$list: (1.5em 1em) `或`$list: (1.5em, 1em)`，可以去掉括号\n+ maps，相当于object，`(key1: value1,key2: value2)`\n\n#### 6.4 运算\n\\+ - * / %\n颜色也可以运算\n#### 6.5 函数\nsass提供了一些函数，详细看文档吧。\n#### 6.6 自定义函数\n```css\n$grid-width: 40px;\n$gutter-width: 10px;\n@function grid-width($n) {\n  @return $n * $grid-width + ($n - 1) * $gutter-width;\n}\n#sidebar { width: grid-width(5); }\n```\n#### 6.7 插值语句 #{}\n想要在选择器中使用变量的话，就可以使用插值语句。\n``` css\n$name: foo;\n$attr: border;\np.#{$name} {\n  #{$attr}-color: blue;\n}\n```\n\n#### 6.8 type-of()检测数据类型\n可以使用type-of()检测变量的类型\n```css\n$variable: \"Sass is awesome\";\n$variable2: Sass is awesome;\n```\n```\n>> type-of($variable)\n\"string\"\n```\n\n### 7. 指令\n#### 7.1 @import\n@import \"foo.scss\"\n### 8. 控制指令\n#### 8.1 @if @else if @else\n```css\n$type: monster;\np {\n  @if $type == ocean {\n    color: blue;\n  } @else if $type == matador {\n    color: red;\n  } @else if $type == monster {\n    color: green;\n  } @else {\n    color: black;\n  }\n}\n```\n编译为：\n```\np {\n  color: green; }\n```\n#### 8.2 @for\n@for from through\n@for from to\n```css\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n```\n```css\n.item-1 {\n  width: 2em; }\n.item-2 {\n  width: 4em; }\n.item-3 {\n  width: 6em; }\n```\n**from...through 与 from...to 的区别:**\n\nfrom 1 through 3 表示1/2/3\nfrom 1 to 3 表示 1/2，不包括3\n#### 8.3 @each\n@each in\n```css\n@each $animal in puma, sea-slug, egret, salamander {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n```\n编译为\n```css\n.puma-icon {\n  background-image: url('/images/puma.png'); }\n.sea-slug-icon {\n  background-image: url('/images/sea-slug.png'); }\n.egret-icon {\n  background-image: url('/images/egret.png'); }\n.salamander-icon {\n  background-image: url('/images/salamander.png'); }\n```\n## 九、输出格式\n### 1. 命令\n```sass :style option```\n或\n```sass --style option```\n### 2. 常用的style值\n#### :nested\nNested （嵌套）样式是 Sass 默认的输出格式，能够清晰反映 CSS 与 HTML 的结构关系。选择器与属性等单独占用一行，缩进量与 Sass 文件中一致，每行的缩进量反映了其在嵌套规则内的层数。当阅读大型 CSS 文件时，这种样式可以很容易地分析文件的主要结构。\n```css\n#main {\n  color: #fff;\n  background-color: #000; }\n  #main p {\n    width: 10em; }\n\n.huge {\n  font-size: 10em;\n  font-weight: bold;\n  text-decoration: underline; }\n```\n#### :expanded\nExpanded 输出更像是手写的样式，选择器、属性等各占用一行，属性根据选择器缩进，而选择器不做任何缩进。\n```css\n#main {\n  color: #fff;\n  background-color: #000;\n}\n#main p {\n  width: 10em;\n}\n\n.huge {\n  font-size: 10em;\n  font-weight: bold;\n  text-decoration: underline;\n}\n```\n#### :compact\nCompact 输出方式比起上面两种占用的空间更少，每条 CSS 规则只占一行，包含其下的所有属性。**嵌套过的选择器在输出时没有空行，不嵌套的选择器会输出空白行作为分隔符。**\n```css\n#main p { width: 10em; }\n\n.huge { font-size: 10em; font-weight: bold; text-decoration: underline; }\n```\n#### :compressed\nCompressed 输出方式删除所有无意义的空格、空白行、以及注释，力求**将文件体积压缩到最小**，同时也会做出其他调整，比如会自动替换占用空间最小的颜色表达方式。\n```\n#main{color:#fff;background-color:#000}#main p{width:10em}.huge{font-size:10em;font-weight:bold;text-decoration:underline}\n```","source":"_posts/cxy/css/sass.md","raw":"---\ntitle: 【复习整理】sass简单整理\ndate: 2023-02-06 01:28:59\ncategories: css\n---\n\n  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n## 思维导图：\n![](https://upload-images.jianshu.io/upload_images/20892169-561721a3995a9bea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 一、css拓展功能\n### 1. 嵌套规则\nSass 内层的样式可以将它外层的选择器作为父选择器\n```css\n#main {\n  width: 97%;\n\n  p, div {\n    font-size: 2em;\n    a { font-weight: bold; }\n  }\n\n  pre { font-size: 3em; }\n}\n```\n编译为\n\n```css\n#main {\n  width: 97%; }\n  #main p, #main div {\n    font-size: 2em; }\n    #main p a, #main div a {\n      font-weight: bold; }\n  #main pre {\n    font-size: 3em; }\n```\n### 2. 父选择器（&）\n```css\na {\n  font-weight: bold;\n  text-decoration: none;\n  &:hover { text-decoration: underline; }\n  body.firefox & { font-weight: normal; }\n}\n```\n编译为\n```css\na {\n  font-weight: bold;\n  text-decoration: none; }\n  a:hover {\n    text-decoration: underline; }\n  body.firefox a {\n    font-weight: normal; }\n```\n### 3. 属性嵌套（：）\n```css\n.funky{\n  font: {\n    font-family: fantasy;\n    font-size: 30em;\n    font-weight: bold; \n  }\n}\n```\n编译为\n```css\n.funky {\n  font-family: fantasy;\n  font-size: 30em;\n  font-weight: bold; }\n```\n### 4. 占位符选择器（%foo）\n#### 4.1 @extend\n比如，你有一些按钮需要设置样式。这些按钮都具有相同的特征，只是每个按钮的颜色不同。\n你可以创建一个 .button 类以包含按钮的所有通用代码，然后为每个类创建额外的类，为了添加背景颜色之前扩展 .button 类。\n```css\n.button {\n  font-size: 1rem;\n  text-decoration: none;\n  color: #FFFFFF\n}\n```\n```css\n.button-red {\n  @extend .button;\n  background：#900；\n}\n.button-green {\n  @extend .button;\n  background：#090；\n}\n```\n\n#### 4.2 占位符选择器\n写法和class(.)以及id(#)是一致的，但前面的符号为%，必须配合@extend使用。\n它取代以前 CSS 中的基类造成的代码冗余的情形，因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码，\n```css\n%demo1 {\n  border-radius: 10px;\n}\n%demo2 {\n  background-color: #ff0000;\n}\ndiv {\n  @extend %demo1;\n  @extend %demo2;\n}\n```\n编译后：\n```css\ndiv {\n  border-radius: 10px;\n  background-color: #ff0000\n}\n```\n### 5. 注释/* */与 //\n没啥说的\n多行注释会被完整输出到编译后的文件，单行注释则不会。\n\n### 6. SassScript\n#### 6.1 Interactive Shell\n用来测试SassScript的功能，在命令行中输入`sass -i`燃弧输入想要的测试SassScript查看输出结果\n```css\n$ sass -i\n>> \"Hello, Sassy World!\"\n\"Hello, Sassy World!\"\n>> 1px + 1px + 1px\n3px\n>> #777 + #777\n#eeeeee\n```\n#### 6.2 变量$\n```css\n  $width: 5em;\n  .main {\n    width: $width;\n  }\n```\n变量有块级作用域，如果想转换为全局作用域，需要添加!global声明\n```css\n#main {\n  $width: 5em !global;\n  width: $width;\n}\n\n#sidebar {\n  width: $width;\n}\n```\n编译为：\n```css\n#main {\n  width: 5em;\n}\n#sidebar {\n  width: 5em;\n}\n```\n#### 6.3 数据类型\nsass支持6种（喵？）数据类型\n+ 数字，`1, 2, 3, 10px`\n+ 字符串，`\"foo\", 'bar', baz`\n+ 颜色，`blue，#04a3f9`\n+ 布尔，`true，false`\n+ 空值，`null`\n+ 数组，`$list: (1.5em 1em) `或`$list: (1.5em, 1em)`，可以去掉括号\n+ maps，相当于object，`(key1: value1,key2: value2)`\n\n#### 6.4 运算\n\\+ - * / %\n颜色也可以运算\n#### 6.5 函数\nsass提供了一些函数，详细看文档吧。\n#### 6.6 自定义函数\n```css\n$grid-width: 40px;\n$gutter-width: 10px;\n@function grid-width($n) {\n  @return $n * $grid-width + ($n - 1) * $gutter-width;\n}\n#sidebar { width: grid-width(5); }\n```\n#### 6.7 插值语句 #{}\n想要在选择器中使用变量的话，就可以使用插值语句。\n``` css\n$name: foo;\n$attr: border;\np.#{$name} {\n  #{$attr}-color: blue;\n}\n```\n\n#### 6.8 type-of()检测数据类型\n可以使用type-of()检测变量的类型\n```css\n$variable: \"Sass is awesome\";\n$variable2: Sass is awesome;\n```\n```\n>> type-of($variable)\n\"string\"\n```\n\n### 7. 指令\n#### 7.1 @import\n@import \"foo.scss\"\n### 8. 控制指令\n#### 8.1 @if @else if @else\n```css\n$type: monster;\np {\n  @if $type == ocean {\n    color: blue;\n  } @else if $type == matador {\n    color: red;\n  } @else if $type == monster {\n    color: green;\n  } @else {\n    color: black;\n  }\n}\n```\n编译为：\n```\np {\n  color: green; }\n```\n#### 8.2 @for\n@for from through\n@for from to\n```css\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n```\n```css\n.item-1 {\n  width: 2em; }\n.item-2 {\n  width: 4em; }\n.item-3 {\n  width: 6em; }\n```\n**from...through 与 from...to 的区别:**\n\nfrom 1 through 3 表示1/2/3\nfrom 1 to 3 表示 1/2，不包括3\n#### 8.3 @each\n@each in\n```css\n@each $animal in puma, sea-slug, egret, salamander {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n```\n编译为\n```css\n.puma-icon {\n  background-image: url('/images/puma.png'); }\n.sea-slug-icon {\n  background-image: url('/images/sea-slug.png'); }\n.egret-icon {\n  background-image: url('/images/egret.png'); }\n.salamander-icon {\n  background-image: url('/images/salamander.png'); }\n```\n## 九、输出格式\n### 1. 命令\n```sass :style option```\n或\n```sass --style option```\n### 2. 常用的style值\n#### :nested\nNested （嵌套）样式是 Sass 默认的输出格式，能够清晰反映 CSS 与 HTML 的结构关系。选择器与属性等单独占用一行，缩进量与 Sass 文件中一致，每行的缩进量反映了其在嵌套规则内的层数。当阅读大型 CSS 文件时，这种样式可以很容易地分析文件的主要结构。\n```css\n#main {\n  color: #fff;\n  background-color: #000; }\n  #main p {\n    width: 10em; }\n\n.huge {\n  font-size: 10em;\n  font-weight: bold;\n  text-decoration: underline; }\n```\n#### :expanded\nExpanded 输出更像是手写的样式，选择器、属性等各占用一行，属性根据选择器缩进，而选择器不做任何缩进。\n```css\n#main {\n  color: #fff;\n  background-color: #000;\n}\n#main p {\n  width: 10em;\n}\n\n.huge {\n  font-size: 10em;\n  font-weight: bold;\n  text-decoration: underline;\n}\n```\n#### :compact\nCompact 输出方式比起上面两种占用的空间更少，每条 CSS 规则只占一行，包含其下的所有属性。**嵌套过的选择器在输出时没有空行，不嵌套的选择器会输出空白行作为分隔符。**\n```css\n#main p { width: 10em; }\n\n.huge { font-size: 10em; font-weight: bold; text-decoration: underline; }\n```\n#### :compressed\nCompressed 输出方式删除所有无意义的空格、空白行、以及注释，力求**将文件体积压缩到最小**，同时也会做出其他调整，比如会自动替换占用空间最小的颜色表达方式。\n```\n#main{color:#fff;background-color:#000}#main p{width:10em}.huge{font-size:10em;font-weight:bold;text-decoration:underline}\n```","slug":"cxy/css/sass","published":1,"updated":"2023-03-15T10:06:18.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfgkv9ry0000nuwi6z07a2cg","content":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"思维导图：\"><a href=\"#思维导图：\" class=\"headerlink\" title=\"思维导图：\"></a>思维导图：</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-561721a3995a9bea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"一、css拓展功能\"><a href=\"#一、css拓展功能\" class=\"headerlink\" title=\"一、css拓展功能\"></a>一、css拓展功能</h2><h3 id=\"1-嵌套规则\"><a href=\"#1-嵌套规则\" class=\"headerlink\" title=\"1. 嵌套规则\"></a>1. 嵌套规则</h3><p>Sass 内层的样式可以将它外层的选择器作为父选择器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">97%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">font-weight</span>: bold; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pre &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">3em</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">97%</span>; &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span>, <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">div</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-weight</span>: bold; &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#main</span> pre &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">3em</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-父选择器（-amp-）\"><a href=\"#2-父选择器（-amp-）\" class=\"headerlink\" title=\"2. 父选择器（&amp;）\"></a>2. 父选择器（&amp;）</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> &amp; &#123; <span class=\"attribute\">font-weight</span>: normal; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-属性嵌套（：）\"><a href=\"#3-属性嵌套（：）\" class=\"headerlink\" title=\"3. 属性嵌套（：）\"></a>3. 属性嵌套（：）</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.funky</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: fantasy;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">30em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.funky</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: fantasy;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-占位符选择器（-foo）\"><a href=\"#4-占位符选择器（-foo）\" class=\"headerlink\" title=\"4. 占位符选择器（%foo）\"></a>4. 占位符选择器（%foo）</h3><h4 id=\"4-1-extend\"><a href=\"#4-1-extend\" class=\"headerlink\" title=\"4.1 @extend\"></a>4.1 @extend</h4><p>比如，你有一些按钮需要设置样式。这些按钮都具有相同的特征，只是每个按钮的颜色不同。<br>你可以创建一个 .button 类以包含按钮的所有通用代码，然后为每个类创建额外的类，为了添加背景颜色之前扩展 .button 类。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#FFFFFF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button-red</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> .button;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>：<span class=\"selector-id\">#900</span>；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button-green</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> .button;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>：<span class=\"selector-id\">#090</span>；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-占位符选择器\"><a href=\"#4-2-占位符选择器\" class=\"headerlink\" title=\"4.2 占位符选择器\"></a>4.2 占位符选择器</h4><p>写法和class(.)以及id(#)是一致的，但前面的符号为%，必须配合@extend使用。<br>它取代以前 CSS 中的基类造成的代码冗余的情形，因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码，</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%demo1 &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%demo2 &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> %demo1;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> %demo2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译后：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ff0000</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-注释-与\"><a href=\"#5-注释-与\" class=\"headerlink\" title=\"5. 注释/* */与 //\"></a>5. 注释/* */与 //</h3><p>没啥说的<br>多行注释会被完整输出到编译后的文件，单行注释则不会。</p>\n<h3 id=\"6-SassScript\"><a href=\"#6-SassScript\" class=\"headerlink\" title=\"6. SassScript\"></a>6. SassScript</h3><h4 id=\"6-1-Interactive-Shell\"><a href=\"#6-1-Interactive-Shell\" class=\"headerlink\" title=\"6.1 Interactive Shell\"></a>6.1 Interactive Shell</h4><p>用来测试SassScript的功能，在命令行中输入<code>sass -i</code>燃弧输入想要的测试SassScript查看输出结果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sass -<span class=\"selector-tag\">i</span></span><br><span class=\"line\">&gt;&gt; &quot;Hello, Sassy World!&quot;</span><br><span class=\"line\">&quot;Hello, Sassy World!&quot;</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">1px</span> + <span class=\"number\">1px</span> + <span class=\"number\">1px</span></span><br><span class=\"line\"><span class=\"number\">3px</span></span><br><span class=\"line\">&gt;&gt; <span class=\"selector-id\">#777</span> + <span class=\"selector-id\">#777</span></span><br><span class=\"line\"><span class=\"selector-id\">#eeeeee</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-2-变量\"><a href=\"#6-2-变量\" class=\"headerlink\" title=\"6.2 变量$\"></a>6.2 变量$</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变量有块级作用域，如果想转换为全局作用域，需要添加!global声明</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  $<span class=\"attribute\">width</span>: <span class=\"number\">5em</span> !global;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-3-数据类型\"><a href=\"#6-3-数据类型\" class=\"headerlink\" title=\"6.3 数据类型\"></a>6.3 数据类型</h4><p>sass支持6种（喵？）数据类型</p>\n<ul>\n<li>数字，<code>1, 2, 3, 10px</code></li>\n<li>字符串，<code>&quot;foo&quot;, &#39;bar&#39;, baz</code></li>\n<li>颜色，<code>blue，#04a3f9</code></li>\n<li>布尔，<code>true，false</code></li>\n<li>空值，<code>null</code></li>\n<li>数组，<code>$list: (1.5em 1em) </code>或<code>$list: (1.5em, 1em)</code>，可以去掉括号</li>\n<li>maps，相当于object，<code>(key1: value1,key2: value2)</code></li>\n</ul>\n<h4 id=\"6-4-运算\"><a href=\"#6-4-运算\" class=\"headerlink\" title=\"6.4 运算\"></a>6.4 运算</h4><p>+ - * / %<br>颜色也可以运算</p>\n<h4 id=\"6-5-函数\"><a href=\"#6-5-函数\" class=\"headerlink\" title=\"6.5 函数\"></a>6.5 函数</h4><p>sass提供了一些函数，详细看文档吧。</p>\n<h4 id=\"6-6-自定义函数\"><a href=\"#6-6-自定义函数\" class=\"headerlink\" title=\"6.6 自定义函数\"></a>6.6 自定义函数</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"attribute\">grid</span>-<span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">$gutter-<span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"keyword\">@function</span> grid-width($n) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@return</span> $n * $grid-width + ($n - <span class=\"number\">1</span>) * $gutter-width;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123; <span class=\"attribute\">width</span>: <span class=\"built_in\">grid-width</span>(<span class=\"number\">5</span>); &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-7-插值语句\"><a href=\"#6-7-插值语句\" class=\"headerlink\" title=\"6.7 插值语句 #{}\"></a>6.7 插值语句 #{}</h4><p>想要在选择器中使用变量的话，就可以使用插值语句。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$name: foo;</span><br><span class=\"line\">$attr: border;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span>.#&#123;$name&#125; &#123;</span><br><span class=\"line\">  #&#123;$attr&#125;-<span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-8-type-of-检测数据类型\"><a href=\"#6-8-type-of-检测数据类型\" class=\"headerlink\" title=\"6.8 type-of()检测数据类型\"></a>6.8 type-of()检测数据类型</h4><p>可以使用type-of()检测变量的类型</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$variable: <span class=\"string\">&quot;Sass is awesome&quot;</span>;</span><br><span class=\"line\">$variable2: Sass is awesome;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; type-of($variable)</span><br><span class=\"line\">&quot;string&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-指令\"><a href=\"#7-指令\" class=\"headerlink\" title=\"7. 指令\"></a>7. 指令</h3><h4 id=\"7-1-import\"><a href=\"#7-1-import\" class=\"headerlink\" title=\"7.1 @import\"></a>7.1 @import</h4><p>@import “foo.scss”</p>\n<h3 id=\"8-控制指令\"><a href=\"#8-控制指令\" class=\"headerlink\" title=\"8. 控制指令\"></a>8. 控制指令</h3><h4 id=\"8-1-if-else-if-else\"><a href=\"#8-1-if-else-if-else\" class=\"headerlink\" title=\"8.1 @if @else if @else\"></a>8.1 @if @else if @else</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$type: monster;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> $type == ocean &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> if $type == matador &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> if $type == monster &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  color: green; &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-2-for\"><a href=\"#8-2-for\" class=\"headerlink\" title=\"8.2 @for\"></a>8.2 @for</h4><p>@for from through<br>@for from to</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;$<span class=\"selector-tag\">i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * $i; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2em</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">4em</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item-3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">6em</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>from…through 与 from…to 的区别:</strong></p>\n<p>from 1 through 3 表示1/2/3<br>from 1 to 3 表示 1/2，不包括3</p>\n<h4 id=\"8-3-each\"><a href=\"#8-3-each\" class=\"headerlink\" title=\"8.3 @each\"></a>8.3 @each</h4><p>@each in</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@each</span> $animal in puma, sea-slug, egret, salamander &#123;</span><br><span class=\"line\">  .#&#123;$animal&#125;-<span class=\"attribute\">icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/#&#123;$animal&#125;.png&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.puma-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/puma.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.sea-slug-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/sea-slug.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.egret-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/egret.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.salamander-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/salamander.png&#x27;</span>); &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、输出格式\"><a href=\"#九、输出格式\" class=\"headerlink\" title=\"九、输出格式\"></a>九、输出格式</h2><h3 id=\"1-命令\"><a href=\"#1-命令\" class=\"headerlink\" title=\"1. 命令\"></a>1. 命令</h3><p><code>sass :style option</code><br>或<br><code>sass --style option</code></p>\n<h3 id=\"2-常用的style值\"><a href=\"#2-常用的style值\" class=\"headerlink\" title=\"2. 常用的style值\"></a>2. 常用的style值</h3><h4 id=\"nested\"><a href=\"#nested\" class=\"headerlink\" title=\":nested\"></a>:nested</h4><p>Nested （嵌套）样式是 Sass 默认的输出格式，能够清晰反映 CSS 与 HTML 的结构关系。选择器与属性等单独占用一行，缩进量与 Sass 文件中一致，每行的缩进量反映了其在嵌套规则内的层数。当阅读大型 CSS 文件时，这种样式可以很容易地分析文件的主要结构。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>; &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"expanded\"><a href=\"#expanded\" class=\"headerlink\" title=\":expanded\"></a>:expanded</h4><p>Expanded 输出更像是手写的样式，选择器、属性等各占用一行，属性根据选择器缩进，而选择器不做任何缩进。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"compact\"><a href=\"#compact\" class=\"headerlink\" title=\":compact\"></a>:compact</h4><p>Compact 输出方式比起上面两种占用的空间更少，每条 CSS 规则只占一行，包含其下的所有属性。<strong>嵌套过的选择器在输出时没有空行，不嵌套的选择器会输出空白行作为分隔符。</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>; <span class=\"attribute\">font-weight</span>: bold; <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"compressed\"><a href=\"#compressed\" class=\"headerlink\" title=\":compressed\"></a>:compressed</h4><p>Compressed 输出方式删除所有无意义的空格、空白行、以及注释，力求<strong>将文件体积压缩到最小</strong>，同时也会做出其他调整，比如会自动替换占用空间最小的颜色表达方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#main&#123;color:#fff;background-color:#000&#125;#main p&#123;width:10em&#125;.huge&#123;font-size:10em;font-weight:bold;text-decoration:underline&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"  <meta name=\"referrer\" content=\"no-referrer\">\n\n\n<h2 id=\"思维导图：\"><a href=\"#思维导图：\" class=\"headerlink\" title=\"思维导图：\"></a>思维导图：</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/20892169-561721a3995a9bea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"一、css拓展功能\"><a href=\"#一、css拓展功能\" class=\"headerlink\" title=\"一、css拓展功能\"></a>一、css拓展功能</h2><h3 id=\"1-嵌套规则\"><a href=\"#1-嵌套规则\" class=\"headerlink\" title=\"1. 嵌套规则\"></a>1. 嵌套规则</h3><p>Sass 内层的样式可以将它外层的选择器作为父选择器</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">97%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">font-weight</span>: bold; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pre &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">3em</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">97%</span>; &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span>, <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">div</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-weight</span>: bold; &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#main</span> pre &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">3em</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-父选择器（-amp-）\"><a href=\"#2-父选择器（-amp-）\" class=\"headerlink\" title=\"2. 父选择器（&amp;）\"></a>2. 父选择器（&amp;）</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> &amp; &#123; <span class=\"attribute\">font-weight</span>: normal; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-属性嵌套（：）\"><a href=\"#3-属性嵌套（：）\" class=\"headerlink\" title=\"3. 属性嵌套（：）\"></a>3. 属性嵌套（：）</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.funky</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: fantasy;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">30em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.funky</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: fantasy;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-占位符选择器（-foo）\"><a href=\"#4-占位符选择器（-foo）\" class=\"headerlink\" title=\"4. 占位符选择器（%foo）\"></a>4. 占位符选择器（%foo）</h3><h4 id=\"4-1-extend\"><a href=\"#4-1-extend\" class=\"headerlink\" title=\"4.1 @extend\"></a>4.1 @extend</h4><p>比如，你有一些按钮需要设置样式。这些按钮都具有相同的特征，只是每个按钮的颜色不同。<br>你可以创建一个 .button 类以包含按钮的所有通用代码，然后为每个类创建额外的类，为了添加背景颜色之前扩展 .button 类。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#FFFFFF</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button-red</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> .button;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>：<span class=\"selector-id\">#900</span>；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button-green</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> .button;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>：<span class=\"selector-id\">#090</span>；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-占位符选择器\"><a href=\"#4-2-占位符选择器\" class=\"headerlink\" title=\"4.2 占位符选择器\"></a>4.2 占位符选择器</h4><p>写法和class(.)以及id(#)是一致的，但前面的符号为%，必须配合@extend使用。<br>它取代以前 CSS 中的基类造成的代码冗余的情形，因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码，</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%demo1 &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%demo2 &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> %demo1;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> %demo2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译后：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ff0000</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-注释-与\"><a href=\"#5-注释-与\" class=\"headerlink\" title=\"5. 注释/* */与 //\"></a>5. 注释/* */与 //</h3><p>没啥说的<br>多行注释会被完整输出到编译后的文件，单行注释则不会。</p>\n<h3 id=\"6-SassScript\"><a href=\"#6-SassScript\" class=\"headerlink\" title=\"6. SassScript\"></a>6. SassScript</h3><h4 id=\"6-1-Interactive-Shell\"><a href=\"#6-1-Interactive-Shell\" class=\"headerlink\" title=\"6.1 Interactive Shell\"></a>6.1 Interactive Shell</h4><p>用来测试SassScript的功能，在命令行中输入<code>sass -i</code>燃弧输入想要的测试SassScript查看输出结果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sass -<span class=\"selector-tag\">i</span></span><br><span class=\"line\">&gt;&gt; &quot;Hello, Sassy World!&quot;</span><br><span class=\"line\">&quot;Hello, Sassy World!&quot;</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">1px</span> + <span class=\"number\">1px</span> + <span class=\"number\">1px</span></span><br><span class=\"line\"><span class=\"number\">3px</span></span><br><span class=\"line\">&gt;&gt; <span class=\"selector-id\">#777</span> + <span class=\"selector-id\">#777</span></span><br><span class=\"line\"><span class=\"selector-id\">#eeeeee</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-2-变量\"><a href=\"#6-2-变量\" class=\"headerlink\" title=\"6.2 变量$\"></a>6.2 变量$</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变量有块级作用域，如果想转换为全局作用域，需要添加!global声明</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  $<span class=\"attribute\">width</span>: <span class=\"number\">5em</span> !global;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-3-数据类型\"><a href=\"#6-3-数据类型\" class=\"headerlink\" title=\"6.3 数据类型\"></a>6.3 数据类型</h4><p>sass支持6种（喵？）数据类型</p>\n<ul>\n<li>数字，<code>1, 2, 3, 10px</code></li>\n<li>字符串，<code>&quot;foo&quot;, &#39;bar&#39;, baz</code></li>\n<li>颜色，<code>blue，#04a3f9</code></li>\n<li>布尔，<code>true，false</code></li>\n<li>空值，<code>null</code></li>\n<li>数组，<code>$list: (1.5em 1em) </code>或<code>$list: (1.5em, 1em)</code>，可以去掉括号</li>\n<li>maps，相当于object，<code>(key1: value1,key2: value2)</code></li>\n</ul>\n<h4 id=\"6-4-运算\"><a href=\"#6-4-运算\" class=\"headerlink\" title=\"6.4 运算\"></a>6.4 运算</h4><p>+ - * / %<br>颜色也可以运算</p>\n<h4 id=\"6-5-函数\"><a href=\"#6-5-函数\" class=\"headerlink\" title=\"6.5 函数\"></a>6.5 函数</h4><p>sass提供了一些函数，详细看文档吧。</p>\n<h4 id=\"6-6-自定义函数\"><a href=\"#6-6-自定义函数\" class=\"headerlink\" title=\"6.6 自定义函数\"></a>6.6 自定义函数</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"attribute\">grid</span>-<span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">$gutter-<span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"keyword\">@function</span> grid-width($n) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@return</span> $n * $grid-width + ($n - <span class=\"number\">1</span>) * $gutter-width;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123; <span class=\"attribute\">width</span>: <span class=\"built_in\">grid-width</span>(<span class=\"number\">5</span>); &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-7-插值语句\"><a href=\"#6-7-插值语句\" class=\"headerlink\" title=\"6.7 插值语句 #{}\"></a>6.7 插值语句 #{}</h4><p>想要在选择器中使用变量的话，就可以使用插值语句。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$name: foo;</span><br><span class=\"line\">$attr: border;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span>.#&#123;$name&#125; &#123;</span><br><span class=\"line\">  #&#123;$attr&#125;-<span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-8-type-of-检测数据类型\"><a href=\"#6-8-type-of-检测数据类型\" class=\"headerlink\" title=\"6.8 type-of()检测数据类型\"></a>6.8 type-of()检测数据类型</h4><p>可以使用type-of()检测变量的类型</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$variable: <span class=\"string\">&quot;Sass is awesome&quot;</span>;</span><br><span class=\"line\">$variable2: Sass is awesome;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; type-of($variable)</span><br><span class=\"line\">&quot;string&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-指令\"><a href=\"#7-指令\" class=\"headerlink\" title=\"7. 指令\"></a>7. 指令</h3><h4 id=\"7-1-import\"><a href=\"#7-1-import\" class=\"headerlink\" title=\"7.1 @import\"></a>7.1 @import</h4><p>@import “foo.scss”</p>\n<h3 id=\"8-控制指令\"><a href=\"#8-控制指令\" class=\"headerlink\" title=\"8. 控制指令\"></a>8. 控制指令</h3><h4 id=\"8-1-if-else-if-else\"><a href=\"#8-1-if-else-if-else\" class=\"headerlink\" title=\"8.1 @if @else if @else\"></a>8.1 @if @else if @else</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$type: monster;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> $type == ocean &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> if $type == matador &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> if $type == monster &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  color: green; &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-2-for\"><a href=\"#8-2-for\" class=\"headerlink\" title=\"8.2 @for\"></a>8.2 @for</h4><p>@for from through<br>@for from to</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;$<span class=\"selector-tag\">i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * $i; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2em</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">4em</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item-3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">6em</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>from…through 与 from…to 的区别:</strong></p>\n<p>from 1 through 3 表示1/2/3<br>from 1 to 3 表示 1/2，不包括3</p>\n<h4 id=\"8-3-each\"><a href=\"#8-3-each\" class=\"headerlink\" title=\"8.3 @each\"></a>8.3 @each</h4><p>@each in</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@each</span> $animal in puma, sea-slug, egret, salamander &#123;</span><br><span class=\"line\">  .#&#123;$animal&#125;-<span class=\"attribute\">icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/#&#123;$animal&#125;.png&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.puma-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/puma.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.sea-slug-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/sea-slug.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.egret-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/egret.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.salamander-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/salamander.png&#x27;</span>); &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、输出格式\"><a href=\"#九、输出格式\" class=\"headerlink\" title=\"九、输出格式\"></a>九、输出格式</h2><h3 id=\"1-命令\"><a href=\"#1-命令\" class=\"headerlink\" title=\"1. 命令\"></a>1. 命令</h3><p><code>sass :style option</code><br>或<br><code>sass --style option</code></p>\n<h3 id=\"2-常用的style值\"><a href=\"#2-常用的style值\" class=\"headerlink\" title=\"2. 常用的style值\"></a>2. 常用的style值</h3><h4 id=\"nested\"><a href=\"#nested\" class=\"headerlink\" title=\":nested\"></a>:nested</h4><p>Nested （嵌套）样式是 Sass 默认的输出格式，能够清晰反映 CSS 与 HTML 的结构关系。选择器与属性等单独占用一行，缩进量与 Sass 文件中一致，每行的缩进量反映了其在嵌套规则内的层数。当阅读大型 CSS 文件时，这种样式可以很容易地分析文件的主要结构。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>; &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"expanded\"><a href=\"#expanded\" class=\"headerlink\" title=\":expanded\"></a>:expanded</h4><p>Expanded 输出更像是手写的样式，选择器、属性等各占用一行，属性根据选择器缩进，而选择器不做任何缩进。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"compact\"><a href=\"#compact\" class=\"headerlink\" title=\":compact\"></a>:compact</h4><p>Compact 输出方式比起上面两种占用的空间更少，每条 CSS 规则只占一行，包含其下的所有属性。<strong>嵌套过的选择器在输出时没有空行，不嵌套的选择器会输出空白行作为分隔符。</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>; <span class=\"attribute\">font-weight</span>: bold; <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"compressed\"><a href=\"#compressed\" class=\"headerlink\" title=\":compressed\"></a>:compressed</h4><p>Compressed 输出方式删除所有无意义的空格、空白行、以及注释，力求<strong>将文件体积压缩到最小</strong>，同时也会做出其他调整，比如会自动替换占用空间最小的颜色表达方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#main&#123;color:#fff;background-color:#000&#125;#main p&#123;width:10em&#125;.huge&#123;font-size:10em;font-weight:bold;text-decoration:underline&#125;</span><br></pre></td></tr></table></figure>"},{"title":"【flex】简单总结","date":"2023-03-15T10:02:02.000Z","_content":"\n## 一、容器属性\n\n#### 1. justify-content\n\n`flex-start`（默认值）：左对齐\n`flex-end`：右对齐\n`center`： 居中\n`space-between`：两端对齐，项目之间的间隔都相等。\n`space-around`：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n#### 2. align-items\n\n`flex-start`：交叉轴的起点对齐。\n`flex-end`：交叉轴的终点对齐。\n`center`：交叉轴的中点对齐。\n`baseline`: 项目的第一行文字的基线对齐。\n`stretch`（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n#### 3. flex-flow \n\n`flex-direction`属性和`flex-wrap`属性的简写形式，默认值为`row nowrap`。\n\n#### 4. flex-wrap 换行\n\n`nowrap`（默认）：不换行。\n`wrap`：换行，第一行在上方。\n`wrap-reverse`：换行，第一行在下方。\n\n#### 5. align-content\n\n多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n#### 6. flex-direction\n`row`（默认值）：主轴为水平方向，起点在左端。\n`row-reverse`：主轴为水平方向，起点在右端。\n`column`：主轴为垂直方向，起点在上沿。\n`column-reverse`：主轴为垂直方向，起点在下沿。\n\n## 二、子元素属性\n\n#### 1. order 排列顺序\n数字\n\n#### 2. flex-grow 剩余空间的项目放大比例\n数字越大拉伸越严重\n\n#### 2. flex-shrink 剩余空间的项目缩小比例\n数字越大压缩越严重\n\n#### 3. flex-basis 分配剩余空间前，该子元素的占据比例。\n优先级高于flex-grow和flex-shrink\n\n#### 4. flex \n2/3/4的简写\n\n#### 5. align-self \n子元素的默认对齐方式","source":"_posts/cxy/css/flex.md","raw":"---\ntitle: 【flex】简单总结\ndate: 2023-03-15 18:02:02\ncategories: css\n---\n\n## 一、容器属性\n\n#### 1. justify-content\n\n`flex-start`（默认值）：左对齐\n`flex-end`：右对齐\n`center`： 居中\n`space-between`：两端对齐，项目之间的间隔都相等。\n`space-around`：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n#### 2. align-items\n\n`flex-start`：交叉轴的起点对齐。\n`flex-end`：交叉轴的终点对齐。\n`center`：交叉轴的中点对齐。\n`baseline`: 项目的第一行文字的基线对齐。\n`stretch`（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n#### 3. flex-flow \n\n`flex-direction`属性和`flex-wrap`属性的简写形式，默认值为`row nowrap`。\n\n#### 4. flex-wrap 换行\n\n`nowrap`（默认）：不换行。\n`wrap`：换行，第一行在上方。\n`wrap-reverse`：换行，第一行在下方。\n\n#### 5. align-content\n\n多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n#### 6. flex-direction\n`row`（默认值）：主轴为水平方向，起点在左端。\n`row-reverse`：主轴为水平方向，起点在右端。\n`column`：主轴为垂直方向，起点在上沿。\n`column-reverse`：主轴为垂直方向，起点在下沿。\n\n## 二、子元素属性\n\n#### 1. order 排列顺序\n数字\n\n#### 2. flex-grow 剩余空间的项目放大比例\n数字越大拉伸越严重\n\n#### 2. flex-shrink 剩余空间的项目缩小比例\n数字越大压缩越严重\n\n#### 3. flex-basis 分配剩余空间前，该子元素的占据比例。\n优先级高于flex-grow和flex-shrink\n\n#### 4. flex \n2/3/4的简写\n\n#### 5. align-self \n子元素的默认对齐方式","slug":"cxy/css/flex","published":1,"updated":"2023-03-15T10:06:49.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfgkv9s10001nuwi13bcc3ls","content":"<h2 id=\"一、容器属性\"><a href=\"#一、容器属性\" class=\"headerlink\" title=\"一、容器属性\"></a>一、容器属性</h2><h4 id=\"1-justify-content\"><a href=\"#1-justify-content\" class=\"headerlink\" title=\"1. justify-content\"></a>1. justify-content</h4><p><code>flex-start</code>（默认值）：左对齐<br><code>flex-end</code>：右对齐<br><code>center</code>： 居中<br><code>space-between</code>：两端对齐，项目之间的间隔都相等。<br><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p>\n<h4 id=\"2-align-items\"><a href=\"#2-align-items\" class=\"headerlink\" title=\"2. align-items\"></a>2. align-items</h4><p><code>flex-start</code>：交叉轴的起点对齐。<br><code>flex-end</code>：交叉轴的终点对齐。<br><code>center</code>：交叉轴的中点对齐。<br><code>baseline</code>: 项目的第一行文字的基线对齐。<br><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p>\n<h4 id=\"3-flex-flow\"><a href=\"#3-flex-flow\" class=\"headerlink\" title=\"3. flex-flow\"></a>3. flex-flow</h4><p><code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>\n<h4 id=\"4-flex-wrap-换行\"><a href=\"#4-flex-wrap-换行\" class=\"headerlink\" title=\"4. flex-wrap 换行\"></a>4. flex-wrap 换行</h4><p><code>nowrap</code>（默认）：不换行。<br><code>wrap</code>：换行，第一行在上方。<br><code>wrap-reverse</code>：换行，第一行在下方。</p>\n<h4 id=\"5-align-content\"><a href=\"#5-align-content\" class=\"headerlink\" title=\"5. align-content\"></a>5. align-content</h4><p>多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<h4 id=\"6-flex-direction\"><a href=\"#6-flex-direction\" class=\"headerlink\" title=\"6. flex-direction\"></a>6. flex-direction</h4><p><code>row</code>（默认值）：主轴为水平方向，起点在左端。<br><code>row-reverse</code>：主轴为水平方向，起点在右端。<br><code>column</code>：主轴为垂直方向，起点在上沿。<br><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</p>\n<h2 id=\"二、子元素属性\"><a href=\"#二、子元素属性\" class=\"headerlink\" title=\"二、子元素属性\"></a>二、子元素属性</h2><h4 id=\"1-order-排列顺序\"><a href=\"#1-order-排列顺序\" class=\"headerlink\" title=\"1. order 排列顺序\"></a>1. order 排列顺序</h4><p>数字</p>\n<h4 id=\"2-flex-grow-剩余空间的项目放大比例\"><a href=\"#2-flex-grow-剩余空间的项目放大比例\" class=\"headerlink\" title=\"2. flex-grow 剩余空间的项目放大比例\"></a>2. flex-grow 剩余空间的项目放大比例</h4><p>数字越大拉伸越严重</p>\n<h4 id=\"2-flex-shrink-剩余空间的项目缩小比例\"><a href=\"#2-flex-shrink-剩余空间的项目缩小比例\" class=\"headerlink\" title=\"2. flex-shrink 剩余空间的项目缩小比例\"></a>2. flex-shrink 剩余空间的项目缩小比例</h4><p>数字越大压缩越严重</p>\n<h4 id=\"3-flex-basis-分配剩余空间前，该子元素的占据比例。\"><a href=\"#3-flex-basis-分配剩余空间前，该子元素的占据比例。\" class=\"headerlink\" title=\"3. flex-basis 分配剩余空间前，该子元素的占据比例。\"></a>3. flex-basis 分配剩余空间前，该子元素的占据比例。</h4><p>优先级高于flex-grow和flex-shrink</p>\n<h4 id=\"4-flex\"><a href=\"#4-flex\" class=\"headerlink\" title=\"4. flex\"></a>4. flex</h4><p>2/3/4的简写</p>\n<h4 id=\"5-align-self\"><a href=\"#5-align-self\" class=\"headerlink\" title=\"5. align-self\"></a>5. align-self</h4><p>子元素的默认对齐方式</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、容器属性\"><a href=\"#一、容器属性\" class=\"headerlink\" title=\"一、容器属性\"></a>一、容器属性</h2><h4 id=\"1-justify-content\"><a href=\"#1-justify-content\" class=\"headerlink\" title=\"1. justify-content\"></a>1. justify-content</h4><p><code>flex-start</code>（默认值）：左对齐<br><code>flex-end</code>：右对齐<br><code>center</code>： 居中<br><code>space-between</code>：两端对齐，项目之间的间隔都相等。<br><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p>\n<h4 id=\"2-align-items\"><a href=\"#2-align-items\" class=\"headerlink\" title=\"2. align-items\"></a>2. align-items</h4><p><code>flex-start</code>：交叉轴的起点对齐。<br><code>flex-end</code>：交叉轴的终点对齐。<br><code>center</code>：交叉轴的中点对齐。<br><code>baseline</code>: 项目的第一行文字的基线对齐。<br><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p>\n<h4 id=\"3-flex-flow\"><a href=\"#3-flex-flow\" class=\"headerlink\" title=\"3. flex-flow\"></a>3. flex-flow</h4><p><code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>\n<h4 id=\"4-flex-wrap-换行\"><a href=\"#4-flex-wrap-换行\" class=\"headerlink\" title=\"4. flex-wrap 换行\"></a>4. flex-wrap 换行</h4><p><code>nowrap</code>（默认）：不换行。<br><code>wrap</code>：换行，第一行在上方。<br><code>wrap-reverse</code>：换行，第一行在下方。</p>\n<h4 id=\"5-align-content\"><a href=\"#5-align-content\" class=\"headerlink\" title=\"5. align-content\"></a>5. align-content</h4><p>多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<h4 id=\"6-flex-direction\"><a href=\"#6-flex-direction\" class=\"headerlink\" title=\"6. flex-direction\"></a>6. flex-direction</h4><p><code>row</code>（默认值）：主轴为水平方向，起点在左端。<br><code>row-reverse</code>：主轴为水平方向，起点在右端。<br><code>column</code>：主轴为垂直方向，起点在上沿。<br><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</p>\n<h2 id=\"二、子元素属性\"><a href=\"#二、子元素属性\" class=\"headerlink\" title=\"二、子元素属性\"></a>二、子元素属性</h2><h4 id=\"1-order-排列顺序\"><a href=\"#1-order-排列顺序\" class=\"headerlink\" title=\"1. order 排列顺序\"></a>1. order 排列顺序</h4><p>数字</p>\n<h4 id=\"2-flex-grow-剩余空间的项目放大比例\"><a href=\"#2-flex-grow-剩余空间的项目放大比例\" class=\"headerlink\" title=\"2. flex-grow 剩余空间的项目放大比例\"></a>2. flex-grow 剩余空间的项目放大比例</h4><p>数字越大拉伸越严重</p>\n<h4 id=\"2-flex-shrink-剩余空间的项目缩小比例\"><a href=\"#2-flex-shrink-剩余空间的项目缩小比例\" class=\"headerlink\" title=\"2. flex-shrink 剩余空间的项目缩小比例\"></a>2. flex-shrink 剩余空间的项目缩小比例</h4><p>数字越大压缩越严重</p>\n<h4 id=\"3-flex-basis-分配剩余空间前，该子元素的占据比例。\"><a href=\"#3-flex-basis-分配剩余空间前，该子元素的占据比例。\" class=\"headerlink\" title=\"3. flex-basis 分配剩余空间前，该子元素的占据比例。\"></a>3. flex-basis 分配剩余空间前，该子元素的占据比例。</h4><p>优先级高于flex-grow和flex-shrink</p>\n<h4 id=\"4-flex\"><a href=\"#4-flex\" class=\"headerlink\" title=\"4. flex\"></a>4. flex</h4><p>2/3/4的简写</p>\n<h4 id=\"5-align-self\"><a href=\"#5-align-self\" class=\"headerlink\" title=\"5. align-self\"></a>5. align-self</h4><p>子元素的默认对齐方式</p>\n"},{"title":"【grid】简单总结","date":"2023-03-15T10:04:24.000Z","_content":"\n## 一、易记点整理\n\n父：\n```css\n{\n  grid-template-columns: repeat(auto-fill, 100px);\n  grid-template-rows: 100px 100px 100px;\n  grid-column-gap: 10px;\n  grid-row-gap: 10px;\n  grid-template-areas: \"a a a\"            \n                       \"b c c\"            \n                       \"b c c\";\n  grid-auto-flow: row;\n  justify-items: center;\n  align-items: center;\n  justify-content: center;\n  align-content: center;\n}\n```\n子：\n```css\n{\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: 1;\n  grid-row-end: 2;\n  grid-area: a a a;\n  align-self: center;\n  justify-self: center\n}\n```\n属性关键字：\n```css\nrepeat(3,'100px')  // 一列/一行有3个子元素，一个100px\nfr\nauto // 默认\nauto-fill // 换行时一行或一列尽可能塞下最多的\n```\n\n#### auto-fill 和 auto-fit 的区别\n`auto-fill`和`auto-fit`都是CSS的`repeat()`函数的扩展值，用于自动填充和调整网格项目的数量。\n\n`auto-fill`会自动填充网格容器，尽可能多地填充项目，而不考虑项目的大小。它会在一个网格轨道上放置尽可能多的项目，然后通过增加网格行或列来添加更多项目。这意味着它会在网格轨道上尽可能多地放置项目，直到没有更多项目可以放置为止。因此，它可以在轨道中留下一些空间，因为不会强制填充整个轨道。\n\n例如，如果我们有一个网格容器和一个项目，这个项目的大小是200像素，我们使用`auto-fill`并设置每个轨道的大小为250像素，那么这个项目将占用整个轨道，因为它可以在轨道上放置一个完整的项目。\n\n```css\ngrid-template-columns: repeat(auto-fill, 250px);\n```\n\n`auto-fit`会调整网格项目，以使网格填满容器，而不考虑项目的数量。它会在网格轨道上放置尽可能多的项目，但如果剩下的空间不能容纳一个完整的项目，它将缩小项目的大小，以使它们适合空间。这意味着它会填充整个轨道，因此不会在轨道中留下空间。\n\n例如，如果我们有一个网格容器和一个项目，这个项目的大小是200像素，我们使用`auto-fit`并设置每个轨道的大小为250像素，那么这个项目将被缩小，以适合轨道，并留下50像素的空间。\n\n```css\ngrid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n```\n\n因此，`auto-fill`和`auto-fit`的区别在于它们处理空间的方式不同。`auto-fill`会填充整个轨道，但是可能留下一些空间，而`auto-fit`则会完全填充整个轨道，但可能会缩小项目的大小来适合空间。\n\n## 二、 grid布局\n\n#### (1) 基本使用\n\n```css\n.container {  \n  display: grid;  \n  grid-template-columns: 100px 100px 100px;  grid-template-rows: 100px 100px 100px;  \n}\n```\n\n上面代码意思是三行三列的布局，行宽100px，高100px，也可以使用百分比\n\n也可以这么简写：\n```css\n.container {  \n  display: grid;\n  grid-template-columns:  repeat(3,100px);\n  grid-template-rows: repeat(3,100px);  \n}\n```\n`repeat()` 函数有两个参数，第一个是重复的次数，第二个是具体数值\n\n## 三、容器属性：\n#### (2) `auto-fill`\n有时候，单元格大小固定，而容器大小不一定，可以用auto-fill指定一行/列尽可能放入更多的元素\n\n#### (3) `fr`\ngrid布局为了方便表示比例，引入fr，如果一个设置1fr，一个设置2fr，那后者就是前者的两倍\n\n```css\n.container {  \n  display: grid;  \n  grid-template-columns: 150px 1fr 2fr;  \n}\n```\n\n[上面代码](https://jsbin.com/remowec/edit?html,css,output)表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。\n\n#### (4) auto\n\nauto参数表示由浏览器自动决定宽高\n\n#### (5) 行和列的线可以自己命名，用[名字]\n\n```css\n{\n  grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];\n  grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];\n}\n```\n网格布局允许同一根线有多个名字，比如[fifth-line row-5]。\n\n#### (6) 设置行与行、列与列的间距\n`grid-row-gap` 与 `grid-column-gap`，行与列的间距。\n`grid-gap`: `grid-row-gap` 与 `grid-column-gap`的简写，两个值。\n格式：\n`grid-gap`: 行 列\n**根据最新标准，****`grid-row-gap`**、**`grid-column-gap`****的新写法是去掉****`grid-前缀`。**\n\n#### (7) `grid-template-areas`\n可以给各个网格取名，如果不需要利用该网格，则用.代替\n```css\n{\n  grid-template-row: 100px 100px 100px;\n  grid-template-column: 100px 100px 100px;\n  grid-template-areas: 'a b c'\n                       'd e f'\n                       'g h j'; // 意思是将网格划分为9个区域，每个区域命名\n  grid-template-areas: 'a a a'\n                       'd d d'\n                       'c c c'; // 意思是将网格横向划分为3个区域，每个区域命名a b c\n}\n```\n可以给各个网格取名，如果不需要利用该网格，则用.代替\n\n#### (8) `grid-auto-flow`\n子元素按照顺序自动放置在网格内，默认先行后列，设为列的话\n```css\ngrid-auto-flow: column;\n```\n#### (9) `justify-items` `align-items`\n\n值为`start` `center` `end` `strech`(拉伸占满整个容器，如果有设置width或height则对应拉伸失效)\n\n#### (10) `justify-content` `align-content` \n设置整个内容区域在容器里面的水平位置(左中右)\n\n## 四、容器内部的元素属性\n\n#### (1) `grid-column-start` `grid-column-end` `grid-row-start` `grid-row-end`\n\n设置某个子元素在第几个网格线内\n```css\ngrid-column-start：2\ngrid-row-end ：1\n```\n子元素在横向第二根网格线，竖向倒数第一根网格线内。\n\n#### (2) `grid-area`，设置某元素在某个单元格中\n```css\n.item-1 {  \n  grid-area: e;  /* 不要写冒号   */\n}\n```\n#### (3) `justify-self` `align-self` `place-self`\n\n和父元素的`justify-items` `align-items` 一致。\n只不过一个设置在父元素上，作用于所有子元素。\n一个是设置在子元素上，只对单个子元素有效。\n\n`place-self`用来同时设置`justify-self` `align-self`，简写`justify-self` `align-self`\n","source":"_posts/cxy/css/grid.md","raw":"---\ntitle: 【grid】简单总结\ndate: 2023-03-15 18:04:24\ncategories: css\n---\n\n## 一、易记点整理\n\n父：\n```css\n{\n  grid-template-columns: repeat(auto-fill, 100px);\n  grid-template-rows: 100px 100px 100px;\n  grid-column-gap: 10px;\n  grid-row-gap: 10px;\n  grid-template-areas: \"a a a\"            \n                       \"b c c\"            \n                       \"b c c\";\n  grid-auto-flow: row;\n  justify-items: center;\n  align-items: center;\n  justify-content: center;\n  align-content: center;\n}\n```\n子：\n```css\n{\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: 1;\n  grid-row-end: 2;\n  grid-area: a a a;\n  align-self: center;\n  justify-self: center\n}\n```\n属性关键字：\n```css\nrepeat(3,'100px')  // 一列/一行有3个子元素，一个100px\nfr\nauto // 默认\nauto-fill // 换行时一行或一列尽可能塞下最多的\n```\n\n#### auto-fill 和 auto-fit 的区别\n`auto-fill`和`auto-fit`都是CSS的`repeat()`函数的扩展值，用于自动填充和调整网格项目的数量。\n\n`auto-fill`会自动填充网格容器，尽可能多地填充项目，而不考虑项目的大小。它会在一个网格轨道上放置尽可能多的项目，然后通过增加网格行或列来添加更多项目。这意味着它会在网格轨道上尽可能多地放置项目，直到没有更多项目可以放置为止。因此，它可以在轨道中留下一些空间，因为不会强制填充整个轨道。\n\n例如，如果我们有一个网格容器和一个项目，这个项目的大小是200像素，我们使用`auto-fill`并设置每个轨道的大小为250像素，那么这个项目将占用整个轨道，因为它可以在轨道上放置一个完整的项目。\n\n```css\ngrid-template-columns: repeat(auto-fill, 250px);\n```\n\n`auto-fit`会调整网格项目，以使网格填满容器，而不考虑项目的数量。它会在网格轨道上放置尽可能多的项目，但如果剩下的空间不能容纳一个完整的项目，它将缩小项目的大小，以使它们适合空间。这意味着它会填充整个轨道，因此不会在轨道中留下空间。\n\n例如，如果我们有一个网格容器和一个项目，这个项目的大小是200像素，我们使用`auto-fit`并设置每个轨道的大小为250像素，那么这个项目将被缩小，以适合轨道，并留下50像素的空间。\n\n```css\ngrid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n```\n\n因此，`auto-fill`和`auto-fit`的区别在于它们处理空间的方式不同。`auto-fill`会填充整个轨道，但是可能留下一些空间，而`auto-fit`则会完全填充整个轨道，但可能会缩小项目的大小来适合空间。\n\n## 二、 grid布局\n\n#### (1) 基本使用\n\n```css\n.container {  \n  display: grid;  \n  grid-template-columns: 100px 100px 100px;  grid-template-rows: 100px 100px 100px;  \n}\n```\n\n上面代码意思是三行三列的布局，行宽100px，高100px，也可以使用百分比\n\n也可以这么简写：\n```css\n.container {  \n  display: grid;\n  grid-template-columns:  repeat(3,100px);\n  grid-template-rows: repeat(3,100px);  \n}\n```\n`repeat()` 函数有两个参数，第一个是重复的次数，第二个是具体数值\n\n## 三、容器属性：\n#### (2) `auto-fill`\n有时候，单元格大小固定，而容器大小不一定，可以用auto-fill指定一行/列尽可能放入更多的元素\n\n#### (3) `fr`\ngrid布局为了方便表示比例，引入fr，如果一个设置1fr，一个设置2fr，那后者就是前者的两倍\n\n```css\n.container {  \n  display: grid;  \n  grid-template-columns: 150px 1fr 2fr;  \n}\n```\n\n[上面代码](https://jsbin.com/remowec/edit?html,css,output)表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。\n\n#### (4) auto\n\nauto参数表示由浏览器自动决定宽高\n\n#### (5) 行和列的线可以自己命名，用[名字]\n\n```css\n{\n  grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];\n  grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];\n}\n```\n网格布局允许同一根线有多个名字，比如[fifth-line row-5]。\n\n#### (6) 设置行与行、列与列的间距\n`grid-row-gap` 与 `grid-column-gap`，行与列的间距。\n`grid-gap`: `grid-row-gap` 与 `grid-column-gap`的简写，两个值。\n格式：\n`grid-gap`: 行 列\n**根据最新标准，****`grid-row-gap`**、**`grid-column-gap`****的新写法是去掉****`grid-前缀`。**\n\n#### (7) `grid-template-areas`\n可以给各个网格取名，如果不需要利用该网格，则用.代替\n```css\n{\n  grid-template-row: 100px 100px 100px;\n  grid-template-column: 100px 100px 100px;\n  grid-template-areas: 'a b c'\n                       'd e f'\n                       'g h j'; // 意思是将网格划分为9个区域，每个区域命名\n  grid-template-areas: 'a a a'\n                       'd d d'\n                       'c c c'; // 意思是将网格横向划分为3个区域，每个区域命名a b c\n}\n```\n可以给各个网格取名，如果不需要利用该网格，则用.代替\n\n#### (8) `grid-auto-flow`\n子元素按照顺序自动放置在网格内，默认先行后列，设为列的话\n```css\ngrid-auto-flow: column;\n```\n#### (9) `justify-items` `align-items`\n\n值为`start` `center` `end` `strech`(拉伸占满整个容器，如果有设置width或height则对应拉伸失效)\n\n#### (10) `justify-content` `align-content` \n设置整个内容区域在容器里面的水平位置(左中右)\n\n## 四、容器内部的元素属性\n\n#### (1) `grid-column-start` `grid-column-end` `grid-row-start` `grid-row-end`\n\n设置某个子元素在第几个网格线内\n```css\ngrid-column-start：2\ngrid-row-end ：1\n```\n子元素在横向第二根网格线，竖向倒数第一根网格线内。\n\n#### (2) `grid-area`，设置某元素在某个单元格中\n```css\n.item-1 {  \n  grid-area: e;  /* 不要写冒号   */\n}\n```\n#### (3) `justify-self` `align-self` `place-self`\n\n和父元素的`justify-items` `align-items` 一致。\n只不过一个设置在父元素上，作用于所有子元素。\n一个是设置在子元素上，只对单个子元素有效。\n\n`place-self`用来同时设置`justify-self` `align-self`，简写`justify-self` `align-self`\n","slug":"cxy/css/grid","published":1,"updated":"2023-04-10T05:51:44.443Z","_id":"clfgkv9s70003nuwi0l2pgqid","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、易记点整理\"><a href=\"#一、易记点整理\" class=\"headerlink\" title=\"一、易记点整理\"></a>一、易记点整理</h2><p>父：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(auto-fill, <span class=\"number\">100px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-column</span>-<span class=\"attribute\">gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-row</span>-<span class=\"attribute\">gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-areas</span>: <span class=\"string\">&quot;a a a&quot;</span>            </span><br><span class=\"line\">                       <span class=\"string\">&quot;b c c&quot;</span>            </span><br><span class=\"line\">                       <span class=\"string\">&quot;b c c&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-auto-flow</span>: row;</span><br><span class=\"line\">  justify-items: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-column-start</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-column-end</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-row-start</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-row-end</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: a a a;</span><br><span class=\"line\">  <span class=\"attribute\">align-self</span>: center;</span><br><span class=\"line\">  justify-self: center</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>属性关键字：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat(<span class=\"number\">3</span>,&#x27;<span class=\"number\">100px</span>&#x27;)  // 一列/一行有<span class=\"number\">3</span>个子元素，一个<span class=\"number\">100px</span></span><br><span class=\"line\">fr</span><br><span class=\"line\">auto // 默认</span><br><span class=\"line\">auto-fill // 换行时一行或一列尽可能塞下最多的</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"auto-fill-和-auto-fit-的区别\"><a href=\"#auto-fill-和-auto-fit-的区别\" class=\"headerlink\" title=\"auto-fill 和 auto-fit 的区别\"></a>auto-fill 和 auto-fit 的区别</h4><p><code>auto-fill</code>和<code>auto-fit</code>都是CSS的<code>repeat()</code>函数的扩展值，用于自动填充和调整网格项目的数量。</p>\n<p><code>auto-fill</code>会自动填充网格容器，尽可能多地填充项目，而不考虑项目的大小。它会在一个网格轨道上放置尽可能多的项目，然后通过增加网格行或列来添加更多项目。这意味着它会在网格轨道上尽可能多地放置项目，直到没有更多项目可以放置为止。因此，它可以在轨道中留下一些空间，因为不会强制填充整个轨道。</p>\n<p>例如，如果我们有一个网格容器和一个项目，这个项目的大小是200像素，我们使用<code>auto-fill</code>并设置每个轨道的大小为250像素，那么这个项目将占用整个轨道，因为它可以在轨道上放置一个完整的项目。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(auto-fill, <span class=\"number\">250px</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>auto-fit</code>会调整网格项目，以使网格填满容器，而不考虑项目的数量。它会在网格轨道上放置尽可能多的项目，但如果剩下的空间不能容纳一个完整的项目，它将缩小项目的大小，以使它们适合空间。这意味着它会填充整个轨道，因此不会在轨道中留下空间。</p>\n<p>例如，如果我们有一个网格容器和一个项目，这个项目的大小是200像素，我们使用<code>auto-fit</code>并设置每个轨道的大小为250像素，那么这个项目将被缩小，以适合轨道，并留下50像素的空间。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(auto-fit, <span class=\"built_in\">minmax</span>(<span class=\"number\">200px</span>, <span class=\"number\">1</span>fr));</span><br></pre></td></tr></table></figure>\n\n<p>因此，<code>auto-fill</code>和<code>auto-fit</code>的区别在于它们处理空间的方式不同。<code>auto-fill</code>会填充整个轨道，但是可能留下一些空间，而<code>auto-fit</code>则会完全填充整个轨道，但可能会缩小项目的大小来适合空间。</p>\n<h2 id=\"二、-grid布局\"><a href=\"#二、-grid布局\" class=\"headerlink\" title=\"二、 grid布局\"></a>二、 grid布局</h2><h4 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"(1) 基本使用\"></a>(1) 基本使用</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;  </span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;  </span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;  <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码意思是三行三列的布局，行宽100px，高100px，也可以使用百分比</p>\n<p>也可以这么简写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;  </span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>:  <span class=\"built_in\">repeat</span>(<span class=\"number\">3</span>,<span class=\"number\">100px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">3</span>,<span class=\"number\">100px</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>repeat()</code> 函数有两个参数，第一个是重复的次数，第二个是具体数值</p>\n<h2 id=\"三、容器属性：\"><a href=\"#三、容器属性：\" class=\"headerlink\" title=\"三、容器属性：\"></a>三、容器属性：</h2><h4 id=\"2-auto-fill\"><a href=\"#2-auto-fill\" class=\"headerlink\" title=\"(2) auto-fill\"></a>(2) <code>auto-fill</code></h4><p>有时候，单元格大小固定，而容器大小不一定，可以用auto-fill指定一行/列尽可能放入更多的元素</p>\n<h4 id=\"3-fr\"><a href=\"#3-fr\" class=\"headerlink\" title=\"(3) fr\"></a>(3) <code>fr</code></h4><p>grid布局为了方便表示比例，引入fr，如果一个设置1fr，一个设置2fr，那后者就是前者的两倍</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;  </span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;  </span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">150px</span> <span class=\"number\">1</span>fr <span class=\"number\">2</span>fr;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://jsbin.com/remowec/edit?html,css,output\">上面代码</a>表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。</p>\n<h4 id=\"4-auto\"><a href=\"#4-auto\" class=\"headerlink\" title=\"(4) auto\"></a>(4) auto</h4><p>auto参数表示由浏览器自动决定宽高</p>\n<h4 id=\"5-行和列的线可以自己命名，用-名字\"><a href=\"#5-行和列的线可以自己命名，用-名字\" class=\"headerlink\" title=\"(5) 行和列的线可以自己命名，用[名字]\"></a>(5) 行和列的线可以自己命名，用[名字]</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: [c1] <span class=\"number\">100px</span> [c2] <span class=\"number\">100px</span> [c3] auto [c4];</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: [r1] <span class=\"number\">100px</span> [r2] <span class=\"number\">100px</span> [r3] auto [r4];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>网格布局允许同一根线有多个名字，比如[fifth-line row-5]。</p>\n<h4 id=\"6-设置行与行、列与列的间距\"><a href=\"#6-设置行与行、列与列的间距\" class=\"headerlink\" title=\"(6) 设置行与行、列与列的间距\"></a>(6) 设置行与行、列与列的间距</h4><p><code>grid-row-gap</code> 与 <code>grid-column-gap</code>，行与列的间距。<br><code>grid-gap</code>: <code>grid-row-gap</code> 与 <code>grid-column-gap</code>的简写，两个值。<br>格式：<br><code>grid-gap</code>: 行 列<br><strong>根据最新标准，</strong><strong><code>grid-row-gap</code><strong>、</strong><code>grid-column-gap</code><strong><strong>的新写法是去掉</strong></strong><code>grid-前缀</code>。</strong></p>\n<h4 id=\"7-grid-template-areas\"><a href=\"#7-grid-template-areas\" class=\"headerlink\" title=\"(7) grid-template-areas\"></a>(7) <code>grid-template-areas</code></h4><p>可以给各个网格取名，如果不需要利用该网格，则用.代替</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template</span>-row: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template</span>-column: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-areas</span>: <span class=\"string\">&#x27;a b c&#x27;</span></span><br><span class=\"line\">                       <span class=\"string\">&#x27;d e f&#x27;</span></span><br><span class=\"line\">                       <span class=\"string\">&#x27;g h j&#x27;</span>; // 意思是将网格划分为<span class=\"number\">9</span>个区域，每个区域命名</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-areas</span>: <span class=\"string\">&#x27;a a a&#x27;</span></span><br><span class=\"line\">                       <span class=\"string\">&#x27;d d d&#x27;</span></span><br><span class=\"line\">                       <span class=\"string\">&#x27;c c c&#x27;</span>; // 意思是将网格横向划分为<span class=\"number\">3</span>个区域，每个区域命名<span class=\"selector-tag\">a</span> <span class=\"selector-tag\">b</span> c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以给各个网格取名，如果不需要利用该网格，则用.代替</p>\n<h4 id=\"8-grid-auto-flow\"><a href=\"#8-grid-auto-flow\" class=\"headerlink\" title=\"(8) grid-auto-flow\"></a>(8) <code>grid-auto-flow</code></h4><p>子元素按照顺序自动放置在网格内，默认先行后列，设为列的话</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-auto-flow</span>: column;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9-justify-items-align-items\"><a href=\"#9-justify-items-align-items\" class=\"headerlink\" title=\"(9) justify-items align-items\"></a>(9) <code>justify-items</code> <code>align-items</code></h4><p>值为<code>start</code> <code>center</code> <code>end</code> <code>strech</code>(拉伸占满整个容器，如果有设置width或height则对应拉伸失效)</p>\n<h4 id=\"10-justify-content-align-content\"><a href=\"#10-justify-content-align-content\" class=\"headerlink\" title=\"(10) justify-content align-content\"></a>(10) <code>justify-content</code> <code>align-content</code></h4><p>设置整个内容区域在容器里面的水平位置(左中右)</p>\n<h2 id=\"四、容器内部的元素属性\"><a href=\"#四、容器内部的元素属性\" class=\"headerlink\" title=\"四、容器内部的元素属性\"></a>四、容器内部的元素属性</h2><h4 id=\"1-grid-column-start-grid-column-end-grid-row-start-grid-row-end\"><a href=\"#1-grid-column-start-grid-column-end-grid-row-start-grid-row-end\" class=\"headerlink\" title=\"(1) grid-column-start grid-column-end grid-row-start grid-row-end\"></a>(1) <code>grid-column-start</code> <code>grid-column-end</code> <code>grid-row-start</code> <code>grid-row-end</code></h4><p>设置某个子元素在第几个网格线内</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-column-start</span>：<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">grid-row-end</span> ：<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>子元素在横向第二根网格线，竖向倒数第一根网格线内。</p>\n<h4 id=\"2-grid-area，设置某元素在某个单元格中\"><a href=\"#2-grid-area，设置某元素在某个单元格中\" class=\"headerlink\" title=\"(2) grid-area，设置某元素在某个单元格中\"></a>(2) <code>grid-area</code>，设置某元素在某个单元格中</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span> &#123;  </span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: e;  <span class=\"comment\">/* 不要写冒号   */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-justify-self-align-self-place-self\"><a href=\"#3-justify-self-align-self-place-self\" class=\"headerlink\" title=\"(3) justify-self align-self place-self\"></a>(3) <code>justify-self</code> <code>align-self</code> <code>place-self</code></h4><p>和父元素的<code>justify-items</code> <code>align-items</code> 一致。<br>只不过一个设置在父元素上，作用于所有子元素。<br>一个是设置在子元素上，只对单个子元素有效。</p>\n<p><code>place-self</code>用来同时设置<code>justify-self</code> <code>align-self</code>，简写<code>justify-self</code> <code>align-self</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、易记点整理\"><a href=\"#一、易记点整理\" class=\"headerlink\" title=\"一、易记点整理\"></a>一、易记点整理</h2><p>父：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(auto-fill, <span class=\"number\">100px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-column</span>-<span class=\"attribute\">gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-row</span>-<span class=\"attribute\">gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-areas</span>: <span class=\"string\">&quot;a a a&quot;</span>            </span><br><span class=\"line\">                       <span class=\"string\">&quot;b c c&quot;</span>            </span><br><span class=\"line\">                       <span class=\"string\">&quot;b c c&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-auto-flow</span>: row;</span><br><span class=\"line\">  justify-items: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-column-start</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-column-end</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-row-start</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-row-end</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: a a a;</span><br><span class=\"line\">  <span class=\"attribute\">align-self</span>: center;</span><br><span class=\"line\">  justify-self: center</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>属性关键字：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repeat(<span class=\"number\">3</span>,&#x27;<span class=\"number\">100px</span>&#x27;)  // 一列/一行有<span class=\"number\">3</span>个子元素，一个<span class=\"number\">100px</span></span><br><span class=\"line\">fr</span><br><span class=\"line\">auto // 默认</span><br><span class=\"line\">auto-fill // 换行时一行或一列尽可能塞下最多的</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"auto-fill-和-auto-fit-的区别\"><a href=\"#auto-fill-和-auto-fit-的区别\" class=\"headerlink\" title=\"auto-fill 和 auto-fit 的区别\"></a>auto-fill 和 auto-fit 的区别</h4><p><code>auto-fill</code>和<code>auto-fit</code>都是CSS的<code>repeat()</code>函数的扩展值，用于自动填充和调整网格项目的数量。</p>\n<p><code>auto-fill</code>会自动填充网格容器，尽可能多地填充项目，而不考虑项目的大小。它会在一个网格轨道上放置尽可能多的项目，然后通过增加网格行或列来添加更多项目。这意味着它会在网格轨道上尽可能多地放置项目，直到没有更多项目可以放置为止。因此，它可以在轨道中留下一些空间，因为不会强制填充整个轨道。</p>\n<p>例如，如果我们有一个网格容器和一个项目，这个项目的大小是200像素，我们使用<code>auto-fill</code>并设置每个轨道的大小为250像素，那么这个项目将占用整个轨道，因为它可以在轨道上放置一个完整的项目。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(auto-fill, <span class=\"number\">250px</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>auto-fit</code>会调整网格项目，以使网格填满容器，而不考虑项目的数量。它会在网格轨道上放置尽可能多的项目，但如果剩下的空间不能容纳一个完整的项目，它将缩小项目的大小，以使它们适合空间。这意味着它会填充整个轨道，因此不会在轨道中留下空间。</p>\n<p>例如，如果我们有一个网格容器和一个项目，这个项目的大小是200像素，我们使用<code>auto-fit</code>并设置每个轨道的大小为250像素，那么这个项目将被缩小，以适合轨道，并留下50像素的空间。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(auto-fit, <span class=\"built_in\">minmax</span>(<span class=\"number\">200px</span>, <span class=\"number\">1</span>fr));</span><br></pre></td></tr></table></figure>\n\n<p>因此，<code>auto-fill</code>和<code>auto-fit</code>的区别在于它们处理空间的方式不同。<code>auto-fill</code>会填充整个轨道，但是可能留下一些空间，而<code>auto-fit</code>则会完全填充整个轨道，但可能会缩小项目的大小来适合空间。</p>\n<h2 id=\"二、-grid布局\"><a href=\"#二、-grid布局\" class=\"headerlink\" title=\"二、 grid布局\"></a>二、 grid布局</h2><h4 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"(1) 基本使用\"></a>(1) 基本使用</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;  </span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;  </span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;  <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码意思是三行三列的布局，行宽100px，高100px，也可以使用百分比</p>\n<p>也可以这么简写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;  </span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>:  <span class=\"built_in\">repeat</span>(<span class=\"number\">3</span>,<span class=\"number\">100px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">3</span>,<span class=\"number\">100px</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>repeat()</code> 函数有两个参数，第一个是重复的次数，第二个是具体数值</p>\n<h2 id=\"三、容器属性：\"><a href=\"#三、容器属性：\" class=\"headerlink\" title=\"三、容器属性：\"></a>三、容器属性：</h2><h4 id=\"2-auto-fill\"><a href=\"#2-auto-fill\" class=\"headerlink\" title=\"(2) auto-fill\"></a>(2) <code>auto-fill</code></h4><p>有时候，单元格大小固定，而容器大小不一定，可以用auto-fill指定一行/列尽可能放入更多的元素</p>\n<h4 id=\"3-fr\"><a href=\"#3-fr\" class=\"headerlink\" title=\"(3) fr\"></a>(3) <code>fr</code></h4><p>grid布局为了方便表示比例，引入fr，如果一个设置1fr，一个设置2fr，那后者就是前者的两倍</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;  </span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;  </span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">150px</span> <span class=\"number\">1</span>fr <span class=\"number\">2</span>fr;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://jsbin.com/remowec/edit?html,css,output\">上面代码</a>表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。</p>\n<h4 id=\"4-auto\"><a href=\"#4-auto\" class=\"headerlink\" title=\"(4) auto\"></a>(4) auto</h4><p>auto参数表示由浏览器自动决定宽高</p>\n<h4 id=\"5-行和列的线可以自己命名，用-名字\"><a href=\"#5-行和列的线可以自己命名，用-名字\" class=\"headerlink\" title=\"(5) 行和列的线可以自己命名，用[名字]\"></a>(5) 行和列的线可以自己命名，用[名字]</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: [c1] <span class=\"number\">100px</span> [c2] <span class=\"number\">100px</span> [c3] auto [c4];</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: [r1] <span class=\"number\">100px</span> [r2] <span class=\"number\">100px</span> [r3] auto [r4];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>网格布局允许同一根线有多个名字，比如[fifth-line row-5]。</p>\n<h4 id=\"6-设置行与行、列与列的间距\"><a href=\"#6-设置行与行、列与列的间距\" class=\"headerlink\" title=\"(6) 设置行与行、列与列的间距\"></a>(6) 设置行与行、列与列的间距</h4><p><code>grid-row-gap</code> 与 <code>grid-column-gap</code>，行与列的间距。<br><code>grid-gap</code>: <code>grid-row-gap</code> 与 <code>grid-column-gap</code>的简写，两个值。<br>格式：<br><code>grid-gap</code>: 行 列<br><strong>根据最新标准，</strong><strong><code>grid-row-gap</code><strong>、</strong><code>grid-column-gap</code><strong><strong>的新写法是去掉</strong></strong><code>grid-前缀</code>。</strong></p>\n<h4 id=\"7-grid-template-areas\"><a href=\"#7-grid-template-areas\" class=\"headerlink\" title=\"(7) grid-template-areas\"></a>(7) <code>grid-template-areas</code></h4><p>可以给各个网格取名，如果不需要利用该网格，则用.代替</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template</span>-row: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template</span>-column: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-areas</span>: <span class=\"string\">&#x27;a b c&#x27;</span></span><br><span class=\"line\">                       <span class=\"string\">&#x27;d e f&#x27;</span></span><br><span class=\"line\">                       <span class=\"string\">&#x27;g h j&#x27;</span>; // 意思是将网格划分为<span class=\"number\">9</span>个区域，每个区域命名</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-areas</span>: <span class=\"string\">&#x27;a a a&#x27;</span></span><br><span class=\"line\">                       <span class=\"string\">&#x27;d d d&#x27;</span></span><br><span class=\"line\">                       <span class=\"string\">&#x27;c c c&#x27;</span>; // 意思是将网格横向划分为<span class=\"number\">3</span>个区域，每个区域命名<span class=\"selector-tag\">a</span> <span class=\"selector-tag\">b</span> c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以给各个网格取名，如果不需要利用该网格，则用.代替</p>\n<h4 id=\"8-grid-auto-flow\"><a href=\"#8-grid-auto-flow\" class=\"headerlink\" title=\"(8) grid-auto-flow\"></a>(8) <code>grid-auto-flow</code></h4><p>子元素按照顺序自动放置在网格内，默认先行后列，设为列的话</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-auto-flow</span>: column;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9-justify-items-align-items\"><a href=\"#9-justify-items-align-items\" class=\"headerlink\" title=\"(9) justify-items align-items\"></a>(9) <code>justify-items</code> <code>align-items</code></h4><p>值为<code>start</code> <code>center</code> <code>end</code> <code>strech</code>(拉伸占满整个容器，如果有设置width或height则对应拉伸失效)</p>\n<h4 id=\"10-justify-content-align-content\"><a href=\"#10-justify-content-align-content\" class=\"headerlink\" title=\"(10) justify-content align-content\"></a>(10) <code>justify-content</code> <code>align-content</code></h4><p>设置整个内容区域在容器里面的水平位置(左中右)</p>\n<h2 id=\"四、容器内部的元素属性\"><a href=\"#四、容器内部的元素属性\" class=\"headerlink\" title=\"四、容器内部的元素属性\"></a>四、容器内部的元素属性</h2><h4 id=\"1-grid-column-start-grid-column-end-grid-row-start-grid-row-end\"><a href=\"#1-grid-column-start-grid-column-end-grid-row-start-grid-row-end\" class=\"headerlink\" title=\"(1) grid-column-start grid-column-end grid-row-start grid-row-end\"></a>(1) <code>grid-column-start</code> <code>grid-column-end</code> <code>grid-row-start</code> <code>grid-row-end</code></h4><p>设置某个子元素在第几个网格线内</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-column-start</span>：<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">grid-row-end</span> ：<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>子元素在横向第二根网格线，竖向倒数第一根网格线内。</p>\n<h4 id=\"2-grid-area，设置某元素在某个单元格中\"><a href=\"#2-grid-area，设置某元素在某个单元格中\" class=\"headerlink\" title=\"(2) grid-area，设置某元素在某个单元格中\"></a>(2) <code>grid-area</code>，设置某元素在某个单元格中</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item-1</span> &#123;  </span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: e;  <span class=\"comment\">/* 不要写冒号   */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-justify-self-align-self-place-self\"><a href=\"#3-justify-self-align-self-place-self\" class=\"headerlink\" title=\"(3) justify-self align-self place-self\"></a>(3) <code>justify-self</code> <code>align-self</code> <code>place-self</code></h4><p>和父元素的<code>justify-items</code> <code>align-items</code> 一致。<br>只不过一个设置在父元素上，作用于所有子元素。<br>一个是设置在子元素上，只对单个子元素有效。</p>\n<p><code>place-self</code>用来同时设置<code>justify-self</code> <code>align-self</code>，简写<code>justify-self</code> <code>align-self</code></p>\n"},{"title":"【移动端】自适应方案","date":"2023-03-20T09:53:43.000Z","_content":"## 基本概念：\n**设备独立像素（DIP）**：逻辑像素，同樣嘅屏幕大小DIP都喺一樣嘅。\n**物理像素（pt）**：分辨率，屏幕一行同埋一列分别有幾多像素点leigaa。\n**设备像素比DPR(Device Pixel Ratio)**：DPR = 物理像素 / 设备独立像素，它通常与视网膜屏(Retina 屏)有关。\n\n## 适配方案\n#### 1. px + 自适应缩放（viewport）\n适用于设计给的设计稿只需要在各种屏幕等比缩放的情况。\n设置meta viewport的width为设计稿给出的width，使设计稿在不同屏幕上只需要自适应缩放。\n```html\n<meta\n\tname=\"viewport\"\n\tcontent=\"width=750,user-scalable=no\" />\n```\n如上，就是设计给的设计稿为750px，CSS单位使用px即可。\n\n<hr>\n\n这个方法写法简便，设计稿是多少就写多少，开发速度很快。可能会有部分特别特别低版本的手机不兼容。\n这个方法有一个很大的缺点，就是缩放全局等比缩放，有些不想缩放的（比如部分1px边框、文字等）也会因为它的影响而等比缩放。\n#### 2. rem适配方案\n其实属于viewport的过渡方案，所以其实它和第一种viewport方案是一致的。只不过是早年对viewport的兼容性不好，所以早年是使用rem+js去实现自适应缩放。\n**rem**：‘The font size of the root element’，就是以根元素 的字体大小为基本单位，是一种相对单位。\nrem 适配的原理就是以 html 的 font-size 大小为基本单位来布局。\n**em**：另一种相对单位，它相对于该元素的本身的 font-size 值来计算。\nem是可以嵌套计算的，所以容易导致一些奇怪的问题。\n```js\n// 获取文档元素\nvar docEl = doc.documentElement;\n// 定义当窗口发生变化时的事件\nvar resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize';\n// 定义重新计算文档元素尺寸的函数\nvar recalc = function () {\n    // 获取文档元素宽度\n    var clientWidth = docEl.clientWidth;\n    if (!clientWidth) return;\n    // 设置文档元素字体大小\n    docEl.style.fontSize = 100 * (clientWidth / 750) + 'px';\n  // 基于屏幕为750px的宽度进行缩放，设置成别的也ok的\n};\n// 监听窗口变化事件\nif (!doc.addEventListener) return;\nwin.addEventListener(resizeEvt, recalc, false);\n// 监听文档加载完成事件\ndoc.addEventListener('DOMContentLoaded', recalc, false);\n```\n假设屏幕750px，设置根元素为100px，即1rem=100px。\n那么24px的字体，就是0.24rem。\n在不同屏幕上的缩放就是\n实际屏幕大小/750px = 实际根元素字体大小/100px\n所以实际根元素字体大小 = 实际屏幕大小*100px/750px\n设置根元素100px是为了好计算，直接除以一百就算出来了。设置个奇奇怪怪的值当然也可以按这个比例算。就是可以但没必要~\n\n这个方法的兼容性很好，在遇到不想缩放的元素时，也可以用px进行设置。就是需要同时用js进行各个屏幕适配，比较麻烦。\n#### 3. vw、vh适配\n\nvh、vw方案：将视觉视口宽度 window.innerWidth和视觉视口高度 window.innerHeight 等分为 100 份。\nvw(Viewport's width)：1vw等于视觉视口的1%\nvh(Viewport's height) :1vh 为视觉视口高度的1%\nvmin : vw 和 vh 中的较小值\nvmax : 选取 vw 和 vh 中的较大值\n\n如果设计稿是750px宽度。\n如果视觉视口为750px，那么1vw = 1% = 7.5px，这时UI给定一个元素的宽为75px（设备独立像素），我们只需要将它设置为 75px / 750px = 10% = 10vw。\n就是酱紫拉~它和屏幕大小没啥关系的。就是百分比\n\n#### 4. 自动计算的插件\n实际开发过程当中，计算每一个dom元素的vw或者rem是很麻烦的，所以可以使用postcss-px-to-viewport去自动转换。\n```js\nmodule.exports = {\n  plugins: {\n    // ...\n    'postcss-px-to-viewport': {\n      // options\n    }\n  }\n}\n```\n##### 配置参数\n默认参数:\n```json\n{\n  unitToConvert: 'px',\n  viewportWidth: 320,\n  unitPrecision: 5,\n  propList: ['*'],\n  viewportUnit: 'vw',\n  fontViewportUnit: 'vw',\n  selectorBlackList: [],\n  minPixelValue: 1,\n  mediaQuery: false,\n  replace: true,\n  exclude: undefined,\n  include: undefined,\n  landscape: false,\n  landscapeUnit: 'vw',\n  landscapeWidth: 568\n}\n```\n\n**unitToConvert (String)** 需要转换的单位，默认为\"px\"\n**viewportWidth (Number)** 设计稿的视口宽度\n**unitPrecision (Number)** 单位转换后保留的精度\n**propList (Array)** 能转化为vw的属性列表\n**viewportUnit (String)** 希望使用的视口单位\n**fontViewportUnit (String)** 字体使用的视口单位\n**selectorBlackList (Array)** 需要忽略的CSS选择器，不会转为视口单位，使用原有的px等单位。\n**minPixelValue (Number)** 设置最小的转换数值，如果为1的话，只有大于1的值会被转换\n**mediaQuery (Boolean)** 媒体查询里的单位是否需要转换单位\n**replace (Boolean)** 是否直接更换属性值，而不添加备用属性\n**exclude (Array or Regexp)** 忽略某些文件夹下的文件或特定文件，例如 'node_modules' 下的文件\n**landscape (Boolean)** 是否添加根据 **landscapeWidth** 生成的媒体查询条件 @media (orientation: landscape)\n**landscapeUnit (String)** 横屏时使用的单位\n**landscapeWidth (Number)** 横屏时使用的视口宽度\n\n当然，less、sass也有对此自定义解决的方案，可以自行查看文档。\n### 5. Viewport 方案（推荐）\n> 由于 viewport 单位得到众多浏览器的兼容，lib-flexible 这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用 viewport 来替代此方案。\n\nvw 适配方案的流程：\n\n1.  meta 标签设置 viewport 宽度为屏幕宽度；\n2.  开发环境配置 [postcss-px-to-viewport](https://www.npmjs.com/package/postcss-px-to-viewport) 或者类似插件；\n3.  根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 vw；\n4.  段落文本也按照设计稿写，单位为px，不需要转换为 vw；\n#### 6. media媒体查询\n有时候用户需要的更大的屏幕上更多的内容，而不是更大的字，所以在pc、平板一侧主要用到的兼容方式是media媒体查询。\n```css\n@media screen and (max-width: 300px) {\n    body {\n        background-color:lightblue;\n    }\n}\n```\n使用 @media 查询，你可以针对不同的媒体类型定义不同的样式。\n\n你也可以针对不同的媒体使用不同样式文件 :\n```html\n<!-- 宽度大于 900px 的屏幕使用该样式 -->\n<link rel=\"stylesheet\" media=\"screen and (min-width: 900px)\" href=\"widescreen.css\">\n<!-- 宽度小于或等于 600px 的屏幕使用该样式 -->\n<link rel=\"stylesheet\" media=\"screen and (max-width: 600px)\" href=\"smallscreen.css\">\n```\n因为这里主要讨论的是移动端，所以media媒体查询的用法不详述了。","source":"_posts/移动端自适应方案.md","raw":"---\ntitle: 【移动端】自适应方案\ndate: 2023-03-20 17:53:43\ntags: \n  - iv1\n  - css\ncategories:\n  - 程序员的自我修养\n---\n## 基本概念：\n**设备独立像素（DIP）**：逻辑像素，同樣嘅屏幕大小DIP都喺一樣嘅。\n**物理像素（pt）**：分辨率，屏幕一行同埋一列分别有幾多像素点leigaa。\n**设备像素比DPR(Device Pixel Ratio)**：DPR = 物理像素 / 设备独立像素，它通常与视网膜屏(Retina 屏)有关。\n\n## 适配方案\n#### 1. px + 自适应缩放（viewport）\n适用于设计给的设计稿只需要在各种屏幕等比缩放的情况。\n设置meta viewport的width为设计稿给出的width，使设计稿在不同屏幕上只需要自适应缩放。\n```html\n<meta\n\tname=\"viewport\"\n\tcontent=\"width=750,user-scalable=no\" />\n```\n如上，就是设计给的设计稿为750px，CSS单位使用px即可。\n\n<hr>\n\n这个方法写法简便，设计稿是多少就写多少，开发速度很快。可能会有部分特别特别低版本的手机不兼容。\n这个方法有一个很大的缺点，就是缩放全局等比缩放，有些不想缩放的（比如部分1px边框、文字等）也会因为它的影响而等比缩放。\n#### 2. rem适配方案\n其实属于viewport的过渡方案，所以其实它和第一种viewport方案是一致的。只不过是早年对viewport的兼容性不好，所以早年是使用rem+js去实现自适应缩放。\n**rem**：‘The font size of the root element’，就是以根元素 的字体大小为基本单位，是一种相对单位。\nrem 适配的原理就是以 html 的 font-size 大小为基本单位来布局。\n**em**：另一种相对单位，它相对于该元素的本身的 font-size 值来计算。\nem是可以嵌套计算的，所以容易导致一些奇怪的问题。\n```js\n// 获取文档元素\nvar docEl = doc.documentElement;\n// 定义当窗口发生变化时的事件\nvar resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize';\n// 定义重新计算文档元素尺寸的函数\nvar recalc = function () {\n    // 获取文档元素宽度\n    var clientWidth = docEl.clientWidth;\n    if (!clientWidth) return;\n    // 设置文档元素字体大小\n    docEl.style.fontSize = 100 * (clientWidth / 750) + 'px';\n  // 基于屏幕为750px的宽度进行缩放，设置成别的也ok的\n};\n// 监听窗口变化事件\nif (!doc.addEventListener) return;\nwin.addEventListener(resizeEvt, recalc, false);\n// 监听文档加载完成事件\ndoc.addEventListener('DOMContentLoaded', recalc, false);\n```\n假设屏幕750px，设置根元素为100px，即1rem=100px。\n那么24px的字体，就是0.24rem。\n在不同屏幕上的缩放就是\n实际屏幕大小/750px = 实际根元素字体大小/100px\n所以实际根元素字体大小 = 实际屏幕大小*100px/750px\n设置根元素100px是为了好计算，直接除以一百就算出来了。设置个奇奇怪怪的值当然也可以按这个比例算。就是可以但没必要~\n\n这个方法的兼容性很好，在遇到不想缩放的元素时，也可以用px进行设置。就是需要同时用js进行各个屏幕适配，比较麻烦。\n#### 3. vw、vh适配\n\nvh、vw方案：将视觉视口宽度 window.innerWidth和视觉视口高度 window.innerHeight 等分为 100 份。\nvw(Viewport's width)：1vw等于视觉视口的1%\nvh(Viewport's height) :1vh 为视觉视口高度的1%\nvmin : vw 和 vh 中的较小值\nvmax : 选取 vw 和 vh 中的较大值\n\n如果设计稿是750px宽度。\n如果视觉视口为750px，那么1vw = 1% = 7.5px，这时UI给定一个元素的宽为75px（设备独立像素），我们只需要将它设置为 75px / 750px = 10% = 10vw。\n就是酱紫拉~它和屏幕大小没啥关系的。就是百分比\n\n#### 4. 自动计算的插件\n实际开发过程当中，计算每一个dom元素的vw或者rem是很麻烦的，所以可以使用postcss-px-to-viewport去自动转换。\n```js\nmodule.exports = {\n  plugins: {\n    // ...\n    'postcss-px-to-viewport': {\n      // options\n    }\n  }\n}\n```\n##### 配置参数\n默认参数:\n```json\n{\n  unitToConvert: 'px',\n  viewportWidth: 320,\n  unitPrecision: 5,\n  propList: ['*'],\n  viewportUnit: 'vw',\n  fontViewportUnit: 'vw',\n  selectorBlackList: [],\n  minPixelValue: 1,\n  mediaQuery: false,\n  replace: true,\n  exclude: undefined,\n  include: undefined,\n  landscape: false,\n  landscapeUnit: 'vw',\n  landscapeWidth: 568\n}\n```\n\n**unitToConvert (String)** 需要转换的单位，默认为\"px\"\n**viewportWidth (Number)** 设计稿的视口宽度\n**unitPrecision (Number)** 单位转换后保留的精度\n**propList (Array)** 能转化为vw的属性列表\n**viewportUnit (String)** 希望使用的视口单位\n**fontViewportUnit (String)** 字体使用的视口单位\n**selectorBlackList (Array)** 需要忽略的CSS选择器，不会转为视口单位，使用原有的px等单位。\n**minPixelValue (Number)** 设置最小的转换数值，如果为1的话，只有大于1的值会被转换\n**mediaQuery (Boolean)** 媒体查询里的单位是否需要转换单位\n**replace (Boolean)** 是否直接更换属性值，而不添加备用属性\n**exclude (Array or Regexp)** 忽略某些文件夹下的文件或特定文件，例如 'node_modules' 下的文件\n**landscape (Boolean)** 是否添加根据 **landscapeWidth** 生成的媒体查询条件 @media (orientation: landscape)\n**landscapeUnit (String)** 横屏时使用的单位\n**landscapeWidth (Number)** 横屏时使用的视口宽度\n\n当然，less、sass也有对此自定义解决的方案，可以自行查看文档。\n### 5. Viewport 方案（推荐）\n> 由于 viewport 单位得到众多浏览器的兼容，lib-flexible 这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用 viewport 来替代此方案。\n\nvw 适配方案的流程：\n\n1.  meta 标签设置 viewport 宽度为屏幕宽度；\n2.  开发环境配置 [postcss-px-to-viewport](https://www.npmjs.com/package/postcss-px-to-viewport) 或者类似插件；\n3.  根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 vw；\n4.  段落文本也按照设计稿写，单位为px，不需要转换为 vw；\n#### 6. media媒体查询\n有时候用户需要的更大的屏幕上更多的内容，而不是更大的字，所以在pc、平板一侧主要用到的兼容方式是media媒体查询。\n```css\n@media screen and (max-width: 300px) {\n    body {\n        background-color:lightblue;\n    }\n}\n```\n使用 @media 查询，你可以针对不同的媒体类型定义不同的样式。\n\n你也可以针对不同的媒体使用不同样式文件 :\n```html\n<!-- 宽度大于 900px 的屏幕使用该样式 -->\n<link rel=\"stylesheet\" media=\"screen and (min-width: 900px)\" href=\"widescreen.css\">\n<!-- 宽度小于或等于 600px 的屏幕使用该样式 -->\n<link rel=\"stylesheet\" media=\"screen and (max-width: 600px)\" href=\"smallscreen.css\">\n```\n因为这里主要讨论的是移动端，所以media媒体查询的用法不详述了。","slug":"移动端自适应方案","published":1,"updated":"2023-04-25T02:26:05.096Z","_id":"clfgnjial0000dowieops88v0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a>基本概念：</h2><p><strong>设备独立像素（DIP）</strong>：逻辑像素，同樣嘅屏幕大小DIP都喺一樣嘅。<br><strong>物理像素（pt）</strong>：分辨率，屏幕一行同埋一列分别有幾多像素点leigaa。<br>**设备像素比DPR(Device Pixel Ratio)**：DPR = 物理像素 / 设备独立像素，它通常与视网膜屏(Retina 屏)有关。</p>\n<h2 id=\"适配方案\"><a href=\"#适配方案\" class=\"headerlink\" title=\"适配方案\"></a>适配方案</h2><h4 id=\"1-px-自适应缩放（viewport）\"><a href=\"#1-px-自适应缩放（viewport）\" class=\"headerlink\" title=\"1. px + 自适应缩放（viewport）\"></a>1. px + 自适应缩放（viewport）</h4><p>适用于设计给的设计稿只需要在各种屏幕等比缩放的情况。<br>设置meta viewport的width为设计稿给出的width，使设计稿在不同屏幕上只需要自适应缩放。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">content</span>=<span class=\"string\">&quot;width=750,user-scalable=no&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上，就是设计给的设计稿为750px，CSS单位使用px即可。</p>\n<hr>\n\n<p>这个方法写法简便，设计稿是多少就写多少，开发速度很快。可能会有部分特别特别低版本的手机不兼容。<br>这个方法有一个很大的缺点，就是缩放全局等比缩放，有些不想缩放的（比如部分1px边框、文字等）也会因为它的影响而等比缩放。</p>\n<h4 id=\"2-rem适配方案\"><a href=\"#2-rem适配方案\" class=\"headerlink\" title=\"2. rem适配方案\"></a>2. rem适配方案</h4><p>其实属于viewport的过渡方案，所以其实它和第一种viewport方案是一致的。只不过是早年对viewport的兼容性不好，所以早年是使用rem+js去实现自适应缩放。<br><strong>rem</strong>：‘The font size of the root element’，就是以根元素 的字体大小为基本单位，是一种相对单位。<br>rem 适配的原理就是以 html 的 font-size 大小为基本单位来布局。<br><strong>em</strong>：另一种相对单位，它相对于该元素的本身的 font-size 值来计算。<br>em是可以嵌套计算的，所以容易导致一些奇怪的问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取文档元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> docEl = doc.<span class=\"property\">documentElement</span>;</span><br><span class=\"line\"><span class=\"comment\">// 定义当窗口发生变化时的事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> resizeEvt = <span class=\"string\">&#x27;orientationchange&#x27;</span> <span class=\"keyword\">in</span> <span class=\"variable language_\">window</span> ? <span class=\"string\">&#x27;orientationchange&#x27;</span> : <span class=\"string\">&#x27;resize&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 定义重新计算文档元素尺寸的函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> recalc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文档元素宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> clientWidth = docEl.<span class=\"property\">clientWidth</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!clientWidth) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置文档元素字体大小</span></span><br><span class=\"line\">    docEl.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = <span class=\"number\">100</span> * (clientWidth / <span class=\"number\">750</span>) + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 基于屏幕为750px的宽度进行缩放，设置成别的也ok的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 监听窗口变化事件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!doc.<span class=\"property\">addEventListener</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">win.<span class=\"title function_\">addEventListener</span>(resizeEvt, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 监听文档加载完成事件</span></span><br><span class=\"line\">doc.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>, recalc, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>假设屏幕750px，设置根元素为100px，即1rem=100px。<br>那么24px的字体，就是0.24rem。<br>在不同屏幕上的缩放就是<br>实际屏幕大小/750px = 实际根元素字体大小/100px<br>所以实际根元素字体大小 = 实际屏幕大小*100px/750px<br>设置根元素100px是为了好计算，直接除以一百就算出来了。设置个奇奇怪怪的值当然也可以按这个比例算。就是可以但没必要~</p>\n<p>这个方法的兼容性很好，在遇到不想缩放的元素时，也可以用px进行设置。就是需要同时用js进行各个屏幕适配，比较麻烦。</p>\n<h4 id=\"3-vw、vh适配\"><a href=\"#3-vw、vh适配\" class=\"headerlink\" title=\"3. vw、vh适配\"></a>3. vw、vh适配</h4><p>vh、vw方案：将视觉视口宽度 window.innerWidth和视觉视口高度 window.innerHeight 等分为 100 份。<br>vw(Viewport’s width)：1vw等于视觉视口的1%<br>vh(Viewport’s height) :1vh 为视觉视口高度的1%<br>vmin : vw 和 vh 中的较小值<br>vmax : 选取 vw 和 vh 中的较大值</p>\n<p>如果设计稿是750px宽度。<br>如果视觉视口为750px，那么1vw = 1% = 7.5px，这时UI给定一个元素的宽为75px（设备独立像素），我们只需要将它设置为 75px / 750px = 10% = 10vw。<br>就是酱紫拉~它和屏幕大小没啥关系的。就是百分比</p>\n<h4 id=\"4-自动计算的插件\"><a href=\"#4-自动计算的插件\" class=\"headerlink\" title=\"4. 自动计算的插件\"></a>4. 自动计算的插件</h4><p>实际开发过程当中，计算每一个dom元素的vw或者rem是很麻烦的，所以可以使用postcss-px-to-viewport去自动转换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;postcss-px-to-viewport&#x27;</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// options</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h5><p>默认参数:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  unitToConvert<span class=\"punctuation\">:</span> &#x27;px&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  viewportWidth<span class=\"punctuation\">:</span> <span class=\"number\">320</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  unitPrecision<span class=\"punctuation\">:</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  propList<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;*&#x27;<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  viewportUnit<span class=\"punctuation\">:</span> &#x27;vw&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  fontViewportUnit<span class=\"punctuation\">:</span> &#x27;vw&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectorBlackList<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  minPixelValue<span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  mediaQuery<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  replace<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  exclude<span class=\"punctuation\">:</span> undefined<span class=\"punctuation\">,</span></span><br><span class=\"line\">  include<span class=\"punctuation\">:</span> undefined<span class=\"punctuation\">,</span></span><br><span class=\"line\">  landscape<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  landscapeUnit<span class=\"punctuation\">:</span> &#x27;vw&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  landscapeWidth<span class=\"punctuation\">:</span> <span class=\"number\">568</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>unitToConvert (String)</strong> 需要转换的单位，默认为”px”<br><strong>viewportWidth (Number)</strong> 设计稿的视口宽度<br><strong>unitPrecision (Number)</strong> 单位转换后保留的精度<br><strong>propList (Array)</strong> 能转化为vw的属性列表<br><strong>viewportUnit (String)</strong> 希望使用的视口单位<br><strong>fontViewportUnit (String)</strong> 字体使用的视口单位<br><strong>selectorBlackList (Array)</strong> 需要忽略的CSS选择器，不会转为视口单位，使用原有的px等单位。<br><strong>minPixelValue (Number)</strong> 设置最小的转换数值，如果为1的话，只有大于1的值会被转换<br><strong>mediaQuery (Boolean)</strong> 媒体查询里的单位是否需要转换单位<br><strong>replace (Boolean)</strong> 是否直接更换属性值，而不添加备用属性<br><strong>exclude (Array or Regexp)</strong> 忽略某些文件夹下的文件或特定文件，例如 ‘node_modules’ 下的文件<br><strong>landscape (Boolean)</strong> 是否添加根据 <strong>landscapeWidth</strong> 生成的媒体查询条件 @media (orientation: landscape)<br><strong>landscapeUnit (String)</strong> 横屏时使用的单位<br><strong>landscapeWidth (Number)</strong> 横屏时使用的视口宽度</p>\n<p>当然，less、sass也有对此自定义解决的方案，可以自行查看文档。</p>\n<h3 id=\"5-Viewport-方案（推荐）\"><a href=\"#5-Viewport-方案（推荐）\" class=\"headerlink\" title=\"5. Viewport 方案（推荐）\"></a>5. Viewport 方案（推荐）</h3><blockquote>\n<p>由于 viewport 单位得到众多浏览器的兼容，lib-flexible 这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用 viewport 来替代此方案。</p>\n</blockquote>\n<p>vw 适配方案的流程：</p>\n<ol>\n<li> meta 标签设置 viewport 宽度为屏幕宽度；</li>\n<li> 开发环境配置 <a href=\"https://www.npmjs.com/package/postcss-px-to-viewport\">postcss-px-to-viewport</a> 或者类似插件；</li>\n<li> 根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 vw；</li>\n<li> 段落文本也按照设计稿写，单位为px，不需要转换为 vw；<h4 id=\"6-media媒体查询\"><a href=\"#6-media媒体查询\" class=\"headerlink\" title=\"6. media媒体查询\"></a>6. media媒体查询</h4>有时候用户需要的更大的屏幕上更多的内容，而不是更大的字，所以在pc、平板一侧主要用到的兼容方式是media媒体查询。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">300px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>:lightblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n使用 @media 查询，你可以针对不同的媒体类型定义不同的样式。</li>\n</ol>\n<p>你也可以针对不同的媒体使用不同样式文件 :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 宽度大于 900px 的屏幕使用该样式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;screen and (min-width: 900px)&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;widescreen.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 宽度小于或等于 600px 的屏幕使用该样式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;screen and (max-width: 600px)&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;smallscreen.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因为这里主要讨论的是移动端，所以media媒体查询的用法不详述了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a>基本概念：</h2><p><strong>设备独立像素（DIP）</strong>：逻辑像素，同樣嘅屏幕大小DIP都喺一樣嘅。<br><strong>物理像素（pt）</strong>：分辨率，屏幕一行同埋一列分别有幾多像素点leigaa。<br>**设备像素比DPR(Device Pixel Ratio)**：DPR = 物理像素 / 设备独立像素，它通常与视网膜屏(Retina 屏)有关。</p>\n<h2 id=\"适配方案\"><a href=\"#适配方案\" class=\"headerlink\" title=\"适配方案\"></a>适配方案</h2><h4 id=\"1-px-自适应缩放（viewport）\"><a href=\"#1-px-自适应缩放（viewport）\" class=\"headerlink\" title=\"1. px + 自适应缩放（viewport）\"></a>1. px + 自适应缩放（viewport）</h4><p>适用于设计给的设计稿只需要在各种屏幕等比缩放的情况。<br>设置meta viewport的width为设计稿给出的width，使设计稿在不同屏幕上只需要自适应缩放。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">content</span>=<span class=\"string\">&quot;width=750,user-scalable=no&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上，就是设计给的设计稿为750px，CSS单位使用px即可。</p>\n<hr>\n\n<p>这个方法写法简便，设计稿是多少就写多少，开发速度很快。可能会有部分特别特别低版本的手机不兼容。<br>这个方法有一个很大的缺点，就是缩放全局等比缩放，有些不想缩放的（比如部分1px边框、文字等）也会因为它的影响而等比缩放。</p>\n<h4 id=\"2-rem适配方案\"><a href=\"#2-rem适配方案\" class=\"headerlink\" title=\"2. rem适配方案\"></a>2. rem适配方案</h4><p>其实属于viewport的过渡方案，所以其实它和第一种viewport方案是一致的。只不过是早年对viewport的兼容性不好，所以早年是使用rem+js去实现自适应缩放。<br><strong>rem</strong>：‘The font size of the root element’，就是以根元素 的字体大小为基本单位，是一种相对单位。<br>rem 适配的原理就是以 html 的 font-size 大小为基本单位来布局。<br><strong>em</strong>：另一种相对单位，它相对于该元素的本身的 font-size 值来计算。<br>em是可以嵌套计算的，所以容易导致一些奇怪的问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取文档元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> docEl = doc.<span class=\"property\">documentElement</span>;</span><br><span class=\"line\"><span class=\"comment\">// 定义当窗口发生变化时的事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> resizeEvt = <span class=\"string\">&#x27;orientationchange&#x27;</span> <span class=\"keyword\">in</span> <span class=\"variable language_\">window</span> ? <span class=\"string\">&#x27;orientationchange&#x27;</span> : <span class=\"string\">&#x27;resize&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 定义重新计算文档元素尺寸的函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> recalc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文档元素宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> clientWidth = docEl.<span class=\"property\">clientWidth</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!clientWidth) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置文档元素字体大小</span></span><br><span class=\"line\">    docEl.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = <span class=\"number\">100</span> * (clientWidth / <span class=\"number\">750</span>) + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 基于屏幕为750px的宽度进行缩放，设置成别的也ok的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 监听窗口变化事件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!doc.<span class=\"property\">addEventListener</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">win.<span class=\"title function_\">addEventListener</span>(resizeEvt, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 监听文档加载完成事件</span></span><br><span class=\"line\">doc.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>, recalc, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>假设屏幕750px，设置根元素为100px，即1rem=100px。<br>那么24px的字体，就是0.24rem。<br>在不同屏幕上的缩放就是<br>实际屏幕大小/750px = 实际根元素字体大小/100px<br>所以实际根元素字体大小 = 实际屏幕大小*100px/750px<br>设置根元素100px是为了好计算，直接除以一百就算出来了。设置个奇奇怪怪的值当然也可以按这个比例算。就是可以但没必要~</p>\n<p>这个方法的兼容性很好，在遇到不想缩放的元素时，也可以用px进行设置。就是需要同时用js进行各个屏幕适配，比较麻烦。</p>\n<h4 id=\"3-vw、vh适配\"><a href=\"#3-vw、vh适配\" class=\"headerlink\" title=\"3. vw、vh适配\"></a>3. vw、vh适配</h4><p>vh、vw方案：将视觉视口宽度 window.innerWidth和视觉视口高度 window.innerHeight 等分为 100 份。<br>vw(Viewport’s width)：1vw等于视觉视口的1%<br>vh(Viewport’s height) :1vh 为视觉视口高度的1%<br>vmin : vw 和 vh 中的较小值<br>vmax : 选取 vw 和 vh 中的较大值</p>\n<p>如果设计稿是750px宽度。<br>如果视觉视口为750px，那么1vw = 1% = 7.5px，这时UI给定一个元素的宽为75px（设备独立像素），我们只需要将它设置为 75px / 750px = 10% = 10vw。<br>就是酱紫拉~它和屏幕大小没啥关系的。就是百分比</p>\n<h4 id=\"4-自动计算的插件\"><a href=\"#4-自动计算的插件\" class=\"headerlink\" title=\"4. 自动计算的插件\"></a>4. 自动计算的插件</h4><p>实际开发过程当中，计算每一个dom元素的vw或者rem是很麻烦的，所以可以使用postcss-px-to-viewport去自动转换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;postcss-px-to-viewport&#x27;</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// options</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h5><p>默认参数:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  unitToConvert<span class=\"punctuation\">:</span> &#x27;px&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  viewportWidth<span class=\"punctuation\">:</span> <span class=\"number\">320</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  unitPrecision<span class=\"punctuation\">:</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  propList<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;*&#x27;<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  viewportUnit<span class=\"punctuation\">:</span> &#x27;vw&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  fontViewportUnit<span class=\"punctuation\">:</span> &#x27;vw&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  selectorBlackList<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  minPixelValue<span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  mediaQuery<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  replace<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  exclude<span class=\"punctuation\">:</span> undefined<span class=\"punctuation\">,</span></span><br><span class=\"line\">  include<span class=\"punctuation\">:</span> undefined<span class=\"punctuation\">,</span></span><br><span class=\"line\">  landscape<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  landscapeUnit<span class=\"punctuation\">:</span> &#x27;vw&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  landscapeWidth<span class=\"punctuation\">:</span> <span class=\"number\">568</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>unitToConvert (String)</strong> 需要转换的单位，默认为”px”<br><strong>viewportWidth (Number)</strong> 设计稿的视口宽度<br><strong>unitPrecision (Number)</strong> 单位转换后保留的精度<br><strong>propList (Array)</strong> 能转化为vw的属性列表<br><strong>viewportUnit (String)</strong> 希望使用的视口单位<br><strong>fontViewportUnit (String)</strong> 字体使用的视口单位<br><strong>selectorBlackList (Array)</strong> 需要忽略的CSS选择器，不会转为视口单位，使用原有的px等单位。<br><strong>minPixelValue (Number)</strong> 设置最小的转换数值，如果为1的话，只有大于1的值会被转换<br><strong>mediaQuery (Boolean)</strong> 媒体查询里的单位是否需要转换单位<br><strong>replace (Boolean)</strong> 是否直接更换属性值，而不添加备用属性<br><strong>exclude (Array or Regexp)</strong> 忽略某些文件夹下的文件或特定文件，例如 ‘node_modules’ 下的文件<br><strong>landscape (Boolean)</strong> 是否添加根据 <strong>landscapeWidth</strong> 生成的媒体查询条件 @media (orientation: landscape)<br><strong>landscapeUnit (String)</strong> 横屏时使用的单位<br><strong>landscapeWidth (Number)</strong> 横屏时使用的视口宽度</p>\n<p>当然，less、sass也有对此自定义解决的方案，可以自行查看文档。</p>\n<h3 id=\"5-Viewport-方案（推荐）\"><a href=\"#5-Viewport-方案（推荐）\" class=\"headerlink\" title=\"5. Viewport 方案（推荐）\"></a>5. Viewport 方案（推荐）</h3><blockquote>\n<p>由于 viewport 单位得到众多浏览器的兼容，lib-flexible 这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用 viewport 来替代此方案。</p>\n</blockquote>\n<p>vw 适配方案的流程：</p>\n<ol>\n<li> meta 标签设置 viewport 宽度为屏幕宽度；</li>\n<li> 开发环境配置 <a href=\"https://www.npmjs.com/package/postcss-px-to-viewport\">postcss-px-to-viewport</a> 或者类似插件；</li>\n<li> 根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 vw；</li>\n<li> 段落文本也按照设计稿写，单位为px，不需要转换为 vw；<h4 id=\"6-media媒体查询\"><a href=\"#6-media媒体查询\" class=\"headerlink\" title=\"6. media媒体查询\"></a>6. media媒体查询</h4>有时候用户需要的更大的屏幕上更多的内容，而不是更大的字，所以在pc、平板一侧主要用到的兼容方式是media媒体查询。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">300px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>:lightblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n使用 @media 查询，你可以针对不同的媒体类型定义不同的样式。</li>\n</ol>\n<p>你也可以针对不同的媒体使用不同样式文件 :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 宽度大于 900px 的屏幕使用该样式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;screen and (min-width: 900px)&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;widescreen.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 宽度小于或等于 600px 的屏幕使用该样式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;screen and (max-width: 600px)&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;smallscreen.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因为这里主要讨论的是移动端，所以media媒体查询的用法不详述了。</p>\n"},{"title":"面试题整理（持续更新）","date":"2021-03-20T09:58:32.000Z","_content":"\n## js\n### call绑定null\ncall和apply第一个参数为null/undefined，函数this指向全局对象\n### 跨域解决方案\ncors和jsonp\n### jsonp为什么会自动执行？\n又不是请求而是script标签当然会自动执行。。\n\n## css\n### 重排(reflow)和重绘(repaint)\n\n+ 重绘：某些元素的外观被改变，例如：元素的填充颜色\n+ 重排：重新生成布局，重新排列元素。\n\n**重绘不一定导致重排，但重排一定会导致重绘。**\n\n### 如何提高dom渲染性能？\n\n减少重排次数：\n+ 集中改变dom\n+ 分离读写操作\n+ 使用display: none之后再进行 dom的修改，就会避免重排\n+ 使用absolute或fixed脱离文档流，修改子元素就不会影响父元素以上的元素重排\n+ 固定会影响父元素重排的css，再去操作子元素的重排和重绘，这样就不会影响父元素之外的其他元素\n+ 优化动画，比如translate: 1s改为更长的时间，减少帧数。\n\n## 网络\n### websocket\n### http缓存策略","source":"_posts/面试题整理.md","raw":"---\ntitle: 面试题整理（持续更新）\ndate: 2021-03-20 17:58:32\ntags: \n - iv3\ncategories:\n  - 程序员的自我修养\n---\n\n## js\n### call绑定null\ncall和apply第一个参数为null/undefined，函数this指向全局对象\n### 跨域解决方案\ncors和jsonp\n### jsonp为什么会自动执行？\n又不是请求而是script标签当然会自动执行。。\n\n## css\n### 重排(reflow)和重绘(repaint)\n\n+ 重绘：某些元素的外观被改变，例如：元素的填充颜色\n+ 重排：重新生成布局，重新排列元素。\n\n**重绘不一定导致重排，但重排一定会导致重绘。**\n\n### 如何提高dom渲染性能？\n\n减少重排次数：\n+ 集中改变dom\n+ 分离读写操作\n+ 使用display: none之后再进行 dom的修改，就会避免重排\n+ 使用absolute或fixed脱离文档流，修改子元素就不会影响父元素以上的元素重排\n+ 固定会影响父元素重排的css，再去操作子元素的重排和重绘，这样就不会影响父元素之外的其他元素\n+ 优化动画，比如translate: 1s改为更长的时间，减少帧数。\n\n## 网络\n### websocket\n### http缓存策略","slug":"面试题整理","published":1,"updated":"2023-04-25T02:25:59.006Z","_id":"clfgnsb160000jbwib97i7aoh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h2><h3 id=\"call绑定null\"><a href=\"#call绑定null\" class=\"headerlink\" title=\"call绑定null\"></a>call绑定null</h3><p>call和apply第一个参数为null/undefined，函数this指向全局对象</p>\n<h3 id=\"跨域解决方案\"><a href=\"#跨域解决方案\" class=\"headerlink\" title=\"跨域解决方案\"></a>跨域解决方案</h3><p>cors和jsonp</p>\n<h3 id=\"jsonp为什么会自动执行？\"><a href=\"#jsonp为什么会自动执行？\" class=\"headerlink\" title=\"jsonp为什么会自动执行？\"></a>jsonp为什么会自动执行？</h3><p>又不是请求而是script标签当然会自动执行。。</p>\n<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><h3 id=\"重排-reflow-和重绘-repaint\"><a href=\"#重排-reflow-和重绘-repaint\" class=\"headerlink\" title=\"重排(reflow)和重绘(repaint)\"></a>重排(reflow)和重绘(repaint)</h3><ul>\n<li>重绘：某些元素的外观被改变，例如：元素的填充颜色</li>\n<li>重排：重新生成布局，重新排列元素。</li>\n</ul>\n<p><strong>重绘不一定导致重排，但重排一定会导致重绘。</strong></p>\n<h3 id=\"如何提高dom渲染性能？\"><a href=\"#如何提高dom渲染性能？\" class=\"headerlink\" title=\"如何提高dom渲染性能？\"></a>如何提高dom渲染性能？</h3><p>减少重排次数：</p>\n<ul>\n<li>集中改变dom</li>\n<li>分离读写操作</li>\n<li>使用display: none之后再进行 dom的修改，就会避免重排</li>\n<li>使用absolute或fixed脱离文档流，修改子元素就不会影响父元素以上的元素重排</li>\n<li>固定会影响父元素重排的css，再去操作子元素的重排和重绘，这样就不会影响父元素之外的其他元素</li>\n<li>优化动画，比如translate: 1s改为更长的时间，减少帧数。</li>\n</ul>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h3><h3 id=\"http缓存策略\"><a href=\"#http缓存策略\" class=\"headerlink\" title=\"http缓存策略\"></a>http缓存策略</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h2><h3 id=\"call绑定null\"><a href=\"#call绑定null\" class=\"headerlink\" title=\"call绑定null\"></a>call绑定null</h3><p>call和apply第一个参数为null/undefined，函数this指向全局对象</p>\n<h3 id=\"跨域解决方案\"><a href=\"#跨域解决方案\" class=\"headerlink\" title=\"跨域解决方案\"></a>跨域解决方案</h3><p>cors和jsonp</p>\n<h3 id=\"jsonp为什么会自动执行？\"><a href=\"#jsonp为什么会自动执行？\" class=\"headerlink\" title=\"jsonp为什么会自动执行？\"></a>jsonp为什么会自动执行？</h3><p>又不是请求而是script标签当然会自动执行。。</p>\n<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><h3 id=\"重排-reflow-和重绘-repaint\"><a href=\"#重排-reflow-和重绘-repaint\" class=\"headerlink\" title=\"重排(reflow)和重绘(repaint)\"></a>重排(reflow)和重绘(repaint)</h3><ul>\n<li>重绘：某些元素的外观被改变，例如：元素的填充颜色</li>\n<li>重排：重新生成布局，重新排列元素。</li>\n</ul>\n<p><strong>重绘不一定导致重排，但重排一定会导致重绘。</strong></p>\n<h3 id=\"如何提高dom渲染性能？\"><a href=\"#如何提高dom渲染性能？\" class=\"headerlink\" title=\"如何提高dom渲染性能？\"></a>如何提高dom渲染性能？</h3><p>减少重排次数：</p>\n<ul>\n<li>集中改变dom</li>\n<li>分离读写操作</li>\n<li>使用display: none之后再进行 dom的修改，就会避免重排</li>\n<li>使用absolute或fixed脱离文档流，修改子元素就不会影响父元素以上的元素重排</li>\n<li>固定会影响父元素重排的css，再去操作子元素的重排和重绘，这样就不会影响父元素之外的其他元素</li>\n<li>优化动画，比如translate: 1s改为更长的时间，减少帧数。</li>\n</ul>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h3><h3 id=\"http缓存策略\"><a href=\"#http缓存策略\" class=\"headerlink\" title=\"http缓存策略\"></a>http缓存策略</h3>"},{"title":"docker的使用和简介","date":"2023-03-21T02:56:21.000Z","_content":"\n## docker简介\n\n### 1：docker定义\n\ndocker是一个用来装应用的容器，就像杯子可以装水，笔筒可以装笔，书包可以放书一样。你可以把“Hello World！”放到docker中，也可以把网站放到docker中，你可以把任何你想到的程序放到docker中。\n\n### 2. docker目的\n\ndocker的主要目标是”Build,Ship and Run any App,Angwhere”,构建，运输，处处运行\n构建：制作docker镜像，打包容器的所有系统目录文件\n运输：下载docker镜像\n运行：基于docker镜像提供的rootfs，启动容器\n总结：只要能运行docker容器，那么docker镜像中已经安装好的软件也可以运行，所以说docker是一种件的打包技术。\n\n最重要的优点在与docke环境的高度一致性。\n\n#### Docker与虚拟机的区别：\n\n容器时在linux上本机运行，并与其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量\n虚拟机运行的是一个完整的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多。\n\n![](/images/image-20230321142649225.png)\n\n### 3. docker的架构\n\n#### docker三个基本概念：\n\n+ 镜像（Image）：Build – 构建镜像 – [镜像 类比 集装箱]\nDocker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。\n\n+ 容器（Container）：Run – 运行镜像（运行的镜像就是一个容器）- [容器 就是 运行程序的地方]\n镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\n\n+ 仓库（Repository）：Ship – 运输镜像（从仓库和我们的主机上运输）- [仓库 类比 超级码头]\n仓库可看着一个代码控制中心，用来保存镜像。\n\n![](/images/image-20230321142727515.png)\n\n### 4. docker的运行流程\n\n+ （1）docker pull:\n首先客户端client向Docker daemon发送命令docker pull，告诉Docker daemon要拉取哪个镜像，Docker daemon会先在本机检查这个镜像是否存在，如果存在并且版本一致，它不会做任何操作；如果不存在，它会到Docker的镜像仓库中寻找，如果找到了，就会把仓库中的镜像拉取到本地。\n\n+ （2）docker run:\n客户端将docker run命令发送到Docker deamon中，Docker deamon会先检查这个镜像是否在本地已经存在，如果不存在，它会到仓库中寻找，把镜像下载到本地，下载之后它会通过一定的方式把镜像运行起来，变成docker容器\n\n![image-20230321142801734](/images/image-20230321142801734.png)\n\n## 二、docker的安装\n\n采用yum安装方式，但由自己选择安装版本，需要自己安装docker-ce仓库。\n### 1. 检查系统的内核版本，内核需大于3.10即可\n`uname -r`\n\n### 2. 安装yum仓库管理工具yum-utils\n`yum -y install yum-utils`\n### 3. 安装docker-ce仓库\n1： 国内docker-ce仓库：\n```js\nyum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n2：国外可直接用官方的docker-ce仓库：\n```js\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n安装后，在/etc/yum.repos.d/可以看到有了docker-ce.repo 文件，docker-ce仓库完成。\n\n### 4. 查看docker版本并安装\n可直接安装，也可选择版本安装，\n1. 直接`yum -y install docker-ce` 安装，官方软件源默认启用了最新的软件。\n\n2. 查看版本，选择自己的想要版本安装。\n查看版本：\n```js\nyum list docker-ce --showduplicates|sort -r\n```\n安装自己的版本号：docker-ce-[VERSION]，如上图中的docker-ce-3:20.10.7-3.el8安装如下：\n```js\nyum -y install docker-ce-3:20.10.7-3.el8\n```\n安装完成，`docker version`可查看版本\n\n## 三. docker的常用命令\n启动docker：\n```\nsystemctl start docker.service启动docker。\n```\n\n进入容器\n```\ndocker exec -it docker-jenkins bash\n```\n<!--https://www.ywbj.cc/?p=151-->\n1. `docker run`: **创建并启动**一个新的容器。 例如： `docker run nginx` 将在一个新的容器中运行Nginx。\n2. `docker start`: 启动**已经存在**的容器，让其重新运行。\n3. `docker stop`: 停止正在运行的容器。 例如： `docker stop container_name` 将停止名为“container_name”的容器。\n4. `docker rm`: 删除一个或多个容器。 例如： `docker rm container_name` 将删除名为“container_name”的容器。\n5. `docker images`: 列出本地的Docker镜像。 例如： `docker images` 将列出本地存储的所有Docker镜像。\n6. `docker rmi`: 删除本地的Docker镜像。 例如： `docker rmi image_name` 将删除名为“image_name”的本地Docker镜像。\n7. `docker pull`: 下载一个Docker**镜像**，不包含容器。 例如： `docker pull nginx` 将下载最新版本的Nginx镜像。\n关于docker pull的更详尽的解释，请看下方**其它补充**\n8. `docker push`: 将一个Docker镜像上传到Docker Hub。 例如： `docker push username/image_name` 将上传名为“image_name”的本地Docker镜像到Docker Hub上的用户名为“username”的仓库中。\n9. `docker inspect`: 查看Docker容器的详细信息。 例如： `docker inspect container_name` 将显示名为“container_name”的容器的详细信息。\n10. `docker exec`: 在正在运行的容器中执行命令。 例如： `docker exec -it container_name bash` 将在名为“container_name”的容器中打开一个Bash shell。\n11. `docker ps`: 列出所有正在运行的容器。 例如： `docker ps` 将列出所有正在运行的容器的详细信息。`docker ps -a`列出所有正在运行的没在运行的容器。\n12. `docker search xxx`: 选择安装的镜像，如`docker search jenkins`,会列出所有的jenkins镜像，然后使用docker pull [name] 安装。\n\n删除镜像后还能在容器中安装镜像，具体的命令就跟容器命令一样，比如说我拉了`docker run jenkins`，它的容器是linux（这个自动生成的），然后rmi了镜像之后，可以使用shell命令在其中重新安装，就像在linux电脑里一样的。比如想安装apache的话，命令：\n```\napt-get update\napt-get install apache2\n```\n删除容器就要重新pull了。\n## 其他补充：\n\n### 1. docker run的细节\n在一些情况下，Docker会自动完成拉取镜像、创建容器和启动容器的过程，具体取决于您使用的命令和Docker的配置。\n例如，如果您使用的是 docker run 命令，则Docker将自动完成以下操作：\n\n+ 如果本地不存在指定的镜像，则从默认的镜像仓库（例如Docker Hub）拉取该镜像。\n+ 使用指定的镜像创建一个新的容器，并启动该容器。\n\n但是，如果您使用的是 `docker create` 和 `docker start` 命令，则需要手动完成这些步骤。\n\n在任何情况下，Docker都会自动完成一些基本的设置和配置，例如创建容器网络、分配IP地址和端口等。但是，一些高级设置和配置可能需要手动完成，例如挂载主机文件、配置容器卷等。\n\n因此，对于每个具体的使用场景，您需要仔细检查Docker命令和配置，并根据需要手动完成必要的步骤。\n\n### 2. docker run和docker start\n当容器不存在时，`docker run`会拉取一个镜像（img）并创建一个容器（container）并运行，也就是说，`docker run`可以隐式包含`docker pull`\n\n如果容器已经存在，`docker run` 和 `docker start` 也会有不同的作用。\n`docker start` 会启动一个已经停止的容器，它的运行时状态与停止之前一样，包括任何已经添加到容器中的文件或数据。\n`docker run` 则会创建一个新的容器，并在其中运行指定的命令或应用程序。如果使用的是同一个容器名称，`docker run` 将会**重新创建一个新的容器，而不是启动原来的容器**。\n因此，如果你想启动一个已经存在的容器，应该使用 `docker start`。如果你想要创建一个新的容器并运行一个新的命令，应该使用 `docker run`。\n\n### 3. docker pull 的详尽解释\n\n在Docker中，一般的使用流程是**先拉取镜像，然后使用镜像创建容器并启动**。就是先pull再run。但实际上如果使用的是公共的 Docker Hub 镜像，`dockder pull`就不是必须的。\n但是在一些情况下，需要在本地预先拉取镜像，例如：\n\n+ 你需要从一个私有的 Docker Registry 拉取镜像，而该 Registry 可能需要身份验证或者在防火墙之后；\n+ 你需要将拉取的镜像进行修改或者自定义操作，然后再创建容器，而不是从 Docker Hub 直接拉取。\n\n因此，在这些情况下，我们需要使用 `docker pull` 命令来拉取镜像到本地，然后再使用 docker run 命令来创建容器。\n\n### 4. 如何使用 docker 拉取并运行私人镜像\n\n首先，你需要确保你能够访问这个私人镜像。如果这个私人镜像是托管在 Docker Hub 上的，则需要相应的权限。如果是自己搭建的私有镜像库，则需要配置相应的访问权限。\n\n接下来，你可以在命令行中使用以下命令来拉取这个私人镜像：\n\n```js\ndocker pull <私人镜像地址>/<私人镜像名称>:<标签>\n```\n\n其中 `<私人镜像地址>` 是私人镜像的地址，`<私人镜像名称>` 是私人镜像的名称，`<标签>` 是镜像的标签。\n\n例如，如果你要拉取一个私人镜像地址为 `myregistry.com`，镜像名称为 `abc`，标签为 `latest` 的镜像，可以使用以下命令：\n\n```js\ndocker pull myregistry.com/abc:latest\n```\n\n","source":"_posts/docker的使用和简介.md","raw":"---\ntitle: docker的使用和简介\ndate: 2023-03-21 10:56:21\ncategories: 程序员的自我修养\n---\n\n## docker简介\n\n### 1：docker定义\n\ndocker是一个用来装应用的容器，就像杯子可以装水，笔筒可以装笔，书包可以放书一样。你可以把“Hello World！”放到docker中，也可以把网站放到docker中，你可以把任何你想到的程序放到docker中。\n\n### 2. docker目的\n\ndocker的主要目标是”Build,Ship and Run any App,Angwhere”,构建，运输，处处运行\n构建：制作docker镜像，打包容器的所有系统目录文件\n运输：下载docker镜像\n运行：基于docker镜像提供的rootfs，启动容器\n总结：只要能运行docker容器，那么docker镜像中已经安装好的软件也可以运行，所以说docker是一种件的打包技术。\n\n最重要的优点在与docke环境的高度一致性。\n\n#### Docker与虚拟机的区别：\n\n容器时在linux上本机运行，并与其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量\n虚拟机运行的是一个完整的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多。\n\n![](/images/image-20230321142649225.png)\n\n### 3. docker的架构\n\n#### docker三个基本概念：\n\n+ 镜像（Image）：Build – 构建镜像 – [镜像 类比 集装箱]\nDocker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。\n\n+ 容器（Container）：Run – 运行镜像（运行的镜像就是一个容器）- [容器 就是 运行程序的地方]\n镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\n\n+ 仓库（Repository）：Ship – 运输镜像（从仓库和我们的主机上运输）- [仓库 类比 超级码头]\n仓库可看着一个代码控制中心，用来保存镜像。\n\n![](/images/image-20230321142727515.png)\n\n### 4. docker的运行流程\n\n+ （1）docker pull:\n首先客户端client向Docker daemon发送命令docker pull，告诉Docker daemon要拉取哪个镜像，Docker daemon会先在本机检查这个镜像是否存在，如果存在并且版本一致，它不会做任何操作；如果不存在，它会到Docker的镜像仓库中寻找，如果找到了，就会把仓库中的镜像拉取到本地。\n\n+ （2）docker run:\n客户端将docker run命令发送到Docker deamon中，Docker deamon会先检查这个镜像是否在本地已经存在，如果不存在，它会到仓库中寻找，把镜像下载到本地，下载之后它会通过一定的方式把镜像运行起来，变成docker容器\n\n![image-20230321142801734](/images/image-20230321142801734.png)\n\n## 二、docker的安装\n\n采用yum安装方式，但由自己选择安装版本，需要自己安装docker-ce仓库。\n### 1. 检查系统的内核版本，内核需大于3.10即可\n`uname -r`\n\n### 2. 安装yum仓库管理工具yum-utils\n`yum -y install yum-utils`\n### 3. 安装docker-ce仓库\n1： 国内docker-ce仓库：\n```js\nyum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n2：国外可直接用官方的docker-ce仓库：\n```js\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n安装后，在/etc/yum.repos.d/可以看到有了docker-ce.repo 文件，docker-ce仓库完成。\n\n### 4. 查看docker版本并安装\n可直接安装，也可选择版本安装，\n1. 直接`yum -y install docker-ce` 安装，官方软件源默认启用了最新的软件。\n\n2. 查看版本，选择自己的想要版本安装。\n查看版本：\n```js\nyum list docker-ce --showduplicates|sort -r\n```\n安装自己的版本号：docker-ce-[VERSION]，如上图中的docker-ce-3:20.10.7-3.el8安装如下：\n```js\nyum -y install docker-ce-3:20.10.7-3.el8\n```\n安装完成，`docker version`可查看版本\n\n## 三. docker的常用命令\n启动docker：\n```\nsystemctl start docker.service启动docker。\n```\n\n进入容器\n```\ndocker exec -it docker-jenkins bash\n```\n<!--https://www.ywbj.cc/?p=151-->\n1. `docker run`: **创建并启动**一个新的容器。 例如： `docker run nginx` 将在一个新的容器中运行Nginx。\n2. `docker start`: 启动**已经存在**的容器，让其重新运行。\n3. `docker stop`: 停止正在运行的容器。 例如： `docker stop container_name` 将停止名为“container_name”的容器。\n4. `docker rm`: 删除一个或多个容器。 例如： `docker rm container_name` 将删除名为“container_name”的容器。\n5. `docker images`: 列出本地的Docker镜像。 例如： `docker images` 将列出本地存储的所有Docker镜像。\n6. `docker rmi`: 删除本地的Docker镜像。 例如： `docker rmi image_name` 将删除名为“image_name”的本地Docker镜像。\n7. `docker pull`: 下载一个Docker**镜像**，不包含容器。 例如： `docker pull nginx` 将下载最新版本的Nginx镜像。\n关于docker pull的更详尽的解释，请看下方**其它补充**\n8. `docker push`: 将一个Docker镜像上传到Docker Hub。 例如： `docker push username/image_name` 将上传名为“image_name”的本地Docker镜像到Docker Hub上的用户名为“username”的仓库中。\n9. `docker inspect`: 查看Docker容器的详细信息。 例如： `docker inspect container_name` 将显示名为“container_name”的容器的详细信息。\n10. `docker exec`: 在正在运行的容器中执行命令。 例如： `docker exec -it container_name bash` 将在名为“container_name”的容器中打开一个Bash shell。\n11. `docker ps`: 列出所有正在运行的容器。 例如： `docker ps` 将列出所有正在运行的容器的详细信息。`docker ps -a`列出所有正在运行的没在运行的容器。\n12. `docker search xxx`: 选择安装的镜像，如`docker search jenkins`,会列出所有的jenkins镜像，然后使用docker pull [name] 安装。\n\n删除镜像后还能在容器中安装镜像，具体的命令就跟容器命令一样，比如说我拉了`docker run jenkins`，它的容器是linux（这个自动生成的），然后rmi了镜像之后，可以使用shell命令在其中重新安装，就像在linux电脑里一样的。比如想安装apache的话，命令：\n```\napt-get update\napt-get install apache2\n```\n删除容器就要重新pull了。\n## 其他补充：\n\n### 1. docker run的细节\n在一些情况下，Docker会自动完成拉取镜像、创建容器和启动容器的过程，具体取决于您使用的命令和Docker的配置。\n例如，如果您使用的是 docker run 命令，则Docker将自动完成以下操作：\n\n+ 如果本地不存在指定的镜像，则从默认的镜像仓库（例如Docker Hub）拉取该镜像。\n+ 使用指定的镜像创建一个新的容器，并启动该容器。\n\n但是，如果您使用的是 `docker create` 和 `docker start` 命令，则需要手动完成这些步骤。\n\n在任何情况下，Docker都会自动完成一些基本的设置和配置，例如创建容器网络、分配IP地址和端口等。但是，一些高级设置和配置可能需要手动完成，例如挂载主机文件、配置容器卷等。\n\n因此，对于每个具体的使用场景，您需要仔细检查Docker命令和配置，并根据需要手动完成必要的步骤。\n\n### 2. docker run和docker start\n当容器不存在时，`docker run`会拉取一个镜像（img）并创建一个容器（container）并运行，也就是说，`docker run`可以隐式包含`docker pull`\n\n如果容器已经存在，`docker run` 和 `docker start` 也会有不同的作用。\n`docker start` 会启动一个已经停止的容器，它的运行时状态与停止之前一样，包括任何已经添加到容器中的文件或数据。\n`docker run` 则会创建一个新的容器，并在其中运行指定的命令或应用程序。如果使用的是同一个容器名称，`docker run` 将会**重新创建一个新的容器，而不是启动原来的容器**。\n因此，如果你想启动一个已经存在的容器，应该使用 `docker start`。如果你想要创建一个新的容器并运行一个新的命令，应该使用 `docker run`。\n\n### 3. docker pull 的详尽解释\n\n在Docker中，一般的使用流程是**先拉取镜像，然后使用镜像创建容器并启动**。就是先pull再run。但实际上如果使用的是公共的 Docker Hub 镜像，`dockder pull`就不是必须的。\n但是在一些情况下，需要在本地预先拉取镜像，例如：\n\n+ 你需要从一个私有的 Docker Registry 拉取镜像，而该 Registry 可能需要身份验证或者在防火墙之后；\n+ 你需要将拉取的镜像进行修改或者自定义操作，然后再创建容器，而不是从 Docker Hub 直接拉取。\n\n因此，在这些情况下，我们需要使用 `docker pull` 命令来拉取镜像到本地，然后再使用 docker run 命令来创建容器。\n\n### 4. 如何使用 docker 拉取并运行私人镜像\n\n首先，你需要确保你能够访问这个私人镜像。如果这个私人镜像是托管在 Docker Hub 上的，则需要相应的权限。如果是自己搭建的私有镜像库，则需要配置相应的访问权限。\n\n接下来，你可以在命令行中使用以下命令来拉取这个私人镜像：\n\n```js\ndocker pull <私人镜像地址>/<私人镜像名称>:<标签>\n```\n\n其中 `<私人镜像地址>` 是私人镜像的地址，`<私人镜像名称>` 是私人镜像的名称，`<标签>` 是镜像的标签。\n\n例如，如果你要拉取一个私人镜像地址为 `myregistry.com`，镜像名称为 `abc`，标签为 `latest` 的镜像，可以使用以下命令：\n\n```js\ndocker pull myregistry.com/abc:latest\n```\n\n","slug":"docker的使用和简介","published":1,"updated":"2023-04-13T03:20:22.034Z","_id":"clfhqty970000vtwica6f5jyf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"docker简介\"><a href=\"#docker简介\" class=\"headerlink\" title=\"docker简介\"></a>docker简介</h2><h3 id=\"1：docker定义\"><a href=\"#1：docker定义\" class=\"headerlink\" title=\"1：docker定义\"></a>1：docker定义</h3><p>docker是一个用来装应用的容器，就像杯子可以装水，笔筒可以装笔，书包可以放书一样。你可以把“Hello World！”放到docker中，也可以把网站放到docker中，你可以把任何你想到的程序放到docker中。</p>\n<h3 id=\"2-docker目的\"><a href=\"#2-docker目的\" class=\"headerlink\" title=\"2. docker目的\"></a>2. docker目的</h3><p>docker的主要目标是”Build,Ship and Run any App,Angwhere”,构建，运输，处处运行<br>构建：制作docker镜像，打包容器的所有系统目录文件<br>运输：下载docker镜像<br>运行：基于docker镜像提供的rootfs，启动容器<br>总结：只要能运行docker容器，那么docker镜像中已经安装好的软件也可以运行，所以说docker是一种件的打包技术。</p>\n<p>最重要的优点在与docke环境的高度一致性。</p>\n<h4 id=\"Docker与虚拟机的区别：\"><a href=\"#Docker与虚拟机的区别：\" class=\"headerlink\" title=\"Docker与虚拟机的区别：\"></a>Docker与虚拟机的区别：</h4><p>容器时在linux上本机运行，并与其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量<br>虚拟机运行的是一个完整的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多。</p>\n<p><img src=\"/images/image-20230321142649225.png\"></p>\n<h3 id=\"3-docker的架构\"><a href=\"#3-docker的架构\" class=\"headerlink\" title=\"3. docker的架构\"></a>3. docker的架构</h3><h4 id=\"docker三个基本概念：\"><a href=\"#docker三个基本概念：\" class=\"headerlink\" title=\"docker三个基本概念：\"></a>docker三个基本概念：</h4><ul>\n<li><p>镜像（Image）：Build – 构建镜像 – [镜像 类比 集装箱]<br>Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</p>\n</li>\n<li><p>容器（Container）：Run – 运行镜像（运行的镜像就是一个容器）- [容器 就是 运行程序的地方]<br>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n</li>\n<li><p>仓库（Repository）：Ship – 运输镜像（从仓库和我们的主机上运输）- [仓库 类比 超级码头]<br>仓库可看着一个代码控制中心，用来保存镜像。</p>\n</li>\n</ul>\n<p><img src=\"/images/image-20230321142727515.png\"></p>\n<h3 id=\"4-docker的运行流程\"><a href=\"#4-docker的运行流程\" class=\"headerlink\" title=\"4. docker的运行流程\"></a>4. docker的运行流程</h3><ul>\n<li><p>（1）docker pull:<br>首先客户端client向Docker daemon发送命令docker pull，告诉Docker daemon要拉取哪个镜像，Docker daemon会先在本机检查这个镜像是否存在，如果存在并且版本一致，它不会做任何操作；如果不存在，它会到Docker的镜像仓库中寻找，如果找到了，就会把仓库中的镜像拉取到本地。</p>\n</li>\n<li><p>（2）docker run:<br>客户端将docker run命令发送到Docker deamon中，Docker deamon会先检查这个镜像是否在本地已经存在，如果不存在，它会到仓库中寻找，把镜像下载到本地，下载之后它会通过一定的方式把镜像运行起来，变成docker容器</p>\n</li>\n</ul>\n<p><img src=\"/images/image-20230321142801734.png\" alt=\"image-20230321142801734\"></p>\n<h2 id=\"二、docker的安装\"><a href=\"#二、docker的安装\" class=\"headerlink\" title=\"二、docker的安装\"></a>二、docker的安装</h2><p>采用yum安装方式，但由自己选择安装版本，需要自己安装docker-ce仓库。</p>\n<h3 id=\"1-检查系统的内核版本，内核需大于3-10即可\"><a href=\"#1-检查系统的内核版本，内核需大于3-10即可\" class=\"headerlink\" title=\"1. 检查系统的内核版本，内核需大于3.10即可\"></a>1. 检查系统的内核版本，内核需大于3.10即可</h3><p><code>uname -r</code></p>\n<h3 id=\"2-安装yum仓库管理工具yum-utils\"><a href=\"#2-安装yum仓库管理工具yum-utils\" class=\"headerlink\" title=\"2. 安装yum仓库管理工具yum-utils\"></a>2. 安装yum仓库管理工具yum-utils</h3><p><code>yum -y install yum-utils</code></p>\n<h3 id=\"3-安装docker-ce仓库\"><a href=\"#3-安装docker-ce仓库\" class=\"headerlink\" title=\"3. 安装docker-ce仓库\"></a>3. 安装docker-ce仓库</h3><p>1： 国内docker-ce仓库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo <span class=\"attr\">https</span>:<span class=\"comment\">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>\n<p>2：国外可直接用官方的docker-ce仓库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo <span class=\"attr\">https</span>:<span class=\"comment\">//download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>\n<p>安装后，在/etc/yum.repos.d/可以看到有了docker-ce.repo 文件，docker-ce仓库完成。</p>\n<h3 id=\"4-查看docker版本并安装\"><a href=\"#4-查看docker版本并安装\" class=\"headerlink\" title=\"4. 查看docker版本并安装\"></a>4. 查看docker版本并安装</h3><p>可直接安装，也可选择版本安装，</p>\n<ol>\n<li><p>直接<code>yum -y install docker-ce</code> 安装，官方软件源默认启用了最新的软件。</p>\n</li>\n<li><p>查看版本，选择自己的想要版本安装。<br>查看版本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates|sort -r</span><br></pre></td></tr></table></figure>\n<p>安装自己的版本号：docker-ce-[VERSION]，如上图中的docker-ce-3:20.10.7-3.el8安装如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install docker-ce-<span class=\"number\">3</span>:<span class=\"number\">20.10</span><span class=\"number\">.7</span>-<span class=\"number\">3.</span>el8</span><br></pre></td></tr></table></figure>\n<p>安装完成，<code>docker version</code>可查看版本</p>\n</li>\n</ol>\n<h2 id=\"三-docker的常用命令\"><a href=\"#三-docker的常用命令\" class=\"headerlink\" title=\"三. docker的常用命令\"></a>三. docker的常用命令</h2><p>启动docker：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker.service启动docker。</span><br></pre></td></tr></table></figure>\n\n<p>进入容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it docker-jenkins bash</span><br></pre></td></tr></table></figure>\n<!--https://www.ywbj.cc/?p=151-->\n<ol>\n<li><code>docker run</code>: <strong>创建并启动</strong>一个新的容器。 例如： <code>docker run nginx</code> 将在一个新的容器中运行Nginx。</li>\n<li><code>docker start</code>: 启动<strong>已经存在</strong>的容器，让其重新运行。</li>\n<li><code>docker stop</code>: 停止正在运行的容器。 例如： <code>docker stop container_name</code> 将停止名为“container_name”的容器。</li>\n<li><code>docker rm</code>: 删除一个或多个容器。 例如： <code>docker rm container_name</code> 将删除名为“container_name”的容器。</li>\n<li><code>docker images</code>: 列出本地的Docker镜像。 例如： <code>docker images</code> 将列出本地存储的所有Docker镜像。</li>\n<li><code>docker rmi</code>: 删除本地的Docker镜像。 例如： <code>docker rmi image_name</code> 将删除名为“image_name”的本地Docker镜像。</li>\n<li><code>docker pull</code>: 下载一个Docker<strong>镜像</strong>，不包含容器。 例如： <code>docker pull nginx</code> 将下载最新版本的Nginx镜像。<br>关于docker pull的更详尽的解释，请看下方<strong>其它补充</strong></li>\n<li><code>docker push</code>: 将一个Docker镜像上传到Docker Hub。 例如： <code>docker push username/image_name</code> 将上传名为“image_name”的本地Docker镜像到Docker Hub上的用户名为“username”的仓库中。</li>\n<li><code>docker inspect</code>: 查看Docker容器的详细信息。 例如： <code>docker inspect container_name</code> 将显示名为“container_name”的容器的详细信息。</li>\n<li><code>docker exec</code>: 在正在运行的容器中执行命令。 例如： <code>docker exec -it container_name bash</code> 将在名为“container_name”的容器中打开一个Bash shell。</li>\n<li><code>docker ps</code>: 列出所有正在运行的容器。 例如： <code>docker ps</code> 将列出所有正在运行的容器的详细信息。<code>docker ps -a</code>列出所有正在运行的没在运行的容器。</li>\n<li><code>docker search xxx</code>: 选择安装的镜像，如<code>docker search jenkins</code>,会列出所有的jenkins镜像，然后使用docker pull [name] 安装。</li>\n</ol>\n<p>删除镜像后还能在容器中安装镜像，具体的命令就跟容器命令一样，比如说我拉了<code>docker run jenkins</code>，它的容器是linux（这个自动生成的），然后rmi了镜像之后，可以使用shell命令在其中重新安装，就像在linux电脑里一样的。比如想安装apache的话，命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install apache2</span><br></pre></td></tr></table></figure>\n<p>删除容器就要重新pull了。</p>\n<h2 id=\"其他补充：\"><a href=\"#其他补充：\" class=\"headerlink\" title=\"其他补充：\"></a>其他补充：</h2><h3 id=\"1-docker-run的细节\"><a href=\"#1-docker-run的细节\" class=\"headerlink\" title=\"1. docker run的细节\"></a>1. docker run的细节</h3><p>在一些情况下，Docker会自动完成拉取镜像、创建容器和启动容器的过程，具体取决于您使用的命令和Docker的配置。<br>例如，如果您使用的是 docker run 命令，则Docker将自动完成以下操作：</p>\n<ul>\n<li>如果本地不存在指定的镜像，则从默认的镜像仓库（例如Docker Hub）拉取该镜像。</li>\n<li>使用指定的镜像创建一个新的容器，并启动该容器。</li>\n</ul>\n<p>但是，如果您使用的是 <code>docker create</code> 和 <code>docker start</code> 命令，则需要手动完成这些步骤。</p>\n<p>在任何情况下，Docker都会自动完成一些基本的设置和配置，例如创建容器网络、分配IP地址和端口等。但是，一些高级设置和配置可能需要手动完成，例如挂载主机文件、配置容器卷等。</p>\n<p>因此，对于每个具体的使用场景，您需要仔细检查Docker命令和配置，并根据需要手动完成必要的步骤。</p>\n<h3 id=\"2-docker-run和docker-start\"><a href=\"#2-docker-run和docker-start\" class=\"headerlink\" title=\"2. docker run和docker start\"></a>2. docker run和docker start</h3><p>当容器不存在时，<code>docker run</code>会拉取一个镜像（img）并创建一个容器（container）并运行，也就是说，<code>docker run</code>可以隐式包含<code>docker pull</code></p>\n<p>如果容器已经存在，<code>docker run</code> 和 <code>docker start</code> 也会有不同的作用。<br><code>docker start</code> 会启动一个已经停止的容器，它的运行时状态与停止之前一样，包括任何已经添加到容器中的文件或数据。<br><code>docker run</code> 则会创建一个新的容器，并在其中运行指定的命令或应用程序。如果使用的是同一个容器名称，<code>docker run</code> 将会<strong>重新创建一个新的容器，而不是启动原来的容器</strong>。<br>因此，如果你想启动一个已经存在的容器，应该使用 <code>docker start</code>。如果你想要创建一个新的容器并运行一个新的命令，应该使用 <code>docker run</code>。</p>\n<h3 id=\"3-docker-pull-的详尽解释\"><a href=\"#3-docker-pull-的详尽解释\" class=\"headerlink\" title=\"3. docker pull 的详尽解释\"></a>3. docker pull 的详尽解释</h3><p>在Docker中，一般的使用流程是<strong>先拉取镜像，然后使用镜像创建容器并启动</strong>。就是先pull再run。但实际上如果使用的是公共的 Docker Hub 镜像，<code>dockder pull</code>就不是必须的。<br>但是在一些情况下，需要在本地预先拉取镜像，例如：</p>\n<ul>\n<li>你需要从一个私有的 Docker Registry 拉取镜像，而该 Registry 可能需要身份验证或者在防火墙之后；</li>\n<li>你需要将拉取的镜像进行修改或者自定义操作，然后再创建容器，而不是从 Docker Hub 直接拉取。</li>\n</ul>\n<p>因此，在这些情况下，我们需要使用 <code>docker pull</code> 命令来拉取镜像到本地，然后再使用 docker run 命令来创建容器。</p>\n<h3 id=\"4-如何使用-docker-拉取并运行私人镜像\"><a href=\"#4-如何使用-docker-拉取并运行私人镜像\" class=\"headerlink\" title=\"4. 如何使用 docker 拉取并运行私人镜像\"></a>4. 如何使用 docker 拉取并运行私人镜像</h3><p>首先，你需要确保你能够访问这个私人镜像。如果这个私人镜像是托管在 Docker Hub 上的，则需要相应的权限。如果是自己搭建的私有镜像库，则需要配置相应的访问权限。</p>\n<p>接下来，你可以在命令行中使用以下命令来拉取这个私人镜像：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull &lt;私人镜像地址&gt;/&lt;私人镜像名称&gt;:&lt;标签&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>&lt;私人镜像地址&gt;</code> 是私人镜像的地址，<code>&lt;私人镜像名称&gt;</code> 是私人镜像的名称，<code>&lt;标签&gt;</code> 是镜像的标签。</p>\n<p>例如，如果你要拉取一个私人镜像地址为 <code>myregistry.com</code>，镜像名称为 <code>abc</code>，标签为 <code>latest</code> 的镜像，可以使用以下命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull myregistry.<span class=\"property\">com</span>/<span class=\"attr\">abc</span>:latest</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"docker简介\"><a href=\"#docker简介\" class=\"headerlink\" title=\"docker简介\"></a>docker简介</h2><h3 id=\"1：docker定义\"><a href=\"#1：docker定义\" class=\"headerlink\" title=\"1：docker定义\"></a>1：docker定义</h3><p>docker是一个用来装应用的容器，就像杯子可以装水，笔筒可以装笔，书包可以放书一样。你可以把“Hello World！”放到docker中，也可以把网站放到docker中，你可以把任何你想到的程序放到docker中。</p>\n<h3 id=\"2-docker目的\"><a href=\"#2-docker目的\" class=\"headerlink\" title=\"2. docker目的\"></a>2. docker目的</h3><p>docker的主要目标是”Build,Ship and Run any App,Angwhere”,构建，运输，处处运行<br>构建：制作docker镜像，打包容器的所有系统目录文件<br>运输：下载docker镜像<br>运行：基于docker镜像提供的rootfs，启动容器<br>总结：只要能运行docker容器，那么docker镜像中已经安装好的软件也可以运行，所以说docker是一种件的打包技术。</p>\n<p>最重要的优点在与docke环境的高度一致性。</p>\n<h4 id=\"Docker与虚拟机的区别：\"><a href=\"#Docker与虚拟机的区别：\" class=\"headerlink\" title=\"Docker与虚拟机的区别：\"></a>Docker与虚拟机的区别：</h4><p>容器时在linux上本机运行，并与其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量<br>虚拟机运行的是一个完整的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多。</p>\n<p><img src=\"/images/image-20230321142649225.png\"></p>\n<h3 id=\"3-docker的架构\"><a href=\"#3-docker的架构\" class=\"headerlink\" title=\"3. docker的架构\"></a>3. docker的架构</h3><h4 id=\"docker三个基本概念：\"><a href=\"#docker三个基本概念：\" class=\"headerlink\" title=\"docker三个基本概念：\"></a>docker三个基本概念：</h4><ul>\n<li><p>镜像（Image）：Build – 构建镜像 – [镜像 类比 集装箱]<br>Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</p>\n</li>\n<li><p>容器（Container）：Run – 运行镜像（运行的镜像就是一个容器）- [容器 就是 运行程序的地方]<br>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n</li>\n<li><p>仓库（Repository）：Ship – 运输镜像（从仓库和我们的主机上运输）- [仓库 类比 超级码头]<br>仓库可看着一个代码控制中心，用来保存镜像。</p>\n</li>\n</ul>\n<p><img src=\"/images/image-20230321142727515.png\"></p>\n<h3 id=\"4-docker的运行流程\"><a href=\"#4-docker的运行流程\" class=\"headerlink\" title=\"4. docker的运行流程\"></a>4. docker的运行流程</h3><ul>\n<li><p>（1）docker pull:<br>首先客户端client向Docker daemon发送命令docker pull，告诉Docker daemon要拉取哪个镜像，Docker daemon会先在本机检查这个镜像是否存在，如果存在并且版本一致，它不会做任何操作；如果不存在，它会到Docker的镜像仓库中寻找，如果找到了，就会把仓库中的镜像拉取到本地。</p>\n</li>\n<li><p>（2）docker run:<br>客户端将docker run命令发送到Docker deamon中，Docker deamon会先检查这个镜像是否在本地已经存在，如果不存在，它会到仓库中寻找，把镜像下载到本地，下载之后它会通过一定的方式把镜像运行起来，变成docker容器</p>\n</li>\n</ul>\n<p><img src=\"/images/image-20230321142801734.png\" alt=\"image-20230321142801734\"></p>\n<h2 id=\"二、docker的安装\"><a href=\"#二、docker的安装\" class=\"headerlink\" title=\"二、docker的安装\"></a>二、docker的安装</h2><p>采用yum安装方式，但由自己选择安装版本，需要自己安装docker-ce仓库。</p>\n<h3 id=\"1-检查系统的内核版本，内核需大于3-10即可\"><a href=\"#1-检查系统的内核版本，内核需大于3-10即可\" class=\"headerlink\" title=\"1. 检查系统的内核版本，内核需大于3.10即可\"></a>1. 检查系统的内核版本，内核需大于3.10即可</h3><p><code>uname -r</code></p>\n<h3 id=\"2-安装yum仓库管理工具yum-utils\"><a href=\"#2-安装yum仓库管理工具yum-utils\" class=\"headerlink\" title=\"2. 安装yum仓库管理工具yum-utils\"></a>2. 安装yum仓库管理工具yum-utils</h3><p><code>yum -y install yum-utils</code></p>\n<h3 id=\"3-安装docker-ce仓库\"><a href=\"#3-安装docker-ce仓库\" class=\"headerlink\" title=\"3. 安装docker-ce仓库\"></a>3. 安装docker-ce仓库</h3><p>1： 国内docker-ce仓库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo <span class=\"attr\">https</span>:<span class=\"comment\">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>\n<p>2：国外可直接用官方的docker-ce仓库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo <span class=\"attr\">https</span>:<span class=\"comment\">//download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>\n<p>安装后，在/etc/yum.repos.d/可以看到有了docker-ce.repo 文件，docker-ce仓库完成。</p>\n<h3 id=\"4-查看docker版本并安装\"><a href=\"#4-查看docker版本并安装\" class=\"headerlink\" title=\"4. 查看docker版本并安装\"></a>4. 查看docker版本并安装</h3><p>可直接安装，也可选择版本安装，</p>\n<ol>\n<li><p>直接<code>yum -y install docker-ce</code> 安装，官方软件源默认启用了最新的软件。</p>\n</li>\n<li><p>查看版本，选择自己的想要版本安装。<br>查看版本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates|sort -r</span><br></pre></td></tr></table></figure>\n<p>安装自己的版本号：docker-ce-[VERSION]，如上图中的docker-ce-3:20.10.7-3.el8安装如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install docker-ce-<span class=\"number\">3</span>:<span class=\"number\">20.10</span><span class=\"number\">.7</span>-<span class=\"number\">3.</span>el8</span><br></pre></td></tr></table></figure>\n<p>安装完成，<code>docker version</code>可查看版本</p>\n</li>\n</ol>\n<h2 id=\"三-docker的常用命令\"><a href=\"#三-docker的常用命令\" class=\"headerlink\" title=\"三. docker的常用命令\"></a>三. docker的常用命令</h2><p>启动docker：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker.service启动docker。</span><br></pre></td></tr></table></figure>\n\n<p>进入容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it docker-jenkins bash</span><br></pre></td></tr></table></figure>\n<!--https://www.ywbj.cc/?p=151-->\n<ol>\n<li><code>docker run</code>: <strong>创建并启动</strong>一个新的容器。 例如： <code>docker run nginx</code> 将在一个新的容器中运行Nginx。</li>\n<li><code>docker start</code>: 启动<strong>已经存在</strong>的容器，让其重新运行。</li>\n<li><code>docker stop</code>: 停止正在运行的容器。 例如： <code>docker stop container_name</code> 将停止名为“container_name”的容器。</li>\n<li><code>docker rm</code>: 删除一个或多个容器。 例如： <code>docker rm container_name</code> 将删除名为“container_name”的容器。</li>\n<li><code>docker images</code>: 列出本地的Docker镜像。 例如： <code>docker images</code> 将列出本地存储的所有Docker镜像。</li>\n<li><code>docker rmi</code>: 删除本地的Docker镜像。 例如： <code>docker rmi image_name</code> 将删除名为“image_name”的本地Docker镜像。</li>\n<li><code>docker pull</code>: 下载一个Docker<strong>镜像</strong>，不包含容器。 例如： <code>docker pull nginx</code> 将下载最新版本的Nginx镜像。<br>关于docker pull的更详尽的解释，请看下方<strong>其它补充</strong></li>\n<li><code>docker push</code>: 将一个Docker镜像上传到Docker Hub。 例如： <code>docker push username/image_name</code> 将上传名为“image_name”的本地Docker镜像到Docker Hub上的用户名为“username”的仓库中。</li>\n<li><code>docker inspect</code>: 查看Docker容器的详细信息。 例如： <code>docker inspect container_name</code> 将显示名为“container_name”的容器的详细信息。</li>\n<li><code>docker exec</code>: 在正在运行的容器中执行命令。 例如： <code>docker exec -it container_name bash</code> 将在名为“container_name”的容器中打开一个Bash shell。</li>\n<li><code>docker ps</code>: 列出所有正在运行的容器。 例如： <code>docker ps</code> 将列出所有正在运行的容器的详细信息。<code>docker ps -a</code>列出所有正在运行的没在运行的容器。</li>\n<li><code>docker search xxx</code>: 选择安装的镜像，如<code>docker search jenkins</code>,会列出所有的jenkins镜像，然后使用docker pull [name] 安装。</li>\n</ol>\n<p>删除镜像后还能在容器中安装镜像，具体的命令就跟容器命令一样，比如说我拉了<code>docker run jenkins</code>，它的容器是linux（这个自动生成的），然后rmi了镜像之后，可以使用shell命令在其中重新安装，就像在linux电脑里一样的。比如想安装apache的话，命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install apache2</span><br></pre></td></tr></table></figure>\n<p>删除容器就要重新pull了。</p>\n<h2 id=\"其他补充：\"><a href=\"#其他补充：\" class=\"headerlink\" title=\"其他补充：\"></a>其他补充：</h2><h3 id=\"1-docker-run的细节\"><a href=\"#1-docker-run的细节\" class=\"headerlink\" title=\"1. docker run的细节\"></a>1. docker run的细节</h3><p>在一些情况下，Docker会自动完成拉取镜像、创建容器和启动容器的过程，具体取决于您使用的命令和Docker的配置。<br>例如，如果您使用的是 docker run 命令，则Docker将自动完成以下操作：</p>\n<ul>\n<li>如果本地不存在指定的镜像，则从默认的镜像仓库（例如Docker Hub）拉取该镜像。</li>\n<li>使用指定的镜像创建一个新的容器，并启动该容器。</li>\n</ul>\n<p>但是，如果您使用的是 <code>docker create</code> 和 <code>docker start</code> 命令，则需要手动完成这些步骤。</p>\n<p>在任何情况下，Docker都会自动完成一些基本的设置和配置，例如创建容器网络、分配IP地址和端口等。但是，一些高级设置和配置可能需要手动完成，例如挂载主机文件、配置容器卷等。</p>\n<p>因此，对于每个具体的使用场景，您需要仔细检查Docker命令和配置，并根据需要手动完成必要的步骤。</p>\n<h3 id=\"2-docker-run和docker-start\"><a href=\"#2-docker-run和docker-start\" class=\"headerlink\" title=\"2. docker run和docker start\"></a>2. docker run和docker start</h3><p>当容器不存在时，<code>docker run</code>会拉取一个镜像（img）并创建一个容器（container）并运行，也就是说，<code>docker run</code>可以隐式包含<code>docker pull</code></p>\n<p>如果容器已经存在，<code>docker run</code> 和 <code>docker start</code> 也会有不同的作用。<br><code>docker start</code> 会启动一个已经停止的容器，它的运行时状态与停止之前一样，包括任何已经添加到容器中的文件或数据。<br><code>docker run</code> 则会创建一个新的容器，并在其中运行指定的命令或应用程序。如果使用的是同一个容器名称，<code>docker run</code> 将会<strong>重新创建一个新的容器，而不是启动原来的容器</strong>。<br>因此，如果你想启动一个已经存在的容器，应该使用 <code>docker start</code>。如果你想要创建一个新的容器并运行一个新的命令，应该使用 <code>docker run</code>。</p>\n<h3 id=\"3-docker-pull-的详尽解释\"><a href=\"#3-docker-pull-的详尽解释\" class=\"headerlink\" title=\"3. docker pull 的详尽解释\"></a>3. docker pull 的详尽解释</h3><p>在Docker中，一般的使用流程是<strong>先拉取镜像，然后使用镜像创建容器并启动</strong>。就是先pull再run。但实际上如果使用的是公共的 Docker Hub 镜像，<code>dockder pull</code>就不是必须的。<br>但是在一些情况下，需要在本地预先拉取镜像，例如：</p>\n<ul>\n<li>你需要从一个私有的 Docker Registry 拉取镜像，而该 Registry 可能需要身份验证或者在防火墙之后；</li>\n<li>你需要将拉取的镜像进行修改或者自定义操作，然后再创建容器，而不是从 Docker Hub 直接拉取。</li>\n</ul>\n<p>因此，在这些情况下，我们需要使用 <code>docker pull</code> 命令来拉取镜像到本地，然后再使用 docker run 命令来创建容器。</p>\n<h3 id=\"4-如何使用-docker-拉取并运行私人镜像\"><a href=\"#4-如何使用-docker-拉取并运行私人镜像\" class=\"headerlink\" title=\"4. 如何使用 docker 拉取并运行私人镜像\"></a>4. 如何使用 docker 拉取并运行私人镜像</h3><p>首先，你需要确保你能够访问这个私人镜像。如果这个私人镜像是托管在 Docker Hub 上的，则需要相应的权限。如果是自己搭建的私有镜像库，则需要配置相应的访问权限。</p>\n<p>接下来，你可以在命令行中使用以下命令来拉取这个私人镜像：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull &lt;私人镜像地址&gt;/&lt;私人镜像名称&gt;:&lt;标签&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>&lt;私人镜像地址&gt;</code> 是私人镜像的地址，<code>&lt;私人镜像名称&gt;</code> 是私人镜像的名称，<code>&lt;标签&gt;</code> 是镜像的标签。</p>\n<p>例如，如果你要拉取一个私人镜像地址为 <code>myregistry.com</code>，镜像名称为 <code>abc</code>，标签为 <code>latest</code> 的镜像，可以使用以下命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull myregistry.<span class=\"property\">com</span>/<span class=\"attr\">abc</span>:latest</span><br></pre></td></tr></table></figure>\n\n"},{"title":"【杂七杂八】mac连接远程服务器","date":"2023-03-21T03:15:20.000Z","_content":"## 方法一：用终端登录\n终端输入命令：\n\n`ssh -p 端口号 服务器用户名@ip`\n\n如：ssh -p 22 root@115.108.115.1\n\n回车，初次登录时输入yes确认是否连接\n\n回车，输入密码\n\n回车，登陆成功\n\n![](/images/image-20230321113354768.png)\n\n## 方法二：用shell连接\n\n在终端中选择如下：\n\n![](/images/image-20230321113702555.png)\n\n点击加号，添加自己的服务器ip，然后输入用户名，点击连接\n![](/images/image-20230321115405188.png)\n\n输入密码就连接上了。\n![](/images/image-20230321115534751.png)\n\n## 方法三：其他可视化工具\n如FileZilla等，输入主机IP、用户名、密码、端口号、点击连接。很快就连接上了。\n不具体说了。\n","source":"_posts/mac连接远程服务器.md","raw":"---\ntitle: 【杂七杂八】mac连接远程服务器\ndate: 2023-03-21 11:15:20\ncategories: 程序员的自我修养\n---\n## 方法一：用终端登录\n终端输入命令：\n\n`ssh -p 端口号 服务器用户名@ip`\n\n如：ssh -p 22 root@115.108.115.1\n\n回车，初次登录时输入yes确认是否连接\n\n回车，输入密码\n\n回车，登陆成功\n\n![](/images/image-20230321113354768.png)\n\n## 方法二：用shell连接\n\n在终端中选择如下：\n\n![](/images/image-20230321113702555.png)\n\n点击加号，添加自己的服务器ip，然后输入用户名，点击连接\n![](/images/image-20230321115405188.png)\n\n输入密码就连接上了。\n![](/images/image-20230321115534751.png)\n\n## 方法三：其他可视化工具\n如FileZilla等，输入主机IP、用户名、密码、端口号、点击连接。很快就连接上了。\n不具体说了。\n","slug":"mac连接远程服务器","published":1,"updated":"2023-03-22T03:22:57.793Z","_id":"clfhqty9a0001vtwi6e5y5vfm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"方法一：用终端登录\"><a href=\"#方法一：用终端登录\" class=\"headerlink\" title=\"方法一：用终端登录\"></a>方法一：用终端登录</h2><p>终端输入命令：</p>\n<p><code>ssh -p 端口号 服务器用户名@ip</code></p>\n<p>如：ssh -p 22 <a href=\"mailto:&#x72;&#x6f;&#x6f;&#x74;&#x40;&#49;&#49;&#x35;&#46;&#x31;&#48;&#x38;&#46;&#49;&#49;&#53;&#x2e;&#49;\">&#x72;&#x6f;&#x6f;&#x74;&#x40;&#49;&#49;&#x35;&#46;&#x31;&#48;&#x38;&#46;&#49;&#49;&#53;&#x2e;&#49;</a></p>\n<p>回车，初次登录时输入yes确认是否连接</p>\n<p>回车，输入密码</p>\n<p>回车，登陆成功</p>\n<p><img src=\"/images/image-20230321113354768.png\"></p>\n<h2 id=\"方法二：用shell连接\"><a href=\"#方法二：用shell连接\" class=\"headerlink\" title=\"方法二：用shell连接\"></a>方法二：用shell连接</h2><p>在终端中选择如下：</p>\n<p><img src=\"/images/image-20230321113702555.png\"></p>\n<p>点击加号，添加自己的服务器ip，然后输入用户名，点击连接<br><img src=\"/images/image-20230321115405188.png\"></p>\n<p>输入密码就连接上了。<br><img src=\"/images/image-20230321115534751.png\"></p>\n<h2 id=\"方法三：其他可视化工具\"><a href=\"#方法三：其他可视化工具\" class=\"headerlink\" title=\"方法三：其他可视化工具\"></a>方法三：其他可视化工具</h2><p>如FileZilla等，输入主机IP、用户名、密码、端口号、点击连接。很快就连接上了。<br>不具体说了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"方法一：用终端登录\"><a href=\"#方法一：用终端登录\" class=\"headerlink\" title=\"方法一：用终端登录\"></a>方法一：用终端登录</h2><p>终端输入命令：</p>\n<p><code>ssh -p 端口号 服务器用户名@ip</code></p>\n<p>如：ssh -p 22 <a href=\"mailto:&#x72;&#x6f;&#x6f;&#x74;&#x40;&#49;&#49;&#x35;&#46;&#x31;&#48;&#x38;&#46;&#49;&#49;&#53;&#x2e;&#49;\">&#x72;&#x6f;&#x6f;&#x74;&#x40;&#49;&#49;&#x35;&#46;&#x31;&#48;&#x38;&#46;&#49;&#49;&#53;&#x2e;&#49;</a></p>\n<p>回车，初次登录时输入yes确认是否连接</p>\n<p>回车，输入密码</p>\n<p>回车，登陆成功</p>\n<p><img src=\"/images/image-20230321113354768.png\"></p>\n<h2 id=\"方法二：用shell连接\"><a href=\"#方法二：用shell连接\" class=\"headerlink\" title=\"方法二：用shell连接\"></a>方法二：用shell连接</h2><p>在终端中选择如下：</p>\n<p><img src=\"/images/image-20230321113702555.png\"></p>\n<p>点击加号，添加自己的服务器ip，然后输入用户名，点击连接<br><img src=\"/images/image-20230321115405188.png\"></p>\n<p>输入密码就连接上了。<br><img src=\"/images/image-20230321115534751.png\"></p>\n<h2 id=\"方法三：其他可视化工具\"><a href=\"#方法三：其他可视化工具\" class=\"headerlink\" title=\"方法三：其他可视化工具\"></a>方法三：其他可视化工具</h2><p>如FileZilla等，输入主机IP、用户名、密码、端口号、点击连接。很快就连接上了。<br>不具体说了。</p>\n"},{"title":"搭建web部署系统","date":"2022-03-21T02:55:58.000Z","_content":"1. 安装jerkins docker ，准备好代码仓库（github/gitlab）\n在自己的机器上跑起来 done\n使用jenkins将码云上的git仓库拉到服务器\n将代码拉到服务器后，可以手动触发构建、部署\n完成自动化部署\n开发一个自己的插件，具体做啥还没想好\n\n在开发服务器上既部署了jenkins也部署了项目，通过不同的端口号访问，很不安全也不好。\n\n\n我将Jenkins部署系统和网站运行在同一台服务器上，但它们使用的不同端口号。部署系统是8008，网站是8009\n\nJenkins是一款开源的自动化部署工具，可以通过插件来实现各种不同的功能。其中，SSH Remote Hosts插件允许Jenkins在远程服务器上执行命令。\n\n\n先使用publish over ssh插件将内容发送到服务器上，然后再使用ssh remote hosts配置去远程执行服务器上的命令。\n## ssh remote hosts 的作用\n该插件允许Jenkins将指令发送到远程服务器，并获取执行结果。这对于自动化部署和持续集成非常有用。通过SSH Remote Hosts插件，您可以配置Jenkins与多个远程服务器之间的连接。您可以指定服务器的IP地址、用户名、密码、端口号等信息。在建立连接后，您可以在Jenkins上执行各种命令，如运行shell脚本、安装软件包、复制文件等等。\n\n在使用SSH Remote Hosts时，需要注意以下几点：\n\n在远程服务器上安装SSH服务，以便Jenkins可以连接到服务器。\n确保您在Jenkins服务器上安装了SSH插件。\n在SSH Remote Hosts插件的配置中，确保您提供了正确的IP地址、用户名、密码和端口号。\n确保您在Jenkins中的作业中使用了正确的SSH Remote Hosts插件的配置。\n使用SSH Remote Hosts插件时，需要小心，确保您使用了正确的权限和正确的命令。同时，要定期更改您的密码，以确保安全性。","source":"_posts/从零开始搭建web部署系统.md","raw":"---\ntitle: 搭建web部署系统\ndate: 2022-03-21 10:55:58\ntags: \n - iv2\ncategories:\n  - 程序员的自我修养\n---\n1. 安装jerkins docker ，准备好代码仓库（github/gitlab）\n在自己的机器上跑起来 done\n使用jenkins将码云上的git仓库拉到服务器\n将代码拉到服务器后，可以手动触发构建、部署\n完成自动化部署\n开发一个自己的插件，具体做啥还没想好\n\n在开发服务器上既部署了jenkins也部署了项目，通过不同的端口号访问，很不安全也不好。\n\n\n我将Jenkins部署系统和网站运行在同一台服务器上，但它们使用的不同端口号。部署系统是8008，网站是8009\n\nJenkins是一款开源的自动化部署工具，可以通过插件来实现各种不同的功能。其中，SSH Remote Hosts插件允许Jenkins在远程服务器上执行命令。\n\n\n先使用publish over ssh插件将内容发送到服务器上，然后再使用ssh remote hosts配置去远程执行服务器上的命令。\n## ssh remote hosts 的作用\n该插件允许Jenkins将指令发送到远程服务器，并获取执行结果。这对于自动化部署和持续集成非常有用。通过SSH Remote Hosts插件，您可以配置Jenkins与多个远程服务器之间的连接。您可以指定服务器的IP地址、用户名、密码、端口号等信息。在建立连接后，您可以在Jenkins上执行各种命令，如运行shell脚本、安装软件包、复制文件等等。\n\n在使用SSH Remote Hosts时，需要注意以下几点：\n\n在远程服务器上安装SSH服务，以便Jenkins可以连接到服务器。\n确保您在Jenkins服务器上安装了SSH插件。\n在SSH Remote Hosts插件的配置中，确保您提供了正确的IP地址、用户名、密码和端口号。\n确保您在Jenkins中的作业中使用了正确的SSH Remote Hosts插件的配置。\n使用SSH Remote Hosts插件时，需要小心，确保您使用了正确的权限和正确的命令。同时，要定期更改您的密码，以确保安全性。","slug":"从零开始搭建web部署系统","published":1,"updated":"2023-04-25T02:25:41.577Z","_id":"clfhqty9b0002vtwi5gsgfrgk","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li>安装jerkins docker ，准备好代码仓库（github/gitlab）<br>在自己的机器上跑起来 done<br>使用jenkins将码云上的git仓库拉到服务器<br>将代码拉到服务器后，可以手动触发构建、部署<br>完成自动化部署<br>开发一个自己的插件，具体做啥还没想好</li>\n</ol>\n<p>在开发服务器上既部署了jenkins也部署了项目，通过不同的端口号访问，很不安全也不好。</p>\n<p>我将Jenkins部署系统和网站运行在同一台服务器上，但它们使用的不同端口号。部署系统是8008，网站是8009</p>\n<p>Jenkins是一款开源的自动化部署工具，可以通过插件来实现各种不同的功能。其中，SSH Remote Hosts插件允许Jenkins在远程服务器上执行命令。</p>\n<p>先使用publish over ssh插件将内容发送到服务器上，然后再使用ssh remote hosts配置去远程执行服务器上的命令。</p>\n<h2 id=\"ssh-remote-hosts-的作用\"><a href=\"#ssh-remote-hosts-的作用\" class=\"headerlink\" title=\"ssh remote hosts 的作用\"></a>ssh remote hosts 的作用</h2><p>该插件允许Jenkins将指令发送到远程服务器，并获取执行结果。这对于自动化部署和持续集成非常有用。通过SSH Remote Hosts插件，您可以配置Jenkins与多个远程服务器之间的连接。您可以指定服务器的IP地址、用户名、密码、端口号等信息。在建立连接后，您可以在Jenkins上执行各种命令，如运行shell脚本、安装软件包、复制文件等等。</p>\n<p>在使用SSH Remote Hosts时，需要注意以下几点：</p>\n<p>在远程服务器上安装SSH服务，以便Jenkins可以连接到服务器。<br>确保您在Jenkins服务器上安装了SSH插件。<br>在SSH Remote Hosts插件的配置中，确保您提供了正确的IP地址、用户名、密码和端口号。<br>确保您在Jenkins中的作业中使用了正确的SSH Remote Hosts插件的配置。<br>使用SSH Remote Hosts插件时，需要小心，确保您使用了正确的权限和正确的命令。同时，要定期更改您的密码，以确保安全性。</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>安装jerkins docker ，准备好代码仓库（github/gitlab）<br>在自己的机器上跑起来 done<br>使用jenkins将码云上的git仓库拉到服务器<br>将代码拉到服务器后，可以手动触发构建、部署<br>完成自动化部署<br>开发一个自己的插件，具体做啥还没想好</li>\n</ol>\n<p>在开发服务器上既部署了jenkins也部署了项目，通过不同的端口号访问，很不安全也不好。</p>\n<p>我将Jenkins部署系统和网站运行在同一台服务器上，但它们使用的不同端口号。部署系统是8008，网站是8009</p>\n<p>Jenkins是一款开源的自动化部署工具，可以通过插件来实现各种不同的功能。其中，SSH Remote Hosts插件允许Jenkins在远程服务器上执行命令。</p>\n<p>先使用publish over ssh插件将内容发送到服务器上，然后再使用ssh remote hosts配置去远程执行服务器上的命令。</p>\n<h2 id=\"ssh-remote-hosts-的作用\"><a href=\"#ssh-remote-hosts-的作用\" class=\"headerlink\" title=\"ssh remote hosts 的作用\"></a>ssh remote hosts 的作用</h2><p>该插件允许Jenkins将指令发送到远程服务器，并获取执行结果。这对于自动化部署和持续集成非常有用。通过SSH Remote Hosts插件，您可以配置Jenkins与多个远程服务器之间的连接。您可以指定服务器的IP地址、用户名、密码、端口号等信息。在建立连接后，您可以在Jenkins上执行各种命令，如运行shell脚本、安装软件包、复制文件等等。</p>\n<p>在使用SSH Remote Hosts时，需要注意以下几点：</p>\n<p>在远程服务器上安装SSH服务，以便Jenkins可以连接到服务器。<br>确保您在Jenkins服务器上安装了SSH插件。<br>在SSH Remote Hosts插件的配置中，确保您提供了正确的IP地址、用户名、密码和端口号。<br>确保您在Jenkins中的作业中使用了正确的SSH Remote Hosts插件的配置。<br>使用SSH Remote Hosts插件时，需要小心，确保您使用了正确的权限和正确的命令。同时，要定期更改您的密码，以确保安全性。</p>\n"},{"title":"docker安装jenkins","date":"2022-03-21T11:36:26.000Z","_content":"\n明天写拉\n<!--- https://juejin.cn/post/6967243012199940110 --->\n\ndocker pull jenkins\ndocker run xxx\n","source":"_posts/docker安装jenkins教程.md","raw":"---\ntitle: docker安装jenkins\ndate: 2022-03-21 19:36:26\ntags:\n---\n\n明天写拉\n<!--- https://juejin.cn/post/6967243012199940110 --->\n\ndocker pull jenkins\ndocker run xxx\n","slug":"docker安装jenkins教程","published":1,"updated":"2023-04-07T07:33:45.437Z","_id":"clfj4xh4w0000jiwi4fzbccjb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>明天写拉</p>\n<!--- https://juejin.cn/post/6967243012199940110 --->\n\n<p>docker pull jenkins<br>docker run xxx</p>\n","site":{"data":{}},"excerpt":"","more":"<p>明天写拉</p>\n<!--- https://juejin.cn/post/6967243012199940110 --->\n\n<p>docker pull jenkins<br>docker run xxx</p>\n"},{"title":"【css】重排与重绘","date":"2023-03-22T03:21:30.000Z","_content":"## 一、从输入url到渲染出页面的整个过程\n1. dns解析： 域名--->IP\n2. 浏览器根据IP地址向服务器发起http请求\n3. 服务器处理http请求，并返回给浏览器\n4. 根据HTML生成Domtree，根据Css生成cssom，再整合dom树和cssom整合的rendertree\n5. 根据render tree渲染页面\n6. 遇到script标签则暂停渲染，优先加载并执行js代码，完成再继续，直至渲染完成。\n\n![image-20230322112531068](/images/image-20230322112531068.png)\n\n## 渲染：\n\n在页面的生命周期中，**网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断触发重排(reflow)和重绘(repaint)**，不管页面发生了重绘还是重排，都会影响性能，最可怕的是重排，会使我们付出高额的性能代价，所以我们应尽量避免。\n\n## 重排会导致重绘\n\n+ 重绘：某些元素的外观被改变，例如：元素的填充颜色\n\n+ 重排：重新生成布局，重新排列元素。\n\n改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分。比如改变元素高度，这个元素乃至周边dom都需要重新绘制。\n\n所以：\n\n**重绘不一定导致重排，但重排一定会导致重绘。**\n\n\n\n## 重排(reflow)：\n\n### 概念：\n\n当DOM的变化影响了元素的几何信息(元素的的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。\n\n重排也叫回流，简单的说就是重新生成布局，重新排列元素。\n\n### 下面情况会发生重排：\n\n- 页面初始渲染，这是开销最大的一次重排\n- 添加/删除可见的DOM元素\n- 改变元素位置\n- 改变元素尺寸，比如边距、填充、边框、宽度和高度等\n- 改变元素内容，比如文字数量，图片大小等\n- 改变元素字体大小\n- 改变浏览器窗口尺寸，比如resize事件发生时\n- 激活CSS伪类（例如：`:hover`）\n- 设置 style 属性的值，因为通过设置style属性改变结点样式的话，每一次设置都会触发一次reflow\n- 查询某些属性或调用某些计算方法：offsetWidth、offsetHeight等，除此之外，当我们调用 `getComputedStyle`方法，或者IE里的 `currentStyle` 时，也会触发重排，原理是一样的，都为求一个“即时性”和“准确性”。\n\n| 常见引起重排属性和方法  | --                       | --                 | --         |\n| ----------------------- | ------------------------ | ------------------ | ---------- |\n| width                   | height                   | margin             | padding    |\n| display                 | border-width             | border             | position   |\n| overflow                | font-size                | vertical-align     | min-height |\n| clientWidth             | clientHeight             | clientTop          | clientLeft |\n| offsetWidth             | offsetHeight             | offsetTop          | offsetLeft |\n| scrollWidth             | scrollHeight             | scrollTop          | scrollLeft |\n| scrollIntoView()        | scrollTo()               | getComputedStyle() |            |\n| getBoundingClientRect() | scrollIntoViewIfNeeded() |                    |            |\n\n### 重排影响的范围：\n\n由于浏览器渲染界面是基于流式布局模型的，所以触发重排时会对周围DOM重新排列，影响的范围有两种：\n\n- 全局范围：从根节点html开始对整个渲染树进行重新布局。\n- 局部范围：对渲染树的某部分或某一个渲染对象进行重新布局\n\n**全局范围重排：**\n\n```js\n<body>\n  <div class=\"hello\">\n    <h4>hello</h4>\n    <p><strong>Name:</strong>BDing</p>\n    <h5>male</h5>\n    <ol>\n      <li>coding</li>\n      <li>loving</li>\n    </ol>\n  </div>\n</body>\n```\n\n当p节点上发生reflow时，hello和body也会重新渲染，甚至h5和ol都会收到影响。\n\n**局部范围重排：**\n\n用局部布局来解释这种现象：把一个dom的宽高之类的几何信息定死，然后在dom内部触发重排，就只会重新渲染该dom内部的元素，而不会影响到外界。\n\n## 重绘(Repaints):\n\n### 概念：\n\n当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。\n\n### 常见的引起重绘的属性：\n\n| 属性：          | --               | --                  | --                |\n| --------------- | ---------------- | ------------------- | ----------------- |\n| color           | border-style     | visibility          | background        |\n| text-decoration | background-image | background-position | background-repeat |\n| outline-color   | outline          | outline-style       | border-radius     |\n| outline-width   | box-shadow       | background-size     |                   |\n\n## 重排优化建议：\n\n重排的代价是高昂的，会破坏用户体验，并且让UI展示非常迟缓。通过减少重排的负面影响来提高用户体验的最简单方式就是尽可能的减少重排次数，重排范围。下面是一些行之有效的建议，大家可以用来参考。\n\n### 减少重排范围\n\n我们应该尽量以局部布局的形式组织html结构，尽可能小的影响重排的范围。\n\n- 尽可能在低层级的DOM节点上，而不是像上述全局范围的示例代码一样，如果你要改变p的样式，class就不要加在div上，通过父元素去影响子元素不好。\n- 不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局。那么在不得已使用table的场合，可以设置table-layout:auto;或者是table-layout:fixed这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围。\n\n### 减少重排次数\n\n#### 1.样式集中改变\n\n不要频繁的操作样式，对于一个静态页面来说，明智且可维护的做法是更改类名而不是修改样式，对于动态改变的样式来说，相较每次微小修改都直接触及元素，更好的办法是统一在 `cssText` 变量中编辑。虽然现在大部分现代浏览器都会有 `Flush` 队列进行渲染队列优化，但是有些老版本的浏览器比如IE6的效率依然低下。\n\n```js\n// bad\nvar left = 10;\nvar top = 10;\nel.style.left = left + \"px\";\nel.style.top = top + \"px\";\n\n// 当top和left的值是动态计算而成时...\n// better \nel.style.cssText += \"; left: \" + left + \"px; top: \" + top + \"px;\";\n\n// better\nel.className += \" className\";\n\n复制代码\n```\n\n#### 2.分离读写操作\n\nDOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。\n\n```js\n// bad 强制刷新 触发四次重排+重绘\ndiv.style.left = div.offsetLeft + 1 + 'px';\ndiv.style.top = div.offsetTop + 1 + 'px';\ndiv.style.right = div.offsetRight + 1 + 'px';\ndiv.style.bottom = div.offsetBottom + 1 + 'px';\n\n\n// good 缓存布局信息 相当于读写分离 触发一次重排+重绘\nvar curLeft = div.offsetLeft;\nvar curTop = div.offsetTop;\nvar curRight = div.offsetRight;\nvar curBottom = div.offsetBottom;\n\ndiv.style.left = curLeft + 1 + 'px';\ndiv.style.top = curTop + 1 + 'px';\ndiv.style.right = curRight + 1 + 'px';\ndiv.style.bottom = curBottom + 1 + 'px';\n复制代码\n```\n\n原来的操作会导致四次重排，读写分离之后实际上只触发了一次重排，这都得益于浏览器的渲染队列机制：\n\n> 当我们修改了元素的几何属性，导致浏览器触发重排或重绘时。它会把该操作放进渲染队列，等到队列中的操作到了一定的数量或者到了一定的时间间隔时，浏览器就会批量执行这些操作。\n\n#### 3.将 DOM 离线\n\n“离线”意味着不在当前的 DOM 树中做修改，我们可以这样做：\n\n- 使用 display:none\n\n  一旦我们给元素设置 `display:none` 时（只有一次重排重绘），元素便不会再存在在渲染树中，相当于将其从页面上“拿掉”，我们之后的操作将不会触发重排和重绘，添加足够多的变更后，通过 `display`属性显示（另一次重排重绘）。通过这种方式即使大量变更也只触发两次重排。另外，`visibility : hidden` 的元素只对重绘有影响，不影响重排。\n\n- 通过 [documentFragment](https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FDocumentFragment) 创建一个 `dom` 碎片,在它上面批量操作 `dom`，操作完成之后，再添加到文档中，这样只会触发一次重排。\n\n- 复制节点，在副本上工作，然后替换它！\n\n#### 4.使用 absolute 或 fixed 脱离文档流\n\n使用绝对定位会使的该元素单独成为渲染树中 `body` 的一个子元素，重排开销比较小，不会对其它节点造成太多影响。当你在这些节点上放置这个元素时，一些其它在这个区域内的节点可能需要重绘，但是不需要重排。\n\n#### 5.优化动画\n\n- 可以把动画效果应用到 `position`属性为 `absolute` 或 `fixed` 的元素上，这样对其他元素影响较小。\n\n  动画效果还应牺牲一些平滑，来换取速度，这中间的度自己衡量： 比如实现一个动画，以1个像素为单位移动这样最平滑，但是Layout就会过于频繁，大量消耗CPU资源，如果以3个像素为单位移动则会好很多\n\n- 启用GPU加速 `GPU` 硬件加速是指应用 `GPU` 的图形性能对浏览器中的一些图形操作交给 `GPU` 来完成，因为 `GPU` 是专门为处理图形而设计，所以它在速度和能耗上更有效率。\n\n  `GPU` 加速通常包括以下几个部分：Canvas2D，布局合成, CSS3转换（transitions），CSS3 3D变换（transforms），WebGL和视频(video)。\n\n  ```js\n    /*\n    * 根据上面的结论\n    * 将 2d transform 换成 3d\n    * 就可以强制开启 GPU 加速\n    * 提高动画性能\n    */\n    div {\n      transform: translate3d(10px, 10px, 0);\n    }\n  ```\n\n## 在浏览器中查看页面渲染时间\n\n1.打开开发者工具：点击 Performance 左侧有个小圆点 点击刷新页面会录制整个页面加载出来 时间的分配情况。如下图\n\n![image-20230322113633072](/images/image-20230322113633072.png)\n\n- 蓝色: 网络通信和HTML解析\n- 黄色: JavaScript执行\n- 紫色: 样式计算和布局，即重排\n- 绿色: 重绘\n\n哪种色块比较多，就说明性能耗费在那里。色块越长，问题越大。\n\n2.点击 Event Log：单独勾选 Loading 项会显示 html 和 css 加载时间。如下图：\n\n![image-20230322113719542](/images/image-20230322113719542.png)\n\n3.解析完 DOM+CSSOM 之后会生成一个渲染树 Render Tree，就是 DOM 和 CSSOM 的一一对应关系。\n\n4.通过渲染树中在屏幕上“画”出的所有节点，称为渲染。\n","source":"_posts/重排与重绘.md","raw":"---\ntitle: 【css】重排与重绘\ndate: 2023-03-22 11:21:30\ntags: \n - css\n - iv1\ncategories:\n  - 程序员的自我修养\n---\n## 一、从输入url到渲染出页面的整个过程\n1. dns解析： 域名--->IP\n2. 浏览器根据IP地址向服务器发起http请求\n3. 服务器处理http请求，并返回给浏览器\n4. 根据HTML生成Domtree，根据Css生成cssom，再整合dom树和cssom整合的rendertree\n5. 根据render tree渲染页面\n6. 遇到script标签则暂停渲染，优先加载并执行js代码，完成再继续，直至渲染完成。\n\n![image-20230322112531068](/images/image-20230322112531068.png)\n\n## 渲染：\n\n在页面的生命周期中，**网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断触发重排(reflow)和重绘(repaint)**，不管页面发生了重绘还是重排，都会影响性能，最可怕的是重排，会使我们付出高额的性能代价，所以我们应尽量避免。\n\n## 重排会导致重绘\n\n+ 重绘：某些元素的外观被改变，例如：元素的填充颜色\n\n+ 重排：重新生成布局，重新排列元素。\n\n改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分。比如改变元素高度，这个元素乃至周边dom都需要重新绘制。\n\n所以：\n\n**重绘不一定导致重排，但重排一定会导致重绘。**\n\n\n\n## 重排(reflow)：\n\n### 概念：\n\n当DOM的变化影响了元素的几何信息(元素的的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。\n\n重排也叫回流，简单的说就是重新生成布局，重新排列元素。\n\n### 下面情况会发生重排：\n\n- 页面初始渲染，这是开销最大的一次重排\n- 添加/删除可见的DOM元素\n- 改变元素位置\n- 改变元素尺寸，比如边距、填充、边框、宽度和高度等\n- 改变元素内容，比如文字数量，图片大小等\n- 改变元素字体大小\n- 改变浏览器窗口尺寸，比如resize事件发生时\n- 激活CSS伪类（例如：`:hover`）\n- 设置 style 属性的值，因为通过设置style属性改变结点样式的话，每一次设置都会触发一次reflow\n- 查询某些属性或调用某些计算方法：offsetWidth、offsetHeight等，除此之外，当我们调用 `getComputedStyle`方法，或者IE里的 `currentStyle` 时，也会触发重排，原理是一样的，都为求一个“即时性”和“准确性”。\n\n| 常见引起重排属性和方法  | --                       | --                 | --         |\n| ----------------------- | ------------------------ | ------------------ | ---------- |\n| width                   | height                   | margin             | padding    |\n| display                 | border-width             | border             | position   |\n| overflow                | font-size                | vertical-align     | min-height |\n| clientWidth             | clientHeight             | clientTop          | clientLeft |\n| offsetWidth             | offsetHeight             | offsetTop          | offsetLeft |\n| scrollWidth             | scrollHeight             | scrollTop          | scrollLeft |\n| scrollIntoView()        | scrollTo()               | getComputedStyle() |            |\n| getBoundingClientRect() | scrollIntoViewIfNeeded() |                    |            |\n\n### 重排影响的范围：\n\n由于浏览器渲染界面是基于流式布局模型的，所以触发重排时会对周围DOM重新排列，影响的范围有两种：\n\n- 全局范围：从根节点html开始对整个渲染树进行重新布局。\n- 局部范围：对渲染树的某部分或某一个渲染对象进行重新布局\n\n**全局范围重排：**\n\n```js\n<body>\n  <div class=\"hello\">\n    <h4>hello</h4>\n    <p><strong>Name:</strong>BDing</p>\n    <h5>male</h5>\n    <ol>\n      <li>coding</li>\n      <li>loving</li>\n    </ol>\n  </div>\n</body>\n```\n\n当p节点上发生reflow时，hello和body也会重新渲染，甚至h5和ol都会收到影响。\n\n**局部范围重排：**\n\n用局部布局来解释这种现象：把一个dom的宽高之类的几何信息定死，然后在dom内部触发重排，就只会重新渲染该dom内部的元素，而不会影响到外界。\n\n## 重绘(Repaints):\n\n### 概念：\n\n当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。\n\n### 常见的引起重绘的属性：\n\n| 属性：          | --               | --                  | --                |\n| --------------- | ---------------- | ------------------- | ----------------- |\n| color           | border-style     | visibility          | background        |\n| text-decoration | background-image | background-position | background-repeat |\n| outline-color   | outline          | outline-style       | border-radius     |\n| outline-width   | box-shadow       | background-size     |                   |\n\n## 重排优化建议：\n\n重排的代价是高昂的，会破坏用户体验，并且让UI展示非常迟缓。通过减少重排的负面影响来提高用户体验的最简单方式就是尽可能的减少重排次数，重排范围。下面是一些行之有效的建议，大家可以用来参考。\n\n### 减少重排范围\n\n我们应该尽量以局部布局的形式组织html结构，尽可能小的影响重排的范围。\n\n- 尽可能在低层级的DOM节点上，而不是像上述全局范围的示例代码一样，如果你要改变p的样式，class就不要加在div上，通过父元素去影响子元素不好。\n- 不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局。那么在不得已使用table的场合，可以设置table-layout:auto;或者是table-layout:fixed这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围。\n\n### 减少重排次数\n\n#### 1.样式集中改变\n\n不要频繁的操作样式，对于一个静态页面来说，明智且可维护的做法是更改类名而不是修改样式，对于动态改变的样式来说，相较每次微小修改都直接触及元素，更好的办法是统一在 `cssText` 变量中编辑。虽然现在大部分现代浏览器都会有 `Flush` 队列进行渲染队列优化，但是有些老版本的浏览器比如IE6的效率依然低下。\n\n```js\n// bad\nvar left = 10;\nvar top = 10;\nel.style.left = left + \"px\";\nel.style.top = top + \"px\";\n\n// 当top和left的值是动态计算而成时...\n// better \nel.style.cssText += \"; left: \" + left + \"px; top: \" + top + \"px;\";\n\n// better\nel.className += \" className\";\n\n复制代码\n```\n\n#### 2.分离读写操作\n\nDOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。\n\n```js\n// bad 强制刷新 触发四次重排+重绘\ndiv.style.left = div.offsetLeft + 1 + 'px';\ndiv.style.top = div.offsetTop + 1 + 'px';\ndiv.style.right = div.offsetRight + 1 + 'px';\ndiv.style.bottom = div.offsetBottom + 1 + 'px';\n\n\n// good 缓存布局信息 相当于读写分离 触发一次重排+重绘\nvar curLeft = div.offsetLeft;\nvar curTop = div.offsetTop;\nvar curRight = div.offsetRight;\nvar curBottom = div.offsetBottom;\n\ndiv.style.left = curLeft + 1 + 'px';\ndiv.style.top = curTop + 1 + 'px';\ndiv.style.right = curRight + 1 + 'px';\ndiv.style.bottom = curBottom + 1 + 'px';\n复制代码\n```\n\n原来的操作会导致四次重排，读写分离之后实际上只触发了一次重排，这都得益于浏览器的渲染队列机制：\n\n> 当我们修改了元素的几何属性，导致浏览器触发重排或重绘时。它会把该操作放进渲染队列，等到队列中的操作到了一定的数量或者到了一定的时间间隔时，浏览器就会批量执行这些操作。\n\n#### 3.将 DOM 离线\n\n“离线”意味着不在当前的 DOM 树中做修改，我们可以这样做：\n\n- 使用 display:none\n\n  一旦我们给元素设置 `display:none` 时（只有一次重排重绘），元素便不会再存在在渲染树中，相当于将其从页面上“拿掉”，我们之后的操作将不会触发重排和重绘，添加足够多的变更后，通过 `display`属性显示（另一次重排重绘）。通过这种方式即使大量变更也只触发两次重排。另外，`visibility : hidden` 的元素只对重绘有影响，不影响重排。\n\n- 通过 [documentFragment](https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FDocumentFragment) 创建一个 `dom` 碎片,在它上面批量操作 `dom`，操作完成之后，再添加到文档中，这样只会触发一次重排。\n\n- 复制节点，在副本上工作，然后替换它！\n\n#### 4.使用 absolute 或 fixed 脱离文档流\n\n使用绝对定位会使的该元素单独成为渲染树中 `body` 的一个子元素，重排开销比较小，不会对其它节点造成太多影响。当你在这些节点上放置这个元素时，一些其它在这个区域内的节点可能需要重绘，但是不需要重排。\n\n#### 5.优化动画\n\n- 可以把动画效果应用到 `position`属性为 `absolute` 或 `fixed` 的元素上，这样对其他元素影响较小。\n\n  动画效果还应牺牲一些平滑，来换取速度，这中间的度自己衡量： 比如实现一个动画，以1个像素为单位移动这样最平滑，但是Layout就会过于频繁，大量消耗CPU资源，如果以3个像素为单位移动则会好很多\n\n- 启用GPU加速 `GPU` 硬件加速是指应用 `GPU` 的图形性能对浏览器中的一些图形操作交给 `GPU` 来完成，因为 `GPU` 是专门为处理图形而设计，所以它在速度和能耗上更有效率。\n\n  `GPU` 加速通常包括以下几个部分：Canvas2D，布局合成, CSS3转换（transitions），CSS3 3D变换（transforms），WebGL和视频(video)。\n\n  ```js\n    /*\n    * 根据上面的结论\n    * 将 2d transform 换成 3d\n    * 就可以强制开启 GPU 加速\n    * 提高动画性能\n    */\n    div {\n      transform: translate3d(10px, 10px, 0);\n    }\n  ```\n\n## 在浏览器中查看页面渲染时间\n\n1.打开开发者工具：点击 Performance 左侧有个小圆点 点击刷新页面会录制整个页面加载出来 时间的分配情况。如下图\n\n![image-20230322113633072](/images/image-20230322113633072.png)\n\n- 蓝色: 网络通信和HTML解析\n- 黄色: JavaScript执行\n- 紫色: 样式计算和布局，即重排\n- 绿色: 重绘\n\n哪种色块比较多，就说明性能耗费在那里。色块越长，问题越大。\n\n2.点击 Event Log：单独勾选 Loading 项会显示 html 和 css 加载时间。如下图：\n\n![image-20230322113719542](/images/image-20230322113719542.png)\n\n3.解析完 DOM+CSSOM 之后会生成一个渲染树 Render Tree，就是 DOM 和 CSSOM 的一一对应关系。\n\n4.通过渲染树中在屏幕上“画”出的所有节点，称为渲染。\n","slug":"重排与重绘","published":1,"updated":"2023-04-25T02:26:17.450Z","_id":"clfj4xh590004jiwigpdifvh4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、从输入url到渲染出页面的整个过程\"><a href=\"#一、从输入url到渲染出页面的整个过程\" class=\"headerlink\" title=\"一、从输入url到渲染出页面的整个过程\"></a>一、从输入url到渲染出页面的整个过程</h2><ol>\n<li>dns解析： 域名—&gt;IP</li>\n<li>浏览器根据IP地址向服务器发起http请求</li>\n<li>服务器处理http请求，并返回给浏览器</li>\n<li>根据HTML生成Domtree，根据Css生成cssom，再整合dom树和cssom整合的rendertree</li>\n<li>根据render tree渲染页面</li>\n<li>遇到script标签则暂停渲染，优先加载并执行js代码，完成再继续，直至渲染完成。</li>\n</ol>\n<p><img src=\"/images/image-20230322112531068.png\" alt=\"image-20230322112531068\"></p>\n<h2 id=\"渲染：\"><a href=\"#渲染：\" class=\"headerlink\" title=\"渲染：\"></a>渲染：</h2><p>在页面的生命周期中，**网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断触发重排(reflow)和重绘(repaint)**，不管页面发生了重绘还是重排，都会影响性能，最可怕的是重排，会使我们付出高额的性能代价，所以我们应尽量避免。</p>\n<h2 id=\"重排会导致重绘\"><a href=\"#重排会导致重绘\" class=\"headerlink\" title=\"重排会导致重绘\"></a>重排会导致重绘</h2><ul>\n<li><p>重绘：某些元素的外观被改变，例如：元素的填充颜色</p>\n</li>\n<li><p>重排：重新生成布局，重新排列元素。</p>\n</li>\n</ul>\n<p>改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分。比如改变元素高度，这个元素乃至周边dom都需要重新绘制。</p>\n<p>所以：</p>\n<p><strong>重绘不一定导致重排，但重排一定会导致重绘。</strong></p>\n<h2 id=\"重排-reflow-：\"><a href=\"#重排-reflow-：\" class=\"headerlink\" title=\"重排(reflow)：\"></a>重排(reflow)：</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><p>当DOM的变化影响了元素的几何信息(元素的的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。</p>\n<p>重排也叫回流，简单的说就是重新生成布局，重新排列元素。</p>\n<h3 id=\"下面情况会发生重排：\"><a href=\"#下面情况会发生重排：\" class=\"headerlink\" title=\"下面情况会发生重排：\"></a>下面情况会发生重排：</h3><ul>\n<li>页面初始渲染，这是开销最大的一次重排</li>\n<li>添加/删除可见的DOM元素</li>\n<li>改变元素位置</li>\n<li>改变元素尺寸，比如边距、填充、边框、宽度和高度等</li>\n<li>改变元素内容，比如文字数量，图片大小等</li>\n<li>改变元素字体大小</li>\n<li>改变浏览器窗口尺寸，比如resize事件发生时</li>\n<li>激活CSS伪类（例如：<code>:hover</code>）</li>\n<li>设置 style 属性的值，因为通过设置style属性改变结点样式的话，每一次设置都会触发一次reflow</li>\n<li>查询某些属性或调用某些计算方法：offsetWidth、offsetHeight等，除此之外，当我们调用 <code>getComputedStyle</code>方法，或者IE里的 <code>currentStyle</code> 时，也会触发重排，原理是一样的，都为求一个“即时性”和“准确性”。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>常见引起重排属性和方法</th>\n<th>–</th>\n<th>–</th>\n<th>–</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>width</td>\n<td>height</td>\n<td>margin</td>\n<td>padding</td>\n</tr>\n<tr>\n<td>display</td>\n<td>border-width</td>\n<td>border</td>\n<td>position</td>\n</tr>\n<tr>\n<td>overflow</td>\n<td>font-size</td>\n<td>vertical-align</td>\n<td>min-height</td>\n</tr>\n<tr>\n<td>clientWidth</td>\n<td>clientHeight</td>\n<td>clientTop</td>\n<td>clientLeft</td>\n</tr>\n<tr>\n<td>offsetWidth</td>\n<td>offsetHeight</td>\n<td>offsetTop</td>\n<td>offsetLeft</td>\n</tr>\n<tr>\n<td>scrollWidth</td>\n<td>scrollHeight</td>\n<td>scrollTop</td>\n<td>scrollLeft</td>\n</tr>\n<tr>\n<td>scrollIntoView()</td>\n<td>scrollTo()</td>\n<td>getComputedStyle()</td>\n<td></td>\n</tr>\n<tr>\n<td>getBoundingClientRect()</td>\n<td>scrollIntoViewIfNeeded()</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"重排影响的范围：\"><a href=\"#重排影响的范围：\" class=\"headerlink\" title=\"重排影响的范围：\"></a>重排影响的范围：</h3><p>由于浏览器渲染界面是基于流式布局模型的，所以触发重排时会对周围DOM重新排列，影响的范围有两种：</p>\n<ul>\n<li>全局范围：从根节点html开始对整个渲染树进行重新布局。</li>\n<li>局部范围：对渲染树的某部分或某一个渲染对象进行重新布局</li>\n</ul>\n<p><strong>全局范围重排：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>BDing<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>male<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>coding<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>loving<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当p节点上发生reflow时，hello和body也会重新渲染，甚至h5和ol都会收到影响。</p>\n<p><strong>局部范围重排：</strong></p>\n<p>用局部布局来解释这种现象：把一个dom的宽高之类的几何信息定死，然后在dom内部触发重排，就只会重新渲染该dom内部的元素，而不会影响到外界。</p>\n<h2 id=\"重绘-Repaints\"><a href=\"#重绘-Repaints\" class=\"headerlink\" title=\"重绘(Repaints):\"></a>重绘(Repaints):</h2><h3 id=\"概念：-1\"><a href=\"#概念：-1\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><p>当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。</p>\n<h3 id=\"常见的引起重绘的属性：\"><a href=\"#常见的引起重绘的属性：\" class=\"headerlink\" title=\"常见的引起重绘的属性：\"></a>常见的引起重绘的属性：</h3><table>\n<thead>\n<tr>\n<th>属性：</th>\n<th>–</th>\n<th>–</th>\n<th>–</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>color</td>\n<td>border-style</td>\n<td>visibility</td>\n<td>background</td>\n</tr>\n<tr>\n<td>text-decoration</td>\n<td>background-image</td>\n<td>background-position</td>\n<td>background-repeat</td>\n</tr>\n<tr>\n<td>outline-color</td>\n<td>outline</td>\n<td>outline-style</td>\n<td>border-radius</td>\n</tr>\n<tr>\n<td>outline-width</td>\n<td>box-shadow</td>\n<td>background-size</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"重排优化建议：\"><a href=\"#重排优化建议：\" class=\"headerlink\" title=\"重排优化建议：\"></a>重排优化建议：</h2><p>重排的代价是高昂的，会破坏用户体验，并且让UI展示非常迟缓。通过减少重排的负面影响来提高用户体验的最简单方式就是尽可能的减少重排次数，重排范围。下面是一些行之有效的建议，大家可以用来参考。</p>\n<h3 id=\"减少重排范围\"><a href=\"#减少重排范围\" class=\"headerlink\" title=\"减少重排范围\"></a>减少重排范围</h3><p>我们应该尽量以局部布局的形式组织html结构，尽可能小的影响重排的范围。</p>\n<ul>\n<li>尽可能在低层级的DOM节点上，而不是像上述全局范围的示例代码一样，如果你要改变p的样式，class就不要加在div上，通过父元素去影响子元素不好。</li>\n<li>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局。那么在不得已使用table的场合，可以设置table-layout:auto;或者是table-layout:fixed这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围。</li>\n</ul>\n<h3 id=\"减少重排次数\"><a href=\"#减少重排次数\" class=\"headerlink\" title=\"减少重排次数\"></a>减少重排次数</h3><h4 id=\"1-样式集中改变\"><a href=\"#1-样式集中改变\" class=\"headerlink\" title=\"1.样式集中改变\"></a>1.样式集中改变</h4><p>不要频繁的操作样式，对于一个静态页面来说，明智且可维护的做法是更改类名而不是修改样式，对于动态改变的样式来说，相较每次微小修改都直接触及元素，更好的办法是统一在 <code>cssText</code> 变量中编辑。虽然现在大部分现代浏览器都会有 <code>Flush</code> 队列进行渲染队列优化，但是有些老版本的浏览器比如IE6的效率依然低下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> left = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> top = <span class=\"number\">10</span>;</span><br><span class=\"line\">el.<span class=\"property\">style</span>.<span class=\"property\">left</span> = left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">el.<span class=\"property\">style</span>.<span class=\"property\">top</span> = top + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当top和left的值是动态计算而成时...</span></span><br><span class=\"line\"><span class=\"comment\">// better </span></span><br><span class=\"line\">el.<span class=\"property\">style</span>.<span class=\"property\">cssText</span> += <span class=\"string\">&quot;; left: &quot;</span> + left + <span class=\"string\">&quot;px; top: &quot;</span> + top + <span class=\"string\">&quot;px;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// better</span></span><br><span class=\"line\">el.<span class=\"property\">className</span> += <span class=\"string\">&quot; className&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-分离读写操作\"><a href=\"#2-分离读写操作\" class=\"headerlink\" title=\"2.分离读写操作\"></a>2.分离读写操作</h4><p>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad 强制刷新 触发四次重排+重绘</span></span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = div.<span class=\"property\">offsetLeft</span> + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = div.<span class=\"property\">offsetTop</span> + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">right</span> = div.<span class=\"property\">offsetRight</span> + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">bottom</span> = div.<span class=\"property\">offsetBottom</span> + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good 缓存布局信息 相当于读写分离 触发一次重排+重绘</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> curLeft = div.<span class=\"property\">offsetLeft</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> curTop = div.<span class=\"property\">offsetTop</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> curRight = div.<span class=\"property\">offsetRight</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> curBottom = div.<span class=\"property\">offsetBottom</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = curLeft + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = curTop + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">right</span> = curRight + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">bottom</span> = curBottom + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>原来的操作会导致四次重排，读写分离之后实际上只触发了一次重排，这都得益于浏览器的渲染队列机制：</p>\n<blockquote>\n<p>当我们修改了元素的几何属性，导致浏览器触发重排或重绘时。它会把该操作放进渲染队列，等到队列中的操作到了一定的数量或者到了一定的时间间隔时，浏览器就会批量执行这些操作。</p>\n</blockquote>\n<h4 id=\"3-将-DOM-离线\"><a href=\"#3-将-DOM-离线\" class=\"headerlink\" title=\"3.将 DOM 离线\"></a>3.将 DOM 离线</h4><p>“离线”意味着不在当前的 DOM 树中做修改，我们可以这样做：</p>\n<ul>\n<li><p>使用 display:none</p>\n<p>一旦我们给元素设置 <code>display:none</code> 时（只有一次重排重绘），元素便不会再存在在渲染树中，相当于将其从页面上“拿掉”，我们之后的操作将不会触发重排和重绘，添加足够多的变更后，通过 <code>display</code>属性显示（另一次重排重绘）。通过这种方式即使大量变更也只触发两次重排。另外，<code>visibility : hidden</code> 的元素只对重绘有影响，不影响重排。</p>\n</li>\n<li><p>通过 <a href=\"https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentFragment\">documentFragment</a> 创建一个 <code>dom</code> 碎片,在它上面批量操作 <code>dom</code>，操作完成之后，再添加到文档中，这样只会触发一次重排。</p>\n</li>\n<li><p>复制节点，在副本上工作，然后替换它！</p>\n</li>\n</ul>\n<h4 id=\"4-使用-absolute-或-fixed-脱离文档流\"><a href=\"#4-使用-absolute-或-fixed-脱离文档流\" class=\"headerlink\" title=\"4.使用 absolute 或 fixed 脱离文档流\"></a>4.使用 absolute 或 fixed 脱离文档流</h4><p>使用绝对定位会使的该元素单独成为渲染树中 <code>body</code> 的一个子元素，重排开销比较小，不会对其它节点造成太多影响。当你在这些节点上放置这个元素时，一些其它在这个区域内的节点可能需要重绘，但是不需要重排。</p>\n<h4 id=\"5-优化动画\"><a href=\"#5-优化动画\" class=\"headerlink\" title=\"5.优化动画\"></a>5.优化动画</h4><ul>\n<li><p>可以把动画效果应用到 <code>position</code>属性为 <code>absolute</code> 或 <code>fixed</code> 的元素上，这样对其他元素影响较小。</p>\n<p>动画效果还应牺牲一些平滑，来换取速度，这中间的度自己衡量： 比如实现一个动画，以1个像素为单位移动这样最平滑，但是Layout就会过于频繁，大量消耗CPU资源，如果以3个像素为单位移动则会好很多</p>\n</li>\n<li><p>启用GPU加速 <code>GPU</code> 硬件加速是指应用 <code>GPU</code> 的图形性能对浏览器中的一些图形操作交给 <code>GPU</code> 来完成，因为 <code>GPU</code> 是专门为处理图形而设计，所以它在速度和能耗上更有效率。</p>\n<p><code>GPU</code> 加速通常包括以下几个部分：Canvas2D，布局合成, CSS3转换（transitions），CSS3 3D变换（transforms），WebGL和视频(video)。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 根据上面的结论</span></span><br><span class=\"line\"><span class=\"comment\">* 将 2d transform 换成 3d</span></span><br><span class=\"line\"><span class=\"comment\">* 就可以强制开启 GPU 加速</span></span><br><span class=\"line\"><span class=\"comment\">* 提高动画性能</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">div &#123;</span><br><span class=\"line\">  <span class=\"attr\">transform</span>: <span class=\"title function_\">translate3d</span>(10px, 10px, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"在浏览器中查看页面渲染时间\"><a href=\"#在浏览器中查看页面渲染时间\" class=\"headerlink\" title=\"在浏览器中查看页面渲染时间\"></a>在浏览器中查看页面渲染时间</h2><p>1.打开开发者工具：点击 Performance 左侧有个小圆点 点击刷新页面会录制整个页面加载出来 时间的分配情况。如下图</p>\n<p><img src=\"/images/image-20230322113633072.png\" alt=\"image-20230322113633072\"></p>\n<ul>\n<li>蓝色: 网络通信和HTML解析</li>\n<li>黄色: JavaScript执行</li>\n<li>紫色: 样式计算和布局，即重排</li>\n<li>绿色: 重绘</li>\n</ul>\n<p>哪种色块比较多，就说明性能耗费在那里。色块越长，问题越大。</p>\n<p>2.点击 Event Log：单独勾选 Loading 项会显示 html 和 css 加载时间。如下图：</p>\n<p><img src=\"/images/image-20230322113719542.png\" alt=\"image-20230322113719542\"></p>\n<p>3.解析完 DOM+CSSOM 之后会生成一个渲染树 Render Tree，就是 DOM 和 CSSOM 的一一对应关系。</p>\n<p>4.通过渲染树中在屏幕上“画”出的所有节点，称为渲染。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、从输入url到渲染出页面的整个过程\"><a href=\"#一、从输入url到渲染出页面的整个过程\" class=\"headerlink\" title=\"一、从输入url到渲染出页面的整个过程\"></a>一、从输入url到渲染出页面的整个过程</h2><ol>\n<li>dns解析： 域名—&gt;IP</li>\n<li>浏览器根据IP地址向服务器发起http请求</li>\n<li>服务器处理http请求，并返回给浏览器</li>\n<li>根据HTML生成Domtree，根据Css生成cssom，再整合dom树和cssom整合的rendertree</li>\n<li>根据render tree渲染页面</li>\n<li>遇到script标签则暂停渲染，优先加载并执行js代码，完成再继续，直至渲染完成。</li>\n</ol>\n<p><img src=\"/images/image-20230322112531068.png\" alt=\"image-20230322112531068\"></p>\n<h2 id=\"渲染：\"><a href=\"#渲染：\" class=\"headerlink\" title=\"渲染：\"></a>渲染：</h2><p>在页面的生命周期中，**网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断触发重排(reflow)和重绘(repaint)**，不管页面发生了重绘还是重排，都会影响性能，最可怕的是重排，会使我们付出高额的性能代价，所以我们应尽量避免。</p>\n<h2 id=\"重排会导致重绘\"><a href=\"#重排会导致重绘\" class=\"headerlink\" title=\"重排会导致重绘\"></a>重排会导致重绘</h2><ul>\n<li><p>重绘：某些元素的外观被改变，例如：元素的填充颜色</p>\n</li>\n<li><p>重排：重新生成布局，重新排列元素。</p>\n</li>\n</ul>\n<p>改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分。比如改变元素高度，这个元素乃至周边dom都需要重新绘制。</p>\n<p>所以：</p>\n<p><strong>重绘不一定导致重排，但重排一定会导致重绘。</strong></p>\n<h2 id=\"重排-reflow-：\"><a href=\"#重排-reflow-：\" class=\"headerlink\" title=\"重排(reflow)：\"></a>重排(reflow)：</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><p>当DOM的变化影响了元素的几何信息(元素的的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。</p>\n<p>重排也叫回流，简单的说就是重新生成布局，重新排列元素。</p>\n<h3 id=\"下面情况会发生重排：\"><a href=\"#下面情况会发生重排：\" class=\"headerlink\" title=\"下面情况会发生重排：\"></a>下面情况会发生重排：</h3><ul>\n<li>页面初始渲染，这是开销最大的一次重排</li>\n<li>添加/删除可见的DOM元素</li>\n<li>改变元素位置</li>\n<li>改变元素尺寸，比如边距、填充、边框、宽度和高度等</li>\n<li>改变元素内容，比如文字数量，图片大小等</li>\n<li>改变元素字体大小</li>\n<li>改变浏览器窗口尺寸，比如resize事件发生时</li>\n<li>激活CSS伪类（例如：<code>:hover</code>）</li>\n<li>设置 style 属性的值，因为通过设置style属性改变结点样式的话，每一次设置都会触发一次reflow</li>\n<li>查询某些属性或调用某些计算方法：offsetWidth、offsetHeight等，除此之外，当我们调用 <code>getComputedStyle</code>方法，或者IE里的 <code>currentStyle</code> 时，也会触发重排，原理是一样的，都为求一个“即时性”和“准确性”。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>常见引起重排属性和方法</th>\n<th>–</th>\n<th>–</th>\n<th>–</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>width</td>\n<td>height</td>\n<td>margin</td>\n<td>padding</td>\n</tr>\n<tr>\n<td>display</td>\n<td>border-width</td>\n<td>border</td>\n<td>position</td>\n</tr>\n<tr>\n<td>overflow</td>\n<td>font-size</td>\n<td>vertical-align</td>\n<td>min-height</td>\n</tr>\n<tr>\n<td>clientWidth</td>\n<td>clientHeight</td>\n<td>clientTop</td>\n<td>clientLeft</td>\n</tr>\n<tr>\n<td>offsetWidth</td>\n<td>offsetHeight</td>\n<td>offsetTop</td>\n<td>offsetLeft</td>\n</tr>\n<tr>\n<td>scrollWidth</td>\n<td>scrollHeight</td>\n<td>scrollTop</td>\n<td>scrollLeft</td>\n</tr>\n<tr>\n<td>scrollIntoView()</td>\n<td>scrollTo()</td>\n<td>getComputedStyle()</td>\n<td></td>\n</tr>\n<tr>\n<td>getBoundingClientRect()</td>\n<td>scrollIntoViewIfNeeded()</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"重排影响的范围：\"><a href=\"#重排影响的范围：\" class=\"headerlink\" title=\"重排影响的范围：\"></a>重排影响的范围：</h3><p>由于浏览器渲染界面是基于流式布局模型的，所以触发重排时会对周围DOM重新排列，影响的范围有两种：</p>\n<ul>\n<li>全局范围：从根节点html开始对整个渲染树进行重新布局。</li>\n<li>局部范围：对渲染树的某部分或某一个渲染对象进行重新布局</li>\n</ul>\n<p><strong>全局范围重排：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>BDing<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>male<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>coding<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>loving<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当p节点上发生reflow时，hello和body也会重新渲染，甚至h5和ol都会收到影响。</p>\n<p><strong>局部范围重排：</strong></p>\n<p>用局部布局来解释这种现象：把一个dom的宽高之类的几何信息定死，然后在dom内部触发重排，就只会重新渲染该dom内部的元素，而不会影响到外界。</p>\n<h2 id=\"重绘-Repaints\"><a href=\"#重绘-Repaints\" class=\"headerlink\" title=\"重绘(Repaints):\"></a>重绘(Repaints):</h2><h3 id=\"概念：-1\"><a href=\"#概念：-1\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><p>当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。</p>\n<h3 id=\"常见的引起重绘的属性：\"><a href=\"#常见的引起重绘的属性：\" class=\"headerlink\" title=\"常见的引起重绘的属性：\"></a>常见的引起重绘的属性：</h3><table>\n<thead>\n<tr>\n<th>属性：</th>\n<th>–</th>\n<th>–</th>\n<th>–</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>color</td>\n<td>border-style</td>\n<td>visibility</td>\n<td>background</td>\n</tr>\n<tr>\n<td>text-decoration</td>\n<td>background-image</td>\n<td>background-position</td>\n<td>background-repeat</td>\n</tr>\n<tr>\n<td>outline-color</td>\n<td>outline</td>\n<td>outline-style</td>\n<td>border-radius</td>\n</tr>\n<tr>\n<td>outline-width</td>\n<td>box-shadow</td>\n<td>background-size</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"重排优化建议：\"><a href=\"#重排优化建议：\" class=\"headerlink\" title=\"重排优化建议：\"></a>重排优化建议：</h2><p>重排的代价是高昂的，会破坏用户体验，并且让UI展示非常迟缓。通过减少重排的负面影响来提高用户体验的最简单方式就是尽可能的减少重排次数，重排范围。下面是一些行之有效的建议，大家可以用来参考。</p>\n<h3 id=\"减少重排范围\"><a href=\"#减少重排范围\" class=\"headerlink\" title=\"减少重排范围\"></a>减少重排范围</h3><p>我们应该尽量以局部布局的形式组织html结构，尽可能小的影响重排的范围。</p>\n<ul>\n<li>尽可能在低层级的DOM节点上，而不是像上述全局范围的示例代码一样，如果你要改变p的样式，class就不要加在div上，通过父元素去影响子元素不好。</li>\n<li>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局。那么在不得已使用table的场合，可以设置table-layout:auto;或者是table-layout:fixed这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围。</li>\n</ul>\n<h3 id=\"减少重排次数\"><a href=\"#减少重排次数\" class=\"headerlink\" title=\"减少重排次数\"></a>减少重排次数</h3><h4 id=\"1-样式集中改变\"><a href=\"#1-样式集中改变\" class=\"headerlink\" title=\"1.样式集中改变\"></a>1.样式集中改变</h4><p>不要频繁的操作样式，对于一个静态页面来说，明智且可维护的做法是更改类名而不是修改样式，对于动态改变的样式来说，相较每次微小修改都直接触及元素，更好的办法是统一在 <code>cssText</code> 变量中编辑。虽然现在大部分现代浏览器都会有 <code>Flush</code> 队列进行渲染队列优化，但是有些老版本的浏览器比如IE6的效率依然低下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> left = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> top = <span class=\"number\">10</span>;</span><br><span class=\"line\">el.<span class=\"property\">style</span>.<span class=\"property\">left</span> = left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">el.<span class=\"property\">style</span>.<span class=\"property\">top</span> = top + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当top和left的值是动态计算而成时...</span></span><br><span class=\"line\"><span class=\"comment\">// better </span></span><br><span class=\"line\">el.<span class=\"property\">style</span>.<span class=\"property\">cssText</span> += <span class=\"string\">&quot;; left: &quot;</span> + left + <span class=\"string\">&quot;px; top: &quot;</span> + top + <span class=\"string\">&quot;px;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// better</span></span><br><span class=\"line\">el.<span class=\"property\">className</span> += <span class=\"string\">&quot; className&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-分离读写操作\"><a href=\"#2-分离读写操作\" class=\"headerlink\" title=\"2.分离读写操作\"></a>2.分离读写操作</h4><p>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad 强制刷新 触发四次重排+重绘</span></span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = div.<span class=\"property\">offsetLeft</span> + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = div.<span class=\"property\">offsetTop</span> + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">right</span> = div.<span class=\"property\">offsetRight</span> + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">bottom</span> = div.<span class=\"property\">offsetBottom</span> + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good 缓存布局信息 相当于读写分离 触发一次重排+重绘</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> curLeft = div.<span class=\"property\">offsetLeft</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> curTop = div.<span class=\"property\">offsetTop</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> curRight = div.<span class=\"property\">offsetRight</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> curBottom = div.<span class=\"property\">offsetBottom</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = curLeft + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = curTop + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">right</span> = curRight + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">bottom</span> = curBottom + <span class=\"number\">1</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>原来的操作会导致四次重排，读写分离之后实际上只触发了一次重排，这都得益于浏览器的渲染队列机制：</p>\n<blockquote>\n<p>当我们修改了元素的几何属性，导致浏览器触发重排或重绘时。它会把该操作放进渲染队列，等到队列中的操作到了一定的数量或者到了一定的时间间隔时，浏览器就会批量执行这些操作。</p>\n</blockquote>\n<h4 id=\"3-将-DOM-离线\"><a href=\"#3-将-DOM-离线\" class=\"headerlink\" title=\"3.将 DOM 离线\"></a>3.将 DOM 离线</h4><p>“离线”意味着不在当前的 DOM 树中做修改，我们可以这样做：</p>\n<ul>\n<li><p>使用 display:none</p>\n<p>一旦我们给元素设置 <code>display:none</code> 时（只有一次重排重绘），元素便不会再存在在渲染树中，相当于将其从页面上“拿掉”，我们之后的操作将不会触发重排和重绘，添加足够多的变更后，通过 <code>display</code>属性显示（另一次重排重绘）。通过这种方式即使大量变更也只触发两次重排。另外，<code>visibility : hidden</code> 的元素只对重绘有影响，不影响重排。</p>\n</li>\n<li><p>通过 <a href=\"https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentFragment\">documentFragment</a> 创建一个 <code>dom</code> 碎片,在它上面批量操作 <code>dom</code>，操作完成之后，再添加到文档中，这样只会触发一次重排。</p>\n</li>\n<li><p>复制节点，在副本上工作，然后替换它！</p>\n</li>\n</ul>\n<h4 id=\"4-使用-absolute-或-fixed-脱离文档流\"><a href=\"#4-使用-absolute-或-fixed-脱离文档流\" class=\"headerlink\" title=\"4.使用 absolute 或 fixed 脱离文档流\"></a>4.使用 absolute 或 fixed 脱离文档流</h4><p>使用绝对定位会使的该元素单独成为渲染树中 <code>body</code> 的一个子元素，重排开销比较小，不会对其它节点造成太多影响。当你在这些节点上放置这个元素时，一些其它在这个区域内的节点可能需要重绘，但是不需要重排。</p>\n<h4 id=\"5-优化动画\"><a href=\"#5-优化动画\" class=\"headerlink\" title=\"5.优化动画\"></a>5.优化动画</h4><ul>\n<li><p>可以把动画效果应用到 <code>position</code>属性为 <code>absolute</code> 或 <code>fixed</code> 的元素上，这样对其他元素影响较小。</p>\n<p>动画效果还应牺牲一些平滑，来换取速度，这中间的度自己衡量： 比如实现一个动画，以1个像素为单位移动这样最平滑，但是Layout就会过于频繁，大量消耗CPU资源，如果以3个像素为单位移动则会好很多</p>\n</li>\n<li><p>启用GPU加速 <code>GPU</code> 硬件加速是指应用 <code>GPU</code> 的图形性能对浏览器中的一些图形操作交给 <code>GPU</code> 来完成，因为 <code>GPU</code> 是专门为处理图形而设计，所以它在速度和能耗上更有效率。</p>\n<p><code>GPU</code> 加速通常包括以下几个部分：Canvas2D，布局合成, CSS3转换（transitions），CSS3 3D变换（transforms），WebGL和视频(video)。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 根据上面的结论</span></span><br><span class=\"line\"><span class=\"comment\">* 将 2d transform 换成 3d</span></span><br><span class=\"line\"><span class=\"comment\">* 就可以强制开启 GPU 加速</span></span><br><span class=\"line\"><span class=\"comment\">* 提高动画性能</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">div &#123;</span><br><span class=\"line\">  <span class=\"attr\">transform</span>: <span class=\"title function_\">translate3d</span>(10px, 10px, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"在浏览器中查看页面渲染时间\"><a href=\"#在浏览器中查看页面渲染时间\" class=\"headerlink\" title=\"在浏览器中查看页面渲染时间\"></a>在浏览器中查看页面渲染时间</h2><p>1.打开开发者工具：点击 Performance 左侧有个小圆点 点击刷新页面会录制整个页面加载出来 时间的分配情况。如下图</p>\n<p><img src=\"/images/image-20230322113633072.png\" alt=\"image-20230322113633072\"></p>\n<ul>\n<li>蓝色: 网络通信和HTML解析</li>\n<li>黄色: JavaScript执行</li>\n<li>紫色: 样式计算和布局，即重排</li>\n<li>绿色: 重绘</li>\n</ul>\n<p>哪种色块比较多，就说明性能耗费在那里。色块越长，问题越大。</p>\n<p>2.点击 Event Log：单独勾选 Loading 项会显示 html 和 css 加载时间。如下图：</p>\n<p><img src=\"/images/image-20230322113719542.png\" alt=\"image-20230322113719542\"></p>\n<p>3.解析完 DOM+CSSOM 之后会生成一个渲染树 Render Tree，就是 DOM 和 CSSOM 的一一对应关系。</p>\n<p>4.通过渲染树中在屏幕上“画”出的所有节点，称为渲染。</p>\n"},{"title":"【实用工具】Mitmproxy 抓包","date":"2023-03-24T03:49:42.000Z","_content":"\n## 什么是Mitmproxy\nMitmproxy是一款基于Python开发的抓包工具，可以用于拦截、修改和重放HTTP和HTTPS流量。以下是使用Mitmproxy进行抓包的简单步骤：\n\n## 安装和启动\n安装和启动Mitmproxy：你可以从Mitmproxy的官方网站（https://mitmproxy.org/）上下载安装程序，并根据操作系统的不同进行安装。安装完成后，你可以通过在终端窗口输入“mitmproxy”命令来启动Mitmproxy。\n\n## 配置设备代理\n配置设备代理：将设备的代理设置为Mitmproxy的IP地址和端口号（默认端口号为8080）。具体方法取决于你使用的设备和操作系统。例如，在iOS设备上，你可以通过“设置”>“Wi-Fi”>“当前连接的Wi-Fi网络”>“代理”>“手动”来进行配置。\n\n## 开始抓包\n开始抓包：一旦你的设备代理已经配置好，Mitmproxy就会自动开始捕获HTTP和HTTPS流量。你可以在Mitmproxy的控制台中查看所有的请求和响应。你还可以使用一些Mitmproxy提供的快捷键，如使用“tab”键切换到请求/响应窗格，使用“e”键编辑请求，使用“w”键保存请求和响应等等。\n\n## 导出数据\n导出数据：在完成抓包后，你可以将数据导出为不同的格式，例如HAR文件、PCAP文件或CSV文件，以便在其他工具中进行分析。\n\n需要注意的是，抓包可能会涉及到隐私问题，请确保在合适的环境下使用该工具，并尊重他人的隐私。\n","source":"_posts/mitmproxy.md","raw":"---\ntitle: 【实用工具】Mitmproxy 抓包\ndate: 2023-03-24 11:49:42\ntags:\ncategories: 程序员的自我修养\n---\n\n## 什么是Mitmproxy\nMitmproxy是一款基于Python开发的抓包工具，可以用于拦截、修改和重放HTTP和HTTPS流量。以下是使用Mitmproxy进行抓包的简单步骤：\n\n## 安装和启动\n安装和启动Mitmproxy：你可以从Mitmproxy的官方网站（https://mitmproxy.org/）上下载安装程序，并根据操作系统的不同进行安装。安装完成后，你可以通过在终端窗口输入“mitmproxy”命令来启动Mitmproxy。\n\n## 配置设备代理\n配置设备代理：将设备的代理设置为Mitmproxy的IP地址和端口号（默认端口号为8080）。具体方法取决于你使用的设备和操作系统。例如，在iOS设备上，你可以通过“设置”>“Wi-Fi”>“当前连接的Wi-Fi网络”>“代理”>“手动”来进行配置。\n\n## 开始抓包\n开始抓包：一旦你的设备代理已经配置好，Mitmproxy就会自动开始捕获HTTP和HTTPS流量。你可以在Mitmproxy的控制台中查看所有的请求和响应。你还可以使用一些Mitmproxy提供的快捷键，如使用“tab”键切换到请求/响应窗格，使用“e”键编辑请求，使用“w”键保存请求和响应等等。\n\n## 导出数据\n导出数据：在完成抓包后，你可以将数据导出为不同的格式，例如HAR文件、PCAP文件或CSV文件，以便在其他工具中进行分析。\n\n需要注意的是，抓包可能会涉及到隐私问题，请确保在合适的环境下使用该工具，并尊重他人的隐私。\n","slug":"mitmproxy","published":1,"updated":"2023-04-11T02:15:06.328Z","_id":"clfo9kg200000g1wifxqbdlg5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是Mitmproxy\"><a href=\"#什么是Mitmproxy\" class=\"headerlink\" title=\"什么是Mitmproxy\"></a>什么是Mitmproxy</h2><p>Mitmproxy是一款基于Python开发的抓包工具，可以用于拦截、修改和重放HTTP和HTTPS流量。以下是使用Mitmproxy进行抓包的简单步骤：</p>\n<h2 id=\"安装和启动\"><a href=\"#安装和启动\" class=\"headerlink\" title=\"安装和启动\"></a>安装和启动</h2><p>安装和启动Mitmproxy：你可以从Mitmproxy的官方网站（<a href=\"https://mitmproxy.org/%EF%BC%89%E4%B8%8A%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%B9%B6%E6%A0%B9%E6%8D%AE%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%8D%E5%90%8C%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%9C%A8%E7%BB%88%E7%AB%AF%E7%AA%97%E5%8F%A3%E8%BE%93%E5%85%A5%E2%80%9Cmitmproxy%E2%80%9D%E5%91%BD%E4%BB%A4%E6%9D%A5%E5%90%AF%E5%8A%A8Mitmproxy%E3%80%82\">https://mitmproxy.org/）上下载安装程序，并根据操作系统的不同进行安装。安装完成后，你可以通过在终端窗口输入“mitmproxy”命令来启动Mitmproxy。</a></p>\n<h2 id=\"配置设备代理\"><a href=\"#配置设备代理\" class=\"headerlink\" title=\"配置设备代理\"></a>配置设备代理</h2><p>配置设备代理：将设备的代理设置为Mitmproxy的IP地址和端口号（默认端口号为8080）。具体方法取决于你使用的设备和操作系统。例如，在iOS设备上，你可以通过“设置”&gt;“Wi-Fi”&gt;“当前连接的Wi-Fi网络”&gt;“代理”&gt;“手动”来进行配置。</p>\n<h2 id=\"开始抓包\"><a href=\"#开始抓包\" class=\"headerlink\" title=\"开始抓包\"></a>开始抓包</h2><p>开始抓包：一旦你的设备代理已经配置好，Mitmproxy就会自动开始捕获HTTP和HTTPS流量。你可以在Mitmproxy的控制台中查看所有的请求和响应。你还可以使用一些Mitmproxy提供的快捷键，如使用“tab”键切换到请求/响应窗格，使用“e”键编辑请求，使用“w”键保存请求和响应等等。</p>\n<h2 id=\"导出数据\"><a href=\"#导出数据\" class=\"headerlink\" title=\"导出数据\"></a>导出数据</h2><p>导出数据：在完成抓包后，你可以将数据导出为不同的格式，例如HAR文件、PCAP文件或CSV文件，以便在其他工具中进行分析。</p>\n<p>需要注意的是，抓包可能会涉及到隐私问题，请确保在合适的环境下使用该工具，并尊重他人的隐私。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是Mitmproxy\"><a href=\"#什么是Mitmproxy\" class=\"headerlink\" title=\"什么是Mitmproxy\"></a>什么是Mitmproxy</h2><p>Mitmproxy是一款基于Python开发的抓包工具，可以用于拦截、修改和重放HTTP和HTTPS流量。以下是使用Mitmproxy进行抓包的简单步骤：</p>\n<h2 id=\"安装和启动\"><a href=\"#安装和启动\" class=\"headerlink\" title=\"安装和启动\"></a>安装和启动</h2><p>安装和启动Mitmproxy：你可以从Mitmproxy的官方网站（<a href=\"https://mitmproxy.org/%EF%BC%89%E4%B8%8A%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%B9%B6%E6%A0%B9%E6%8D%AE%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%8D%E5%90%8C%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%9C%A8%E7%BB%88%E7%AB%AF%E7%AA%97%E5%8F%A3%E8%BE%93%E5%85%A5%E2%80%9Cmitmproxy%E2%80%9D%E5%91%BD%E4%BB%A4%E6%9D%A5%E5%90%AF%E5%8A%A8Mitmproxy%E3%80%82\">https://mitmproxy.org/）上下载安装程序，并根据操作系统的不同进行安装。安装完成后，你可以通过在终端窗口输入“mitmproxy”命令来启动Mitmproxy。</a></p>\n<h2 id=\"配置设备代理\"><a href=\"#配置设备代理\" class=\"headerlink\" title=\"配置设备代理\"></a>配置设备代理</h2><p>配置设备代理：将设备的代理设置为Mitmproxy的IP地址和端口号（默认端口号为8080）。具体方法取决于你使用的设备和操作系统。例如，在iOS设备上，你可以通过“设置”&gt;“Wi-Fi”&gt;“当前连接的Wi-Fi网络”&gt;“代理”&gt;“手动”来进行配置。</p>\n<h2 id=\"开始抓包\"><a href=\"#开始抓包\" class=\"headerlink\" title=\"开始抓包\"></a>开始抓包</h2><p>开始抓包：一旦你的设备代理已经配置好，Mitmproxy就会自动开始捕获HTTP和HTTPS流量。你可以在Mitmproxy的控制台中查看所有的请求和响应。你还可以使用一些Mitmproxy提供的快捷键，如使用“tab”键切换到请求/响应窗格，使用“e”键编辑请求，使用“w”键保存请求和响应等等。</p>\n<h2 id=\"导出数据\"><a href=\"#导出数据\" class=\"headerlink\" title=\"导出数据\"></a>导出数据</h2><p>导出数据：在完成抓包后，你可以将数据导出为不同的格式，例如HAR文件、PCAP文件或CSV文件，以便在其他工具中进行分析。</p>\n<p>需要注意的是，抓包可能会涉及到隐私问题，请确保在合适的环境下使用该工具，并尊重他人的隐私。</p>\n"},{"title":"【npm】npm发布步骤","date":"2023-03-28T03:36:08.000Z","_content":"\n## npm包发布\n发布一个npm包通常需要以下步骤：\n\n1. 确保你已经安装了`Node.js`和`npm`，以及在`npm`上注册了一个账户。如果没有，请先在[https://www.npmjs.com/](https://www.npmjs.com/)上注册一个账户。\n2. 在终端中创建一个新的项目文件夹，并进入该文件夹。执行以下命令来初始化npm包：\n\n```\nnpm init\n```\n\n3. 在你的项目文件夹中编写代码，并确保在`package.json`文件中指定了正确的入口文件路径和依赖项。\n4. 编写`README`文件和许可证文件，并确保它们在项目文件夹中。\n5. 在终端中运行以下命令来登录npm账户:\n\n```\nnpm login\n```\n\n6. 输入你的用户名、密码和电子邮件地址。如果一切顺利，你将登录成功（若无法登录，请看看“可能遇到的问题”部分）。\n7. 在终端中运行以下命令，将包发布到npm上:\n\n```\nnpm publish\n```\n\n这将把你的npm包上传到npm仓库。你的包将被分配一个唯一的版本号，并且其他人可以通过npm来安装你的包。如果你需要更新你的包，只需更新代码，修改版本号并再次运行`npm publish`命令即可。\n\n请注意，当你发布npm包时，你的代码将被公开发布到npm上。因此，你应该小心保护敏感信息，并确保遵循最佳实践，以确保代码的安全性和稳定性。\n\n## npm包删除\n\n如果你想删除自己发布的npm包，可以在终端中使用以下命令：\n\n```\nnpm unpublish <package-name> --force\n```\n\n**请注意，<span style=\"background-color:#78a355\t\">删除一个包是不可逆转的</span>，因此请确保你真正需要删除它，以避免造成不必要的损失。**\n\n#### 其他注意事项：\n1. 删除已发布的npm包会破坏其他人对你的代码的依赖，因此在删除之前，请确保没有人正在使用你的代码，或者提供足够的警告时间，以便其他人可以切换到其他代码。\n2. 如果你已经发布了<span style=\"background-color:#78a355\t\">多个版本</span>的npm包，则只能删除<span style=\"background-color:#78a355\t\">最新的版本</span>，<span style=\"background-color:#78a355\t\">不能删除旧版本</span>。\n3. 删除npm包需要管理员权限，因此你需要确保你的账户拥有管理员权限，才能删除你发布的包。\n\n## 可能遇到的问题\n\n如果你执行 `npm login` 命令时出现错误，可能是以下几种情况之一：\n\n1. 检查你的npm账户是否已注册。如果你还没有npm账户，你需要先在npm的官方网站上注册一个账户。\n\n2. 检查你的网络连接是否正常。如果你的网络连接不稳定或者有问题，可能导致登录失败。\n\n3. 检查你的npm注册表是否正确。如果你要登录的是npm的私有注册表，确保你已经订阅了npm付费计划，以便可以创建一个私有注册表，并通过该私有注册表来发布私有包。\n\n4. 检查你的npm配置是否正确。你可以在命令行中运行以下命令，查看npm的配置信息：\n\n   ```\n   npm config list\n   ```\n\n   确保你的 `registry` 配置是正确的。如果你要登录的是npm的私有注册表，确保你的 `registry` 配置是指向该私有注册表的。\n\n如果你已经确认了以上的问题，并且你的 `npm login` 命令仍然失败，你可以尝试以下几种方法：\n\n1. 清除npm的缓存。你可以使用以下命令来清除npm的缓存：\n\n   ```\n   npm cache clean --force\n   ```\n\n   清除缓存后，尝试再次登录。\n\n2. 检查npm的版本。确保你正在使用的是最新版本的npm。\n\n3. 如果你使用的是代理服务器，你可以尝试在命令行中设置代理服务器。例如：\n\n   ```\n   npm config set proxy http://yourproxy:yourport\n   npm config set https-proxy http://yourproxy:yourport\n   ```\n\n   将 `yourproxy` 替换为你的代理服务器地址，将 `yourport` 替换为你的代理服务器端口号。\n\n如果你仍然无法成功登录，你可以查看npm的官方文档或者向npm的技术支持团队寻求帮助。\n\n#### 关于第四点，确认是否使用私有注册表的补充\n\n**因为很多人使用的是<span style=\"background-color:#78a355\t;\">国内淘宝镜像</span>以至于`npm login`不成功，此时只需要改为<span style=\"background-color:#78a355\t\">官方镜像</span>即可。**\n\n#### 具体方法如下：\n\n要确认是否使用私有注册表，你可以检查你的npm配置文件。默认情况下，npm会将你的包发布到npm官方的公共注册表，而不是私有注册表。如果你要使用私有注册表，你需要订阅npm的付费计划，并创建一个私有注册表。在登录时，你需要使用该私有注册表的URL。\n\n要检查你的npm配置是否指向私有注册表，可以运行以下命令：\n\n```\nnpm config get registry\n```\n\n如果输出的结果是私有注册表的URL，那么你正在使用私有注册表。如果输出的结果是默认的公共注册表URL（`https://registry.npmjs.org/`），那么你不是在使用私有注册表。\n\n如果你确定你要使用私有注册表，但无法成功登录，那么可能是因为你的npm配置不正确。确保你已经在npm上订阅了付费计划，并创建了一个私有注册表。在登录时，你需要使用该私有注册表的URL，并提供正确的访问凭据。如果你仍然无法成功登录，你可以联系npm的技术支持团队，寻求帮助。\n\n#### 如何更改？\n\n你可以通过 `npm config set` 命令来更改npm的配置。例如，要将npm配置的注册表更改为私有注册表的URL，可以使用以下命令：\n\n```\nnpm config set registry <your-private-registry-url>\n```\n\n其中 `<your-private-registry-url>` 是你的私有注册表的URL。你需要将其替换为你的实际URL。\n\n如果你想将npm配置恢复为默认设置，可以使用以下命令：\n\n```\nnpm config delete registry\n```\n\n这将删除当前配置的 `registry` 选项，使npm使用默认的公共注册表。\n\n## 发布一个私有的npm包\n\n1. 使用npm收费工具\n\n如果你希望仅向付费用户提供访问权限，你可以使用npm的付费工具。你可以在npm网站上注册一个付费账户，创建一个收费组织，然后将你的包添加到该组织中。然后，你可以设置访问权限，仅允许那些已经付费的用户使用你的包。\n\n2. 使用npm访问令牌\n\n另一种方法是使用npm访问令牌。你可以创建一个令牌，并将其授予仅限于你允许的用户。然后，你可以将该令牌用于安装你的包。只有持有该令牌的用户才能使用你的包。你可以在npm网站上创建一个访问令牌，并将其添加到你的项目中的`.npmrc`文件中。请确保令牌不被泄露，以避免未经授权的用户使用你的代码。\n\n3. 使用私有npm仓库（类似[淘宝镜像源](**https://registry.npmmirror.com**)的服务器，但其实淘宝镜像源是公开的）\n\n最后，你可以使用私有npm仓库。你可以在你自己的服务器上搭建一个npm仓库，并将你的包上传到该仓库中。然后，你可以设置访问权限，只有你允许的用户才能访问该仓库并安装你的包。你可以使用像Sinopia、Verdaccio等这样的开源工具来搭建私有npm仓库。\n\n1、3都属于人民币玩家的方式，这俩方式就不说了\n\n## 使用npm访问令牌\n\n第二种方法是使用npm访问令牌。你可以创建一个令牌，授予仅限于你允许的用户，并将该令牌用于安装你的npm包。以下是实现此目的的详细步骤：\n\n1. 首先，你需要在npm上注册一个账户。如果你还没有注册，请在https://www.npmjs.com/上注册一个账户。\n2. 接下来，你需要创建一个npm访问令牌。你可以使用以下命令在终端中创建一个访问令牌：\n\n```\nnpm token create --read-write <registry-url>\n```\n\n`<registry-url>`是指你要发布npm包的npm仓库的地址。例如，如果你要发布到npm官方仓库，那么这个值应该是https://registry.npmjs.org/。如果你要发布到私有仓库，那么这个值应该是你的私有仓库地址。\n\n1. 执行以上命令后，npm将提示你输入你的npm账户的用户名和密码。输入正确的用户名和密码后，npm将生成一个新的访问令牌，并将其输出到终端中。\n2. 将新生成的访问令牌添加到你的`.npmrc`文件中。`.npmrc`文件通常位于你的用户目录下。在`.npmrc`文件中添加以下内容：\n\n```\n//<registry-url>/:_authToken=<access-token>\n```\n\n`<registry-url>`是你要发布npm包的npm仓库地址，`<access-token>`是你新生成的访问令牌。\n\n1. 将你的npm包发布到npm仓库。你可以使用以下命令将你的包发布到npm仓库中：\n\n```\nnpm publish --registry=<registry-url>\n```\n\n`<registry-url>`是你要发布的npm仓库地址，可以是npm官方仓库或者私有仓库。\n\n1. 现在，只有持有你的访问令牌的用户才能访问和安装你的npm包。你可以将访问令牌授予你允许的用户，或者在需要时撤销该令牌的访问权限。\n\n请注意，访问令牌是一个非常重要的凭证，因此你需要妥善保管它，不要将它泄露给未经授权的用户。如果你怀疑你的令牌已经被泄露，那么你应该立即撤销该令牌，并生成一个新的访问令牌。","source":"_posts/npm发布.md","raw":"---\ntitle: 【npm】npm发布步骤\ndate: 2023-03-28 11:36:08\ntags: npm\ncategories: 程序员的自我修养\n---\n\n## npm包发布\n发布一个npm包通常需要以下步骤：\n\n1. 确保你已经安装了`Node.js`和`npm`，以及在`npm`上注册了一个账户。如果没有，请先在[https://www.npmjs.com/](https://www.npmjs.com/)上注册一个账户。\n2. 在终端中创建一个新的项目文件夹，并进入该文件夹。执行以下命令来初始化npm包：\n\n```\nnpm init\n```\n\n3. 在你的项目文件夹中编写代码，并确保在`package.json`文件中指定了正确的入口文件路径和依赖项。\n4. 编写`README`文件和许可证文件，并确保它们在项目文件夹中。\n5. 在终端中运行以下命令来登录npm账户:\n\n```\nnpm login\n```\n\n6. 输入你的用户名、密码和电子邮件地址。如果一切顺利，你将登录成功（若无法登录，请看看“可能遇到的问题”部分）。\n7. 在终端中运行以下命令，将包发布到npm上:\n\n```\nnpm publish\n```\n\n这将把你的npm包上传到npm仓库。你的包将被分配一个唯一的版本号，并且其他人可以通过npm来安装你的包。如果你需要更新你的包，只需更新代码，修改版本号并再次运行`npm publish`命令即可。\n\n请注意，当你发布npm包时，你的代码将被公开发布到npm上。因此，你应该小心保护敏感信息，并确保遵循最佳实践，以确保代码的安全性和稳定性。\n\n## npm包删除\n\n如果你想删除自己发布的npm包，可以在终端中使用以下命令：\n\n```\nnpm unpublish <package-name> --force\n```\n\n**请注意，<span style=\"background-color:#78a355\t\">删除一个包是不可逆转的</span>，因此请确保你真正需要删除它，以避免造成不必要的损失。**\n\n#### 其他注意事项：\n1. 删除已发布的npm包会破坏其他人对你的代码的依赖，因此在删除之前，请确保没有人正在使用你的代码，或者提供足够的警告时间，以便其他人可以切换到其他代码。\n2. 如果你已经发布了<span style=\"background-color:#78a355\t\">多个版本</span>的npm包，则只能删除<span style=\"background-color:#78a355\t\">最新的版本</span>，<span style=\"background-color:#78a355\t\">不能删除旧版本</span>。\n3. 删除npm包需要管理员权限，因此你需要确保你的账户拥有管理员权限，才能删除你发布的包。\n\n## 可能遇到的问题\n\n如果你执行 `npm login` 命令时出现错误，可能是以下几种情况之一：\n\n1. 检查你的npm账户是否已注册。如果你还没有npm账户，你需要先在npm的官方网站上注册一个账户。\n\n2. 检查你的网络连接是否正常。如果你的网络连接不稳定或者有问题，可能导致登录失败。\n\n3. 检查你的npm注册表是否正确。如果你要登录的是npm的私有注册表，确保你已经订阅了npm付费计划，以便可以创建一个私有注册表，并通过该私有注册表来发布私有包。\n\n4. 检查你的npm配置是否正确。你可以在命令行中运行以下命令，查看npm的配置信息：\n\n   ```\n   npm config list\n   ```\n\n   确保你的 `registry` 配置是正确的。如果你要登录的是npm的私有注册表，确保你的 `registry` 配置是指向该私有注册表的。\n\n如果你已经确认了以上的问题，并且你的 `npm login` 命令仍然失败，你可以尝试以下几种方法：\n\n1. 清除npm的缓存。你可以使用以下命令来清除npm的缓存：\n\n   ```\n   npm cache clean --force\n   ```\n\n   清除缓存后，尝试再次登录。\n\n2. 检查npm的版本。确保你正在使用的是最新版本的npm。\n\n3. 如果你使用的是代理服务器，你可以尝试在命令行中设置代理服务器。例如：\n\n   ```\n   npm config set proxy http://yourproxy:yourport\n   npm config set https-proxy http://yourproxy:yourport\n   ```\n\n   将 `yourproxy` 替换为你的代理服务器地址，将 `yourport` 替换为你的代理服务器端口号。\n\n如果你仍然无法成功登录，你可以查看npm的官方文档或者向npm的技术支持团队寻求帮助。\n\n#### 关于第四点，确认是否使用私有注册表的补充\n\n**因为很多人使用的是<span style=\"background-color:#78a355\t;\">国内淘宝镜像</span>以至于`npm login`不成功，此时只需要改为<span style=\"background-color:#78a355\t\">官方镜像</span>即可。**\n\n#### 具体方法如下：\n\n要确认是否使用私有注册表，你可以检查你的npm配置文件。默认情况下，npm会将你的包发布到npm官方的公共注册表，而不是私有注册表。如果你要使用私有注册表，你需要订阅npm的付费计划，并创建一个私有注册表。在登录时，你需要使用该私有注册表的URL。\n\n要检查你的npm配置是否指向私有注册表，可以运行以下命令：\n\n```\nnpm config get registry\n```\n\n如果输出的结果是私有注册表的URL，那么你正在使用私有注册表。如果输出的结果是默认的公共注册表URL（`https://registry.npmjs.org/`），那么你不是在使用私有注册表。\n\n如果你确定你要使用私有注册表，但无法成功登录，那么可能是因为你的npm配置不正确。确保你已经在npm上订阅了付费计划，并创建了一个私有注册表。在登录时，你需要使用该私有注册表的URL，并提供正确的访问凭据。如果你仍然无法成功登录，你可以联系npm的技术支持团队，寻求帮助。\n\n#### 如何更改？\n\n你可以通过 `npm config set` 命令来更改npm的配置。例如，要将npm配置的注册表更改为私有注册表的URL，可以使用以下命令：\n\n```\nnpm config set registry <your-private-registry-url>\n```\n\n其中 `<your-private-registry-url>` 是你的私有注册表的URL。你需要将其替换为你的实际URL。\n\n如果你想将npm配置恢复为默认设置，可以使用以下命令：\n\n```\nnpm config delete registry\n```\n\n这将删除当前配置的 `registry` 选项，使npm使用默认的公共注册表。\n\n## 发布一个私有的npm包\n\n1. 使用npm收费工具\n\n如果你希望仅向付费用户提供访问权限，你可以使用npm的付费工具。你可以在npm网站上注册一个付费账户，创建一个收费组织，然后将你的包添加到该组织中。然后，你可以设置访问权限，仅允许那些已经付费的用户使用你的包。\n\n2. 使用npm访问令牌\n\n另一种方法是使用npm访问令牌。你可以创建一个令牌，并将其授予仅限于你允许的用户。然后，你可以将该令牌用于安装你的包。只有持有该令牌的用户才能使用你的包。你可以在npm网站上创建一个访问令牌，并将其添加到你的项目中的`.npmrc`文件中。请确保令牌不被泄露，以避免未经授权的用户使用你的代码。\n\n3. 使用私有npm仓库（类似[淘宝镜像源](**https://registry.npmmirror.com**)的服务器，但其实淘宝镜像源是公开的）\n\n最后，你可以使用私有npm仓库。你可以在你自己的服务器上搭建一个npm仓库，并将你的包上传到该仓库中。然后，你可以设置访问权限，只有你允许的用户才能访问该仓库并安装你的包。你可以使用像Sinopia、Verdaccio等这样的开源工具来搭建私有npm仓库。\n\n1、3都属于人民币玩家的方式，这俩方式就不说了\n\n## 使用npm访问令牌\n\n第二种方法是使用npm访问令牌。你可以创建一个令牌，授予仅限于你允许的用户，并将该令牌用于安装你的npm包。以下是实现此目的的详细步骤：\n\n1. 首先，你需要在npm上注册一个账户。如果你还没有注册，请在https://www.npmjs.com/上注册一个账户。\n2. 接下来，你需要创建一个npm访问令牌。你可以使用以下命令在终端中创建一个访问令牌：\n\n```\nnpm token create --read-write <registry-url>\n```\n\n`<registry-url>`是指你要发布npm包的npm仓库的地址。例如，如果你要发布到npm官方仓库，那么这个值应该是https://registry.npmjs.org/。如果你要发布到私有仓库，那么这个值应该是你的私有仓库地址。\n\n1. 执行以上命令后，npm将提示你输入你的npm账户的用户名和密码。输入正确的用户名和密码后，npm将生成一个新的访问令牌，并将其输出到终端中。\n2. 将新生成的访问令牌添加到你的`.npmrc`文件中。`.npmrc`文件通常位于你的用户目录下。在`.npmrc`文件中添加以下内容：\n\n```\n//<registry-url>/:_authToken=<access-token>\n```\n\n`<registry-url>`是你要发布npm包的npm仓库地址，`<access-token>`是你新生成的访问令牌。\n\n1. 将你的npm包发布到npm仓库。你可以使用以下命令将你的包发布到npm仓库中：\n\n```\nnpm publish --registry=<registry-url>\n```\n\n`<registry-url>`是你要发布的npm仓库地址，可以是npm官方仓库或者私有仓库。\n\n1. 现在，只有持有你的访问令牌的用户才能访问和安装你的npm包。你可以将访问令牌授予你允许的用户，或者在需要时撤销该令牌的访问权限。\n\n请注意，访问令牌是一个非常重要的凭证，因此你需要妥善保管它，不要将它泄露给未经授权的用户。如果你怀疑你的令牌已经被泄露，那么你应该立即撤销该令牌，并生成一个新的访问令牌。","slug":"npm发布","published":1,"updated":"2023-03-31T08:05:41.003Z","_id":"clfrttyfn00002rwi27oe6xl6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"npm包发布\"><a href=\"#npm包发布\" class=\"headerlink\" title=\"npm包发布\"></a>npm包发布</h2><p>发布一个npm包通常需要以下步骤：</p>\n<ol>\n<li>确保你已经安装了<code>Node.js</code>和<code>npm</code>，以及在<code>npm</code>上注册了一个账户。如果没有，请先在<a href=\"https://www.npmjs.com/\">https://www.npmjs.com/</a>上注册一个账户。</li>\n<li>在终端中创建一个新的项目文件夹，并进入该文件夹。执行以下命令来初始化npm包：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在你的项目文件夹中编写代码，并确保在<code>package.json</code>文件中指定了正确的入口文件路径和依赖项。</li>\n<li>编写<code>README</code>文件和许可证文件，并确保它们在项目文件夹中。</li>\n<li>在终端中运行以下命令来登录npm账户:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>输入你的用户名、密码和电子邮件地址。如果一切顺利，你将登录成功（若无法登录，请看看“可能遇到的问题”部分）。</li>\n<li>在终端中运行以下命令，将包发布到npm上:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<p>这将把你的npm包上传到npm仓库。你的包将被分配一个唯一的版本号，并且其他人可以通过npm来安装你的包。如果你需要更新你的包，只需更新代码，修改版本号并再次运行<code>npm publish</code>命令即可。</p>\n<p>请注意，当你发布npm包时，你的代码将被公开发布到npm上。因此，你应该小心保护敏感信息，并确保遵循最佳实践，以确保代码的安全性和稳定性。</p>\n<h2 id=\"npm包删除\"><a href=\"#npm包删除\" class=\"headerlink\" title=\"npm包删除\"></a>npm包删除</h2><p>如果你想删除自己发布的npm包，可以在终端中使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm unpublish &lt;package-name&gt; --force</span><br></pre></td></tr></table></figure>\n\n<p><strong>请注意，<span style=\"background-color:#78a355    \">删除一个包是不可逆转的</span>，因此请确保你真正需要删除它，以避免造成不必要的损失。</strong></p>\n<h4 id=\"其他注意事项：\"><a href=\"#其他注意事项：\" class=\"headerlink\" title=\"其他注意事项：\"></a>其他注意事项：</h4><ol>\n<li>删除已发布的npm包会破坏其他人对你的代码的依赖，因此在删除之前，请确保没有人正在使用你的代码，或者提供足够的警告时间，以便其他人可以切换到其他代码。</li>\n<li>如果你已经发布了<span style=\"background-color:#78a355    \">多个版本</span>的npm包，则只能删除<span style=\"background-color:#78a355    \">最新的版本</span>，<span style=\"background-color:#78a355    \">不能删除旧版本</span>。</li>\n<li>删除npm包需要管理员权限，因此你需要确保你的账户拥有管理员权限，才能删除你发布的包。</li>\n</ol>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><p>如果你执行 <code>npm login</code> 命令时出现错误，可能是以下几种情况之一：</p>\n<ol>\n<li><p>检查你的npm账户是否已注册。如果你还没有npm账户，你需要先在npm的官方网站上注册一个账户。</p>\n</li>\n<li><p>检查你的网络连接是否正常。如果你的网络连接不稳定或者有问题，可能导致登录失败。</p>\n</li>\n<li><p>检查你的npm注册表是否正确。如果你要登录的是npm的私有注册表，确保你已经订阅了npm付费计划，以便可以创建一个私有注册表，并通过该私有注册表来发布私有包。</p>\n</li>\n<li><p>检查你的npm配置是否正确。你可以在命令行中运行以下命令，查看npm的配置信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure>\n\n<p>确保你的 <code>registry</code> 配置是正确的。如果你要登录的是npm的私有注册表，确保你的 <code>registry</code> 配置是指向该私有注册表的。</p>\n</li>\n</ol>\n<p>如果你已经确认了以上的问题，并且你的 <code>npm login</code> 命令仍然失败，你可以尝试以下几种方法：</p>\n<ol>\n<li><p>清除npm的缓存。你可以使用以下命令来清除npm的缓存：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存后，尝试再次登录。</p>\n</li>\n<li><p>检查npm的版本。确保你正在使用的是最新版本的npm。</p>\n</li>\n<li><p>如果你使用的是代理服务器，你可以尝试在命令行中设置代理服务器。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set proxy http://yourproxy:yourport</span><br><span class=\"line\">npm config set https-proxy http://yourproxy:yourport</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>yourproxy</code> 替换为你的代理服务器地址，将 <code>yourport</code> 替换为你的代理服务器端口号。</p>\n</li>\n</ol>\n<p>如果你仍然无法成功登录，你可以查看npm的官方文档或者向npm的技术支持团队寻求帮助。</p>\n<h4 id=\"关于第四点，确认是否使用私有注册表的补充\"><a href=\"#关于第四点，确认是否使用私有注册表的补充\" class=\"headerlink\" title=\"关于第四点，确认是否使用私有注册表的补充\"></a>关于第四点，确认是否使用私有注册表的补充</h4><p><strong>因为很多人使用的是<span style=\"background-color:#78a355    ;\">国内淘宝镜像</span>以至于<code>npm login</code>不成功，此时只需要改为<span style=\"background-color:#78a355    \">官方镜像</span>即可。</strong></p>\n<h4 id=\"具体方法如下：\"><a href=\"#具体方法如下：\" class=\"headerlink\" title=\"具体方法如下：\"></a>具体方法如下：</h4><p>要确认是否使用私有注册表，你可以检查你的npm配置文件。默认情况下，npm会将你的包发布到npm官方的公共注册表，而不是私有注册表。如果你要使用私有注册表，你需要订阅npm的付费计划，并创建一个私有注册表。在登录时，你需要使用该私有注册表的URL。</p>\n<p>要检查你的npm配置是否指向私有注册表，可以运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n\n<p>如果输出的结果是私有注册表的URL，那么你正在使用私有注册表。如果输出的结果是默认的公共注册表URL（<code>https://registry.npmjs.org/</code>），那么你不是在使用私有注册表。</p>\n<p>如果你确定你要使用私有注册表，但无法成功登录，那么可能是因为你的npm配置不正确。确保你已经在npm上订阅了付费计划，并创建了一个私有注册表。在登录时，你需要使用该私有注册表的URL，并提供正确的访问凭据。如果你仍然无法成功登录，你可以联系npm的技术支持团队，寻求帮助。</p>\n<h4 id=\"如何更改？\"><a href=\"#如何更改？\" class=\"headerlink\" title=\"如何更改？\"></a>如何更改？</h4><p>你可以通过 <code>npm config set</code> 命令来更改npm的配置。例如，要将npm配置的注册表更改为私有注册表的URL，可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry &lt;your-private-registry-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>&lt;your-private-registry-url&gt;</code> 是你的私有注册表的URL。你需要将其替换为你的实际URL。</p>\n<p>如果你想将npm配置恢复为默认设置，可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete registry</span><br></pre></td></tr></table></figure>\n\n<p>这将删除当前配置的 <code>registry</code> 选项，使npm使用默认的公共注册表。</p>\n<h2 id=\"发布一个私有的npm包\"><a href=\"#发布一个私有的npm包\" class=\"headerlink\" title=\"发布一个私有的npm包\"></a>发布一个私有的npm包</h2><ol>\n<li>使用npm收费工具</li>\n</ol>\n<p>如果你希望仅向付费用户提供访问权限，你可以使用npm的付费工具。你可以在npm网站上注册一个付费账户，创建一个收费组织，然后将你的包添加到该组织中。然后，你可以设置访问权限，仅允许那些已经付费的用户使用你的包。</p>\n<ol start=\"2\">\n<li>使用npm访问令牌</li>\n</ol>\n<p>另一种方法是使用npm访问令牌。你可以创建一个令牌，并将其授予仅限于你允许的用户。然后，你可以将该令牌用于安装你的包。只有持有该令牌的用户才能使用你的包。你可以在npm网站上创建一个访问令牌，并将其添加到你的项目中的<code>.npmrc</code>文件中。请确保令牌不被泄露，以避免未经授权的用户使用你的代码。</p>\n<ol start=\"3\">\n<li>使用私有npm仓库（类似<a href=\"**https://registry.npmmirror.com**\">淘宝镜像源</a>的服务器，但其实淘宝镜像源是公开的）</li>\n</ol>\n<p>最后，你可以使用私有npm仓库。你可以在你自己的服务器上搭建一个npm仓库，并将你的包上传到该仓库中。然后，你可以设置访问权限，只有你允许的用户才能访问该仓库并安装你的包。你可以使用像Sinopia、Verdaccio等这样的开源工具来搭建私有npm仓库。</p>\n<p>1、3都属于人民币玩家的方式，这俩方式就不说了</p>\n<h2 id=\"使用npm访问令牌\"><a href=\"#使用npm访问令牌\" class=\"headerlink\" title=\"使用npm访问令牌\"></a>使用npm访问令牌</h2><p>第二种方法是使用npm访问令牌。你可以创建一个令牌，授予仅限于你允许的用户，并将该令牌用于安装你的npm包。以下是实现此目的的详细步骤：</p>\n<ol>\n<li>首先，你需要在npm上注册一个账户。如果你还没有注册，请在<a href=\"https://www.npmjs.com/%E4%B8%8A%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E6%88%B7%E3%80%82\">https://www.npmjs.com/上注册一个账户。</a></li>\n<li>接下来，你需要创建一个npm访问令牌。你可以使用以下命令在终端中创建一个访问令牌：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm token create --read-write &lt;registry-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;registry-url&gt;</code>是指你要发布npm包的npm仓库的地址。例如，如果你要发布到npm官方仓库，那么这个值应该是<a href=\"https://registry.npmjs.org/%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E8%A6%81%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%EF%BC%8C%E9%82%A3%E4%B9%88%E8%BF%99%E4%B8%AA%E5%80%BC%E5%BA%94%E8%AF%A5%E6%98%AF%E4%BD%A0%E7%9A%84%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%E3%80%82\">https://registry.npmjs.org/。如果你要发布到私有仓库，那么这个值应该是你的私有仓库地址。</a></p>\n<ol>\n<li>执行以上命令后，npm将提示你输入你的npm账户的用户名和密码。输入正确的用户名和密码后，npm将生成一个新的访问令牌，并将其输出到终端中。</li>\n<li>将新生成的访问令牌添加到你的<code>.npmrc</code>文件中。<code>.npmrc</code>文件通常位于你的用户目录下。在<code>.npmrc</code>文件中添加以下内容：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//&lt;registry-url&gt;/:_authToken=&lt;access-token&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;registry-url&gt;</code>是你要发布npm包的npm仓库地址，<code>&lt;access-token&gt;</code>是你新生成的访问令牌。</p>\n<ol>\n<li>将你的npm包发布到npm仓库。你可以使用以下命令将你的包发布到npm仓库中：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish --registry=&lt;registry-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;registry-url&gt;</code>是你要发布的npm仓库地址，可以是npm官方仓库或者私有仓库。</p>\n<ol>\n<li>现在，只有持有你的访问令牌的用户才能访问和安装你的npm包。你可以将访问令牌授予你允许的用户，或者在需要时撤销该令牌的访问权限。</li>\n</ol>\n<p>请注意，访问令牌是一个非常重要的凭证，因此你需要妥善保管它，不要将它泄露给未经授权的用户。如果你怀疑你的令牌已经被泄露，那么你应该立即撤销该令牌，并生成一个新的访问令牌。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"npm包发布\"><a href=\"#npm包发布\" class=\"headerlink\" title=\"npm包发布\"></a>npm包发布</h2><p>发布一个npm包通常需要以下步骤：</p>\n<ol>\n<li>确保你已经安装了<code>Node.js</code>和<code>npm</code>，以及在<code>npm</code>上注册了一个账户。如果没有，请先在<a href=\"https://www.npmjs.com/\">https://www.npmjs.com/</a>上注册一个账户。</li>\n<li>在终端中创建一个新的项目文件夹，并进入该文件夹。执行以下命令来初始化npm包：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在你的项目文件夹中编写代码，并确保在<code>package.json</code>文件中指定了正确的入口文件路径和依赖项。</li>\n<li>编写<code>README</code>文件和许可证文件，并确保它们在项目文件夹中。</li>\n<li>在终端中运行以下命令来登录npm账户:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>输入你的用户名、密码和电子邮件地址。如果一切顺利，你将登录成功（若无法登录，请看看“可能遇到的问题”部分）。</li>\n<li>在终端中运行以下命令，将包发布到npm上:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<p>这将把你的npm包上传到npm仓库。你的包将被分配一个唯一的版本号，并且其他人可以通过npm来安装你的包。如果你需要更新你的包，只需更新代码，修改版本号并再次运行<code>npm publish</code>命令即可。</p>\n<p>请注意，当你发布npm包时，你的代码将被公开发布到npm上。因此，你应该小心保护敏感信息，并确保遵循最佳实践，以确保代码的安全性和稳定性。</p>\n<h2 id=\"npm包删除\"><a href=\"#npm包删除\" class=\"headerlink\" title=\"npm包删除\"></a>npm包删除</h2><p>如果你想删除自己发布的npm包，可以在终端中使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm unpublish &lt;package-name&gt; --force</span><br></pre></td></tr></table></figure>\n\n<p><strong>请注意，<span style=\"background-color:#78a355    \">删除一个包是不可逆转的</span>，因此请确保你真正需要删除它，以避免造成不必要的损失。</strong></p>\n<h4 id=\"其他注意事项：\"><a href=\"#其他注意事项：\" class=\"headerlink\" title=\"其他注意事项：\"></a>其他注意事项：</h4><ol>\n<li>删除已发布的npm包会破坏其他人对你的代码的依赖，因此在删除之前，请确保没有人正在使用你的代码，或者提供足够的警告时间，以便其他人可以切换到其他代码。</li>\n<li>如果你已经发布了<span style=\"background-color:#78a355    \">多个版本</span>的npm包，则只能删除<span style=\"background-color:#78a355    \">最新的版本</span>，<span style=\"background-color:#78a355    \">不能删除旧版本</span>。</li>\n<li>删除npm包需要管理员权限，因此你需要确保你的账户拥有管理员权限，才能删除你发布的包。</li>\n</ol>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><p>如果你执行 <code>npm login</code> 命令时出现错误，可能是以下几种情况之一：</p>\n<ol>\n<li><p>检查你的npm账户是否已注册。如果你还没有npm账户，你需要先在npm的官方网站上注册一个账户。</p>\n</li>\n<li><p>检查你的网络连接是否正常。如果你的网络连接不稳定或者有问题，可能导致登录失败。</p>\n</li>\n<li><p>检查你的npm注册表是否正确。如果你要登录的是npm的私有注册表，确保你已经订阅了npm付费计划，以便可以创建一个私有注册表，并通过该私有注册表来发布私有包。</p>\n</li>\n<li><p>检查你的npm配置是否正确。你可以在命令行中运行以下命令，查看npm的配置信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure>\n\n<p>确保你的 <code>registry</code> 配置是正确的。如果你要登录的是npm的私有注册表，确保你的 <code>registry</code> 配置是指向该私有注册表的。</p>\n</li>\n</ol>\n<p>如果你已经确认了以上的问题，并且你的 <code>npm login</code> 命令仍然失败，你可以尝试以下几种方法：</p>\n<ol>\n<li><p>清除npm的缓存。你可以使用以下命令来清除npm的缓存：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存后，尝试再次登录。</p>\n</li>\n<li><p>检查npm的版本。确保你正在使用的是最新版本的npm。</p>\n</li>\n<li><p>如果你使用的是代理服务器，你可以尝试在命令行中设置代理服务器。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set proxy http://yourproxy:yourport</span><br><span class=\"line\">npm config set https-proxy http://yourproxy:yourport</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>yourproxy</code> 替换为你的代理服务器地址，将 <code>yourport</code> 替换为你的代理服务器端口号。</p>\n</li>\n</ol>\n<p>如果你仍然无法成功登录，你可以查看npm的官方文档或者向npm的技术支持团队寻求帮助。</p>\n<h4 id=\"关于第四点，确认是否使用私有注册表的补充\"><a href=\"#关于第四点，确认是否使用私有注册表的补充\" class=\"headerlink\" title=\"关于第四点，确认是否使用私有注册表的补充\"></a>关于第四点，确认是否使用私有注册表的补充</h4><p><strong>因为很多人使用的是<span style=\"background-color:#78a355    ;\">国内淘宝镜像</span>以至于<code>npm login</code>不成功，此时只需要改为<span style=\"background-color:#78a355    \">官方镜像</span>即可。</strong></p>\n<h4 id=\"具体方法如下：\"><a href=\"#具体方法如下：\" class=\"headerlink\" title=\"具体方法如下：\"></a>具体方法如下：</h4><p>要确认是否使用私有注册表，你可以检查你的npm配置文件。默认情况下，npm会将你的包发布到npm官方的公共注册表，而不是私有注册表。如果你要使用私有注册表，你需要订阅npm的付费计划，并创建一个私有注册表。在登录时，你需要使用该私有注册表的URL。</p>\n<p>要检查你的npm配置是否指向私有注册表，可以运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n\n<p>如果输出的结果是私有注册表的URL，那么你正在使用私有注册表。如果输出的结果是默认的公共注册表URL（<code>https://registry.npmjs.org/</code>），那么你不是在使用私有注册表。</p>\n<p>如果你确定你要使用私有注册表，但无法成功登录，那么可能是因为你的npm配置不正确。确保你已经在npm上订阅了付费计划，并创建了一个私有注册表。在登录时，你需要使用该私有注册表的URL，并提供正确的访问凭据。如果你仍然无法成功登录，你可以联系npm的技术支持团队，寻求帮助。</p>\n<h4 id=\"如何更改？\"><a href=\"#如何更改？\" class=\"headerlink\" title=\"如何更改？\"></a>如何更改？</h4><p>你可以通过 <code>npm config set</code> 命令来更改npm的配置。例如，要将npm配置的注册表更改为私有注册表的URL，可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry &lt;your-private-registry-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>&lt;your-private-registry-url&gt;</code> 是你的私有注册表的URL。你需要将其替换为你的实际URL。</p>\n<p>如果你想将npm配置恢复为默认设置，可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete registry</span><br></pre></td></tr></table></figure>\n\n<p>这将删除当前配置的 <code>registry</code> 选项，使npm使用默认的公共注册表。</p>\n<h2 id=\"发布一个私有的npm包\"><a href=\"#发布一个私有的npm包\" class=\"headerlink\" title=\"发布一个私有的npm包\"></a>发布一个私有的npm包</h2><ol>\n<li>使用npm收费工具</li>\n</ol>\n<p>如果你希望仅向付费用户提供访问权限，你可以使用npm的付费工具。你可以在npm网站上注册一个付费账户，创建一个收费组织，然后将你的包添加到该组织中。然后，你可以设置访问权限，仅允许那些已经付费的用户使用你的包。</p>\n<ol start=\"2\">\n<li>使用npm访问令牌</li>\n</ol>\n<p>另一种方法是使用npm访问令牌。你可以创建一个令牌，并将其授予仅限于你允许的用户。然后，你可以将该令牌用于安装你的包。只有持有该令牌的用户才能使用你的包。你可以在npm网站上创建一个访问令牌，并将其添加到你的项目中的<code>.npmrc</code>文件中。请确保令牌不被泄露，以避免未经授权的用户使用你的代码。</p>\n<ol start=\"3\">\n<li>使用私有npm仓库（类似<a href=\"**https://registry.npmmirror.com**\">淘宝镜像源</a>的服务器，但其实淘宝镜像源是公开的）</li>\n</ol>\n<p>最后，你可以使用私有npm仓库。你可以在你自己的服务器上搭建一个npm仓库，并将你的包上传到该仓库中。然后，你可以设置访问权限，只有你允许的用户才能访问该仓库并安装你的包。你可以使用像Sinopia、Verdaccio等这样的开源工具来搭建私有npm仓库。</p>\n<p>1、3都属于人民币玩家的方式，这俩方式就不说了</p>\n<h2 id=\"使用npm访问令牌\"><a href=\"#使用npm访问令牌\" class=\"headerlink\" title=\"使用npm访问令牌\"></a>使用npm访问令牌</h2><p>第二种方法是使用npm访问令牌。你可以创建一个令牌，授予仅限于你允许的用户，并将该令牌用于安装你的npm包。以下是实现此目的的详细步骤：</p>\n<ol>\n<li>首先，你需要在npm上注册一个账户。如果你还没有注册，请在<a href=\"https://www.npmjs.com/%E4%B8%8A%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E6%88%B7%E3%80%82\">https://www.npmjs.com/上注册一个账户。</a></li>\n<li>接下来，你需要创建一个npm访问令牌。你可以使用以下命令在终端中创建一个访问令牌：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm token create --read-write &lt;registry-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;registry-url&gt;</code>是指你要发布npm包的npm仓库的地址。例如，如果你要发布到npm官方仓库，那么这个值应该是<a href=\"https://registry.npmjs.org/%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E8%A6%81%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%EF%BC%8C%E9%82%A3%E4%B9%88%E8%BF%99%E4%B8%AA%E5%80%BC%E5%BA%94%E8%AF%A5%E6%98%AF%E4%BD%A0%E7%9A%84%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%E3%80%82\">https://registry.npmjs.org/。如果你要发布到私有仓库，那么这个值应该是你的私有仓库地址。</a></p>\n<ol>\n<li>执行以上命令后，npm将提示你输入你的npm账户的用户名和密码。输入正确的用户名和密码后，npm将生成一个新的访问令牌，并将其输出到终端中。</li>\n<li>将新生成的访问令牌添加到你的<code>.npmrc</code>文件中。<code>.npmrc</code>文件通常位于你的用户目录下。在<code>.npmrc</code>文件中添加以下内容：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//&lt;registry-url&gt;/:_authToken=&lt;access-token&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;registry-url&gt;</code>是你要发布npm包的npm仓库地址，<code>&lt;access-token&gt;</code>是你新生成的访问令牌。</p>\n<ol>\n<li>将你的npm包发布到npm仓库。你可以使用以下命令将你的包发布到npm仓库中：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish --registry=&lt;registry-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;registry-url&gt;</code>是你要发布的npm仓库地址，可以是npm官方仓库或者私有仓库。</p>\n<ol>\n<li>现在，只有持有你的访问令牌的用户才能访问和安装你的npm包。你可以将访问令牌授予你允许的用户，或者在需要时撤销该令牌的访问权限。</li>\n</ol>\n<p>请注意，访问令牌是一个非常重要的凭证，因此你需要妥善保管它，不要将它泄露给未经授权的用户。如果你怀疑你的令牌已经被泄露，那么你应该立即撤销该令牌，并生成一个新的访问令牌。</p>\n"},{"title":"组件库相关","date":"2023-03-30T11:01:18.000Z","_content":"## 一、思维整理\n移动端的前端组件库可以包括许多组件，这里列出一些常见的组件：\n按钮组件：用于触发操作或提交表单。\n图标组件：用于显示图标。\n输入框组件：包括文本输入框、数字输入框等。\n列表组件：用于展示列表信息。\n滚动组件：用于滚动显示大量内容。\n轮播组件：用于轮播广告或图片。\n弹窗组件：用于弹出提示或确认框。\n标签组件：用于分类或标记信息。\n搜索组件：用于搜索信息。\n日期时间组件：用于选择日期时间。\n下拉选择组件：用于选择下拉菜单中的选项。\n滑块组件：用于选择范围或值。\n表单组件：包括表单验证、提交等。\n树形组件：用于显示层级结构。\n下拉刷新：下拉时可以重新加载数据。\n上拉加载更多：当data很多时分页适用。\n头像+头像框组件：有些活动中会有不规则头像框，或者vip的特效等。\n搜索文本框：带搜索按钮的文本款组件等。\n再比如性能优化方面，防抖、节流等\n\njsbridge相关：调用相机、调用相册、分享等\n\n组件库搭建：\n展示方面：用react/vue + bootstrap4 做框架，codesandbox做代码演示，还有复制链接及效果，类似antd组件的网站。\n然后使用npm包安装，引入使用。\n\n比如说，我现在想搭一个npm包，里面包括按钮组件、搜索框组件等。\n这里我就只写两个按钮组件、搜索框组件\n\n## 二、npm包的开发示例\n#### 1. 安装依赖\n```css\nnpm install webpack webpack-cli vue-loader vue-template-compiler css-loader style-loader --save-dev\n```\n#### 2. 在项目根目录下创建一个 webpack.config.js 文件，配置如下：\n\n在项目根目录下创建一个 webpack.config.js 文件，配置如下：\n\n```js\nconst path = require('path');\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\n\nmodule.exports = {\n  mode: 'production', // 打包模式\n  entry: './src/index.js', // 入口文件\n  output: { // 输出配置\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-button.js',\n    library: 'MyButton',\n    libraryTarget: 'umd'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader'\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          'css-loader'\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new VueLoaderPlugin()\n  ]\n};\n```\n其中，`entry` 字段指定了入口文件，`output` 字段指定了输出配置，这里生成了一个名为 `my-button.js` 的文件，`library` 指定了模块名称，`libraryTarget` 指定了模块的导出方式。\n#### 3. 在 `src` 目录下创建 `index.js` 文件和 `Button.vue` 文件，分别编写代码如下：\n```js\nimport Vue from 'vue';\nimport Button from './Button.vue';\n\nconst MyButton = {\n  install: function(Vue) {\n    Vue.component('MyButton', Button);\n  }\n};\n\nVue.use(MyButton);\n\nexport default MyButton;\n```\nButton.vue：\n\n```html\n<template>\n  <button class=\"my-button\" :style=\"{height: height, width: width}\"><slot></slot></button>\n</template>\n\n<script>\nexport default {\n  name: 'MyButton',\n  props: {\n    height: {\n      type: String,\n      default: '60px'\n    },\n    width: {\n      type: String,\n      default: '80%'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.my-button {\n  background-color: #f0ff00;\n  border: none;\n  color: white;\n  font-size: 16px;\n}\n</style>\n\n```\n#### 4. 在命令行中运行以下命令打包：\n```\nnpx webpack\n```\n### 5. 引用\n将打包后的文件（即 my-button.js）上传到 npm 上，然后在需要使用该组件库的项目中，通过以下命令安装该组件库：\n```js\nnpm install your-package-name\n```\n在项目中使用该组件库，可以像下面这样引入：\n\n```js\nimport Vue from 'vue';\nimport MyButton from 'your-package-name';\n\nVue.use(MyButton);\n```\n之后就可以在Vue 组件中使用 MyButton 组件了，像这样：\n```html\n<template>\n  <div>\n    <my-button>Click Me</my-button>\n  </div>\n```\n\n## 三、在原有组件基础上加入新的搜索文本框组件\n\n思路：先将新的搜索文本框组件写好并打包成一个单独的模块。然后，可以在 my-button 组件中引入新的搜索文本框组件并进行相应的配置和使用。最后，将 my-button 和搜索文本框组件打包成一个组件库并发布到 npm 上。\n\n具体的步骤如下：\n\n#### 1. 编写搜索文本框组件\n具体的编写就不说了，假设已经编辑好，命名为 my-input。\n创建一个webpack.config.js文件，配置打包规则：\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n  mode: 'production', // 设置为生产环境模式\n  entry: './src/index.js', // 入口文件路径\n  output: {\n    path: path.resolve(__dirname, 'dist'), // 输出目录路径\n    filename: 'flow-components.min.js', // 输出文件名称\n    library: 'flowComponents', // 打包生成的库的名称\n    libraryTarget: 'umd', // 打包生成的库的目标环境\n    umdNamedDefine: true // 是否需要命名 UMD 模块\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader'\n      },\n      {\n        test: /\\.css$/,\n        use: ['css-loader', 'vue-style-loader', 'style-loader']\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)$/i,\n        use: [\n          {\n            loader: 'file-loader',\n            options: {\n              name: '[name].[ext]',\n              outputPath: 'images/'\n            }\n          }\n        ]\n      }\n    ]\n  },\n  resolve: {\n    extensions: ['.js', '.vue'] // 支持的文件扩展名\n  }\n};\n\n```\n这里使用了 vue-loader 处理 .vue 单文件组件，使用 css-loader、vue-style-loader 和 style-loader 处理样式文件，使用 file-loader 处理静态资源文件。设置了输出目录路径、输出文件名称、打包生成的库的名称、打包生成的库的目标环境等。\n\n#### 2. 在 src 目录下创建一个 index.js 入口文件，用于导出组件：\n```js\nimport Button from './components/Button.vue';\nimport Input from './components/Input.vue';\n\nconst components = {\n  Button,\n  Input\n};\n\nconst install = function (Vue) {\n  if (install.installed) return;\n  Object.keys(components).forEach((name) => {\n    Vue.component(name, components[name]);\n  });\n};\n\nif (typeof window !== 'undefined' && window.Vue\n```\n#### 3. 引入\n```js\nnpm install your-library-name --save\n```\n在项目中引用组件库中的组件，首先需要在代码中引入组件，比如：\n```\nimport { Button, SearchInput } from 'your-library-name';\n```\n然后在代码中直接使用引入的组件即可：\n```\n<Button>Click me</Button>\n<SearchInput placeholder=\"Search\" />\n```\n\n## 三、搭建boostrap+vue的网页端\n\n待补充","source":"_posts/组件库相关.md","raw":"---\ntitle: 组件库相关\ndate: 2023-03-30 19:01:18\ntags: \n - iv2\ncategories: 程序员的自我修养\n---\n## 一、思维整理\n移动端的前端组件库可以包括许多组件，这里列出一些常见的组件：\n按钮组件：用于触发操作或提交表单。\n图标组件：用于显示图标。\n输入框组件：包括文本输入框、数字输入框等。\n列表组件：用于展示列表信息。\n滚动组件：用于滚动显示大量内容。\n轮播组件：用于轮播广告或图片。\n弹窗组件：用于弹出提示或确认框。\n标签组件：用于分类或标记信息。\n搜索组件：用于搜索信息。\n日期时间组件：用于选择日期时间。\n下拉选择组件：用于选择下拉菜单中的选项。\n滑块组件：用于选择范围或值。\n表单组件：包括表单验证、提交等。\n树形组件：用于显示层级结构。\n下拉刷新：下拉时可以重新加载数据。\n上拉加载更多：当data很多时分页适用。\n头像+头像框组件：有些活动中会有不规则头像框，或者vip的特效等。\n搜索文本框：带搜索按钮的文本款组件等。\n再比如性能优化方面，防抖、节流等\n\njsbridge相关：调用相机、调用相册、分享等\n\n组件库搭建：\n展示方面：用react/vue + bootstrap4 做框架，codesandbox做代码演示，还有复制链接及效果，类似antd组件的网站。\n然后使用npm包安装，引入使用。\n\n比如说，我现在想搭一个npm包，里面包括按钮组件、搜索框组件等。\n这里我就只写两个按钮组件、搜索框组件\n\n## 二、npm包的开发示例\n#### 1. 安装依赖\n```css\nnpm install webpack webpack-cli vue-loader vue-template-compiler css-loader style-loader --save-dev\n```\n#### 2. 在项目根目录下创建一个 webpack.config.js 文件，配置如下：\n\n在项目根目录下创建一个 webpack.config.js 文件，配置如下：\n\n```js\nconst path = require('path');\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\n\nmodule.exports = {\n  mode: 'production', // 打包模式\n  entry: './src/index.js', // 入口文件\n  output: { // 输出配置\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-button.js',\n    library: 'MyButton',\n    libraryTarget: 'umd'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader'\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          'css-loader'\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new VueLoaderPlugin()\n  ]\n};\n```\n其中，`entry` 字段指定了入口文件，`output` 字段指定了输出配置，这里生成了一个名为 `my-button.js` 的文件，`library` 指定了模块名称，`libraryTarget` 指定了模块的导出方式。\n#### 3. 在 `src` 目录下创建 `index.js` 文件和 `Button.vue` 文件，分别编写代码如下：\n```js\nimport Vue from 'vue';\nimport Button from './Button.vue';\n\nconst MyButton = {\n  install: function(Vue) {\n    Vue.component('MyButton', Button);\n  }\n};\n\nVue.use(MyButton);\n\nexport default MyButton;\n```\nButton.vue：\n\n```html\n<template>\n  <button class=\"my-button\" :style=\"{height: height, width: width}\"><slot></slot></button>\n</template>\n\n<script>\nexport default {\n  name: 'MyButton',\n  props: {\n    height: {\n      type: String,\n      default: '60px'\n    },\n    width: {\n      type: String,\n      default: '80%'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.my-button {\n  background-color: #f0ff00;\n  border: none;\n  color: white;\n  font-size: 16px;\n}\n</style>\n\n```\n#### 4. 在命令行中运行以下命令打包：\n```\nnpx webpack\n```\n### 5. 引用\n将打包后的文件（即 my-button.js）上传到 npm 上，然后在需要使用该组件库的项目中，通过以下命令安装该组件库：\n```js\nnpm install your-package-name\n```\n在项目中使用该组件库，可以像下面这样引入：\n\n```js\nimport Vue from 'vue';\nimport MyButton from 'your-package-name';\n\nVue.use(MyButton);\n```\n之后就可以在Vue 组件中使用 MyButton 组件了，像这样：\n```html\n<template>\n  <div>\n    <my-button>Click Me</my-button>\n  </div>\n```\n\n## 三、在原有组件基础上加入新的搜索文本框组件\n\n思路：先将新的搜索文本框组件写好并打包成一个单独的模块。然后，可以在 my-button 组件中引入新的搜索文本框组件并进行相应的配置和使用。最后，将 my-button 和搜索文本框组件打包成一个组件库并发布到 npm 上。\n\n具体的步骤如下：\n\n#### 1. 编写搜索文本框组件\n具体的编写就不说了，假设已经编辑好，命名为 my-input。\n创建一个webpack.config.js文件，配置打包规则：\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n  mode: 'production', // 设置为生产环境模式\n  entry: './src/index.js', // 入口文件路径\n  output: {\n    path: path.resolve(__dirname, 'dist'), // 输出目录路径\n    filename: 'flow-components.min.js', // 输出文件名称\n    library: 'flowComponents', // 打包生成的库的名称\n    libraryTarget: 'umd', // 打包生成的库的目标环境\n    umdNamedDefine: true // 是否需要命名 UMD 模块\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader'\n      },\n      {\n        test: /\\.css$/,\n        use: ['css-loader', 'vue-style-loader', 'style-loader']\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)$/i,\n        use: [\n          {\n            loader: 'file-loader',\n            options: {\n              name: '[name].[ext]',\n              outputPath: 'images/'\n            }\n          }\n        ]\n      }\n    ]\n  },\n  resolve: {\n    extensions: ['.js', '.vue'] // 支持的文件扩展名\n  }\n};\n\n```\n这里使用了 vue-loader 处理 .vue 单文件组件，使用 css-loader、vue-style-loader 和 style-loader 处理样式文件，使用 file-loader 处理静态资源文件。设置了输出目录路径、输出文件名称、打包生成的库的名称、打包生成的库的目标环境等。\n\n#### 2. 在 src 目录下创建一个 index.js 入口文件，用于导出组件：\n```js\nimport Button from './components/Button.vue';\nimport Input from './components/Input.vue';\n\nconst components = {\n  Button,\n  Input\n};\n\nconst install = function (Vue) {\n  if (install.installed) return;\n  Object.keys(components).forEach((name) => {\n    Vue.component(name, components[name]);\n  });\n};\n\nif (typeof window !== 'undefined' && window.Vue\n```\n#### 3. 引入\n```js\nnpm install your-library-name --save\n```\n在项目中引用组件库中的组件，首先需要在代码中引入组件，比如：\n```\nimport { Button, SearchInput } from 'your-library-name';\n```\n然后在代码中直接使用引入的组件即可：\n```\n<Button>Click me</Button>\n<SearchInput placeholder=\"Search\" />\n```\n\n## 三、搭建boostrap+vue的网页端\n\n待补充","slug":"组件库相关","published":1,"updated":"2023-04-25T02:26:25.158Z","_id":"clfv1xb9f0000u1wigrsq7tfo","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、思维整理\"><a href=\"#一、思维整理\" class=\"headerlink\" title=\"一、思维整理\"></a>一、思维整理</h2><p>移动端的前端组件库可以包括许多组件，这里列出一些常见的组件：<br>按钮组件：用于触发操作或提交表单。<br>图标组件：用于显示图标。<br>输入框组件：包括文本输入框、数字输入框等。<br>列表组件：用于展示列表信息。<br>滚动组件：用于滚动显示大量内容。<br>轮播组件：用于轮播广告或图片。<br>弹窗组件：用于弹出提示或确认框。<br>标签组件：用于分类或标记信息。<br>搜索组件：用于搜索信息。<br>日期时间组件：用于选择日期时间。<br>下拉选择组件：用于选择下拉菜单中的选项。<br>滑块组件：用于选择范围或值。<br>表单组件：包括表单验证、提交等。<br>树形组件：用于显示层级结构。<br>下拉刷新：下拉时可以重新加载数据。<br>上拉加载更多：当data很多时分页适用。<br>头像+头像框组件：有些活动中会有不规则头像框，或者vip的特效等。<br>搜索文本框：带搜索按钮的文本款组件等。<br>再比如性能优化方面，防抖、节流等</p>\n<p>jsbridge相关：调用相机、调用相册、分享等</p>\n<p>组件库搭建：<br>展示方面：用react/vue + bootstrap4 做框架，codesandbox做代码演示，还有复制链接及效果，类似antd组件的网站。<br>然后使用npm包安装，引入使用。</p>\n<p>比如说，我现在想搭一个npm包，里面包括按钮组件、搜索框组件等。<br>这里我就只写两个按钮组件、搜索框组件</p>\n<h2 id=\"二、npm包的开发示例\"><a href=\"#二、npm包的开发示例\" class=\"headerlink\" title=\"二、npm包的开发示例\"></a>二、npm包的开发示例</h2><h4 id=\"1-安装依赖\"><a href=\"#1-安装依赖\" class=\"headerlink\" title=\"1. 安装依赖\"></a>1. 安装依赖</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack webpack-cli vue-loader vue-template-compiler css-loader style-loader <span class=\"attr\">--save-dev</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-在项目根目录下创建一个-webpack-config-js-文件，配置如下：\"><a href=\"#2-在项目根目录下创建一个-webpack-config-js-文件，配置如下：\" class=\"headerlink\" title=\"2. 在项目根目录下创建一个 webpack.config.js 文件，配置如下：\"></a>2. 在项目根目录下创建一个 webpack.config.js 文件，配置如下：</h4><p>在项目根目录下创建一个 webpack.config.js 文件，配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">VueLoaderPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>, <span class=\"comment\">// 打包模式</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>, <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123; <span class=\"comment\">// 输出配置</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;my-button.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">&#x27;MyButton&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&#x27;umd&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;vue-loader&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">VueLoaderPlugin</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>entry</code> 字段指定了入口文件，<code>output</code> 字段指定了输出配置，这里生成了一个名为 <code>my-button.js</code> 的文件，<code>library</code> 指定了模块名称，<code>libraryTarget</code> 指定了模块的导出方式。</p>\n<h4 id=\"3-在-src-目录下创建-index-js-文件和-Button-vue-文件，分别编写代码如下：\"><a href=\"#3-在-src-目录下创建-index-js-文件和-Button-vue-文件，分别编写代码如下：\" class=\"headerlink\" title=\"3. 在 src 目录下创建 index.js 文件和 Button.vue 文件，分别编写代码如下：\"></a>3. 在 <code>src</code> 目录下创建 <code>index.js</code> 文件和 <code>Button.vue</code> 文件，分别编写代码如下：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Button</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Button.vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyButton</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">install</span>: <span class=\"keyword\">function</span>(<span class=\"params\">Vue</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;MyButton&#x27;</span>, <span class=\"title class_\">Button</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">MyButton</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MyButton</span>;</span><br></pre></td></tr></table></figure>\n<p>Button.vue：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;my-button&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;height: height, width: width&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;MyButton&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">height</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">default</span>: <span class=\"string\">&#x27;60px&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">width</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">default</span>: <span class=\"string\">&#x27;80%&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.my-button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f0ff00</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-在命令行中运行以下命令打包：\"><a href=\"#4-在命令行中运行以下命令打包：\" class=\"headerlink\" title=\"4. 在命令行中运行以下命令打包：\"></a>4. 在命令行中运行以下命令打包：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-引用\"><a href=\"#5-引用\" class=\"headerlink\" title=\"5. 引用\"></a>5. 引用</h3><p>将打包后的文件（即 my-button.js）上传到 npm 上，然后在需要使用该组件库的项目中，通过以下命令安装该组件库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install your-package-name</span><br></pre></td></tr></table></figure>\n<p>在项目中使用该组件库，可以像下面这样引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyButton</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;your-package-name&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">MyButton</span>);</span><br></pre></td></tr></table></figure>\n<p>之后就可以在Vue 组件中使用 MyButton 组件了，像这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-button</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">my-button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、在原有组件基础上加入新的搜索文本框组件\"><a href=\"#三、在原有组件基础上加入新的搜索文本框组件\" class=\"headerlink\" title=\"三、在原有组件基础上加入新的搜索文本框组件\"></a>三、在原有组件基础上加入新的搜索文本框组件</h2><p>思路：先将新的搜索文本框组件写好并打包成一个单独的模块。然后，可以在 my-button 组件中引入新的搜索文本框组件并进行相应的配置和使用。最后，将 my-button 和搜索文本框组件打包成一个组件库并发布到 npm 上。</p>\n<p>具体的步骤如下：</p>\n<h4 id=\"1-编写搜索文本框组件\"><a href=\"#1-编写搜索文本框组件\" class=\"headerlink\" title=\"1. 编写搜索文本框组件\"></a>1. 编写搜索文本框组件</h4><p>具体的编写就不说了，假设已经编辑好，命名为 my-input。<br>创建一个webpack.config.js文件，配置打包规则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>, <span class=\"comment\">// 设置为生产环境模式</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>, <span class=\"comment\">// 入口文件路径</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>), <span class=\"comment\">// 输出目录路径</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;flow-components.min.js&#x27;</span>, <span class=\"comment\">// 输出文件名称</span></span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">&#x27;flowComponents&#x27;</span>, <span class=\"comment\">// 打包生成的库的名称</span></span><br><span class=\"line\">    <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&#x27;umd&#x27;</span>, <span class=\"comment\">// 打包生成的库的目标环境</span></span><br><span class=\"line\">    <span class=\"attr\">umdNamedDefine</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 是否需要命名 UMD 模块</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;vue-loader&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;vue-style-loader&#x27;</span>, <span class=\"string\">&#x27;style-loader&#x27;</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)$/i</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;file-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[name].[ext]&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">outputPath</span>: <span class=\"string\">&#x27;images/&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>] <span class=\"comment\">// 支持的文件扩展名</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里使用了 vue-loader 处理 .vue 单文件组件，使用 css-loader、vue-style-loader 和 style-loader 处理样式文件，使用 file-loader 处理静态资源文件。设置了输出目录路径、输出文件名称、打包生成的库的名称、打包生成的库的目标环境等。</p>\n<h4 id=\"2-在-src-目录下创建一个-index-js-入口文件，用于导出组件：\"><a href=\"#2-在-src-目录下创建一个-index-js-入口文件，用于导出组件：\" class=\"headerlink\" title=\"2. 在 src 目录下创建一个 index.js 入口文件，用于导出组件：\"></a>2. 在 src 目录下创建一个 index.js 入口文件，用于导出组件：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Button</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/Button.vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Input</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/Input.vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> components = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Button</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Input</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> install = <span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (install.<span class=\"property\">installed</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(components).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(name, components[name]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"variable language_\">window</span>.<span class=\"property\">Vue</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-引入\"><a href=\"#3-引入\" class=\"headerlink\" title=\"3. 引入\"></a>3. 引入</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install your-library-name --save</span><br></pre></td></tr></table></figure>\n<p>在项目中引用组件库中的组件，首先需要在代码中引入组件，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Button, SearchInput &#125; from &#x27;your-library-name&#x27;;</span><br></pre></td></tr></table></figure>\n<p>然后在代码中直接使用引入的组件即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button&gt;Click me&lt;/Button&gt;</span><br><span class=\"line\">&lt;SearchInput placeholder=&quot;Search&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、搭建boostrap-vue的网页端\"><a href=\"#三、搭建boostrap-vue的网页端\" class=\"headerlink\" title=\"三、搭建boostrap+vue的网页端\"></a>三、搭建boostrap+vue的网页端</h2><p>待补充</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、思维整理\"><a href=\"#一、思维整理\" class=\"headerlink\" title=\"一、思维整理\"></a>一、思维整理</h2><p>移动端的前端组件库可以包括许多组件，这里列出一些常见的组件：<br>按钮组件：用于触发操作或提交表单。<br>图标组件：用于显示图标。<br>输入框组件：包括文本输入框、数字输入框等。<br>列表组件：用于展示列表信息。<br>滚动组件：用于滚动显示大量内容。<br>轮播组件：用于轮播广告或图片。<br>弹窗组件：用于弹出提示或确认框。<br>标签组件：用于分类或标记信息。<br>搜索组件：用于搜索信息。<br>日期时间组件：用于选择日期时间。<br>下拉选择组件：用于选择下拉菜单中的选项。<br>滑块组件：用于选择范围或值。<br>表单组件：包括表单验证、提交等。<br>树形组件：用于显示层级结构。<br>下拉刷新：下拉时可以重新加载数据。<br>上拉加载更多：当data很多时分页适用。<br>头像+头像框组件：有些活动中会有不规则头像框，或者vip的特效等。<br>搜索文本框：带搜索按钮的文本款组件等。<br>再比如性能优化方面，防抖、节流等</p>\n<p>jsbridge相关：调用相机、调用相册、分享等</p>\n<p>组件库搭建：<br>展示方面：用react/vue + bootstrap4 做框架，codesandbox做代码演示，还有复制链接及效果，类似antd组件的网站。<br>然后使用npm包安装，引入使用。</p>\n<p>比如说，我现在想搭一个npm包，里面包括按钮组件、搜索框组件等。<br>这里我就只写两个按钮组件、搜索框组件</p>\n<h2 id=\"二、npm包的开发示例\"><a href=\"#二、npm包的开发示例\" class=\"headerlink\" title=\"二、npm包的开发示例\"></a>二、npm包的开发示例</h2><h4 id=\"1-安装依赖\"><a href=\"#1-安装依赖\" class=\"headerlink\" title=\"1. 安装依赖\"></a>1. 安装依赖</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack webpack-cli vue-loader vue-template-compiler css-loader style-loader <span class=\"attr\">--save-dev</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-在项目根目录下创建一个-webpack-config-js-文件，配置如下：\"><a href=\"#2-在项目根目录下创建一个-webpack-config-js-文件，配置如下：\" class=\"headerlink\" title=\"2. 在项目根目录下创建一个 webpack.config.js 文件，配置如下：\"></a>2. 在项目根目录下创建一个 webpack.config.js 文件，配置如下：</h4><p>在项目根目录下创建一个 webpack.config.js 文件，配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">VueLoaderPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>, <span class=\"comment\">// 打包模式</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>, <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123; <span class=\"comment\">// 输出配置</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;my-button.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">&#x27;MyButton&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&#x27;umd&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;vue-loader&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">VueLoaderPlugin</span>()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>entry</code> 字段指定了入口文件，<code>output</code> 字段指定了输出配置，这里生成了一个名为 <code>my-button.js</code> 的文件，<code>library</code> 指定了模块名称，<code>libraryTarget</code> 指定了模块的导出方式。</p>\n<h4 id=\"3-在-src-目录下创建-index-js-文件和-Button-vue-文件，分别编写代码如下：\"><a href=\"#3-在-src-目录下创建-index-js-文件和-Button-vue-文件，分别编写代码如下：\" class=\"headerlink\" title=\"3. 在 src 目录下创建 index.js 文件和 Button.vue 文件，分别编写代码如下：\"></a>3. 在 <code>src</code> 目录下创建 <code>index.js</code> 文件和 <code>Button.vue</code> 文件，分别编写代码如下：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Button</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Button.vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyButton</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">install</span>: <span class=\"keyword\">function</span>(<span class=\"params\">Vue</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;MyButton&#x27;</span>, <span class=\"title class_\">Button</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">MyButton</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MyButton</span>;</span><br></pre></td></tr></table></figure>\n<p>Button.vue：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;my-button&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;height: height, width: width&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;MyButton&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">height</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">default</span>: <span class=\"string\">&#x27;60px&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">width</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">default</span>: <span class=\"string\">&#x27;80%&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.my-button</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f0ff00</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-在命令行中运行以下命令打包：\"><a href=\"#4-在命令行中运行以下命令打包：\" class=\"headerlink\" title=\"4. 在命令行中运行以下命令打包：\"></a>4. 在命令行中运行以下命令打包：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-引用\"><a href=\"#5-引用\" class=\"headerlink\" title=\"5. 引用\"></a>5. 引用</h3><p>将打包后的文件（即 my-button.js）上传到 npm 上，然后在需要使用该组件库的项目中，通过以下命令安装该组件库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install your-package-name</span><br></pre></td></tr></table></figure>\n<p>在项目中使用该组件库，可以像下面这样引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyButton</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;your-package-name&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">MyButton</span>);</span><br></pre></td></tr></table></figure>\n<p>之后就可以在Vue 组件中使用 MyButton 组件了，像这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-button</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">my-button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、在原有组件基础上加入新的搜索文本框组件\"><a href=\"#三、在原有组件基础上加入新的搜索文本框组件\" class=\"headerlink\" title=\"三、在原有组件基础上加入新的搜索文本框组件\"></a>三、在原有组件基础上加入新的搜索文本框组件</h2><p>思路：先将新的搜索文本框组件写好并打包成一个单独的模块。然后，可以在 my-button 组件中引入新的搜索文本框组件并进行相应的配置和使用。最后，将 my-button 和搜索文本框组件打包成一个组件库并发布到 npm 上。</p>\n<p>具体的步骤如下：</p>\n<h4 id=\"1-编写搜索文本框组件\"><a href=\"#1-编写搜索文本框组件\" class=\"headerlink\" title=\"1. 编写搜索文本框组件\"></a>1. 编写搜索文本框组件</h4><p>具体的编写就不说了，假设已经编辑好，命名为 my-input。<br>创建一个webpack.config.js文件，配置打包规则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>, <span class=\"comment\">// 设置为生产环境模式</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>, <span class=\"comment\">// 入口文件路径</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>), <span class=\"comment\">// 输出目录路径</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;flow-components.min.js&#x27;</span>, <span class=\"comment\">// 输出文件名称</span></span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">&#x27;flowComponents&#x27;</span>, <span class=\"comment\">// 打包生成的库的名称</span></span><br><span class=\"line\">    <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&#x27;umd&#x27;</span>, <span class=\"comment\">// 打包生成的库的目标环境</span></span><br><span class=\"line\">    <span class=\"attr\">umdNamedDefine</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 是否需要命名 UMD 模块</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;vue-loader&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;vue-style-loader&#x27;</span>, <span class=\"string\">&#x27;style-loader&#x27;</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)$/i</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;file-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[name].[ext]&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">outputPath</span>: <span class=\"string\">&#x27;images/&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>] <span class=\"comment\">// 支持的文件扩展名</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里使用了 vue-loader 处理 .vue 单文件组件，使用 css-loader、vue-style-loader 和 style-loader 处理样式文件，使用 file-loader 处理静态资源文件。设置了输出目录路径、输出文件名称、打包生成的库的名称、打包生成的库的目标环境等。</p>\n<h4 id=\"2-在-src-目录下创建一个-index-js-入口文件，用于导出组件：\"><a href=\"#2-在-src-目录下创建一个-index-js-入口文件，用于导出组件：\" class=\"headerlink\" title=\"2. 在 src 目录下创建一个 index.js 入口文件，用于导出组件：\"></a>2. 在 src 目录下创建一个 index.js 入口文件，用于导出组件：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Button</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/Button.vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Input</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/Input.vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> components = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Button</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Input</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> install = <span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (install.<span class=\"property\">installed</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(components).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(name, components[name]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"variable language_\">window</span>.<span class=\"property\">Vue</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-引入\"><a href=\"#3-引入\" class=\"headerlink\" title=\"3. 引入\"></a>3. 引入</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install your-library-name --save</span><br></pre></td></tr></table></figure>\n<p>在项目中引用组件库中的组件，首先需要在代码中引入组件，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Button, SearchInput &#125; from &#x27;your-library-name&#x27;;</span><br></pre></td></tr></table></figure>\n<p>然后在代码中直接使用引入的组件即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button&gt;Click me&lt;/Button&gt;</span><br><span class=\"line\">&lt;SearchInput placeholder=&quot;Search&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、搭建boostrap-vue的网页端\"><a href=\"#三、搭建boostrap-vue的网页端\" class=\"headerlink\" title=\"三、搭建boostrap+vue的网页端\"></a>三、搭建boostrap+vue的网页端</h2><p>待补充</p>\n"},{"title":"删了改，改了删","date":"2018-03-28T03:36:08.000Z","_content":"\n放一些突然的灵感，或者想法，或者未整理的东西，或者todo，或者计划，总之什么都可以放在这里。\n记得实现一条删一条。","source":"_posts/npm发布 copy.md","raw":"---\ntitle: 删了改，改了删\ndate: 2018-03-28 11:36:08\ntags: 乱七八糟\ncategories: 乱七八糟\n---\n\n放一些突然的灵感，或者想法，或者未整理的东西，或者todo，或者计划，总之什么都可以放在这里。\n记得实现一条删一条。","slug":"npm发布 copy","published":1,"updated":"2023-04-03T04:28:39.848Z","_id":"clg08g2op0000miwi4hax842w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>放一些突然的灵感，或者想法，或者未整理的东西，或者todo，或者计划，总之什么都可以放在这里。<br>记得实现一条删一条。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>放一些突然的灵感，或者想法，或者未整理的东西，或者todo，或者计划，总之什么都可以放在这里。<br>记得实现一条删一条。</p>\n"},{"title":"【性能优化】Webpack-Bundle-Analyzer","date":"2023-04-03T02:46:52.000Z","_content":"\n简单写一下，就是在开发时使用了它做性能分析，还是挺好用的。\n\n[官网](https://blog.jakoblind.no/webpack-bundle-analyzer/)\n ## 简介\n Webpack Bundle Analyzer是一个Webpack插件，用于分析和可视化Webpack打包后的bundle文件。它可以帮助开发者找出打包文件中的性能瓶颈和优化机会，从而提高应用程序的性能和用户体验。\n\nWebpack Bundle Analyzer可以生成一个可交互的可视化图表，展示打包后的bundle文件中各个模块的大小、依赖关系、文件类型等信息，还可以通过颜色区分出不同的模块类型，如应用代码、第三方库、webpack运行时等。开发者可以通过这个图表找出文件中占用空间最大的模块和文件，进一步分析和优化代码和依赖关系，减少文件大小和提高打包速度。\n\n除了可视化图表外，Webpack Bundle Analyzer还可以生成详细的报告文件，包含了模块和文件的详细信息，开发者可以根据报告文件找出打包文件中的性能问题和优化机会。\n\n在前端开发中，Webpack Bundle Analyzer可以帮助开发者分析和优化Webpack打包文件，从而提高应用程序的性能和用户体验。\n\n## 在umi+react中的使用\n\numi是一个基于webpack和babel的可扩展企业级前端应用框架，可以帮助开发者快速构建React单页面应用或多页面应用。umi集成了Webpack，所以我们可以直接在umi项目中使用Webpack Bundle Analyzer插件来分析和优化打包文件。\n\n首先，在项目中安装Webpack Bundle Analyzer插件：\n\n```\nnpm install webpack-bundle-analyzer --save-dev\n```\n然后，在.umirc.js文件中配置Webpack Bundle Analyzer插件：\n\n```js\nexport default {\n  plugins: [\n    ['umi-plugin-react', {\n      // 配置Webpack Bundle Analyzer插件\n      webpackBundleAnalyzer: {\n        analyzerMode: 'server', // 在浏览器中显示分析报告\n        analyzerHost: '127.0.0.1', // 分析报告的IP地址\n        analyzerPort: 8888, // 分析报告的端口号\n        openAnalyzer: true // 是否自动打开浏览器显示分析报告\n      }\n    }],\n  ]\n}\n\n```\n\n配置完成后，运行umi dev命令，Webpack Bundle Analyzer插件将自动启动并在浏览器中显示打包文件的分析报告。\n\n通过Webpack Bundle Analyzer插件，开发者可以快速找出应用程序中占用空间最大的模块和文件，进一步分析和优化代码和依赖关系，提高应用程序的性能和用户体验。","source":"_posts/Webpack-Bundle-Analyzer.md","raw":"---\ntitle: 【性能优化】Webpack-Bundle-Analyzer\ndate: 2023-04-03 10:46:52\ntags: 性能优化\ncategories: 程序员的自我修养\n---\n\n简单写一下，就是在开发时使用了它做性能分析，还是挺好用的。\n\n[官网](https://blog.jakoblind.no/webpack-bundle-analyzer/)\n ## 简介\n Webpack Bundle Analyzer是一个Webpack插件，用于分析和可视化Webpack打包后的bundle文件。它可以帮助开发者找出打包文件中的性能瓶颈和优化机会，从而提高应用程序的性能和用户体验。\n\nWebpack Bundle Analyzer可以生成一个可交互的可视化图表，展示打包后的bundle文件中各个模块的大小、依赖关系、文件类型等信息，还可以通过颜色区分出不同的模块类型，如应用代码、第三方库、webpack运行时等。开发者可以通过这个图表找出文件中占用空间最大的模块和文件，进一步分析和优化代码和依赖关系，减少文件大小和提高打包速度。\n\n除了可视化图表外，Webpack Bundle Analyzer还可以生成详细的报告文件，包含了模块和文件的详细信息，开发者可以根据报告文件找出打包文件中的性能问题和优化机会。\n\n在前端开发中，Webpack Bundle Analyzer可以帮助开发者分析和优化Webpack打包文件，从而提高应用程序的性能和用户体验。\n\n## 在umi+react中的使用\n\numi是一个基于webpack和babel的可扩展企业级前端应用框架，可以帮助开发者快速构建React单页面应用或多页面应用。umi集成了Webpack，所以我们可以直接在umi项目中使用Webpack Bundle Analyzer插件来分析和优化打包文件。\n\n首先，在项目中安装Webpack Bundle Analyzer插件：\n\n```\nnpm install webpack-bundle-analyzer --save-dev\n```\n然后，在.umirc.js文件中配置Webpack Bundle Analyzer插件：\n\n```js\nexport default {\n  plugins: [\n    ['umi-plugin-react', {\n      // 配置Webpack Bundle Analyzer插件\n      webpackBundleAnalyzer: {\n        analyzerMode: 'server', // 在浏览器中显示分析报告\n        analyzerHost: '127.0.0.1', // 分析报告的IP地址\n        analyzerPort: 8888, // 分析报告的端口号\n        openAnalyzer: true // 是否自动打开浏览器显示分析报告\n      }\n    }],\n  ]\n}\n\n```\n\n配置完成后，运行umi dev命令，Webpack Bundle Analyzer插件将自动启动并在浏览器中显示打包文件的分析报告。\n\n通过Webpack Bundle Analyzer插件，开发者可以快速找出应用程序中占用空间最大的模块和文件，进一步分析和优化代码和依赖关系，提高应用程序的性能和用户体验。","slug":"Webpack-Bundle-Analyzer","published":1,"updated":"2023-04-03T03:12:38.179Z","_id":"clg08g2os0001miwi7t6r4cmz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>简单写一下，就是在开发时使用了它做性能分析，还是挺好用的。</p>\n<p><a href=\"https://blog.jakoblind.no/webpack-bundle-analyzer/\">官网</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p> Webpack Bundle Analyzer是一个Webpack插件，用于分析和可视化Webpack打包后的bundle文件。它可以帮助开发者找出打包文件中的性能瓶颈和优化机会，从而提高应用程序的性能和用户体验。</p>\n<p>Webpack Bundle Analyzer可以生成一个可交互的可视化图表，展示打包后的bundle文件中各个模块的大小、依赖关系、文件类型等信息，还可以通过颜色区分出不同的模块类型，如应用代码、第三方库、webpack运行时等。开发者可以通过这个图表找出文件中占用空间最大的模块和文件，进一步分析和优化代码和依赖关系，减少文件大小和提高打包速度。</p>\n<p>除了可视化图表外，Webpack Bundle Analyzer还可以生成详细的报告文件，包含了模块和文件的详细信息，开发者可以根据报告文件找出打包文件中的性能问题和优化机会。</p>\n<p>在前端开发中，Webpack Bundle Analyzer可以帮助开发者分析和优化Webpack打包文件，从而提高应用程序的性能和用户体验。</p>\n<h2 id=\"在umi-react中的使用\"><a href=\"#在umi-react中的使用\" class=\"headerlink\" title=\"在umi+react中的使用\"></a>在umi+react中的使用</h2><p>umi是一个基于webpack和babel的可扩展企业级前端应用框架，可以帮助开发者快速构建React单页面应用或多页面应用。umi集成了Webpack，所以我们可以直接在umi项目中使用Webpack Bundle Analyzer插件来分析和优化打包文件。</p>\n<p>首先，在项目中安装Webpack Bundle Analyzer插件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-bundle-analyzer --save-dev</span><br></pre></td></tr></table></figure>\n<p>然后，在.umirc.js文件中配置Webpack Bundle Analyzer插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    [<span class=\"string\">&#x27;umi-plugin-react&#x27;</span>, &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 配置Webpack Bundle Analyzer插件</span></span><br><span class=\"line\">      <span class=\"attr\">webpackBundleAnalyzer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">analyzerMode</span>: <span class=\"string\">&#x27;server&#x27;</span>, <span class=\"comment\">// 在浏览器中显示分析报告</span></span><br><span class=\"line\">        <span class=\"attr\">analyzerHost</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"comment\">// 分析报告的IP地址</span></span><br><span class=\"line\">        <span class=\"attr\">analyzerPort</span>: <span class=\"number\">8888</span>, <span class=\"comment\">// 分析报告的端口号</span></span><br><span class=\"line\">        <span class=\"attr\">openAnalyzer</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 是否自动打开浏览器显示分析报告</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>配置完成后，运行umi dev命令，Webpack Bundle Analyzer插件将自动启动并在浏览器中显示打包文件的分析报告。</p>\n<p>通过Webpack Bundle Analyzer插件，开发者可以快速找出应用程序中占用空间最大的模块和文件，进一步分析和优化代码和依赖关系，提高应用程序的性能和用户体验。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>简单写一下，就是在开发时使用了它做性能分析，还是挺好用的。</p>\n<p><a href=\"https://blog.jakoblind.no/webpack-bundle-analyzer/\">官网</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p> Webpack Bundle Analyzer是一个Webpack插件，用于分析和可视化Webpack打包后的bundle文件。它可以帮助开发者找出打包文件中的性能瓶颈和优化机会，从而提高应用程序的性能和用户体验。</p>\n<p>Webpack Bundle Analyzer可以生成一个可交互的可视化图表，展示打包后的bundle文件中各个模块的大小、依赖关系、文件类型等信息，还可以通过颜色区分出不同的模块类型，如应用代码、第三方库、webpack运行时等。开发者可以通过这个图表找出文件中占用空间最大的模块和文件，进一步分析和优化代码和依赖关系，减少文件大小和提高打包速度。</p>\n<p>除了可视化图表外，Webpack Bundle Analyzer还可以生成详细的报告文件，包含了模块和文件的详细信息，开发者可以根据报告文件找出打包文件中的性能问题和优化机会。</p>\n<p>在前端开发中，Webpack Bundle Analyzer可以帮助开发者分析和优化Webpack打包文件，从而提高应用程序的性能和用户体验。</p>\n<h2 id=\"在umi-react中的使用\"><a href=\"#在umi-react中的使用\" class=\"headerlink\" title=\"在umi+react中的使用\"></a>在umi+react中的使用</h2><p>umi是一个基于webpack和babel的可扩展企业级前端应用框架，可以帮助开发者快速构建React单页面应用或多页面应用。umi集成了Webpack，所以我们可以直接在umi项目中使用Webpack Bundle Analyzer插件来分析和优化打包文件。</p>\n<p>首先，在项目中安装Webpack Bundle Analyzer插件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-bundle-analyzer --save-dev</span><br></pre></td></tr></table></figure>\n<p>然后，在.umirc.js文件中配置Webpack Bundle Analyzer插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    [<span class=\"string\">&#x27;umi-plugin-react&#x27;</span>, &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 配置Webpack Bundle Analyzer插件</span></span><br><span class=\"line\">      <span class=\"attr\">webpackBundleAnalyzer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">analyzerMode</span>: <span class=\"string\">&#x27;server&#x27;</span>, <span class=\"comment\">// 在浏览器中显示分析报告</span></span><br><span class=\"line\">        <span class=\"attr\">analyzerHost</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"comment\">// 分析报告的IP地址</span></span><br><span class=\"line\">        <span class=\"attr\">analyzerPort</span>: <span class=\"number\">8888</span>, <span class=\"comment\">// 分析报告的端口号</span></span><br><span class=\"line\">        <span class=\"attr\">openAnalyzer</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 是否自动打开浏览器显示分析报告</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>配置完成后，运行umi dev命令，Webpack Bundle Analyzer插件将自动启动并在浏览器中显示打包文件的分析报告。</p>\n<p>通过Webpack Bundle Analyzer插件，开发者可以快速找出应用程序中占用空间最大的模块和文件，进一步分析和优化代码和依赖关系，提高应用程序的性能和用户体验。</p>\n"},{"title":"【BFC】BFC","date":"2023-04-03T03:12:24.000Z","_content":"\n## BFC概念\n\nBFC是“块级格式化上下文”的缩写，用于控制文档中块级元素的布局和定位。在一个BFC中，元素按照一定的规则进行排列，不会影响到BFC外部的元素。BFC的常见特征包括：\n\n+ 内部的盒子会在垂直方向上一个接一个地放置，因此不会重叠。\n+ 在BFC中，每个盒子的左边和右边外边距（margin）不会和其他元素的外边距折叠（collapse）。\n+ BFC可以包含浮动元素，因此可以避免浮动元素对其他元素的影响。\n+ BFC的高度可以自适应其内部元素的高度，不会塌陷（collapse）。\n\n通过理解和应用BFC，可以更好地掌控页面的布局和样式，解决一些常见的排版问题，比如清除浮动、避免外边距折叠等。\n\n## BFC的实际运用场景\n\n#### 清除浮动：\n当一个父元素包含了一个浮动元素时，父元素可能会因为子元素浮动而导致高度塌陷。这时可以在父元素上创建一个新的BFC来解决这个问题，例如：\n```html\n<div class=\"parent\">\n  <div class=\"float\"></div>\n</div>\n```\n\n```css\n.parent {\n  overflow: hidden; /* 创建新的BFC */\n}\n.float {\n  float: left;\n}\n```\n\n#### 避免外边距折叠\n当两个相邻的元素的外边距发生重叠时，可以在其中一个元素上创建一个新的BFC来避免这个问题，例如：\n```html\n<div class=\"container\">\n  <div class=\"child1\"></div>\n  <div class=\"child2\"></div>\n</div>\n```\n\n```css\n.container {\n  overflow: hidden; /* 创建新的BFC */\n}\n.child1 {\n  margin-bottom: 20px;\n}\n.child2 {\n  margin-top: 30px;\n}\n```\n#### 自适应布局\n在一个父元素中，如果有一些子元素的高度不固定，可以在父元素上创建一个新的BFC，从而实现自适应布局，例如：\n```html\n<div class=\"parent\">\n  <div class=\"child\"></div>\n  <div class=\"child\"></div>\n  <div class=\"child\"></div>\n</div>\n```\n\n```css\n.parent {\n  overflow: hidden; /* 创建新的BFC */\n}\n.child {\n  float: left;\n  width: 33.33%;\n}\n```\n\n#### 解决文本环绕问题\n当需要在一个元素周围放置文本时，可以在该元素上创建一个新的BFC，从而实现文本环绕的效果，例如：\n```html\n<div class=\"image\">\n  <img src=\"image.jpg\">\n</div>\n<p>这里是一些文本，会围绕着上面的图片环绕。</p>\n```\n\n```css\n.image {\n  float: left; /* 让图片浮动 */\n  margin-right: 10px; /* 调整图片与文本的间距 */\n  overflow: hidden; /* 创建新的BFC */\n}\n```\n\n#### 其他可以创建bfc的例子\n\n上面列举的多数还是使用overflow: hidden时，这种BFC的创建方式是很常用来解决布局问题的。实际上还有很多别的方法会创建BFC。\n\n#### + 使用float属性创建新的BFC：\n```html\n<div class=\"parent\">\n  <div class=\"float\"></div>\n</div>\n```\n```css\n.float {\n  float: left;\n}\n\n.parent::after {\n  content: \"\";\n  display: block;\n  clear: both;\n}\n```\n#### + 使用position属性创建新的BFC：\n```html\n<div class=\"parent\">\n  <div class=\"absolute\"></div>\n</div>\n```\n\n```css\n.absolute {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.parent {\n  position: relative;\n  height: 300px;\n  background-color: #eee;\n  overflow: hidden; /* 创建新的BFC */\n}\n\n```\n\n#### 使用display创建BFC\n\n使用一些display属性值也可以创建新的BFC，例如\n`display: table-cell`\n`display: table-caption`\n等。\n\n","source":"_posts/BFC.md","raw":"---\ntitle: 【BFC】BFC\ndate: 2023-04-03 11:12:24\ntags: \n  - iv1\n  - css\ncategories: 程序员的自我修养\n---\n\n## BFC概念\n\nBFC是“块级格式化上下文”的缩写，用于控制文档中块级元素的布局和定位。在一个BFC中，元素按照一定的规则进行排列，不会影响到BFC外部的元素。BFC的常见特征包括：\n\n+ 内部的盒子会在垂直方向上一个接一个地放置，因此不会重叠。\n+ 在BFC中，每个盒子的左边和右边外边距（margin）不会和其他元素的外边距折叠（collapse）。\n+ BFC可以包含浮动元素，因此可以避免浮动元素对其他元素的影响。\n+ BFC的高度可以自适应其内部元素的高度，不会塌陷（collapse）。\n\n通过理解和应用BFC，可以更好地掌控页面的布局和样式，解决一些常见的排版问题，比如清除浮动、避免外边距折叠等。\n\n## BFC的实际运用场景\n\n#### 清除浮动：\n当一个父元素包含了一个浮动元素时，父元素可能会因为子元素浮动而导致高度塌陷。这时可以在父元素上创建一个新的BFC来解决这个问题，例如：\n```html\n<div class=\"parent\">\n  <div class=\"float\"></div>\n</div>\n```\n\n```css\n.parent {\n  overflow: hidden; /* 创建新的BFC */\n}\n.float {\n  float: left;\n}\n```\n\n#### 避免外边距折叠\n当两个相邻的元素的外边距发生重叠时，可以在其中一个元素上创建一个新的BFC来避免这个问题，例如：\n```html\n<div class=\"container\">\n  <div class=\"child1\"></div>\n  <div class=\"child2\"></div>\n</div>\n```\n\n```css\n.container {\n  overflow: hidden; /* 创建新的BFC */\n}\n.child1 {\n  margin-bottom: 20px;\n}\n.child2 {\n  margin-top: 30px;\n}\n```\n#### 自适应布局\n在一个父元素中，如果有一些子元素的高度不固定，可以在父元素上创建一个新的BFC，从而实现自适应布局，例如：\n```html\n<div class=\"parent\">\n  <div class=\"child\"></div>\n  <div class=\"child\"></div>\n  <div class=\"child\"></div>\n</div>\n```\n\n```css\n.parent {\n  overflow: hidden; /* 创建新的BFC */\n}\n.child {\n  float: left;\n  width: 33.33%;\n}\n```\n\n#### 解决文本环绕问题\n当需要在一个元素周围放置文本时，可以在该元素上创建一个新的BFC，从而实现文本环绕的效果，例如：\n```html\n<div class=\"image\">\n  <img src=\"image.jpg\">\n</div>\n<p>这里是一些文本，会围绕着上面的图片环绕。</p>\n```\n\n```css\n.image {\n  float: left; /* 让图片浮动 */\n  margin-right: 10px; /* 调整图片与文本的间距 */\n  overflow: hidden; /* 创建新的BFC */\n}\n```\n\n#### 其他可以创建bfc的例子\n\n上面列举的多数还是使用overflow: hidden时，这种BFC的创建方式是很常用来解决布局问题的。实际上还有很多别的方法会创建BFC。\n\n#### + 使用float属性创建新的BFC：\n```html\n<div class=\"parent\">\n  <div class=\"float\"></div>\n</div>\n```\n```css\n.float {\n  float: left;\n}\n\n.parent::after {\n  content: \"\";\n  display: block;\n  clear: both;\n}\n```\n#### + 使用position属性创建新的BFC：\n```html\n<div class=\"parent\">\n  <div class=\"absolute\"></div>\n</div>\n```\n\n```css\n.absolute {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.parent {\n  position: relative;\n  height: 300px;\n  background-color: #eee;\n  overflow: hidden; /* 创建新的BFC */\n}\n\n```\n\n#### 使用display创建BFC\n\n使用一些display属性值也可以创建新的BFC，例如\n`display: table-cell`\n`display: table-caption`\n等。\n\n","slug":"BFC","published":1,"updated":"2023-04-25T02:26:30.011Z","_id":"clg09nklx00002twi90r563de","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"BFC概念\"><a href=\"#BFC概念\" class=\"headerlink\" title=\"BFC概念\"></a>BFC概念</h2><p>BFC是“块级格式化上下文”的缩写，用于控制文档中块级元素的布局和定位。在一个BFC中，元素按照一定的规则进行排列，不会影响到BFC外部的元素。BFC的常见特征包括：</p>\n<ul>\n<li>内部的盒子会在垂直方向上一个接一个地放置，因此不会重叠。</li>\n<li>在BFC中，每个盒子的左边和右边外边距（margin）不会和其他元素的外边距折叠（collapse）。</li>\n<li>BFC可以包含浮动元素，因此可以避免浮动元素对其他元素的影响。</li>\n<li>BFC的高度可以自适应其内部元素的高度，不会塌陷（collapse）。</li>\n</ul>\n<p>通过理解和应用BFC，可以更好地掌控页面的布局和样式，解决一些常见的排版问题，比如清除浮动、避免外边距折叠等。</p>\n<h2 id=\"BFC的实际运用场景\"><a href=\"#BFC的实际运用场景\" class=\"headerlink\" title=\"BFC的实际运用场景\"></a>BFC的实际运用场景</h2><h4 id=\"清除浮动：\"><a href=\"#清除浮动：\" class=\"headerlink\" title=\"清除浮动：\"></a>清除浮动：</h4><p>当一个父元素包含了一个浮动元素时，父元素可能会因为子元素浮动而导致高度塌陷。这时可以在父元素上创建一个新的BFC来解决这个问题，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 创建新的BFC */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.float</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"避免外边距折叠\"><a href=\"#避免外边距折叠\" class=\"headerlink\" title=\"避免外边距折叠\"></a>避免外边距折叠</h4><p>当两个相邻的元素的外边距发生重叠时，可以在其中一个元素上创建一个新的BFC来避免这个问题，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 创建新的BFC */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"自适应布局\"><a href=\"#自适应布局\" class=\"headerlink\" title=\"自适应布局\"></a>自适应布局</h4><p>在一个父元素中，如果有一些子元素的高度不固定，可以在父元素上创建一个新的BFC，从而实现自适应布局，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 创建新的BFC */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决文本环绕问题\"><a href=\"#解决文本环绕问题\" class=\"headerlink\" title=\"解决文本环绕问题\"></a>解决文本环绕问题</h4><p>当需要在一个元素周围放置文本时，可以在该元素上创建一个新的BFC，从而实现文本环绕的效果，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;image.jpg&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这里是一些文本，会围绕着上面的图片环绕。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/* 让图片浮动 */</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/* 调整图片与文本的间距 */</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 创建新的BFC */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他可以创建bfc的例子\"><a href=\"#其他可以创建bfc的例子\" class=\"headerlink\" title=\"其他可以创建bfc的例子\"></a>其他可以创建bfc的例子</h4><p>上面列举的多数还是使用overflow: hidden时，这种BFC的创建方式是很常用来解决布局问题的。实际上还有很多别的方法会创建BFC。</p>\n<h4 id=\"使用float属性创建新的BFC：\"><a href=\"#使用float属性创建新的BFC：\" class=\"headerlink\" title=\"+ 使用float属性创建新的BFC：\"></a>+ 使用float属性创建新的BFC：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.float</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用position属性创建新的BFC：\"><a href=\"#使用position属性创建新的BFC：\" class=\"headerlink\" title=\"+ 使用position属性创建新的BFC：\"></a>+ 使用position属性创建新的BFC：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;absolute&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.absolute</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 创建新的BFC */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用display创建BFC\"><a href=\"#使用display创建BFC\" class=\"headerlink\" title=\"使用display创建BFC\"></a>使用display创建BFC</h4><p>使用一些display属性值也可以创建新的BFC，例如<br><code>display: table-cell</code><br><code>display: table-caption</code><br>等。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"BFC概念\"><a href=\"#BFC概念\" class=\"headerlink\" title=\"BFC概念\"></a>BFC概念</h2><p>BFC是“块级格式化上下文”的缩写，用于控制文档中块级元素的布局和定位。在一个BFC中，元素按照一定的规则进行排列，不会影响到BFC外部的元素。BFC的常见特征包括：</p>\n<ul>\n<li>内部的盒子会在垂直方向上一个接一个地放置，因此不会重叠。</li>\n<li>在BFC中，每个盒子的左边和右边外边距（margin）不会和其他元素的外边距折叠（collapse）。</li>\n<li>BFC可以包含浮动元素，因此可以避免浮动元素对其他元素的影响。</li>\n<li>BFC的高度可以自适应其内部元素的高度，不会塌陷（collapse）。</li>\n</ul>\n<p>通过理解和应用BFC，可以更好地掌控页面的布局和样式，解决一些常见的排版问题，比如清除浮动、避免外边距折叠等。</p>\n<h2 id=\"BFC的实际运用场景\"><a href=\"#BFC的实际运用场景\" class=\"headerlink\" title=\"BFC的实际运用场景\"></a>BFC的实际运用场景</h2><h4 id=\"清除浮动：\"><a href=\"#清除浮动：\" class=\"headerlink\" title=\"清除浮动：\"></a>清除浮动：</h4><p>当一个父元素包含了一个浮动元素时，父元素可能会因为子元素浮动而导致高度塌陷。这时可以在父元素上创建一个新的BFC来解决这个问题，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 创建新的BFC */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.float</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"避免外边距折叠\"><a href=\"#避免外边距折叠\" class=\"headerlink\" title=\"避免外边距折叠\"></a>避免外边距折叠</h4><p>当两个相邻的元素的外边距发生重叠时，可以在其中一个元素上创建一个新的BFC来避免这个问题，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 创建新的BFC */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"自适应布局\"><a href=\"#自适应布局\" class=\"headerlink\" title=\"自适应布局\"></a>自适应布局</h4><p>在一个父元素中，如果有一些子元素的高度不固定，可以在父元素上创建一个新的BFC，从而实现自适应布局，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 创建新的BFC */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">33.33%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决文本环绕问题\"><a href=\"#解决文本环绕问题\" class=\"headerlink\" title=\"解决文本环绕问题\"></a>解决文本环绕问题</h4><p>当需要在一个元素周围放置文本时，可以在该元素上创建一个新的BFC，从而实现文本环绕的效果，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;image&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;image.jpg&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这里是一些文本，会围绕着上面的图片环绕。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/* 让图片浮动 */</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/* 调整图片与文本的间距 */</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 创建新的BFC */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他可以创建bfc的例子\"><a href=\"#其他可以创建bfc的例子\" class=\"headerlink\" title=\"其他可以创建bfc的例子\"></a>其他可以创建bfc的例子</h4><p>上面列举的多数还是使用overflow: hidden时，这种BFC的创建方式是很常用来解决布局问题的。实际上还有很多别的方法会创建BFC。</p>\n<h4 id=\"使用float属性创建新的BFC：\"><a href=\"#使用float属性创建新的BFC：\" class=\"headerlink\" title=\"+ 使用float属性创建新的BFC：\"></a>+ 使用float属性创建新的BFC：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.float</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用position属性创建新的BFC：\"><a href=\"#使用position属性创建新的BFC：\" class=\"headerlink\" title=\"+ 使用position属性创建新的BFC：\"></a>+ 使用position属性创建新的BFC：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;absolute&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.absolute</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 创建新的BFC */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用display创建BFC\"><a href=\"#使用display创建BFC\" class=\"headerlink\" title=\"使用display创建BFC\"></a>使用display创建BFC</h4><p>使用一些display属性值也可以创建新的BFC，例如<br><code>display: table-cell</code><br><code>display: table-caption</code><br>等。</p>\n"},{"title":"【ai绘画】Midjourney 之 入门","date":"2023-04-03T03:37:57.000Z","_content":"\n想了想还是整理一下文档吧。\nai出来一个我就搁colab部署一个，midjourney掏点儿小钱就能省去我部署的步骤真是太好了。\n而且也不像stable diffusion那样需要自己搜集训练模型\n我体验过的ai绘画中算是效果最好，上手难度最低的一个。\n\n## 一、安装及入门\n\n### 1. 注册discord\n+ midjourney的使用是通过discord访问，所以需要注册discord。\n+ 点击进入：[discord官网](https://discord.com/)\n+ 科学上网\n#### 简单介绍discord\nDiscord是一款免费的语音、视频和文字聊天应用程序，它允许用户在私人或公共服务器上创建和加入聊天室或频道。\nDiscord的功能包括语音和视频通话、实时文本聊天、文件共享、屏幕共享、在线状态、自定义表情符号和徽章、服务器和频道管理工具等。它还提供了丰富的API，允许开发者创建自定义的机器人和集成其他服务。\n通过Discord，用户可以方便地与其他人交流和合作，无论是在游戏、工作还是社交方面。它已经成为了一个非常流行的工具，有着庞大的用户群体和活跃的社区。\n\n### 2. 访问midjourney.com\n\n访问Midjourney.com，点击join the Beta，或直接前往[Midjourney Discord](https://discord.gg/midjourney)。\n\n![](/images/image-20230403114938818.png)\n\n### 3. 寻找newbies频道\n\n在discord左侧，有房间可选\n\n![](/images/image-20230403115710176.png)\n\n随便选择一个进入即可。\n\n### 4、 使用 /imagine 命令\n\n1. 从斜杠命令弹出窗口中键入`/imagine prompt:`或选择命令。`/imagine`\n\n![](/images/image-20230403120334073.png)\n\n该`/imagine`命令从简短的文本描述（称为Prompt）生成一个独特的图像。\n\n2. 初次使用时，Midjourney Bot 将生成一个弹出窗口，要求您接受服务条款。在生成任何图像之前，您必须同意服务条款。\n\n### 5、处理图像\n\n### Midjourney Bot 需要大约一分钟的时间来生成四个选项。\n\n生成图像会激活免费的 Midjourney 试用版。试用用户有部分的免费时间，在需要订阅付费之前可以完成大约 25 个工作。\n\n使用`/info`命令检查你的快速剩余时间查看您的剩余试用时间。\n\n### 6、图像生成的基础上，进一步的变化\n\n### 初始图像网格生成完成后，会出现两行按钮：\n\n![](/images/image-20230403120853420.png)\n\n```\nU1` `U2` `U3` `U4\n```\n\nU 按钮[放大](https://docs.midjourney.com/upscalers)图像，生成所选图像的更大版本并添加更多细节。\n\n```\nV1` `V2` `V3` `V4\n```\n\nV 按钮创建所选网格图像的细微变化。创建变体会生成与所选图像的整体风格和构图相似的新图像网格。\n\n```\n🔄\n```\n\n🔄（重新滚动）重新运行作业。在这种情况下，它将重新运行原始提示，生成新的图像网格。\n\n### 7. 评价图像\n\n### 使用放大图像后，将出现一组新选项：\n\n![](/images/image-20230403121020222.png)\n\n```\n🪄 Make Variations` \n`🔍 Light Upscale Redo`\n`↗️Web\n```\n\n**Make Variations：**创建放大图像的变体并生成包含四个选项的新网格。\n\n**Beta/Light Upscale Redo：**使用不同的升级器模型重做升级[。](https://docs.midjourney.com/upscalers)\n\n**↗️Web**：在[Midjourney.com](https://www.midjourney.com/home/) 上打开图库中的图像\n\n### 8.  保存图像\n\n单击图像以全尺寸打开它，然后右键单击并选择`Save image`。\n\n在手机上，长按图片，然后点击右上角的下载图标。\n\n所有图片均可立即在[midjourney.com/app](https://www.midjourney.com/app/)\n`Sign In with Discord`上查看。\n\n### 9. 订阅服务\n\n试用用户有试用时长，若不生成图片不会消耗，但也不会更新。要制作更多图像，请使用`/subscribe`在任何`newbies`频道中的命令生成指向中途帐户页面的个人链接。\n\n![](/images/image-20230403121533718.png)\n\n![](/images/image-20230403121603281.png)\n\n**不要与他人分享此个人链接。**\n\n请访问[订阅服务](https://docs.midjourney.com/plans)，获取有关价格和更多信息。\n\n## 二、创建自己的个人服务器\n\n在公共频道很多人都在生成图片，要翻找自己生成的图片很麻烦。\n\n可以在discord创建自己的服务器并部署midjourney机器人，在自己的频道下使用midjourney。\n\n**注：虽然在自己的个人服务器可以只展示自己的图片，但实际上生成的图片还是在midjourney公共区可以访问到。**\n\n只有付费计划pro plan可以避免这点。\n\n### 1. 创建服务器\n\n点击+号 ---> 亲自创建 ---> 仅供我和我的朋友使用 ---> 创建\n\n![](/images/image-20230403122133776.png)\n\n![](/images/image-20230403122249556.png)\n\n![](/images/image-20230403122304271.png)\n\n![](/images/image-20230403122315091.png)\n\n### 2. 进入频道，输入命令即可使用\n\n![](/images/image-20230403122348895.png)\n\n\n\n入门部分就到这里，之后我会用新文章整理关键字及命令部分。","source":"_posts/midjourney1.md","raw":"---\ntitle: 【ai绘画】Midjourney 之 入门\ndate: 2023-04-03 11:37:57\ntags: Midjourney\ncategories: 绘画\n---\n\n想了想还是整理一下文档吧。\nai出来一个我就搁colab部署一个，midjourney掏点儿小钱就能省去我部署的步骤真是太好了。\n而且也不像stable diffusion那样需要自己搜集训练模型\n我体验过的ai绘画中算是效果最好，上手难度最低的一个。\n\n## 一、安装及入门\n\n### 1. 注册discord\n+ midjourney的使用是通过discord访问，所以需要注册discord。\n+ 点击进入：[discord官网](https://discord.com/)\n+ 科学上网\n#### 简单介绍discord\nDiscord是一款免费的语音、视频和文字聊天应用程序，它允许用户在私人或公共服务器上创建和加入聊天室或频道。\nDiscord的功能包括语音和视频通话、实时文本聊天、文件共享、屏幕共享、在线状态、自定义表情符号和徽章、服务器和频道管理工具等。它还提供了丰富的API，允许开发者创建自定义的机器人和集成其他服务。\n通过Discord，用户可以方便地与其他人交流和合作，无论是在游戏、工作还是社交方面。它已经成为了一个非常流行的工具，有着庞大的用户群体和活跃的社区。\n\n### 2. 访问midjourney.com\n\n访问Midjourney.com，点击join the Beta，或直接前往[Midjourney Discord](https://discord.gg/midjourney)。\n\n![](/images/image-20230403114938818.png)\n\n### 3. 寻找newbies频道\n\n在discord左侧，有房间可选\n\n![](/images/image-20230403115710176.png)\n\n随便选择一个进入即可。\n\n### 4、 使用 /imagine 命令\n\n1. 从斜杠命令弹出窗口中键入`/imagine prompt:`或选择命令。`/imagine`\n\n![](/images/image-20230403120334073.png)\n\n该`/imagine`命令从简短的文本描述（称为Prompt）生成一个独特的图像。\n\n2. 初次使用时，Midjourney Bot 将生成一个弹出窗口，要求您接受服务条款。在生成任何图像之前，您必须同意服务条款。\n\n### 5、处理图像\n\n### Midjourney Bot 需要大约一分钟的时间来生成四个选项。\n\n生成图像会激活免费的 Midjourney 试用版。试用用户有部分的免费时间，在需要订阅付费之前可以完成大约 25 个工作。\n\n使用`/info`命令检查你的快速剩余时间查看您的剩余试用时间。\n\n### 6、图像生成的基础上，进一步的变化\n\n### 初始图像网格生成完成后，会出现两行按钮：\n\n![](/images/image-20230403120853420.png)\n\n```\nU1` `U2` `U3` `U4\n```\n\nU 按钮[放大](https://docs.midjourney.com/upscalers)图像，生成所选图像的更大版本并添加更多细节。\n\n```\nV1` `V2` `V3` `V4\n```\n\nV 按钮创建所选网格图像的细微变化。创建变体会生成与所选图像的整体风格和构图相似的新图像网格。\n\n```\n🔄\n```\n\n🔄（重新滚动）重新运行作业。在这种情况下，它将重新运行原始提示，生成新的图像网格。\n\n### 7. 评价图像\n\n### 使用放大图像后，将出现一组新选项：\n\n![](/images/image-20230403121020222.png)\n\n```\n🪄 Make Variations` \n`🔍 Light Upscale Redo`\n`↗️Web\n```\n\n**Make Variations：**创建放大图像的变体并生成包含四个选项的新网格。\n\n**Beta/Light Upscale Redo：**使用不同的升级器模型重做升级[。](https://docs.midjourney.com/upscalers)\n\n**↗️Web**：在[Midjourney.com](https://www.midjourney.com/home/) 上打开图库中的图像\n\n### 8.  保存图像\n\n单击图像以全尺寸打开它，然后右键单击并选择`Save image`。\n\n在手机上，长按图片，然后点击右上角的下载图标。\n\n所有图片均可立即在[midjourney.com/app](https://www.midjourney.com/app/)\n`Sign In with Discord`上查看。\n\n### 9. 订阅服务\n\n试用用户有试用时长，若不生成图片不会消耗，但也不会更新。要制作更多图像，请使用`/subscribe`在任何`newbies`频道中的命令生成指向中途帐户页面的个人链接。\n\n![](/images/image-20230403121533718.png)\n\n![](/images/image-20230403121603281.png)\n\n**不要与他人分享此个人链接。**\n\n请访问[订阅服务](https://docs.midjourney.com/plans)，获取有关价格和更多信息。\n\n## 二、创建自己的个人服务器\n\n在公共频道很多人都在生成图片，要翻找自己生成的图片很麻烦。\n\n可以在discord创建自己的服务器并部署midjourney机器人，在自己的频道下使用midjourney。\n\n**注：虽然在自己的个人服务器可以只展示自己的图片，但实际上生成的图片还是在midjourney公共区可以访问到。**\n\n只有付费计划pro plan可以避免这点。\n\n### 1. 创建服务器\n\n点击+号 ---> 亲自创建 ---> 仅供我和我的朋友使用 ---> 创建\n\n![](/images/image-20230403122133776.png)\n\n![](/images/image-20230403122249556.png)\n\n![](/images/image-20230403122304271.png)\n\n![](/images/image-20230403122315091.png)\n\n### 2. 进入频道，输入命令即可使用\n\n![](/images/image-20230403122348895.png)\n\n\n\n入门部分就到这里，之后我会用新文章整理关键字及命令部分。","slug":"midjourney1","published":1,"updated":"2023-04-12T11:23:34.073Z","_id":"clg0c2l6s0000bhwicoh6gl9e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>想了想还是整理一下文档吧。<br>ai出来一个我就搁colab部署一个，midjourney掏点儿小钱就能省去我部署的步骤真是太好了。<br>而且也不像stable diffusion那样需要自己搜集训练模型<br>我体验过的ai绘画中算是效果最好，上手难度最低的一个。</p>\n<h2 id=\"一、安装及入门\"><a href=\"#一、安装及入门\" class=\"headerlink\" title=\"一、安装及入门\"></a>一、安装及入门</h2><h3 id=\"1-注册discord\"><a href=\"#1-注册discord\" class=\"headerlink\" title=\"1. 注册discord\"></a>1. 注册discord</h3><ul>\n<li>midjourney的使用是通过discord访问，所以需要注册discord。</li>\n<li>点击进入：<a href=\"https://discord.com/\">discord官网</a></li>\n<li>科学上网<h4 id=\"简单介绍discord\"><a href=\"#简单介绍discord\" class=\"headerlink\" title=\"简单介绍discord\"></a>简单介绍discord</h4>Discord是一款免费的语音、视频和文字聊天应用程序，它允许用户在私人或公共服务器上创建和加入聊天室或频道。<br>Discord的功能包括语音和视频通话、实时文本聊天、文件共享、屏幕共享、在线状态、自定义表情符号和徽章、服务器和频道管理工具等。它还提供了丰富的API，允许开发者创建自定义的机器人和集成其他服务。<br>通过Discord，用户可以方便地与其他人交流和合作，无论是在游戏、工作还是社交方面。它已经成为了一个非常流行的工具，有着庞大的用户群体和活跃的社区。</li>\n</ul>\n<h3 id=\"2-访问midjourney-com\"><a href=\"#2-访问midjourney-com\" class=\"headerlink\" title=\"2. 访问midjourney.com\"></a>2. 访问midjourney.com</h3><p>访问Midjourney.com，点击join the Beta，或直接前往<a href=\"https://discord.gg/midjourney\">Midjourney Discord</a>。</p>\n<p><img src=\"/images/image-20230403114938818.png\"></p>\n<h3 id=\"3-寻找newbies频道\"><a href=\"#3-寻找newbies频道\" class=\"headerlink\" title=\"3. 寻找newbies频道\"></a>3. 寻找newbies频道</h3><p>在discord左侧，有房间可选</p>\n<p><img src=\"/images/image-20230403115710176.png\"></p>\n<p>随便选择一个进入即可。</p>\n<h3 id=\"4、-使用-imagine-命令\"><a href=\"#4、-使用-imagine-命令\" class=\"headerlink\" title=\"4、 使用 /imagine 命令\"></a>4、 使用 /imagine 命令</h3><ol>\n<li>从斜杠命令弹出窗口中键入<code>/imagine prompt:</code>或选择命令。<code>/imagine</code></li>\n</ol>\n<p><img src=\"/images/image-20230403120334073.png\"></p>\n<p>该<code>/imagine</code>命令从简短的文本描述（称为Prompt）生成一个独特的图像。</p>\n<ol start=\"2\">\n<li>初次使用时，Midjourney Bot 将生成一个弹出窗口，要求您接受服务条款。在生成任何图像之前，您必须同意服务条款。</li>\n</ol>\n<h3 id=\"5、处理图像\"><a href=\"#5、处理图像\" class=\"headerlink\" title=\"5、处理图像\"></a>5、处理图像</h3><h3 id=\"Midjourney-Bot-需要大约一分钟的时间来生成四个选项。\"><a href=\"#Midjourney-Bot-需要大约一分钟的时间来生成四个选项。\" class=\"headerlink\" title=\"Midjourney Bot 需要大约一分钟的时间来生成四个选项。\"></a>Midjourney Bot 需要大约一分钟的时间来生成四个选项。</h3><p>生成图像会激活免费的 Midjourney 试用版。试用用户有部分的免费时间，在需要订阅付费之前可以完成大约 25 个工作。</p>\n<p>使用<code>/info</code>命令检查你的快速剩余时间查看您的剩余试用时间。</p>\n<h3 id=\"6、图像生成的基础上，进一步的变化\"><a href=\"#6、图像生成的基础上，进一步的变化\" class=\"headerlink\" title=\"6、图像生成的基础上，进一步的变化\"></a>6、图像生成的基础上，进一步的变化</h3><h3 id=\"初始图像网格生成完成后，会出现两行按钮：\"><a href=\"#初始图像网格生成完成后，会出现两行按钮：\" class=\"headerlink\" title=\"初始图像网格生成完成后，会出现两行按钮：\"></a>初始图像网格生成完成后，会出现两行按钮：</h3><p><img src=\"/images/image-20230403120853420.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">U1` `U2` `U3` `U4</span><br></pre></td></tr></table></figure>\n\n<p>U 按钮<a href=\"https://docs.midjourney.com/upscalers\">放大</a>图像，生成所选图像的更大版本并添加更多细节。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V1` `V2` `V3` `V4</span><br></pre></td></tr></table></figure>\n\n<p>V 按钮创建所选网格图像的细微变化。创建变体会生成与所选图像的整体风格和构图相似的新图像网格。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🔄</span><br></pre></td></tr></table></figure>\n\n<p>🔄（重新滚动）重新运行作业。在这种情况下，它将重新运行原始提示，生成新的图像网格。</p>\n<h3 id=\"7-评价图像\"><a href=\"#7-评价图像\" class=\"headerlink\" title=\"7. 评价图像\"></a>7. 评价图像</h3><h3 id=\"使用放大图像后，将出现一组新选项：\"><a href=\"#使用放大图像后，将出现一组新选项：\" class=\"headerlink\" title=\"使用放大图像后，将出现一组新选项：\"></a>使用放大图像后，将出现一组新选项：</h3><p><img src=\"/images/image-20230403121020222.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🪄 Make Variations` </span><br><span class=\"line\">`🔍 Light Upscale Redo`</span><br><span class=\"line\">`↗️Web</span><br></pre></td></tr></table></figure>\n\n<p><strong>Make Variations：</strong>创建放大图像的变体并生成包含四个选项的新网格。</p>\n<p><strong>Beta/Light Upscale Redo：</strong>使用不同的升级器模型重做升级<a href=\"https://docs.midjourney.com/upscalers\">。</a></p>\n<p><strong>↗️Web</strong>：在<a href=\"https://www.midjourney.com/home/\">Midjourney.com</a> 上打开图库中的图像</p>\n<h3 id=\"8-保存图像\"><a href=\"#8-保存图像\" class=\"headerlink\" title=\"8.  保存图像\"></a>8.  保存图像</h3><p>单击图像以全尺寸打开它，然后右键单击并选择<code>Save image</code>。</p>\n<p>在手机上，长按图片，然后点击右上角的下载图标。</p>\n<p>所有图片均可立即在<a href=\"https://www.midjourney.com/app/\">midjourney.com/app</a><br><code>Sign In with Discord</code>上查看。</p>\n<h3 id=\"9-订阅服务\"><a href=\"#9-订阅服务\" class=\"headerlink\" title=\"9. 订阅服务\"></a>9. 订阅服务</h3><p>试用用户有试用时长，若不生成图片不会消耗，但也不会更新。要制作更多图像，请使用<code>/subscribe</code>在任何<code>newbies</code>频道中的命令生成指向中途帐户页面的个人链接。</p>\n<p><img src=\"/images/image-20230403121533718.png\"></p>\n<p><img src=\"/images/image-20230403121603281.png\"></p>\n<p><strong>不要与他人分享此个人链接。</strong></p>\n<p>请访问<a href=\"https://docs.midjourney.com/plans\">订阅服务</a>，获取有关价格和更多信息。</p>\n<h2 id=\"二、创建自己的个人服务器\"><a href=\"#二、创建自己的个人服务器\" class=\"headerlink\" title=\"二、创建自己的个人服务器\"></a>二、创建自己的个人服务器</h2><p>在公共频道很多人都在生成图片，要翻找自己生成的图片很麻烦。</p>\n<p>可以在discord创建自己的服务器并部署midjourney机器人，在自己的频道下使用midjourney。</p>\n<p><strong>注：虽然在自己的个人服务器可以只展示自己的图片，但实际上生成的图片还是在midjourney公共区可以访问到。</strong></p>\n<p>只有付费计划pro plan可以避免这点。</p>\n<h3 id=\"1-创建服务器\"><a href=\"#1-创建服务器\" class=\"headerlink\" title=\"1. 创建服务器\"></a>1. 创建服务器</h3><p>点击+号 —&gt; 亲自创建 —&gt; 仅供我和我的朋友使用 —&gt; 创建</p>\n<p><img src=\"/images/image-20230403122133776.png\"></p>\n<p><img src=\"/images/image-20230403122249556.png\"></p>\n<p><img src=\"/images/image-20230403122304271.png\"></p>\n<p><img src=\"/images/image-20230403122315091.png\"></p>\n<h3 id=\"2-进入频道，输入命令即可使用\"><a href=\"#2-进入频道，输入命令即可使用\" class=\"headerlink\" title=\"2. 进入频道，输入命令即可使用\"></a>2. 进入频道，输入命令即可使用</h3><p><img src=\"/images/image-20230403122348895.png\"></p>\n<p>入门部分就到这里，之后我会用新文章整理关键字及命令部分。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>想了想还是整理一下文档吧。<br>ai出来一个我就搁colab部署一个，midjourney掏点儿小钱就能省去我部署的步骤真是太好了。<br>而且也不像stable diffusion那样需要自己搜集训练模型<br>我体验过的ai绘画中算是效果最好，上手难度最低的一个。</p>\n<h2 id=\"一、安装及入门\"><a href=\"#一、安装及入门\" class=\"headerlink\" title=\"一、安装及入门\"></a>一、安装及入门</h2><h3 id=\"1-注册discord\"><a href=\"#1-注册discord\" class=\"headerlink\" title=\"1. 注册discord\"></a>1. 注册discord</h3><ul>\n<li>midjourney的使用是通过discord访问，所以需要注册discord。</li>\n<li>点击进入：<a href=\"https://discord.com/\">discord官网</a></li>\n<li>科学上网<h4 id=\"简单介绍discord\"><a href=\"#简单介绍discord\" class=\"headerlink\" title=\"简单介绍discord\"></a>简单介绍discord</h4>Discord是一款免费的语音、视频和文字聊天应用程序，它允许用户在私人或公共服务器上创建和加入聊天室或频道。<br>Discord的功能包括语音和视频通话、实时文本聊天、文件共享、屏幕共享、在线状态、自定义表情符号和徽章、服务器和频道管理工具等。它还提供了丰富的API，允许开发者创建自定义的机器人和集成其他服务。<br>通过Discord，用户可以方便地与其他人交流和合作，无论是在游戏、工作还是社交方面。它已经成为了一个非常流行的工具，有着庞大的用户群体和活跃的社区。</li>\n</ul>\n<h3 id=\"2-访问midjourney-com\"><a href=\"#2-访问midjourney-com\" class=\"headerlink\" title=\"2. 访问midjourney.com\"></a>2. 访问midjourney.com</h3><p>访问Midjourney.com，点击join the Beta，或直接前往<a href=\"https://discord.gg/midjourney\">Midjourney Discord</a>。</p>\n<p><img src=\"/images/image-20230403114938818.png\"></p>\n<h3 id=\"3-寻找newbies频道\"><a href=\"#3-寻找newbies频道\" class=\"headerlink\" title=\"3. 寻找newbies频道\"></a>3. 寻找newbies频道</h3><p>在discord左侧，有房间可选</p>\n<p><img src=\"/images/image-20230403115710176.png\"></p>\n<p>随便选择一个进入即可。</p>\n<h3 id=\"4、-使用-imagine-命令\"><a href=\"#4、-使用-imagine-命令\" class=\"headerlink\" title=\"4、 使用 /imagine 命令\"></a>4、 使用 /imagine 命令</h3><ol>\n<li>从斜杠命令弹出窗口中键入<code>/imagine prompt:</code>或选择命令。<code>/imagine</code></li>\n</ol>\n<p><img src=\"/images/image-20230403120334073.png\"></p>\n<p>该<code>/imagine</code>命令从简短的文本描述（称为Prompt）生成一个独特的图像。</p>\n<ol start=\"2\">\n<li>初次使用时，Midjourney Bot 将生成一个弹出窗口，要求您接受服务条款。在生成任何图像之前，您必须同意服务条款。</li>\n</ol>\n<h3 id=\"5、处理图像\"><a href=\"#5、处理图像\" class=\"headerlink\" title=\"5、处理图像\"></a>5、处理图像</h3><h3 id=\"Midjourney-Bot-需要大约一分钟的时间来生成四个选项。\"><a href=\"#Midjourney-Bot-需要大约一分钟的时间来生成四个选项。\" class=\"headerlink\" title=\"Midjourney Bot 需要大约一分钟的时间来生成四个选项。\"></a>Midjourney Bot 需要大约一分钟的时间来生成四个选项。</h3><p>生成图像会激活免费的 Midjourney 试用版。试用用户有部分的免费时间，在需要订阅付费之前可以完成大约 25 个工作。</p>\n<p>使用<code>/info</code>命令检查你的快速剩余时间查看您的剩余试用时间。</p>\n<h3 id=\"6、图像生成的基础上，进一步的变化\"><a href=\"#6、图像生成的基础上，进一步的变化\" class=\"headerlink\" title=\"6、图像生成的基础上，进一步的变化\"></a>6、图像生成的基础上，进一步的变化</h3><h3 id=\"初始图像网格生成完成后，会出现两行按钮：\"><a href=\"#初始图像网格生成完成后，会出现两行按钮：\" class=\"headerlink\" title=\"初始图像网格生成完成后，会出现两行按钮：\"></a>初始图像网格生成完成后，会出现两行按钮：</h3><p><img src=\"/images/image-20230403120853420.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">U1` `U2` `U3` `U4</span><br></pre></td></tr></table></figure>\n\n<p>U 按钮<a href=\"https://docs.midjourney.com/upscalers\">放大</a>图像，生成所选图像的更大版本并添加更多细节。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V1` `V2` `V3` `V4</span><br></pre></td></tr></table></figure>\n\n<p>V 按钮创建所选网格图像的细微变化。创建变体会生成与所选图像的整体风格和构图相似的新图像网格。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🔄</span><br></pre></td></tr></table></figure>\n\n<p>🔄（重新滚动）重新运行作业。在这种情况下，它将重新运行原始提示，生成新的图像网格。</p>\n<h3 id=\"7-评价图像\"><a href=\"#7-评价图像\" class=\"headerlink\" title=\"7. 评价图像\"></a>7. 评价图像</h3><h3 id=\"使用放大图像后，将出现一组新选项：\"><a href=\"#使用放大图像后，将出现一组新选项：\" class=\"headerlink\" title=\"使用放大图像后，将出现一组新选项：\"></a>使用放大图像后，将出现一组新选项：</h3><p><img src=\"/images/image-20230403121020222.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🪄 Make Variations` </span><br><span class=\"line\">`🔍 Light Upscale Redo`</span><br><span class=\"line\">`↗️Web</span><br></pre></td></tr></table></figure>\n\n<p><strong>Make Variations：</strong>创建放大图像的变体并生成包含四个选项的新网格。</p>\n<p><strong>Beta/Light Upscale Redo：</strong>使用不同的升级器模型重做升级<a href=\"https://docs.midjourney.com/upscalers\">。</a></p>\n<p><strong>↗️Web</strong>：在<a href=\"https://www.midjourney.com/home/\">Midjourney.com</a> 上打开图库中的图像</p>\n<h3 id=\"8-保存图像\"><a href=\"#8-保存图像\" class=\"headerlink\" title=\"8.  保存图像\"></a>8.  保存图像</h3><p>单击图像以全尺寸打开它，然后右键单击并选择<code>Save image</code>。</p>\n<p>在手机上，长按图片，然后点击右上角的下载图标。</p>\n<p>所有图片均可立即在<a href=\"https://www.midjourney.com/app/\">midjourney.com/app</a><br><code>Sign In with Discord</code>上查看。</p>\n<h3 id=\"9-订阅服务\"><a href=\"#9-订阅服务\" class=\"headerlink\" title=\"9. 订阅服务\"></a>9. 订阅服务</h3><p>试用用户有试用时长，若不生成图片不会消耗，但也不会更新。要制作更多图像，请使用<code>/subscribe</code>在任何<code>newbies</code>频道中的命令生成指向中途帐户页面的个人链接。</p>\n<p><img src=\"/images/image-20230403121533718.png\"></p>\n<p><img src=\"/images/image-20230403121603281.png\"></p>\n<p><strong>不要与他人分享此个人链接。</strong></p>\n<p>请访问<a href=\"https://docs.midjourney.com/plans\">订阅服务</a>，获取有关价格和更多信息。</p>\n<h2 id=\"二、创建自己的个人服务器\"><a href=\"#二、创建自己的个人服务器\" class=\"headerlink\" title=\"二、创建自己的个人服务器\"></a>二、创建自己的个人服务器</h2><p>在公共频道很多人都在生成图片，要翻找自己生成的图片很麻烦。</p>\n<p>可以在discord创建自己的服务器并部署midjourney机器人，在自己的频道下使用midjourney。</p>\n<p><strong>注：虽然在自己的个人服务器可以只展示自己的图片，但实际上生成的图片还是在midjourney公共区可以访问到。</strong></p>\n<p>只有付费计划pro plan可以避免这点。</p>\n<h3 id=\"1-创建服务器\"><a href=\"#1-创建服务器\" class=\"headerlink\" title=\"1. 创建服务器\"></a>1. 创建服务器</h3><p>点击+号 —&gt; 亲自创建 —&gt; 仅供我和我的朋友使用 —&gt; 创建</p>\n<p><img src=\"/images/image-20230403122133776.png\"></p>\n<p><img src=\"/images/image-20230403122249556.png\"></p>\n<p><img src=\"/images/image-20230403122304271.png\"></p>\n<p><img src=\"/images/image-20230403122315091.png\"></p>\n<h3 id=\"2-进入频道，输入命令即可使用\"><a href=\"#2-进入频道，输入命令即可使用\" class=\"headerlink\" title=\"2. 进入频道，输入命令即可使用\"></a>2. 进入频道，输入命令即可使用</h3><p><img src=\"/images/image-20230403122348895.png\"></p>\n<p>入门部分就到这里，之后我会用新文章整理关键字及命令部分。</p>\n"},{"title":"uni-app基础(总结中)","date":"2023-04-06T08:09:55.000Z","_content":"\n## 一、uni-app重点总结\n\n### 1. uniapp 规范\n\n+ 页面遵循vue语法，模板块、脚本块和样式块。\n+ 页面遵循vue单文件组件规范（SFC）\n+ 页面标签遵循小程序语法规范\n+ 接口接近小程序规范\n+ 数据绑定及事件处理遵循vue规范\n+ 为兼容多端运行，遵循flex布局。\n\n### 2. uniapp 特色\n\n+ **条件编译**\n\n```c\n#ifdef APP-PLUS\n\t// 需要条件编译的代码\n\t// 此段表示：仅出现在APP平台下的代码\n#endif\n```\n\n```c\n#ifndef H5\n \t// 需要条件编译的代码\n\t// 此段表示：除了h5平台，其他平台均存在的代码\n#endif\n```\n\n```c\n#ifndef H5 || MP-WEIXIN\n \t// 需要条件编译的代码\n\t// 此段表示：在h5平台或微信小程序平台存在的代码\n#endif\n```\n\n+ App端的Nvue开发\n\nNvue是native-vue的简写。是在uniapp中以.nvue结尾的文件，它为app提供了原生的渲染能力。\n\nNvue内置了weex的渲染引擎，所以在.nvue文件中，既可以使用weex内置的方法，也可以使用uni-app的内置方法。\n\n<span style = \"color: #00ffff\">**只能在NATIVE端使用。**</span>\n\n+ HTML5+ \n\nHTML5+引擎为应用提供了原生的安卓端和ios端的方法。有一些复杂功能在html5无法做到时，可以使用html5+引擎。\n\n<span style = \"color: #00ffff\">**只能在NATIVE端使用**</span>\n\n\n\n## 二、创建uniapp项目\n\n### 1.  通过hbuilder创建\n\n安装好hbuilder后，![image-20230409164610512](/images/image-20230409164610512.png)\n\n![](/images/image-20230409164532726.png)\n\n运行：\n\n![image-20230409164759496](/images/image-20230409164759496.png)\n\n![](/images/image-20230409165247195.png)\n\n### 2.  通过vue命令行创建\n\n### 环境安装\n\n全局安装vue-cli\n\n```javascript\nnpm install -g @vue/cli\n```\n\n### 创建uni-app\n\n使用正式版（对应HBuilderX最新正式版）\n\n```javascript\nvue create -p dcloudio/uni-preset-vue my-project\n```\n\n使用alpha版（对应HBuilderX最新alpha版）\n\n```javascript\nvue create -p dcloudio/uni-preset-vue#alpha my-alpha-project\n```\n\n\n\n## 三、语法\n\n### 1. 模板语法\n\n和vue一样\n\n```html\n<template>\n\t<view class=\"content\" :class=\"className\" @click=\"consoleTitle\">\n\t\t{{title}}\n\t</view>\n</template>\n\n<script>\n\texport default {\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\ttitle: 'uniapp',\n\t\t\t\tclassName: 'title'\n\t\t\t}\n\t\t},\n\t\tonLoad() {\n\n\t\t},\n\t\tmethods: {\n\n\t\t}\n\t}\n</script>\n\n<style>\n\t.title {\n\t\tcolor: #00ff00;\n\t}\n</style>\n\n```\n\n\n\n### 2. 数据绑定\n\n在小程序中使用\n\n```js\nthis.setData({\n\ttitle: 'title'\n})\n```\n\n在uni-app中\n\n```js\nthis.title = 'title'\n```\n\n其实就和vue是一样的。\n\n### 3. 条件判断\n\n```html\n\t<view v-if=\"title==='uniapp'\" class=\"content\" :class=\"className\" @click=\"consoleTitle\">\n\t\t{{title}}\n\t</view>\n```\n\n注：v-show在uni-app非h5页面中会有坑。尽量不要把v-show放在组件上，在组件外层套一层view。\n\n### 4. 列表渲染\n\n```html\n\t<view v-for = \"(list,index) in lists\">\n\t\t{{list.name}}\n\t</view>\n```\n\n### 5. 内置组件\n\n`view`相当于`div`\n\n`text`相当于`span`\n\n`scroll-view`\n\n`swiper`和`swiper-item`\n\n`match-media`\n\n`movable-area`和`movable-view`：即手指/鼠标按住`movable-view`拖动或双指缩放，但拖不出`movable-area`规定的范围。\n\n`movable-view`必须在`movable-area`组件中，并且必须是直接子节点，否则不能移动。\n\n`cover-view`和 `cover-image` : `cover-view`相当于\n\n```position: fixed; ```\n\n但在其中可以写自己的布局。\n\n`cover-image`和`cover-view`用法相同，区别在于`cover-image`只可以放图片，它可以嵌套在`cover-view`中\n\n```html\n<template>\n\t<view class=\"page\">\n\t\t<video class=\"video\" id=\"demoVideo\" :controls=\"false\" :enable-progress-gesture=\"false\" :show-center-play-btn=\"true\" src=\"https://img.cdn.aliyun.dcloud.net.cn/guide/uniapp/%E7%AC%AC1%E8%AE%B2%EF%BC%88uni-app%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D%EF%BC%89-%20DCloud%E5%AE%98%E6%96%B9%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B@20181126-lite.m4v\">\n\t\t\t<cover-view class=\"controls-title\">简单的自定义 controls</cover-view>\n\t\t\t<cover-image class=\"controls-play img\" @click=\"play\" src=\"/static/play.png\"></cover-image>\n\t\t\t<cover-image class=\"controls-pause img\" @click=\"pause\" src=\"/static/pause.png\"></cover-image>\n\t\t</video>\n\t</view>\n</template>\n```\n\n`button`\n\n`input`\n\n\n\n### 6. 自定义组件的使用\n\n### 7. 基础 api 用法\n\n### 8. 条件编译\n\n### 9. 页面布局\n\n\n\n","source":"_posts/uni-app基础.md","raw":"---\ntitle: uni-app基础(总结中)\ndate: 2023-04-06 16:09:55\ntags: uni-app\ncategories: 程序员的自我修养\n---\n\n## 一、uni-app重点总结\n\n### 1. uniapp 规范\n\n+ 页面遵循vue语法，模板块、脚本块和样式块。\n+ 页面遵循vue单文件组件规范（SFC）\n+ 页面标签遵循小程序语法规范\n+ 接口接近小程序规范\n+ 数据绑定及事件处理遵循vue规范\n+ 为兼容多端运行，遵循flex布局。\n\n### 2. uniapp 特色\n\n+ **条件编译**\n\n```c\n#ifdef APP-PLUS\n\t// 需要条件编译的代码\n\t// 此段表示：仅出现在APP平台下的代码\n#endif\n```\n\n```c\n#ifndef H5\n \t// 需要条件编译的代码\n\t// 此段表示：除了h5平台，其他平台均存在的代码\n#endif\n```\n\n```c\n#ifndef H5 || MP-WEIXIN\n \t// 需要条件编译的代码\n\t// 此段表示：在h5平台或微信小程序平台存在的代码\n#endif\n```\n\n+ App端的Nvue开发\n\nNvue是native-vue的简写。是在uniapp中以.nvue结尾的文件，它为app提供了原生的渲染能力。\n\nNvue内置了weex的渲染引擎，所以在.nvue文件中，既可以使用weex内置的方法，也可以使用uni-app的内置方法。\n\n<span style = \"color: #00ffff\">**只能在NATIVE端使用。**</span>\n\n+ HTML5+ \n\nHTML5+引擎为应用提供了原生的安卓端和ios端的方法。有一些复杂功能在html5无法做到时，可以使用html5+引擎。\n\n<span style = \"color: #00ffff\">**只能在NATIVE端使用**</span>\n\n\n\n## 二、创建uniapp项目\n\n### 1.  通过hbuilder创建\n\n安装好hbuilder后，![image-20230409164610512](/images/image-20230409164610512.png)\n\n![](/images/image-20230409164532726.png)\n\n运行：\n\n![image-20230409164759496](/images/image-20230409164759496.png)\n\n![](/images/image-20230409165247195.png)\n\n### 2.  通过vue命令行创建\n\n### 环境安装\n\n全局安装vue-cli\n\n```javascript\nnpm install -g @vue/cli\n```\n\n### 创建uni-app\n\n使用正式版（对应HBuilderX最新正式版）\n\n```javascript\nvue create -p dcloudio/uni-preset-vue my-project\n```\n\n使用alpha版（对应HBuilderX最新alpha版）\n\n```javascript\nvue create -p dcloudio/uni-preset-vue#alpha my-alpha-project\n```\n\n\n\n## 三、语法\n\n### 1. 模板语法\n\n和vue一样\n\n```html\n<template>\n\t<view class=\"content\" :class=\"className\" @click=\"consoleTitle\">\n\t\t{{title}}\n\t</view>\n</template>\n\n<script>\n\texport default {\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\ttitle: 'uniapp',\n\t\t\t\tclassName: 'title'\n\t\t\t}\n\t\t},\n\t\tonLoad() {\n\n\t\t},\n\t\tmethods: {\n\n\t\t}\n\t}\n</script>\n\n<style>\n\t.title {\n\t\tcolor: #00ff00;\n\t}\n</style>\n\n```\n\n\n\n### 2. 数据绑定\n\n在小程序中使用\n\n```js\nthis.setData({\n\ttitle: 'title'\n})\n```\n\n在uni-app中\n\n```js\nthis.title = 'title'\n```\n\n其实就和vue是一样的。\n\n### 3. 条件判断\n\n```html\n\t<view v-if=\"title==='uniapp'\" class=\"content\" :class=\"className\" @click=\"consoleTitle\">\n\t\t{{title}}\n\t</view>\n```\n\n注：v-show在uni-app非h5页面中会有坑。尽量不要把v-show放在组件上，在组件外层套一层view。\n\n### 4. 列表渲染\n\n```html\n\t<view v-for = \"(list,index) in lists\">\n\t\t{{list.name}}\n\t</view>\n```\n\n### 5. 内置组件\n\n`view`相当于`div`\n\n`text`相当于`span`\n\n`scroll-view`\n\n`swiper`和`swiper-item`\n\n`match-media`\n\n`movable-area`和`movable-view`：即手指/鼠标按住`movable-view`拖动或双指缩放，但拖不出`movable-area`规定的范围。\n\n`movable-view`必须在`movable-area`组件中，并且必须是直接子节点，否则不能移动。\n\n`cover-view`和 `cover-image` : `cover-view`相当于\n\n```position: fixed; ```\n\n但在其中可以写自己的布局。\n\n`cover-image`和`cover-view`用法相同，区别在于`cover-image`只可以放图片，它可以嵌套在`cover-view`中\n\n```html\n<template>\n\t<view class=\"page\">\n\t\t<video class=\"video\" id=\"demoVideo\" :controls=\"false\" :enable-progress-gesture=\"false\" :show-center-play-btn=\"true\" src=\"https://img.cdn.aliyun.dcloud.net.cn/guide/uniapp/%E7%AC%AC1%E8%AE%B2%EF%BC%88uni-app%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D%EF%BC%89-%20DCloud%E5%AE%98%E6%96%B9%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B@20181126-lite.m4v\">\n\t\t\t<cover-view class=\"controls-title\">简单的自定义 controls</cover-view>\n\t\t\t<cover-image class=\"controls-play img\" @click=\"play\" src=\"/static/play.png\"></cover-image>\n\t\t\t<cover-image class=\"controls-pause img\" @click=\"pause\" src=\"/static/pause.png\"></cover-image>\n\t\t</video>\n\t</view>\n</template>\n```\n\n`button`\n\n`input`\n\n\n\n### 6. 自定义组件的使用\n\n### 7. 基础 api 用法\n\n### 8. 条件编译\n\n### 9. 页面布局\n\n\n\n","slug":"uni-app基础","published":1,"updated":"2023-04-10T12:27:07.813Z","_id":"clgaggurj0000jwwi2gt6ehhg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、uni-app重点总结\"><a href=\"#一、uni-app重点总结\" class=\"headerlink\" title=\"一、uni-app重点总结\"></a>一、uni-app重点总结</h2><h3 id=\"1-uniapp-规范\"><a href=\"#1-uniapp-规范\" class=\"headerlink\" title=\"1. uniapp 规范\"></a>1. uniapp 规范</h3><ul>\n<li>页面遵循vue语法，模板块、脚本块和样式块。</li>\n<li>页面遵循vue单文件组件规范（SFC）</li>\n<li>页面标签遵循小程序语法规范</li>\n<li>接口接近小程序规范</li>\n<li>数据绑定及事件处理遵循vue规范</li>\n<li>为兼容多端运行，遵循flex布局。</li>\n</ul>\n<h3 id=\"2-uniapp-特色\"><a href=\"#2-uniapp-特色\" class=\"headerlink\" title=\"2. uniapp 特色\"></a>2. uniapp 特色</h3><ul>\n<li><strong>条件编译</strong></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> APP-PLUS</span></span><br><span class=\"line\">\t<span class=\"comment\">// 需要条件编译的代码</span></span><br><span class=\"line\">\t<span class=\"comment\">// 此段表示：仅出现在APP平台下的代码</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> H5</span></span><br><span class=\"line\"> \t<span class=\"comment\">// 需要条件编译的代码</span></span><br><span class=\"line\">\t<span class=\"comment\">// 此段表示：除了h5平台，其他平台均存在的代码</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> H5 || MP-WEIXIN</span></span><br><span class=\"line\"> \t<span class=\"comment\">// 需要条件编译的代码</span></span><br><span class=\"line\">\t<span class=\"comment\">// 此段表示：在h5平台或微信小程序平台存在的代码</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>App端的Nvue开发</li>\n</ul>\n<p>Nvue是native-vue的简写。是在uniapp中以.nvue结尾的文件，它为app提供了原生的渲染能力。</p>\n<p>Nvue内置了weex的渲染引擎，所以在.nvue文件中，既可以使用weex内置的方法，也可以使用uni-app的内置方法。</p>\n<p><span style = \"color: #00ffff\"><strong>只能在NATIVE端使用。</strong></span></p>\n<ul>\n<li>HTML5+ </li>\n</ul>\n<p>HTML5+引擎为应用提供了原生的安卓端和ios端的方法。有一些复杂功能在html5无法做到时，可以使用html5+引擎。</p>\n<p><span style = \"color: #00ffff\"><strong>只能在NATIVE端使用</strong></span></p>\n<h2 id=\"二、创建uniapp项目\"><a href=\"#二、创建uniapp项目\" class=\"headerlink\" title=\"二、创建uniapp项目\"></a>二、创建uniapp项目</h2><h3 id=\"1-通过hbuilder创建\"><a href=\"#1-通过hbuilder创建\" class=\"headerlink\" title=\"1.  通过hbuilder创建\"></a>1.  通过hbuilder创建</h3><p>安装好hbuilder后，<img src=\"/images/image-20230409164610512.png\" alt=\"image-20230409164610512\"></p>\n<p><img src=\"/images/image-20230409164532726.png\"></p>\n<p>运行：</p>\n<p><img src=\"/images/image-20230409164759496.png\" alt=\"image-20230409164759496\"></p>\n<p><img src=\"/images/image-20230409165247195.png\"></p>\n<h3 id=\"2-通过vue命令行创建\"><a href=\"#2-通过vue命令行创建\" class=\"headerlink\" title=\"2.  通过vue命令行创建\"></a>2.  通过vue命令行创建</h3><h3 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h3><p>全局安装vue-cli</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建uni-app\"><a href=\"#创建uni-app\" class=\"headerlink\" title=\"创建uni-app\"></a>创建uni-app</h3><p>使用正式版（对应HBuilderX最新正式版）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create -p dcloudio/uni-preset-vue my-project</span><br></pre></td></tr></table></figure>\n\n<p>使用alpha版（对应HBuilderX最新alpha版）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create -p dcloudio/uni-preset-vue#alpha my-alpha-project</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三、语法\"><a href=\"#三、语法\" class=\"headerlink\" title=\"三、语法\"></a>三、语法</h2><h3 id=\"1-模板语法\"><a href=\"#1-模板语法\" class=\"headerlink\" title=\"1. 模板语法\"></a>1. 模板语法</h3><p>和vue一样</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;className&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;consoleTitle&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t&#123;&#123;title&#125;&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">title</span>: <span class=\"string\">&#x27;uniapp&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">className</span>: <span class=\"string\">&#x27;title&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"title function_\">onLoad</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.title</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t\t<span class=\"attribute\">color</span>: <span class=\"number\">#00ff00</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-数据绑定\"><a href=\"#2-数据绑定\" class=\"headerlink\" title=\"2. 数据绑定\"></a>2. 数据绑定</h3><p>在小程序中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">title</span>: <span class=\"string\">&#x27;title&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在uni-app中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">title</span> = <span class=\"string\">&#x27;title&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>其实就和vue是一样的。</p>\n<h3 id=\"3-条件判断\"><a href=\"#3-条件判断\" class=\"headerlink\" title=\"3. 条件判断\"></a>3. 条件判断</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;title===&#x27;uniapp&#x27;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;className&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;consoleTitle&quot;</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注：v-show在uni-app非h5页面中会有坑。尽量不要把v-show放在组件上，在组件外层套一层view。</p>\n<h3 id=\"4-列表渲染\"><a href=\"#4-列表渲染\" class=\"headerlink\" title=\"4. 列表渲染\"></a>4. 列表渲染</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">v-for</span> = <span class=\"string\">&quot;(list,index) in lists&quot;</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;list.name&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-内置组件\"><a href=\"#5-内置组件\" class=\"headerlink\" title=\"5. 内置组件\"></a>5. 内置组件</h3><p><code>view</code>相当于<code>div</code></p>\n<p><code>text</code>相当于<code>span</code></p>\n<p><code>scroll-view</code></p>\n<p><code>swiper</code>和<code>swiper-item</code></p>\n<p><code>match-media</code></p>\n<p><code>movable-area</code>和<code>movable-view</code>：即手指/鼠标按住<code>movable-view</code>拖动或双指缩放，但拖不出<code>movable-area</code>规定的范围。</p>\n<p><code>movable-view</code>必须在<code>movable-area</code>组件中，并且必须是直接子节点，否则不能移动。</p>\n<p><code>cover-view</code>和 <code>cover-image</code> : <code>cover-view</code>相当于</p>\n<p><code>position: fixed; </code></p>\n<p>但在其中可以写自己的布局。</p>\n<p><code>cover-image</code>和<code>cover-view</code>用法相同，区别在于<code>cover-image</code>只可以放图片，它可以嵌套在<code>cover-view</code>中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demoVideo&quot;</span> <span class=\"attr\">:controls</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">:enable-progress-gesture</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">:show-center-play-btn</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://img.cdn.aliyun.dcloud.net.cn/guide/uniapp/%E7%AC%AC1%E8%AE%B2%EF%BC%88uni-app%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D%EF%BC%89-%20DCloud%E5%AE%98%E6%96%B9%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B@20181126-lite.m4v&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">cover-view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;controls-title&quot;</span>&gt;</span>简单的自定义 controls<span class=\"tag\">&lt;/<span class=\"name\">cover-view</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">cover-image</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;controls-play img&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;play&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/static/play.png&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cover-image</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">cover-image</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;controls-pause img&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;pause&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/static/pause.png&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cover-image</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>button</code></p>\n<p><code>input</code></p>\n<h3 id=\"6-自定义组件的使用\"><a href=\"#6-自定义组件的使用\" class=\"headerlink\" title=\"6. 自定义组件的使用\"></a>6. 自定义组件的使用</h3><h3 id=\"7-基础-api-用法\"><a href=\"#7-基础-api-用法\" class=\"headerlink\" title=\"7. 基础 api 用法\"></a>7. 基础 api 用法</h3><h3 id=\"8-条件编译\"><a href=\"#8-条件编译\" class=\"headerlink\" title=\"8. 条件编译\"></a>8. 条件编译</h3><h3 id=\"9-页面布局\"><a href=\"#9-页面布局\" class=\"headerlink\" title=\"9. 页面布局\"></a>9. 页面布局</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、uni-app重点总结\"><a href=\"#一、uni-app重点总结\" class=\"headerlink\" title=\"一、uni-app重点总结\"></a>一、uni-app重点总结</h2><h3 id=\"1-uniapp-规范\"><a href=\"#1-uniapp-规范\" class=\"headerlink\" title=\"1. uniapp 规范\"></a>1. uniapp 规范</h3><ul>\n<li>页面遵循vue语法，模板块、脚本块和样式块。</li>\n<li>页面遵循vue单文件组件规范（SFC）</li>\n<li>页面标签遵循小程序语法规范</li>\n<li>接口接近小程序规范</li>\n<li>数据绑定及事件处理遵循vue规范</li>\n<li>为兼容多端运行，遵循flex布局。</li>\n</ul>\n<h3 id=\"2-uniapp-特色\"><a href=\"#2-uniapp-特色\" class=\"headerlink\" title=\"2. uniapp 特色\"></a>2. uniapp 特色</h3><ul>\n<li><strong>条件编译</strong></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> APP-PLUS</span></span><br><span class=\"line\">\t<span class=\"comment\">// 需要条件编译的代码</span></span><br><span class=\"line\">\t<span class=\"comment\">// 此段表示：仅出现在APP平台下的代码</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> H5</span></span><br><span class=\"line\"> \t<span class=\"comment\">// 需要条件编译的代码</span></span><br><span class=\"line\">\t<span class=\"comment\">// 此段表示：除了h5平台，其他平台均存在的代码</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> H5 || MP-WEIXIN</span></span><br><span class=\"line\"> \t<span class=\"comment\">// 需要条件编译的代码</span></span><br><span class=\"line\">\t<span class=\"comment\">// 此段表示：在h5平台或微信小程序平台存在的代码</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>App端的Nvue开发</li>\n</ul>\n<p>Nvue是native-vue的简写。是在uniapp中以.nvue结尾的文件，它为app提供了原生的渲染能力。</p>\n<p>Nvue内置了weex的渲染引擎，所以在.nvue文件中，既可以使用weex内置的方法，也可以使用uni-app的内置方法。</p>\n<p><span style = \"color: #00ffff\"><strong>只能在NATIVE端使用。</strong></span></p>\n<ul>\n<li>HTML5+ </li>\n</ul>\n<p>HTML5+引擎为应用提供了原生的安卓端和ios端的方法。有一些复杂功能在html5无法做到时，可以使用html5+引擎。</p>\n<p><span style = \"color: #00ffff\"><strong>只能在NATIVE端使用</strong></span></p>\n<h2 id=\"二、创建uniapp项目\"><a href=\"#二、创建uniapp项目\" class=\"headerlink\" title=\"二、创建uniapp项目\"></a>二、创建uniapp项目</h2><h3 id=\"1-通过hbuilder创建\"><a href=\"#1-通过hbuilder创建\" class=\"headerlink\" title=\"1.  通过hbuilder创建\"></a>1.  通过hbuilder创建</h3><p>安装好hbuilder后，<img src=\"/images/image-20230409164610512.png\" alt=\"image-20230409164610512\"></p>\n<p><img src=\"/images/image-20230409164532726.png\"></p>\n<p>运行：</p>\n<p><img src=\"/images/image-20230409164759496.png\" alt=\"image-20230409164759496\"></p>\n<p><img src=\"/images/image-20230409165247195.png\"></p>\n<h3 id=\"2-通过vue命令行创建\"><a href=\"#2-通过vue命令行创建\" class=\"headerlink\" title=\"2.  通过vue命令行创建\"></a>2.  通过vue命令行创建</h3><h3 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h3><p>全局安装vue-cli</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建uni-app\"><a href=\"#创建uni-app\" class=\"headerlink\" title=\"创建uni-app\"></a>创建uni-app</h3><p>使用正式版（对应HBuilderX最新正式版）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create -p dcloudio/uni-preset-vue my-project</span><br></pre></td></tr></table></figure>\n\n<p>使用alpha版（对应HBuilderX最新alpha版）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create -p dcloudio/uni-preset-vue#alpha my-alpha-project</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三、语法\"><a href=\"#三、语法\" class=\"headerlink\" title=\"三、语法\"></a>三、语法</h2><h3 id=\"1-模板语法\"><a href=\"#1-模板语法\" class=\"headerlink\" title=\"1. 模板语法\"></a>1. 模板语法</h3><p>和vue一样</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;className&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;consoleTitle&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t&#123;&#123;title&#125;&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">title</span>: <span class=\"string\">&#x27;uniapp&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">className</span>: <span class=\"string\">&#x27;title&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"title function_\">onLoad</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t<span class=\"selector-class\">.title</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t\t<span class=\"attribute\">color</span>: <span class=\"number\">#00ff00</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-数据绑定\"><a href=\"#2-数据绑定\" class=\"headerlink\" title=\"2. 数据绑定\"></a>2. 数据绑定</h3><p>在小程序中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">title</span>: <span class=\"string\">&#x27;title&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在uni-app中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">title</span> = <span class=\"string\">&#x27;title&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>其实就和vue是一样的。</p>\n<h3 id=\"3-条件判断\"><a href=\"#3-条件判断\" class=\"headerlink\" title=\"3. 条件判断\"></a>3. 条件判断</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;title===&#x27;uniapp&#x27;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;className&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;consoleTitle&quot;</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;title&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注：v-show在uni-app非h5页面中会有坑。尽量不要把v-show放在组件上，在组件外层套一层view。</p>\n<h3 id=\"4-列表渲染\"><a href=\"#4-列表渲染\" class=\"headerlink\" title=\"4. 列表渲染\"></a>4. 列表渲染</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">v-for</span> = <span class=\"string\">&quot;(list,index) in lists&quot;</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;list.name&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-内置组件\"><a href=\"#5-内置组件\" class=\"headerlink\" title=\"5. 内置组件\"></a>5. 内置组件</h3><p><code>view</code>相当于<code>div</code></p>\n<p><code>text</code>相当于<code>span</code></p>\n<p><code>scroll-view</code></p>\n<p><code>swiper</code>和<code>swiper-item</code></p>\n<p><code>match-media</code></p>\n<p><code>movable-area</code>和<code>movable-view</code>：即手指/鼠标按住<code>movable-view</code>拖动或双指缩放，但拖不出<code>movable-area</code>规定的范围。</p>\n<p><code>movable-view</code>必须在<code>movable-area</code>组件中，并且必须是直接子节点，否则不能移动。</p>\n<p><code>cover-view</code>和 <code>cover-image</code> : <code>cover-view</code>相当于</p>\n<p><code>position: fixed; </code></p>\n<p>但在其中可以写自己的布局。</p>\n<p><code>cover-image</code>和<code>cover-view</code>用法相同，区别在于<code>cover-image</code>只可以放图片，它可以嵌套在<code>cover-view</code>中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demoVideo&quot;</span> <span class=\"attr\">:controls</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">:enable-progress-gesture</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">:show-center-play-btn</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://img.cdn.aliyun.dcloud.net.cn/guide/uniapp/%E7%AC%AC1%E8%AE%B2%EF%BC%88uni-app%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D%EF%BC%89-%20DCloud%E5%AE%98%E6%96%B9%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B@20181126-lite.m4v&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">cover-view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;controls-title&quot;</span>&gt;</span>简单的自定义 controls<span class=\"tag\">&lt;/<span class=\"name\">cover-view</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">cover-image</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;controls-play img&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;play&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/static/play.png&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cover-image</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">cover-image</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;controls-pause img&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;pause&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/static/pause.png&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cover-image</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>button</code></p>\n<p><code>input</code></p>\n<h3 id=\"6-自定义组件的使用\"><a href=\"#6-自定义组件的使用\" class=\"headerlink\" title=\"6. 自定义组件的使用\"></a>6. 自定义组件的使用</h3><h3 id=\"7-基础-api-用法\"><a href=\"#7-基础-api-用法\" class=\"headerlink\" title=\"7. 基础 api 用法\"></a>7. 基础 api 用法</h3><h3 id=\"8-条件编译\"><a href=\"#8-条件编译\" class=\"headerlink\" title=\"8. 条件编译\"></a>8. 条件编译</h3><h3 id=\"9-页面布局\"><a href=\"#9-页面布局\" class=\"headerlink\" title=\"9. 页面布局\"></a>9. 页面布局</h3>"},{"title":"【ai绘画】midjourney试水合集","date":"2023-04-10T11:12:51.000Z","_content":"\n准备之后用关键词和命令还有参数一一试水\n都丢在这里。\n\n觉得midjourney很适合生成连续的故事什么的\n\n![](/images/image-20230410202054882.png)\n\n![](/images/image-20230410192742420.png)\n\n![](/images/image-20230410192047065.png)\n\n![](/images/image-20230410192107578.png)\n\n![](/images/image-20230410192127714.png)\n\n![](/images/image-20230410192145432.png)\n\n![](/images/image-20230410193749845.png)\n\n![](/images/image-20230410192201415.png)\n\n![](/images/image-20230410192315900.png)\n\n![](/images/image-20230410192246017.png)\n\n![](/images/image-20230410192301872.png)\n\n![](/images/image-20230410192335421.png)\n\n![](/images/image-20230410194339460.png)\n\n![](/images/image-20230410195242067.png)\n\n![](/images/image-20230410195212944.png)\n\n![](/images/image-20230410193945910.png)\n\n![](/images/image-20230410193810333.png)\n\n## 关键词\n\nA handsome and strong soldier wearing green military uniform, with half of his face visible, in a Japanese anime style. The illustration is semi-thickly painted with bright and colorful tones, resulting in an attractive and glossy finish. \n\nadg\n\nThe scene is set during daytime, under the shining sun. A sweet-looking Japanese-style girl is depicted from the waist up, sporting double buns with her hair mostly blue but also featuring some colorful strands. Her blue eyes are accentuated by a semi-thick paint style and the lighting is coming from the side, highlighting her slightly tilted head and resulting in an attractive glossy finish. \n\n3d风格\n3d art c4d ultra detoiled ","source":"_posts/midjourney5.md","raw":"---\ntitle: 【ai绘画】midjourney试水合集\ndate: 2023-04-10 19:12:51\ntags: Midjourney\ncategories: 绘画\n---\n\n准备之后用关键词和命令还有参数一一试水\n都丢在这里。\n\n觉得midjourney很适合生成连续的故事什么的\n\n![](/images/image-20230410202054882.png)\n\n![](/images/image-20230410192742420.png)\n\n![](/images/image-20230410192047065.png)\n\n![](/images/image-20230410192107578.png)\n\n![](/images/image-20230410192127714.png)\n\n![](/images/image-20230410192145432.png)\n\n![](/images/image-20230410193749845.png)\n\n![](/images/image-20230410192201415.png)\n\n![](/images/image-20230410192315900.png)\n\n![](/images/image-20230410192246017.png)\n\n![](/images/image-20230410192301872.png)\n\n![](/images/image-20230410192335421.png)\n\n![](/images/image-20230410194339460.png)\n\n![](/images/image-20230410195242067.png)\n\n![](/images/image-20230410195212944.png)\n\n![](/images/image-20230410193945910.png)\n\n![](/images/image-20230410193810333.png)\n\n## 关键词\n\nA handsome and strong soldier wearing green military uniform, with half of his face visible, in a Japanese anime style. The illustration is semi-thickly painted with bright and colorful tones, resulting in an attractive and glossy finish. \n\nadg\n\nThe scene is set during daytime, under the shining sun. A sweet-looking Japanese-style girl is depicted from the waist up, sporting double buns with her hair mostly blue but also featuring some colorful strands. Her blue eyes are accentuated by a semi-thick paint style and the lighting is coming from the side, highlighting her slightly tilted head and resulting in an attractive glossy finish. \n\n3d风格\n3d art c4d ultra detoiled ","slug":"midjourney5","published":1,"updated":"2023-04-18T03:31:03.863Z","_id":"clgat83w20000p0wic7dc6m57","comments":1,"layout":"post","photos":[],"link":"","content":"<p>准备之后用关键词和命令还有参数一一试水<br>都丢在这里。</p>\n<p>觉得midjourney很适合生成连续的故事什么的</p>\n<p><img src=\"/images/image-20230410202054882.png\"></p>\n<p><img src=\"/images/image-20230410192742420.png\"></p>\n<p><img src=\"/images/image-20230410192047065.png\"></p>\n<p><img src=\"/images/image-20230410192107578.png\"></p>\n<p><img src=\"/images/image-20230410192127714.png\"></p>\n<p><img src=\"/images/image-20230410192145432.png\"></p>\n<p><img src=\"/images/image-20230410193749845.png\"></p>\n<p><img src=\"/images/image-20230410192201415.png\"></p>\n<p><img src=\"/images/image-20230410192315900.png\"></p>\n<p><img src=\"/images/image-20230410192246017.png\"></p>\n<p><img src=\"/images/image-20230410192301872.png\"></p>\n<p><img src=\"/images/image-20230410192335421.png\"></p>\n<p><img src=\"/images/image-20230410194339460.png\"></p>\n<p><img src=\"/images/image-20230410195242067.png\"></p>\n<p><img src=\"/images/image-20230410195212944.png\"></p>\n<p><img src=\"/images/image-20230410193945910.png\"></p>\n<p><img src=\"/images/image-20230410193810333.png\"></p>\n<h2 id=\"关键词\"><a href=\"#关键词\" class=\"headerlink\" title=\"关键词\"></a>关键词</h2><p>A handsome and strong soldier wearing green military uniform, with half of his face visible, in a Japanese anime style. The illustration is semi-thickly painted with bright and colorful tones, resulting in an attractive and glossy finish. </p>\n<p>adg</p>\n<p>The scene is set during daytime, under the shining sun. A sweet-looking Japanese-style girl is depicted from the waist up, sporting double buns with her hair mostly blue but also featuring some colorful strands. Her blue eyes are accentuated by a semi-thick paint style and the lighting is coming from the side, highlighting her slightly tilted head and resulting in an attractive glossy finish. </p>\n<p>3d风格<br>3d art c4d ultra detoiled </p>\n","site":{"data":{}},"excerpt":"","more":"<p>准备之后用关键词和命令还有参数一一试水<br>都丢在这里。</p>\n<p>觉得midjourney很适合生成连续的故事什么的</p>\n<p><img src=\"/images/image-20230410202054882.png\"></p>\n<p><img src=\"/images/image-20230410192742420.png\"></p>\n<p><img src=\"/images/image-20230410192047065.png\"></p>\n<p><img src=\"/images/image-20230410192107578.png\"></p>\n<p><img src=\"/images/image-20230410192127714.png\"></p>\n<p><img src=\"/images/image-20230410192145432.png\"></p>\n<p><img src=\"/images/image-20230410193749845.png\"></p>\n<p><img src=\"/images/image-20230410192201415.png\"></p>\n<p><img src=\"/images/image-20230410192315900.png\"></p>\n<p><img src=\"/images/image-20230410192246017.png\"></p>\n<p><img src=\"/images/image-20230410192301872.png\"></p>\n<p><img src=\"/images/image-20230410192335421.png\"></p>\n<p><img src=\"/images/image-20230410194339460.png\"></p>\n<p><img src=\"/images/image-20230410195242067.png\"></p>\n<p><img src=\"/images/image-20230410195212944.png\"></p>\n<p><img src=\"/images/image-20230410193945910.png\"></p>\n<p><img src=\"/images/image-20230410193810333.png\"></p>\n<h2 id=\"关键词\"><a href=\"#关键词\" class=\"headerlink\" title=\"关键词\"></a>关键词</h2><p>A handsome and strong soldier wearing green military uniform, with half of his face visible, in a Japanese anime style. The illustration is semi-thickly painted with bright and colorful tones, resulting in an attractive and glossy finish. </p>\n<p>adg</p>\n<p>The scene is set during daytime, under the shining sun. A sweet-looking Japanese-style girl is depicted from the waist up, sporting double buns with her hair mostly blue but also featuring some colorful strands. Her blue eyes are accentuated by a semi-thick paint style and the lighting is coming from the side, highlighting her slightly tilted head and resulting in an attractive glossy finish. </p>\n<p>3d风格<br>3d art c4d ultra detoiled </p>\n"},{"title":"【ai绘画】Midjourney 之 Commands（命令概述）","date":"2023-04-10T11:06:10.000Z","_content":"\n## 一、命令简介\n\n1. `/ask`：提问并获得答案。\n2. `/blend`：轻松混合两个图像。\n3. `/daily_theme`：切换是否接收 #daily-theme 频道更新的通知提醒。\n4. `/docs`：在官方 Midjourney Discord 服务器中使用，快速生成本用户指南中涉及的主题链接！\n5. `/faq`：在官方 Midjourney Discord 服务器中使用，快速生成常见提示工艺频道的常见问题解答链接。\n6. `/fast`：切换到快速生成模式。无需排队，需要订阅Standard Plan或Pro Plan（可以使用快速生成模式的时间不同）。\n7. `/help`：显示有关 Midjourney Bot 的有用基本信息和提示。\n8. `/imagine`：使用提示生成图像。\n9. `/info`：查看有关您的帐户以及任何排队或运行的作业的信息。\n10. `/stealth`：对于 Pro 计划订阅者：切换到隐形模式。\n11. `/public`：对于 Pro 计划订阅者：切换到公共模式m。\n12. `/subscribe`：生成用户帐户页面的个人链接。\n13. `/settings`：查看并调整 Midjourney Bot 的设置。\n14. `/prefer option`：创建或管理自定义选项。\n15. `/prefer option list`：查看您当前的自定义选项。\n16. `/prefer suffix`：指定要添加到每个提示结尾的后缀。\n17. `/show`：使用图像作业 ID 在 Discord 中重新生成作业。\n18. `/relax`：切换到放松模式，对应`/fast`快速生成模式。\n19. `/remix`：切换混合模式。使用方法：`/prefer remix`\n20. `/settings`：设置midjourny默认工作方式。比如版本、快速模式、质量等\n\n## 二、常用命令的详解\n\n<span style=\"font-weight:900; color:#f05ef5; background: #ffff4f\">**以上命令部分需要在官方 Midjourney Discord 服务器中使用，所以如果没有用，首先看看自己在不在midjourney的官方服务器。**</span>\n\n2. `/blend`\n\n   作用：融合2-5个图像的风格，生成新的图像。\n\n   详见[Midjourney 之 Prompts](https://bbdcsg.love/2023/04/09/midjourney2/) 使用`/blend`命令混合图像\n\n4. `/docs`：查看文档![](/images/image-20230413175026367.png)\n\n## Settings and Presets（设置与预设）\n\n\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_settings.jpg\" alt=\"显示 Midjourney 设置命令界面的图像\" width=\"800px\"></p>\n\n\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">1️⃣ MJ Version 1</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">2️⃣ MJ Version 2</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">3️⃣ MJ Version 3</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">4️⃣ MJ Version 4</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">5️⃣ MJ Version 5</code></span>\n</div>\n\n**模型版本 5**<font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">仅适用于订阅了 Midjourney 的用户。</font></font>\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 Half Quality</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 Base Quality</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 High Quality (2x cost)</code></span>\n</div> \n\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/quality\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">质量参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n半质量 = </font></font><code data-backticks=\"1\">--q .5</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，基本质量 = </font></font><code data-backticks=\"1\">--q 1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，高质量 = </font></font><code data-backticks=\"1\">--q 2</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Low</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Med</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style High</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Very High</code></span>\n</div>  \nmk\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/stylize\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">风格化参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n风格低 = </font></font><code data-backticks=\"1\">--s 50</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格中 = </font></font><code data-backticks=\"1\">--s 100</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格高 = </font></font><code data-backticks=\"1\">--s 250</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格非常高 = </font></font><code data-backticks=\"1\">--s 750</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🧍&zwj;♂️Public</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🕵️ Stealth</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/stealth\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在公共模式和隐身模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/public</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/stealth</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🎛️ Remix</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">切换到</font></font><a href=\"/docs/remix\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">混音模式</font></font></a><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐇 Fast</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐢 Relax</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/fast-relax\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在Fast 和 Relaxed 模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/fast</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/relax</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;color:#ffffff\">设置说明\n</font></font></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">添加到提示末尾的参数将覆盖使用 所做的选择</font></font><code data-backticks=\"1\">/settings</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n</div></section>\n<h2><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">自定义首选项</font></font></h2>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用 prefer 命令创建自定义选项，以自动将常用参数添加到提示末尾。</font></font><br>\n<code data-backticks=\"1\">/prefer auto_dm</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">完成的工作会自动发送到</font></font><span class=\"popover__title\" data-glossary=\"Direct Message\" data-glossaryid=\"f826e751-6db0-464b-a6c6-191ed45fe7fe\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">直接消息</font></font></span><br>\n<code data-backticks=\"1\">/prefer option</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建或管理自定义选项。</font></font><br>\n<code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">查看您当前的自定义选项。</font></font><br>\n<code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">指定要添加到每个提示末尾的后缀。</font></font></p>\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">偏好选项</font></font></h3>\n<p><code data-backticks=\"1\">/prefer option set &lt;name&gt; &lt;value&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建可用于将多个参数快速添加到提示末尾的自定义参数。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet.png\" width=\"600px\"></p>\n<p><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">mine</code> <code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建一个名为“我的”的选项，转换为</font></font><code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">.</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet_Used.jpg\" width=\"600px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --mine</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">, 被解释为</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">将“值”字段留空以删除选项。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<p><code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">列出使用创建的所有选项</font></font><code data-backticks=\"1\">prefer option set.</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">  用户最多可以有 20 个自定义选项。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionList.png\" width=\"400px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">要删除自定义选项，请使用</font></font><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">&lt;name to delete&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">值字段并将其留空。</font></font></p>\n\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">首选后缀</font></font></h3>\n<p><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在所有提示后自动附加指定的后缀。</font></font><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用不带值的命令进行复位。</font></font></strong></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令示例：</font></font><code data-backticks=\"1\">/prefer suffix</code> <code data-backticks=\"1\">--uplight --video</code></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Only </font></font><a href=\"/parameter-list\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Parameters</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">可以与 一起使用</font></font><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<code data-backticks=\"1\">prefer suffix --no orange</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">is accepted</font></font><br>\n<code data-backticks=\"1\">prefer suffix orange::-1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">不接受</font></font></p>\n</div></section>\n\n<div class=\"glossary-popover-contents\"><div class=\"popover__content hidden f826e751-6db0-464b-a6c6-191ed45fe7fe\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">订阅者可以在 Discord 的直接消息中与 Midjourney Bot 进行一对一的工作，而不是通过公共频道。</font><font style=\"vertical-align: inherit;\">在您的直接消息中制作的图像仍受内容和审核规则的约束，并且将在您的 Midjourney 网站画廊中可见。</font></font></p></div></div>\n                    \n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/quality\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">质量参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n半质量 = </font></font><code data-backticks=\"1\">--q .5</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，基本质量 = </font></font><code data-backticks=\"1\">--q 1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，高质量 = </font></font><code data-backticks=\"1\">--q 2</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Low</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Med</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style High</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Very High</code></span>\n</div>  \n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/stylize\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">风格化参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n风格低 = </font></font><code data-backticks=\"1\">--s 50</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格中 = </font></font><code data-backticks=\"1\">--s 100</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格高 = </font></font><code data-backticks=\"1\">--s 250</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格非常高 = </font></font><code data-backticks=\"1\">--s 750</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🧍&zwj;♂️Public</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🕵️ Stealth</code></span>\n</div>\n\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/stealth\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在公共模式和隐身模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/public</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/stealth</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🎛️ Remix</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">切换到</font></font><a href=\"/docs/remix\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">混音模式</font></font></a><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐇 Fast</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐢 Relax</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/fast-relax\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在Fast 和 Relaxed 模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/fast</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/relax</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<section class=\"infoBox\">\n          <div class=\"title\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;color:#ffffff\">设置说明\n</font></font></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">添加到提示末尾的参数将覆盖使用 所做的选择</font></font><code data-backticks=\"1\">/settings</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n</div></section>\n\n<h2><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">自定义首选项</font></font></h2>\n\n<p>使用 prefer 命令创建自定义选项，以自动将常用参数添加到提示末尾。<br>\n<code>/prefer auto_dm</code>完成的工作会自动发送到option set &lt;name&gt; &lt;value&gt;</code>创建可用于将多个参数快速添加到提示末尾的自定义参数。</p>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet.png\"></p>\n\n<p><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">mine</code> <code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建一个名为“我的”的选项，转换为</font></font><code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">.</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet_Used.jpg\" width=\"600px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --mine</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">, 被解释为</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">将“值”字段留空以删除选项。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<p><code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">列出使用创建的所有选项</font></font><code data-backticks=\"1\">prefer option set.</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">  用户最多可以有 20 个自定义选项。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionList.png\" width=\"400px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">要删除自定义选项，请使用</font></font><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">&lt;name to delete&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">值字段并将其留空。</font></font></p>\n\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">首选后缀</font></font></h3>\n<p><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在所有提示后自动附加指定的后缀。</font></font><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用不带值的命令进行复位。</font></font></strong></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令示例：</font></font><code data-backticks=\"1\">/prefer suffix</code> <code data-backticks=\"1\">--uplight --video</code></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Only </font></font><a href=\"/parameter-list\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Parameters</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">可以与 一起使用</font></font><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<code data-backticks=\"1\">prefer suffix --no orange</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">is accepted</font></font><br>\n<code data-backticks=\"1\">prefer suffix orange::-1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">不接受</font></font></p>\n</div></section>\n<div class=\"glossary-popover-contents\"><div class=\"popover__content hidden f826e751-6db0-464b-a6c6-191ed45fe7fe\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">订阅者可以在 Discord 的直接消息中与 Midjourney Bot 进行一对一的工作，而不是通过公共频道。</font><font style=\"vertical-align: inherit;\">在您的直接消息中制作的图像仍受内容和审核规则的约束，并且将在您的 Midjourney 网站画廊中可见。</font></font></p></div></div>\n                ","source":"_posts/midjourney3.md","raw":"---\ntitle: 【ai绘画】Midjourney 之 Commands（命令概述）\ndate: 2023-04-10 19:06:10\ntags: Midjourney\ncategories: 绘画\n---\n\n## 一、命令简介\n\n1. `/ask`：提问并获得答案。\n2. `/blend`：轻松混合两个图像。\n3. `/daily_theme`：切换是否接收 #daily-theme 频道更新的通知提醒。\n4. `/docs`：在官方 Midjourney Discord 服务器中使用，快速生成本用户指南中涉及的主题链接！\n5. `/faq`：在官方 Midjourney Discord 服务器中使用，快速生成常见提示工艺频道的常见问题解答链接。\n6. `/fast`：切换到快速生成模式。无需排队，需要订阅Standard Plan或Pro Plan（可以使用快速生成模式的时间不同）。\n7. `/help`：显示有关 Midjourney Bot 的有用基本信息和提示。\n8. `/imagine`：使用提示生成图像。\n9. `/info`：查看有关您的帐户以及任何排队或运行的作业的信息。\n10. `/stealth`：对于 Pro 计划订阅者：切换到隐形模式。\n11. `/public`：对于 Pro 计划订阅者：切换到公共模式m。\n12. `/subscribe`：生成用户帐户页面的个人链接。\n13. `/settings`：查看并调整 Midjourney Bot 的设置。\n14. `/prefer option`：创建或管理自定义选项。\n15. `/prefer option list`：查看您当前的自定义选项。\n16. `/prefer suffix`：指定要添加到每个提示结尾的后缀。\n17. `/show`：使用图像作业 ID 在 Discord 中重新生成作业。\n18. `/relax`：切换到放松模式，对应`/fast`快速生成模式。\n19. `/remix`：切换混合模式。使用方法：`/prefer remix`\n20. `/settings`：设置midjourny默认工作方式。比如版本、快速模式、质量等\n\n## 二、常用命令的详解\n\n<span style=\"font-weight:900; color:#f05ef5; background: #ffff4f\">**以上命令部分需要在官方 Midjourney Discord 服务器中使用，所以如果没有用，首先看看自己在不在midjourney的官方服务器。**</span>\n\n2. `/blend`\n\n   作用：融合2-5个图像的风格，生成新的图像。\n\n   详见[Midjourney 之 Prompts](https://bbdcsg.love/2023/04/09/midjourney2/) 使用`/blend`命令混合图像\n\n4. `/docs`：查看文档![](/images/image-20230413175026367.png)\n\n## Settings and Presets（设置与预设）\n\n\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_settings.jpg\" alt=\"显示 Midjourney 设置命令界面的图像\" width=\"800px\"></p>\n\n\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">1️⃣ MJ Version 1</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">2️⃣ MJ Version 2</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">3️⃣ MJ Version 3</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">4️⃣ MJ Version 4</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">5️⃣ MJ Version 5</code></span>\n</div>\n\n**模型版本 5**<font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">仅适用于订阅了 Midjourney 的用户。</font></font>\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 Half Quality</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 Base Quality</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 High Quality (2x cost)</code></span>\n</div> \n\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/quality\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">质量参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n半质量 = </font></font><code data-backticks=\"1\">--q .5</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，基本质量 = </font></font><code data-backticks=\"1\">--q 1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，高质量 = </font></font><code data-backticks=\"1\">--q 2</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Low</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Med</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style High</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Very High</code></span>\n</div>  \nmk\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/stylize\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">风格化参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n风格低 = </font></font><code data-backticks=\"1\">--s 50</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格中 = </font></font><code data-backticks=\"1\">--s 100</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格高 = </font></font><code data-backticks=\"1\">--s 250</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格非常高 = </font></font><code data-backticks=\"1\">--s 750</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🧍&zwj;♂️Public</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🕵️ Stealth</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/stealth\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在公共模式和隐身模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/public</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/stealth</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🎛️ Remix</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">切换到</font></font><a href=\"/docs/remix\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">混音模式</font></font></a><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐇 Fast</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐢 Relax</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/fast-relax\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在Fast 和 Relaxed 模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/fast</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/relax</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;color:#ffffff\">设置说明\n</font></font></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">添加到提示末尾的参数将覆盖使用 所做的选择</font></font><code data-backticks=\"1\">/settings</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n</div></section>\n<h2><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">自定义首选项</font></font></h2>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用 prefer 命令创建自定义选项，以自动将常用参数添加到提示末尾。</font></font><br>\n<code data-backticks=\"1\">/prefer auto_dm</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">完成的工作会自动发送到</font></font><span class=\"popover__title\" data-glossary=\"Direct Message\" data-glossaryid=\"f826e751-6db0-464b-a6c6-191ed45fe7fe\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">直接消息</font></font></span><br>\n<code data-backticks=\"1\">/prefer option</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建或管理自定义选项。</font></font><br>\n<code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">查看您当前的自定义选项。</font></font><br>\n<code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">指定要添加到每个提示末尾的后缀。</font></font></p>\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">偏好选项</font></font></h3>\n<p><code data-backticks=\"1\">/prefer option set &lt;name&gt; &lt;value&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建可用于将多个参数快速添加到提示末尾的自定义参数。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet.png\" width=\"600px\"></p>\n<p><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">mine</code> <code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建一个名为“我的”的选项，转换为</font></font><code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">.</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet_Used.jpg\" width=\"600px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --mine</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">, 被解释为</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">将“值”字段留空以删除选项。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<p><code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">列出使用创建的所有选项</font></font><code data-backticks=\"1\">prefer option set.</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">  用户最多可以有 20 个自定义选项。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionList.png\" width=\"400px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">要删除自定义选项，请使用</font></font><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">&lt;name to delete&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">值字段并将其留空。</font></font></p>\n\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">首选后缀</font></font></h3>\n<p><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在所有提示后自动附加指定的后缀。</font></font><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用不带值的命令进行复位。</font></font></strong></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令示例：</font></font><code data-backticks=\"1\">/prefer suffix</code> <code data-backticks=\"1\">--uplight --video</code></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Only </font></font><a href=\"/parameter-list\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Parameters</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">可以与 一起使用</font></font><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<code data-backticks=\"1\">prefer suffix --no orange</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">is accepted</font></font><br>\n<code data-backticks=\"1\">prefer suffix orange::-1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">不接受</font></font></p>\n</div></section>\n\n<div class=\"glossary-popover-contents\"><div class=\"popover__content hidden f826e751-6db0-464b-a6c6-191ed45fe7fe\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">订阅者可以在 Discord 的直接消息中与 Midjourney Bot 进行一对一的工作，而不是通过公共频道。</font><font style=\"vertical-align: inherit;\">在您的直接消息中制作的图像仍受内容和审核规则的约束，并且将在您的 Midjourney 网站画廊中可见。</font></font></p></div></div>\n                    \n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/quality\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">质量参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n半质量 = </font></font><code data-backticks=\"1\">--q .5</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，基本质量 = </font></font><code data-backticks=\"1\">--q 1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，高质量 = </font></font><code data-backticks=\"1\">--q 2</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Low</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Med</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style High</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Very High</code></span>\n</div>  \n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/stylize\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">风格化参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n风格低 = </font></font><code data-backticks=\"1\">--s 50</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格中 = </font></font><code data-backticks=\"1\">--s 100</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格高 = </font></font><code data-backticks=\"1\">--s 250</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格非常高 = </font></font><code data-backticks=\"1\">--s 750</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🧍&zwj;♂️Public</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🕵️ Stealth</code></span>\n</div>\n\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/stealth\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在公共模式和隐身模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/public</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/stealth</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🎛️ Remix</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">切换到</font></font><a href=\"/docs/remix\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">混音模式</font></font></a><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐇 Fast</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐢 Relax</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/fast-relax\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在Fast 和 Relaxed 模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/fast</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/relax</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<section class=\"infoBox\">\n          <div class=\"title\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;color:#ffffff\">设置说明\n</font></font></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">添加到提示末尾的参数将覆盖使用 所做的选择</font></font><code data-backticks=\"1\">/settings</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n</div></section>\n\n<h2><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">自定义首选项</font></font></h2>\n\n<p>使用 prefer 命令创建自定义选项，以自动将常用参数添加到提示末尾。<br>\n<code>/prefer auto_dm</code>完成的工作会自动发送到option set &lt;name&gt; &lt;value&gt;</code>创建可用于将多个参数快速添加到提示末尾的自定义参数。</p>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet.png\"></p>\n\n<p><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">mine</code> <code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建一个名为“我的”的选项，转换为</font></font><code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">.</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet_Used.jpg\" width=\"600px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --mine</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">, 被解释为</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">将“值”字段留空以删除选项。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<p><code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">列出使用创建的所有选项</font></font><code data-backticks=\"1\">prefer option set.</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">  用户最多可以有 20 个自定义选项。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionList.png\" width=\"400px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">要删除自定义选项，请使用</font></font><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">&lt;name to delete&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">值字段并将其留空。</font></font></p>\n\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">首选后缀</font></font></h3>\n<p><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在所有提示后自动附加指定的后缀。</font></font><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用不带值的命令进行复位。</font></font></strong></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令示例：</font></font><code data-backticks=\"1\">/prefer suffix</code> <code data-backticks=\"1\">--uplight --video</code></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Only </font></font><a href=\"/parameter-list\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Parameters</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">可以与 一起使用</font></font><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<code data-backticks=\"1\">prefer suffix --no orange</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">is accepted</font></font><br>\n<code data-backticks=\"1\">prefer suffix orange::-1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">不接受</font></font></p>\n</div></section>\n<div class=\"glossary-popover-contents\"><div class=\"popover__content hidden f826e751-6db0-464b-a6c6-191ed45fe7fe\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">订阅者可以在 Discord 的直接消息中与 Midjourney Bot 进行一对一的工作，而不是通过公共频道。</font><font style=\"vertical-align: inherit;\">在您的直接消息中制作的图像仍受内容和审核规则的约束，并且将在您的 Midjourney 网站画廊中可见。</font></font></p></div></div>\n                ","slug":"midjourney3","published":1,"updated":"2023-04-23T09:47:26.683Z","_id":"clgat83w90001p0wi20ih03uu","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、命令简介\"><a href=\"#一、命令简介\" class=\"headerlink\" title=\"一、命令简介\"></a>一、命令简介</h2><ol>\n<li><code>/ask</code>：提问并获得答案。</li>\n<li><code>/blend</code>：轻松混合两个图像。</li>\n<li><code>/daily_theme</code>：切换是否接收 #daily-theme 频道更新的通知提醒。</li>\n<li><code>/docs</code>：在官方 Midjourney Discord 服务器中使用，快速生成本用户指南中涉及的主题链接！</li>\n<li><code>/faq</code>：在官方 Midjourney Discord 服务器中使用，快速生成常见提示工艺频道的常见问题解答链接。</li>\n<li><code>/fast</code>：切换到快速生成模式。无需排队，需要订阅Standard Plan或Pro Plan（可以使用快速生成模式的时间不同）。</li>\n<li><code>/help</code>：显示有关 Midjourney Bot 的有用基本信息和提示。</li>\n<li><code>/imagine</code>：使用提示生成图像。</li>\n<li><code>/info</code>：查看有关您的帐户以及任何排队或运行的作业的信息。</li>\n<li><code>/stealth</code>：对于 Pro 计划订阅者：切换到隐形模式。</li>\n<li><code>/public</code>：对于 Pro 计划订阅者：切换到公共模式m。</li>\n<li><code>/subscribe</code>：生成用户帐户页面的个人链接。</li>\n<li><code>/settings</code>：查看并调整 Midjourney Bot 的设置。</li>\n<li><code>/prefer option</code>：创建或管理自定义选项。</li>\n<li><code>/prefer option list</code>：查看您当前的自定义选项。</li>\n<li><code>/prefer suffix</code>：指定要添加到每个提示结尾的后缀。</li>\n<li><code>/show</code>：使用图像作业 ID 在 Discord 中重新生成作业。</li>\n<li><code>/relax</code>：切换到放松模式，对应<code>/fast</code>快速生成模式。</li>\n<li><code>/remix</code>：切换混合模式。使用方法：<code>/prefer remix</code></li>\n<li><code>/settings</code>：设置midjourny默认工作方式。比如版本、快速模式、质量等</li>\n</ol>\n<h2 id=\"二、常用命令的详解\"><a href=\"#二、常用命令的详解\" class=\"headerlink\" title=\"二、常用命令的详解\"></a>二、常用命令的详解</h2><p><span style=\"font-weight:900; color:#f05ef5; background: #ffff4f\"><strong>以上命令部分需要在官方 Midjourney Discord 服务器中使用，所以如果没有用，首先看看自己在不在midjourney的官方服务器。</strong></span></p>\n<ol start=\"2\">\n<li><p><code>/blend</code></p>\n<p>作用：融合2-5个图像的风格，生成新的图像。</p>\n<p>详见<a href=\"https://bbdcsg.love/2023/04/09/midjourney2/\">Midjourney 之 Prompts</a> 使用<code>/blend</code>命令混合图像</p>\n</li>\n<li><p><code>/docs</code>：查看文档<img src=\"/images/image-20230413175026367.png\"></p>\n</li>\n</ol>\n<h2 id=\"Settings-and-Presets（设置与预设）\"><a href=\"#Settings-and-Presets（设置与预设）\" class=\"headerlink\" title=\"Settings and Presets（设置与预设）\"></a>Settings and Presets（设置与预设）</h2><p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_settings.jpg\" alt=\"显示 Midjourney 设置命令界面的图像\" width=\"800px\"></p>\n\n\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">1️⃣ MJ Version 1</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">2️⃣ MJ Version 2</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">3️⃣ MJ Version 3</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">4️⃣ MJ Version 4</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">5️⃣ MJ Version 5</code></span>\n</div>\n\n<p><strong>模型版本 5</strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">仅适用于订阅了 Midjourney 的用户。</font></font></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 Half Quality</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 Base Quality</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 High Quality (2x cost)</code></span>\n</div> \n\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/quality\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">质量参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n半质量 = </font></font><code data-backticks=\"1\">--q .5</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，基本质量 = </font></font><code data-backticks=\"1\">--q 1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，高质量 = </font></font><code data-backticks=\"1\">--q 2</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Low</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Med</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style High</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Very High</code></span>\n</div>  \nmk\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/stylize\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">风格化参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n风格低 = </font></font><code data-backticks=\"1\">--s 50</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格中 = </font></font><code data-backticks=\"1\">--s 100</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格高 = </font></font><code data-backticks=\"1\">--s 250</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格非常高 = </font></font><code data-backticks=\"1\">--s 750</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🧍&zwj;♂️Public</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🕵️ Stealth</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/stealth\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在公共模式和隐身模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/public</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/stealth</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🎛️ Remix</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">切换到</font></font><a href=\"/docs/remix\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">混音模式</font></font></a><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐇 Fast</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐢 Relax</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/fast-relax\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在Fast 和 Relaxed 模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/fast</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/relax</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;color:#ffffff\">设置说明\n</font></font></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">添加到提示末尾的参数将覆盖使用 所做的选择</font></font><code data-backticks=\"1\">/settings</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n</div></section>\n<h2><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">自定义首选项</font></font></h2>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用 prefer 命令创建自定义选项，以自动将常用参数添加到提示末尾。</font></font><br>\n<code data-backticks=\"1\">/prefer auto_dm</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">完成的工作会自动发送到</font></font><span class=\"popover__title\" data-glossary=\"Direct Message\" data-glossaryid=\"f826e751-6db0-464b-a6c6-191ed45fe7fe\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">直接消息</font></font></span><br>\n<code data-backticks=\"1\">/prefer option</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建或管理自定义选项。</font></font><br>\n<code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">查看您当前的自定义选项。</font></font><br>\n<code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">指定要添加到每个提示末尾的后缀。</font></font></p>\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">偏好选项</font></font></h3>\n<p><code data-backticks=\"1\">/prefer option set &lt;name&gt; &lt;value&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建可用于将多个参数快速添加到提示末尾的自定义参数。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet.png\" width=\"600px\"></p>\n<p><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">mine</code> <code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建一个名为“我的”的选项，转换为</font></font><code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">.</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet_Used.jpg\" width=\"600px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --mine</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">, 被解释为</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">将“值”字段留空以删除选项。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<p><code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">列出使用创建的所有选项</font></font><code data-backticks=\"1\">prefer option set.</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">  用户最多可以有 20 个自定义选项。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionList.png\" width=\"400px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">要删除自定义选项，请使用</font></font><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">&lt;name to delete&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">值字段并将其留空。</font></font></p>\n\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">首选后缀</font></font></h3>\n<p><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在所有提示后自动附加指定的后缀。</font></font><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用不带值的命令进行复位。</font></font></strong></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令示例：</font></font><code data-backticks=\"1\">/prefer suffix</code> <code data-backticks=\"1\">--uplight --video</code></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Only </font></font><a href=\"/parameter-list\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Parameters</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">可以与 一起使用</font></font><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<code data-backticks=\"1\">prefer suffix --no orange</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">is accepted</font></font><br>\n<code data-backticks=\"1\">prefer suffix orange::-1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">不接受</font></font></p>\n</div></section>\n\n<div class=\"glossary-popover-contents\"><div class=\"popover__content hidden f826e751-6db0-464b-a6c6-191ed45fe7fe\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">订阅者可以在 Discord 的直接消息中与 Midjourney Bot 进行一对一的工作，而不是通过公共频道。</font><font style=\"vertical-align: inherit;\">在您的直接消息中制作的图像仍受内容和审核规则的约束，并且将在您的 Midjourney 网站画廊中可见。</font></font></p></div></div>\n                    \n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/quality\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">质量参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n半质量 = </font></font><code data-backticks=\"1\">--q .5</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，基本质量 = </font></font><code data-backticks=\"1\">--q 1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，高质量 = </font></font><code data-backticks=\"1\">--q 2</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Low</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Med</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style High</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Very High</code></span>\n</div>  \n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/stylize\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">风格化参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n风格低 = </font></font><code data-backticks=\"1\">--s 50</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格中 = </font></font><code data-backticks=\"1\">--s 100</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格高 = </font></font><code data-backticks=\"1\">--s 250</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格非常高 = </font></font><code data-backticks=\"1\">--s 750</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🧍&zwj;♂️Public</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🕵️ Stealth</code></span>\n</div>\n\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/stealth\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在公共模式和隐身模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/public</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/stealth</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🎛️ Remix</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">切换到</font></font><a href=\"/docs/remix\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">混音模式</font></font></a><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐇 Fast</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐢 Relax</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/fast-relax\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在Fast 和 Relaxed 模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/fast</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/relax</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<section class=\"infoBox\">\n          <div class=\"title\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;color:#ffffff\">设置说明\n</font></font></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">添加到提示末尾的参数将覆盖使用 所做的选择</font></font><code data-backticks=\"1\">/settings</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n</div></section>\n\n<h2><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">自定义首选项</font></font></h2>\n\n<p>使用 prefer 命令创建自定义选项，以自动将常用参数添加到提示末尾。<br>\n<code>/prefer auto_dm</code>完成的工作会自动发送到option set &lt;name&gt; &lt;value&gt;</code>创建可用于将多个参数快速添加到提示末尾的自定义参数。</p>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet.png\"></p>\n\n<p><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">mine</code> <code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建一个名为“我的”的选项，转换为</font></font><code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">.</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet_Used.jpg\" width=\"600px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --mine</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">, 被解释为</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">将“值”字段留空以删除选项。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<p><code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">列出使用创建的所有选项</font></font><code data-backticks=\"1\">prefer option set.</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">  用户最多可以有 20 个自定义选项。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionList.png\" width=\"400px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">要删除自定义选项，请使用</font></font><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">&lt;name to delete&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">值字段并将其留空。</font></font></p>\n\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">首选后缀</font></font></h3>\n<p><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在所有提示后自动附加指定的后缀。</font></font><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用不带值的命令进行复位。</font></font></strong></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令示例：</font></font><code data-backticks=\"1\">/prefer suffix</code> <code data-backticks=\"1\">--uplight --video</code></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Only </font></font><a href=\"/parameter-list\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Parameters</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">可以与 一起使用</font></font><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<code data-backticks=\"1\">prefer suffix --no orange</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">is accepted</font></font><br>\n<code data-backticks=\"1\">prefer suffix orange::-1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">不接受</font></font></p>\n</div></section>\n<div class=\"glossary-popover-contents\"><div class=\"popover__content hidden f826e751-6db0-464b-a6c6-191ed45fe7fe\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">订阅者可以在 Discord 的直接消息中与 Midjourney Bot 进行一对一的工作，而不是通过公共频道。</font><font style=\"vertical-align: inherit;\">在您的直接消息中制作的图像仍受内容和审核规则的约束，并且将在您的 Midjourney 网站画廊中可见。</font></font></p></div></div>\n                ","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、命令简介\"><a href=\"#一、命令简介\" class=\"headerlink\" title=\"一、命令简介\"></a>一、命令简介</h2><ol>\n<li><code>/ask</code>：提问并获得答案。</li>\n<li><code>/blend</code>：轻松混合两个图像。</li>\n<li><code>/daily_theme</code>：切换是否接收 #daily-theme 频道更新的通知提醒。</li>\n<li><code>/docs</code>：在官方 Midjourney Discord 服务器中使用，快速生成本用户指南中涉及的主题链接！</li>\n<li><code>/faq</code>：在官方 Midjourney Discord 服务器中使用，快速生成常见提示工艺频道的常见问题解答链接。</li>\n<li><code>/fast</code>：切换到快速生成模式。无需排队，需要订阅Standard Plan或Pro Plan（可以使用快速生成模式的时间不同）。</li>\n<li><code>/help</code>：显示有关 Midjourney Bot 的有用基本信息和提示。</li>\n<li><code>/imagine</code>：使用提示生成图像。</li>\n<li><code>/info</code>：查看有关您的帐户以及任何排队或运行的作业的信息。</li>\n<li><code>/stealth</code>：对于 Pro 计划订阅者：切换到隐形模式。</li>\n<li><code>/public</code>：对于 Pro 计划订阅者：切换到公共模式m。</li>\n<li><code>/subscribe</code>：生成用户帐户页面的个人链接。</li>\n<li><code>/settings</code>：查看并调整 Midjourney Bot 的设置。</li>\n<li><code>/prefer option</code>：创建或管理自定义选项。</li>\n<li><code>/prefer option list</code>：查看您当前的自定义选项。</li>\n<li><code>/prefer suffix</code>：指定要添加到每个提示结尾的后缀。</li>\n<li><code>/show</code>：使用图像作业 ID 在 Discord 中重新生成作业。</li>\n<li><code>/relax</code>：切换到放松模式，对应<code>/fast</code>快速生成模式。</li>\n<li><code>/remix</code>：切换混合模式。使用方法：<code>/prefer remix</code></li>\n<li><code>/settings</code>：设置midjourny默认工作方式。比如版本、快速模式、质量等</li>\n</ol>\n<h2 id=\"二、常用命令的详解\"><a href=\"#二、常用命令的详解\" class=\"headerlink\" title=\"二、常用命令的详解\"></a>二、常用命令的详解</h2><p><span style=\"font-weight:900; color:#f05ef5; background: #ffff4f\"><strong>以上命令部分需要在官方 Midjourney Discord 服务器中使用，所以如果没有用，首先看看自己在不在midjourney的官方服务器。</strong></span></p>\n<ol start=\"2\">\n<li><p><code>/blend</code></p>\n<p>作用：融合2-5个图像的风格，生成新的图像。</p>\n<p>详见<a href=\"https://bbdcsg.love/2023/04/09/midjourney2/\">Midjourney 之 Prompts</a> 使用<code>/blend</code>命令混合图像</p>\n</li>\n<li><p><code>/docs</code>：查看文档<img src=\"/images/image-20230413175026367.png\"></p>\n</li>\n</ol>\n<h2 id=\"Settings-and-Presets（设置与预设）\"><a href=\"#Settings-and-Presets（设置与预设）\" class=\"headerlink\" title=\"Settings and Presets（设置与预设）\"></a>Settings and Presets（设置与预设）</h2><p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_settings.jpg\" alt=\"显示 Midjourney 设置命令界面的图像\" width=\"800px\"></p>\n\n\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">1️⃣ MJ Version 1</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">2️⃣ MJ Version 2</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">3️⃣ MJ Version 3</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">4️⃣ MJ Version 4</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">5️⃣ MJ Version 5</code></span>\n</div>\n\n<p><strong>模型版本 5</strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">仅适用于订阅了 Midjourney 的用户。</font></font></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 Half Quality</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 Base Quality</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🔥 High Quality (2x cost)</code></span>\n</div> \n\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/quality\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">质量参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n半质量 = </font></font><code data-backticks=\"1\">--q .5</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，基本质量 = </font></font><code data-backticks=\"1\">--q 1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，高质量 = </font></font><code data-backticks=\"1\">--q 2</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Low</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Med</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style High</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Very High</code></span>\n</div>  \nmk\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/stylize\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">风格化参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n风格低 = </font></font><code data-backticks=\"1\">--s 50</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格中 = </font></font><code data-backticks=\"1\">--s 100</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格高 = </font></font><code data-backticks=\"1\">--s 250</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格非常高 = </font></font><code data-backticks=\"1\">--s 750</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🧍&zwj;♂️Public</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🕵️ Stealth</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/stealth\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在公共模式和隐身模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/public</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/stealth</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🎛️ Remix</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">切换到</font></font><a href=\"/docs/remix\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">混音模式</font></font></a><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐇 Fast</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐢 Relax</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/fast-relax\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在Fast 和 Relaxed 模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/fast</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/relax</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;color:#ffffff\">设置说明\n</font></font></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">添加到提示末尾的参数将覆盖使用 所做的选择</font></font><code data-backticks=\"1\">/settings</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n</div></section>\n<h2><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">自定义首选项</font></font></h2>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用 prefer 命令创建自定义选项，以自动将常用参数添加到提示末尾。</font></font><br>\n<code data-backticks=\"1\">/prefer auto_dm</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">完成的工作会自动发送到</font></font><span class=\"popover__title\" data-glossary=\"Direct Message\" data-glossaryid=\"f826e751-6db0-464b-a6c6-191ed45fe7fe\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">直接消息</font></font></span><br>\n<code data-backticks=\"1\">/prefer option</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建或管理自定义选项。</font></font><br>\n<code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">查看您当前的自定义选项。</font></font><br>\n<code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">指定要添加到每个提示末尾的后缀。</font></font></p>\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">偏好选项</font></font></h3>\n<p><code data-backticks=\"1\">/prefer option set &lt;name&gt; &lt;value&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建可用于将多个参数快速添加到提示末尾的自定义参数。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet.png\" width=\"600px\"></p>\n<p><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">mine</code> <code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建一个名为“我的”的选项，转换为</font></font><code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">.</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet_Used.jpg\" width=\"600px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --mine</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">, 被解释为</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">将“值”字段留空以删除选项。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<p><code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">列出使用创建的所有选项</font></font><code data-backticks=\"1\">prefer option set.</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">  用户最多可以有 20 个自定义选项。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionList.png\" width=\"400px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">要删除自定义选项，请使用</font></font><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">&lt;name to delete&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">值字段并将其留空。</font></font></p>\n\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">首选后缀</font></font></h3>\n<p><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在所有提示后自动附加指定的后缀。</font></font><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用不带值的命令进行复位。</font></font></strong></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令示例：</font></font><code data-backticks=\"1\">/prefer suffix</code> <code data-backticks=\"1\">--uplight --video</code></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Only </font></font><a href=\"/parameter-list\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Parameters</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">可以与 一起使用</font></font><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<code data-backticks=\"1\">prefer suffix --no orange</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">is accepted</font></font><br>\n<code data-backticks=\"1\">prefer suffix orange::-1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">不接受</font></font></p>\n</div></section>\n\n<div class=\"glossary-popover-contents\"><div class=\"popover__content hidden f826e751-6db0-464b-a6c6-191ed45fe7fe\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">订阅者可以在 Discord 的直接消息中与 Midjourney Bot 进行一对一的工作，而不是通过公共频道。</font><font style=\"vertical-align: inherit;\">在您的直接消息中制作的图像仍受内容和审核规则的约束，并且将在您的 Midjourney 网站画廊中可见。</font></font></p></div></div>\n                    \n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/quality\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">质量参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n半质量 = </font></font><code data-backticks=\"1\">--q .5</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，基本质量 = </font></font><code data-backticks=\"1\">--q 1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，高质量 = </font></font><code data-backticks=\"1\">--q 2</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Low</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Med</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style High</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🖌️ Style Very High</code></span>\n</div>  \n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">设置</font><font style=\"vertical-align: inherit;\">用于作业的</font></font><a href=\"/stylize\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">风格化参数。</font></font></a><font style=\"vertical-align: inherit;\"></font><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">\n风格低 = </font></font><code data-backticks=\"1\">--s 50</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格中 = </font></font><code data-backticks=\"1\">--s 100</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格高 = </font></font><code data-backticks=\"1\">--s 250</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，风格非常高 = </font></font><code data-backticks=\"1\">--s 750</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🧍&zwj;♂️Public</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🕵️ Stealth</code></span>\n</div>\n\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/stealth\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在公共模式和隐身模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/public</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/stealth</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🎛️ Remix</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">切换到</font></font><a href=\"/docs/remix\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">混音模式</font></font></a><br>\n<br data-tomark-pass=\"\"></p>\n<div class=\"buttonrowlarge\" data-tomark-pass=\"\">\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐇 Fast</code></span>\n<span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">🐢 Relax</code></span>\n</div>\n<p><font style=\"vertical-align: inherit;\"></font><a href=\"/fast-relax\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在Fast 和 Relaxed 模式</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">之间切换</font><font style=\"vertical-align: inherit;\">。</font><font style=\"vertical-align: inherit;\">对应于</font></font><code data-backticks=\"1\">/fast</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">和</font></font><code data-backticks=\"1\">/relax</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n<section class=\"infoBox\">\n          <div class=\"title\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;color:#ffffff\">设置说明\n</font></font></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">添加到提示末尾的参数将覆盖使用 所做的选择</font></font><code data-backticks=\"1\">/settings</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n</div></section>\n\n<h2><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">自定义首选项</font></font></h2>\n\n<p>使用 prefer 命令创建自定义选项，以自动将常用参数添加到提示末尾。<br>\n<code>/prefer auto_dm</code>完成的工作会自动发送到option set &lt;name&gt; &lt;value&gt;</code>创建可用于将多个参数快速添加到提示末尾的自定义参数。</p>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet.png\"></p>\n\n<p><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">mine</code> <code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">创建一个名为“我的”的选项，转换为</font></font><code data-backticks=\"1\">--hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">.</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionSet_Used.jpg\" width=\"600px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --mine</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">, 被解释为</font></font><code data-backticks=\"1\">/imagine prompt</code> <code data-backticks=\"1\">vibrant California poppies --hd --ar 7:4</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">。</font></font></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">将“值”字段留空以删除选项。</font></font><br>\n<br data-tomark-pass=\"\"></p>\n\n<p><code data-backticks=\"1\">/prefer option list</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">列出使用创建的所有选项</font></font><code data-backticks=\"1\">prefer option set.</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">  用户最多可以有 20 个自定义选项。</font></font></p>\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/PreferOptionList.png\" width=\"400px\"></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">要删除自定义选项，请使用</font></font><code data-backticks=\"1\">/prefer option set</code> <code data-backticks=\"1\">&lt;name to delete&gt;</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">值字段并将其留空。</font></font></p>\n\n<h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">首选后缀</font></font></h3>\n<p><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">在所有提示后自动附加指定的后缀。</font></font><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">使用不带值的命令进行复位。</font></font></strong></p>\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">命令示例：</font></font><code data-backticks=\"1\">/prefer suffix</code> <code data-backticks=\"1\">--uplight --video</code></p>\n\n<section class=\"infoBox\">\n          <div class=\"title\"></div>\n          <div class=\"content\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Only </font></font><a href=\"/parameter-list\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Parameters</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">可以与 一起使用</font></font><code data-backticks=\"1\">/prefer suffix</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">，</font></font><br>\n<code data-backticks=\"1\">prefer suffix --no orange</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">is accepted</font></font><br>\n<code data-backticks=\"1\">prefer suffix orange::-1</code><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">不接受</font></font></p>\n</div></section>\n<div class=\"glossary-popover-contents\"><div class=\"popover__content hidden f826e751-6db0-464b-a6c6-191ed45fe7fe\"><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">订阅者可以在 Discord 的直接消息中与 Midjourney Bot 进行一对一的工作，而不是通过公共频道。</font><font style=\"vertical-align: inherit;\">在您的直接消息中制作的图像仍受内容和审核规则的约束，并且将在您的 Midjourney 网站画廊中可见。</font></font></p></div></div>\n                "},{"title":"【ai绘画】Midjourney 之 Param（参数）","date":"2023-04-10T11:06:10.000Z","_content":"## 一、命令列表\n\n### **1. `--aspect`或 `--ar`**\n\n纵横比。如`--ar 16:9`就是纵横比16:9\n\n### **2. `--chaos <number 0–100>`**\n\n`--chaos <number 0–100>` 改变结果的多样性。较高的值会产生更多不寻常的结果。\n\n`--chaos`接受值 0–100。\n默认`--chaos`值为 0。\n\n### **3. `--no`**\n\n`--no plants` 会尝试从图像中移除植物。\n\n### **4. `--quality <.25>`或 `--q <.25>`**\n\n`--quality <.25, .5, 1, or 2>`, 或 `--q <.25, .5, 1, or 2>` 您要花费多少时间进行渲染。默认值为 1。值越高渲染结果越质量越高，值越低渲染结果越质量越低。\n\n### **5. `--repeat`或`--r`**\n\n`--repeat <1–40>`, or `--r <1–40>` 从单个提示创建多个作业。`--repeat`对于多次快速重新运行作业很有用。\n\n>`--repeat`适用于 Standard 和 Pro[订阅者，](https://docs.midjourney.com/plans)\n>`--repeat` Standard 订阅者接受 2–10 的值。\n>`--repeat`Pro 订阅者接受值 2–40。\n>该参数只能在Fast GPU 模式`--repeat`下使用。 使用作业结果上的重做（重新滚动）🔄 按钮只会重新运行提示一次。\n\n\n\n### **6. `--seed`或`--sameseed`**\n\nMidjourney 机器人使用种子编号创建视觉噪声场，如电视静态，作为生成初始图像网格的起点。种子编号是为每个图像随机生成的，但可以使用 --seed 或 --sameseed 参数指定。使用相同的种子编号和提示将产生相似的结束图像。\n\n### **7. `--stop`**\n\n使用`--stop`参数在流程中途完成作业。以较早的百分比停止作业会产生更模糊、更不详细的结果。\n\n### **8. `--style`**\n\n`--style <4a, 4b, or 4c>`在 Midjourney[模型版本](https://docs.midjourney.com/docs/models)4的版本之间\n`--style <expressive, or cute>`切换 在 Niji[模型版本](https://docs.midjourney.com/docs/models)5的版本之间切换\n\n### **9. `--stylize <number>`或`--s <number>`**\n\n`--stylize <number>`，或`--s <number>` 参数会影响 Midjourney 的默认美学风格应用于 Jobs 的强度。\n\n### **10. `--tile`**\n\n用来生成可用作重复拼贴的图像，比如织物、壁纸、纹理等。\n\n### **11. `--video`**\n\n使用该`--video`参数创建正在生成的初始图像网格的短片。使用信封 ☉️ 表情符号对完成的工作做出反应，让 Midjourney Bot 将视频链接发送到您的直接消息。\n\n> `--video`仅适用于图像网格，不适用于高档。\n> `--video`适用于[模型版本](https://docs.midjourney.com/models) `1`、`2`、`3`、`test`和`testp`。\n\n效果：\n\n<div>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_VideoResult.gif\">\n</div>\n\n### **12. `--uplight`**\n\n![](/images/image-20230423175103467.png)\n\n`--uplight`选择 U 按钮时使用替代的“轻型”升频器。结果更接近原始网格图像。放大后的图像细节更少，更平滑。\n\n### **13. `--upbeta`**\n\n![](/images/image-20230423175106275.png)\n\n`--upbeta`选择 U 按钮时使用替代的 beta 升频器。结果更接近原始网格图像。放大后的图像添加的细节明显更少。\n\n### **14. 默认参数(Model Version 4)**\n\n|        |  --ar   |  --c  |     --q     |    --seed    | --stop |    --style    | --stylize |\n| :----: | :-----: | :---: | :---------: | :----------: | :----: | :-----------: | :-------: |\n| 默认值 |   1:1   |   0   |      1      |     随机     |  100   |      4c       |    100    |\n|  范围  | 1:2–2:1 | 0–100 | .25 .5 or 1 | 0–4294967295 | 10–100 | 4a, 4b, or 4c |  0–1000   |\n\n\n\n### **15. 默认参数 (Model Version 5)**\n\n|        | --ar |  --c  |     --q      |     --c      | --stop | --stylize |\n| :----: | :--: | :---: | :----------: | :----------: | :----: | :-------: |\n| 默认值 | 1:1  |   0   |      1       |     随机     |  100   |    100    |\n|  范围  | any  | 0–100 | .25 .5, or 1 | 0–4294967295 | 10–100 |  0–1000   |\n\n- 大于 2:1 的宽高比是实验性的，可能会产生不可预测的结果。（实测有时会有黑边。）\n\n## 二、`--seed`详细说明\n\n### 1. `--seed`说明\n\n用过 Midjourney 的小伙伴会发现在发送提示词后，MJ 最开始的图像里会有一个非常模糊的噪点团 ，然后逐渐变得具体清晰，而这个噪点团的起点就是“Seed”。\nMJ 依靠它来创建一个视觉噪音场，作为生成初始图像的起点。每个图像的种子值是为随机生成的，但可以用 --seed 参数指定。\n在 **v4** 模型中使用相同的种子值和提示词将产生相同的图像结果，利用这点我们可以生成连贯一致的人物形象或者场景。\n\nSeed是Midjourney图像生成的初始点，每个图像的种子值是随机生成的，但可以用Seed参数保持统一。使用相同的种子值和提示词将产生完全相同的图像结果，利用这但可以生成连贯的人物形象或场景。\n\na rabbit --seed 4100004954，只要seed值一致，那么无论生成几次，只要关键词相同结果都是相同的。\n\n### 2. 获取 `--seed`\n\n使用时要确保服务器开启了隐私设置。\n\n如果是自己创建的服务器，那么需要在个人服务器上右键 - 隐私设置\n\n![](/images/image-20230414155204499.png)\n\n也可以全局设置，Discord - Preferences - 隐私与安全 - 允许服务器成员直接向您发起私聊。\n\n但要注意，这个设置不适用于已经加入的服务器。\n\n![](/images/image-20230414155237311.png)\n\n![](/images/image-20230414155338981.png)\n\n### 3. 使用示例\n\n首先输入描述，然后为描述指定`seed`，`seed`可以随机填，比如我这里写12345，那么生成的四宫格整张图的`seed`值就是`12345`\n\n![](/images/image-20230423181147356.png)\n\n比如我选择了图2作为接下来要持续生成的图，点击`U2`\n\n![](/images/image-20230423182136592.png)\n\n然后获取seed值\n\n![](/images/image-20230424102129976.png)\n\n拿到seed值后，根据上面的关键词，尽量不要变动，然后进一步描述场景、细节等\n\n![](/images/image-20230424102243529.png)\n\n就会发现生成的图片是基于上面的图片去变动的（虽然有时候变动的也挺一言难尽）。\n\n![](/images/image-20230424102616997.png)\n\n**seed值相同，描述值相同，生成的结果也相同。**\n\n## 三、`--chaos`（`--c`）详细说明\n\n#### `--chaos`参数影响初始图像网格变化程度。高`--chaos`值将产生更多不寻常和意想不到的结果和组合。较低的`--chaos`值具有更可靠、可重复的结果。\n\n> `--chaos`接受值 0–100。\n> 默认`--chaos`值为 0。\n\n低chaos可以使结果图像差别低，\n\n高chaos可以使结果图像差别高。\n\n![](/images/image-20230424112750753.png)\n\n![](/images/image-20230424112851699.png)\n\n## 四、 `--remix`详细说明\n\n#### 使用remix模式更改提示、参数、模型版本或变体之间的纵横比。Remix 将采用您的起始图像的一般构图，并将其用作新工作的一部分。重新混合可以帮助改变图像的设置或照明、发展主题或实现棘手的构图。\n\n`Remix`是一项实验性功能，可能会随时更改或删除。\n\n使用`/prefer remix`命令开启或关闭\n\n![](/images/image-20230424120625511.png)\n\n然后在生成图像后，点击`Make Variations`，会弹出`Remix`框。（若remix开启成功，按钮将变成绿色）\n\n![](/images/image-20230424120842336.png)\n\n我将 chinese girl 描述词变为了 cat，点击提交\n\n![](/images/image-20230424120926944.png)\n\n新生成的图片就会以原图为基础，女人变成了喵头。（看起来确实一言难尽吖。。。！！）\n\n![](/images/image-20230424121226422.png)\n\n## 五、`upscaler`详细说明\n\n### 1. 简略说明\n\n#### Midjourney 首先为每个作业生成一个低分辨率图像选项网格。您可以在任何网格图像上使用 Midjourney upscaler 来增加尺寸并添加更多细节。有多种可用于放大图像的放大模型。\n\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">每个图像网格下方的按钮</font><font style=\"vertical-align: inherit;\">用于放大所选图像。</font></font><span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U1</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U2</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U3</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U4</code></span><font style=\"vertical-align: inherit;\"></font></p>\n\n```\n--uplight`, `--upbeta` or `--upanime\n```\n\n点击了某个图像放大器之后，会有一排按钮\n\n![](/images/image-20230424113700430.png)\n\n这就是升频器。\n\n### 2. 对应尺寸和大小\n\n*所有尺寸均适用于 1:1 宽高比的正方形。*\n\n|        模型版本         |  起始网格大小   | V4 default Upscaler | Detail Upscale  |  Light Upscale   |  Beta Upscale   |  Anime Upscale  | Max Upscale** |\n| :---------------------: | :-------------: | :-----------------: | :-------------: | :--------------: | :-------------: | :-------------: | :-----------: |\n| **默认模型** **版本 4** |  **512 x 512**  |  **1024 x 1024** *  | **1024 x 1024** | 1 **024 × 1024** | **2048 x 2048** | **1024 x 1024** |       -       |\n|       **版本 5**        | **1024 x 1024** |          -          |        -        |        -         |        -        |        -        |       -       |\n|          v1–v3          |     256×256     |          -          |  1024 x 1024*   |   1024 x 1024    |   1024 x 1024   |   1024 x 1024   |  1664 x 1664  |\n|          尼基           |    512 x 512    |     1024 x 1024     |   1024 x 1024   |   1024 x 1024    |   2048 x 2048   |   1024 x 1024   |       -       |\n|           虹5           |   1024 x 1024   |          -          |        -        |        -         |        -        |        -        |       -       |\n|        测试/测试        |    512 x 512    |          -          |        -        |        -         |   2048 x 2048   |  1024 x 1024*   |       -       |\n|          高清           |    512 x 512    |          -          |  1536 x 1536*   |   1536 x 1536    |   2048 x 2048   |        -        |  1024 x 1024  |\n\n> `*`= 每个 Midjourney 版本模型的默认升频器。\n> `**`Max Upscale 是一种较旧的资源密集型升频器，仅在用户处于快速模式时可用。\n\n升频器分为Regular (Default) Upscaler、Light Upscaler、Detailed Upscaler、Beta Upscaler、Anime Upscaler、Remaster。切换方式就在每个图片生成后，下方的一排按钮\n\n![](/images/image-20230424114321114.png)\n\n官方文档对每种升频器的介绍非常详细，这里就不多说了。\n\n> Midjourney Model 5\n>\n> The newest [Midjourney Model Version 5](https://docs.midjourney.com/models) (and Niji 5) produces high-resolution 1024 x1024 px image grids without needing an additional step to upscale each mage. When using Midjourney Model Version 5, the `U1` `U2` `U3` `U4` buttons under each image grid will separate the selected image from the initial image grid.\n\n人话：v5模型和niji模型的默认升频器包含了放大图像的作用，因为初始生成的图像就已经是1024*1024了，所以点击`u1`、`u2`、`u3`、`u4`就是将每个图片单独提取出来而已。而其他版本的模型点击`u1`、`u2`、`u3`、`u4`是有放大并添加细节的作用的。\n\n## 六、`--tile`详细说明        \n\n用来生成可用作重复拼贴的图像，比如织物、壁纸、纹理等。\n\n> `--tile`适用于[模型](https://docs.midjourney.com/models) 版本`1`、`2`、`3`和`5`。且仅仅生成一个瓦片。\n>\n> 若想根据该瓦片生成完整壁纸/图案/纹理的话，可以[使用像这种无缝模式检查器](https://www.pycheung.com/checker/)这样的模式制作工具来查看拼贴重复。\n\n使用方法示例：\n\n![](/images/image-20230423180758894.png)\n\n它生成的结果是一块一块的，单独一块被称为瓦片。瓦片重复需要自己去拼接。\n\n## 七、`--stylize`\n\n#### Midjourney Bot 经过训练可以生成有利于艺术色彩、构图和形式的图像。或参数影响该训练应用`--stylize`的`--s`强度。\n\n#### **低`--stylize`生成的图像与提示非常匹配，但艺术性较差。**\n\n#### **高`--stylize`创建的图像非常具有艺术性，但与提示的联系较少。**\n\n`--stylize`的默认值为 100，并且在使用默认 [V4 模型] 时接受 0-1000 的整数值。\n\n不同的[Midjourney 版本模型](https://docs.midjourney.com/models)具有不同的风格化范围。\n\n|            |   v5   |   v4   |    v3     | test/testp | Niji  |\n| :--------: | :----: | :----: | :-------: | :--------: | :---: |\n| 程式化默认 |  100   |  100   |   2500    |    2500    | other |\n| 程式化范围 | 0–1000 | 0–1000 | 625–60000 | 1250–5000  | other |\n\n![](/images/image-20230424113107952.png)\n\n![](/images/image-20230424113120666.png)\n\n## 八、复合提示\n\n比如hot dog（热狗）这种词，如果想分开表示hot 和 dog （一只很热的狗），那就需要复合提示。\n\n复合提示使用`::`表示\n\n### 比如：\n\n```\nhot dog\n```\n\n![](https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_hotdog.jpg)\n\n````\nhot:: dog\n````\n\n![](https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_hot-dog.jpg)\n\n### 再比如：\n\n```\ncup cake illustration\n```\n\n![](https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cupCakeIllustration.jpg)\n\n*纸杯蛋糕插图* 被认为是一起制作纸杯蛋糕的插图图像。\n\n```\ncup:: cake illustration\n```\n\n![Midjourney Prompt 杯子的图像:: 蛋糕插图::](https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cup-cakeIllustration.jpg)\n\n*杯子* 与 *蛋糕插图* 分开考虑，制作杯子中的蛋糕图像。\n\n```\ncup:: cake:: illustration\n```\n\n![](https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cup-cake-illustration.jpg)\n\n*杯子* 、 *蛋糕* 和 *插图* 被分开考虑，制作一个杯子里的蛋糕，带有花朵和蝴蝶等常见的插图元素。\n\n### 权重\n复合提示可以赋予权重\n如`hot::2 dog`，意思是hot的重要性比dog大两倍，又可以写成`hot::2 dog::1`\n+ v4可以接受小数做权重，v1-3只能接受整数，默认为1。\n+ 可以接受负数权重，但所有权重的总和必须为正数。\n+ 负数权重可以用来去掉某些元素\n## 九、排列提升\n\n可以同时处理多个作业，这个我暂时用不到，所以略过了。\n\n简单的用法就是用大括号`{}`分割选项列表，然后快速创建多个作业，最多可以同时创建40个。\n\n### 比如：\n`/imagine prompt` `a {red, green, yellow} bird`\n\n创建并处理三个作业。\n\n相当于：\n\n```\n`/imagine prompt` `a red bird`\n`/imagine prompt` `a green bird`\n`/imagine prompt` `a yellow bird\n```\n\n那这样子就方便去创建一些只有部分元素不同，而整体装饰或构图相同的作业。\n\n+ 可以固定部分描述不变，参数也不变，部分描述变体。\n\n  ```\n  /imagine prompt` `a naturalist illustration of a {pineapple, blueberry, rambutan, banana} bird\n  ```\n\n+ 或者固定部分参数不变，描述不变，尺寸变化等等。\n\n  ```\n  /imagine prompt` `a naturalist illustration of a fruit salad bird --ar {3:2, 1:1, 2:3, 1:2}\n  ```\n\n+ 支持多层嵌套\n\n  ```\n  /imagine prompt` `A {sculpture, painting} of a {seagull {on a pier, on a beach}, poodle {on a sofa, in a truck}}.\n  ```\n\n在我看来，有些像remix，但remix会在原图基础上调整。而这个是直接生成新的。\n\n### 转义\n\n大括号内用逗号做分割，但如果描述包含逗号，可以使用转义字符\n\n```\nimagine prompt` `{red, pastel \\, yellow} bird`\n```\n\n相当于\n\n```\n`/imagine prompt` `a red bird`\n`/imagine prompt` `a pastel, yellow bird\n```\n\n","source":"_posts/midjourney4.md","raw":"---\ntitle: 【ai绘画】Midjourney 之 Param（参数）\ndate: 2023-04-10 19:06:10\ntags: Midjourney\ncategories: 绘画\n---\n## 一、命令列表\n\n### **1. `--aspect`或 `--ar`**\n\n纵横比。如`--ar 16:9`就是纵横比16:9\n\n### **2. `--chaos <number 0–100>`**\n\n`--chaos <number 0–100>` 改变结果的多样性。较高的值会产生更多不寻常的结果。\n\n`--chaos`接受值 0–100。\n默认`--chaos`值为 0。\n\n### **3. `--no`**\n\n`--no plants` 会尝试从图像中移除植物。\n\n### **4. `--quality <.25>`或 `--q <.25>`**\n\n`--quality <.25, .5, 1, or 2>`, 或 `--q <.25, .5, 1, or 2>` 您要花费多少时间进行渲染。默认值为 1。值越高渲染结果越质量越高，值越低渲染结果越质量越低。\n\n### **5. `--repeat`或`--r`**\n\n`--repeat <1–40>`, or `--r <1–40>` 从单个提示创建多个作业。`--repeat`对于多次快速重新运行作业很有用。\n\n>`--repeat`适用于 Standard 和 Pro[订阅者，](https://docs.midjourney.com/plans)\n>`--repeat` Standard 订阅者接受 2–10 的值。\n>`--repeat`Pro 订阅者接受值 2–40。\n>该参数只能在Fast GPU 模式`--repeat`下使用。 使用作业结果上的重做（重新滚动）🔄 按钮只会重新运行提示一次。\n\n\n\n### **6. `--seed`或`--sameseed`**\n\nMidjourney 机器人使用种子编号创建视觉噪声场，如电视静态，作为生成初始图像网格的起点。种子编号是为每个图像随机生成的，但可以使用 --seed 或 --sameseed 参数指定。使用相同的种子编号和提示将产生相似的结束图像。\n\n### **7. `--stop`**\n\n使用`--stop`参数在流程中途完成作业。以较早的百分比停止作业会产生更模糊、更不详细的结果。\n\n### **8. `--style`**\n\n`--style <4a, 4b, or 4c>`在 Midjourney[模型版本](https://docs.midjourney.com/docs/models)4的版本之间\n`--style <expressive, or cute>`切换 在 Niji[模型版本](https://docs.midjourney.com/docs/models)5的版本之间切换\n\n### **9. `--stylize <number>`或`--s <number>`**\n\n`--stylize <number>`，或`--s <number>` 参数会影响 Midjourney 的默认美学风格应用于 Jobs 的强度。\n\n### **10. `--tile`**\n\n用来生成可用作重复拼贴的图像，比如织物、壁纸、纹理等。\n\n### **11. `--video`**\n\n使用该`--video`参数创建正在生成的初始图像网格的短片。使用信封 ☉️ 表情符号对完成的工作做出反应，让 Midjourney Bot 将视频链接发送到您的直接消息。\n\n> `--video`仅适用于图像网格，不适用于高档。\n> `--video`适用于[模型版本](https://docs.midjourney.com/models) `1`、`2`、`3`、`test`和`testp`。\n\n效果：\n\n<div>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_VideoResult.gif\">\n</div>\n\n### **12. `--uplight`**\n\n![](/images/image-20230423175103467.png)\n\n`--uplight`选择 U 按钮时使用替代的“轻型”升频器。结果更接近原始网格图像。放大后的图像细节更少，更平滑。\n\n### **13. `--upbeta`**\n\n![](/images/image-20230423175106275.png)\n\n`--upbeta`选择 U 按钮时使用替代的 beta 升频器。结果更接近原始网格图像。放大后的图像添加的细节明显更少。\n\n### **14. 默认参数(Model Version 4)**\n\n|        |  --ar   |  --c  |     --q     |    --seed    | --stop |    --style    | --stylize |\n| :----: | :-----: | :---: | :---------: | :----------: | :----: | :-----------: | :-------: |\n| 默认值 |   1:1   |   0   |      1      |     随机     |  100   |      4c       |    100    |\n|  范围  | 1:2–2:1 | 0–100 | .25 .5 or 1 | 0–4294967295 | 10–100 | 4a, 4b, or 4c |  0–1000   |\n\n\n\n### **15. 默认参数 (Model Version 5)**\n\n|        | --ar |  --c  |     --q      |     --c      | --stop | --stylize |\n| :----: | :--: | :---: | :----------: | :----------: | :----: | :-------: |\n| 默认值 | 1:1  |   0   |      1       |     随机     |  100   |    100    |\n|  范围  | any  | 0–100 | .25 .5, or 1 | 0–4294967295 | 10–100 |  0–1000   |\n\n- 大于 2:1 的宽高比是实验性的，可能会产生不可预测的结果。（实测有时会有黑边。）\n\n## 二、`--seed`详细说明\n\n### 1. `--seed`说明\n\n用过 Midjourney 的小伙伴会发现在发送提示词后，MJ 最开始的图像里会有一个非常模糊的噪点团 ，然后逐渐变得具体清晰，而这个噪点团的起点就是“Seed”。\nMJ 依靠它来创建一个视觉噪音场，作为生成初始图像的起点。每个图像的种子值是为随机生成的，但可以用 --seed 参数指定。\n在 **v4** 模型中使用相同的种子值和提示词将产生相同的图像结果，利用这点我们可以生成连贯一致的人物形象或者场景。\n\nSeed是Midjourney图像生成的初始点，每个图像的种子值是随机生成的，但可以用Seed参数保持统一。使用相同的种子值和提示词将产生完全相同的图像结果，利用这但可以生成连贯的人物形象或场景。\n\na rabbit --seed 4100004954，只要seed值一致，那么无论生成几次，只要关键词相同结果都是相同的。\n\n### 2. 获取 `--seed`\n\n使用时要确保服务器开启了隐私设置。\n\n如果是自己创建的服务器，那么需要在个人服务器上右键 - 隐私设置\n\n![](/images/image-20230414155204499.png)\n\n也可以全局设置，Discord - Preferences - 隐私与安全 - 允许服务器成员直接向您发起私聊。\n\n但要注意，这个设置不适用于已经加入的服务器。\n\n![](/images/image-20230414155237311.png)\n\n![](/images/image-20230414155338981.png)\n\n### 3. 使用示例\n\n首先输入描述，然后为描述指定`seed`，`seed`可以随机填，比如我这里写12345，那么生成的四宫格整张图的`seed`值就是`12345`\n\n![](/images/image-20230423181147356.png)\n\n比如我选择了图2作为接下来要持续生成的图，点击`U2`\n\n![](/images/image-20230423182136592.png)\n\n然后获取seed值\n\n![](/images/image-20230424102129976.png)\n\n拿到seed值后，根据上面的关键词，尽量不要变动，然后进一步描述场景、细节等\n\n![](/images/image-20230424102243529.png)\n\n就会发现生成的图片是基于上面的图片去变动的（虽然有时候变动的也挺一言难尽）。\n\n![](/images/image-20230424102616997.png)\n\n**seed值相同，描述值相同，生成的结果也相同。**\n\n## 三、`--chaos`（`--c`）详细说明\n\n#### `--chaos`参数影响初始图像网格变化程度。高`--chaos`值将产生更多不寻常和意想不到的结果和组合。较低的`--chaos`值具有更可靠、可重复的结果。\n\n> `--chaos`接受值 0–100。\n> 默认`--chaos`值为 0。\n\n低chaos可以使结果图像差别低，\n\n高chaos可以使结果图像差别高。\n\n![](/images/image-20230424112750753.png)\n\n![](/images/image-20230424112851699.png)\n\n## 四、 `--remix`详细说明\n\n#### 使用remix模式更改提示、参数、模型版本或变体之间的纵横比。Remix 将采用您的起始图像的一般构图，并将其用作新工作的一部分。重新混合可以帮助改变图像的设置或照明、发展主题或实现棘手的构图。\n\n`Remix`是一项实验性功能，可能会随时更改或删除。\n\n使用`/prefer remix`命令开启或关闭\n\n![](/images/image-20230424120625511.png)\n\n然后在生成图像后，点击`Make Variations`，会弹出`Remix`框。（若remix开启成功，按钮将变成绿色）\n\n![](/images/image-20230424120842336.png)\n\n我将 chinese girl 描述词变为了 cat，点击提交\n\n![](/images/image-20230424120926944.png)\n\n新生成的图片就会以原图为基础，女人变成了喵头。（看起来确实一言难尽吖。。。！！）\n\n![](/images/image-20230424121226422.png)\n\n## 五、`upscaler`详细说明\n\n### 1. 简略说明\n\n#### Midjourney 首先为每个作业生成一个低分辨率图像选项网格。您可以在任何网格图像上使用 Midjourney upscaler 来增加尺寸并添加更多细节。有多种可用于放大图像的放大模型。\n\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">每个图像网格下方的按钮</font><font style=\"vertical-align: inherit;\">用于放大所选图像。</font></font><span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U1</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U2</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U3</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U4</code></span><font style=\"vertical-align: inherit;\"></font></p>\n\n```\n--uplight`, `--upbeta` or `--upanime\n```\n\n点击了某个图像放大器之后，会有一排按钮\n\n![](/images/image-20230424113700430.png)\n\n这就是升频器。\n\n### 2. 对应尺寸和大小\n\n*所有尺寸均适用于 1:1 宽高比的正方形。*\n\n|        模型版本         |  起始网格大小   | V4 default Upscaler | Detail Upscale  |  Light Upscale   |  Beta Upscale   |  Anime Upscale  | Max Upscale** |\n| :---------------------: | :-------------: | :-----------------: | :-------------: | :--------------: | :-------------: | :-------------: | :-----------: |\n| **默认模型** **版本 4** |  **512 x 512**  |  **1024 x 1024** *  | **1024 x 1024** | 1 **024 × 1024** | **2048 x 2048** | **1024 x 1024** |       -       |\n|       **版本 5**        | **1024 x 1024** |          -          |        -        |        -         |        -        |        -        |       -       |\n|          v1–v3          |     256×256     |          -          |  1024 x 1024*   |   1024 x 1024    |   1024 x 1024   |   1024 x 1024   |  1664 x 1664  |\n|          尼基           |    512 x 512    |     1024 x 1024     |   1024 x 1024   |   1024 x 1024    |   2048 x 2048   |   1024 x 1024   |       -       |\n|           虹5           |   1024 x 1024   |          -          |        -        |        -         |        -        |        -        |       -       |\n|        测试/测试        |    512 x 512    |          -          |        -        |        -         |   2048 x 2048   |  1024 x 1024*   |       -       |\n|          高清           |    512 x 512    |          -          |  1536 x 1536*   |   1536 x 1536    |   2048 x 2048   |        -        |  1024 x 1024  |\n\n> `*`= 每个 Midjourney 版本模型的默认升频器。\n> `**`Max Upscale 是一种较旧的资源密集型升频器，仅在用户处于快速模式时可用。\n\n升频器分为Regular (Default) Upscaler、Light Upscaler、Detailed Upscaler、Beta Upscaler、Anime Upscaler、Remaster。切换方式就在每个图片生成后，下方的一排按钮\n\n![](/images/image-20230424114321114.png)\n\n官方文档对每种升频器的介绍非常详细，这里就不多说了。\n\n> Midjourney Model 5\n>\n> The newest [Midjourney Model Version 5](https://docs.midjourney.com/models) (and Niji 5) produces high-resolution 1024 x1024 px image grids without needing an additional step to upscale each mage. When using Midjourney Model Version 5, the `U1` `U2` `U3` `U4` buttons under each image grid will separate the selected image from the initial image grid.\n\n人话：v5模型和niji模型的默认升频器包含了放大图像的作用，因为初始生成的图像就已经是1024*1024了，所以点击`u1`、`u2`、`u3`、`u4`就是将每个图片单独提取出来而已。而其他版本的模型点击`u1`、`u2`、`u3`、`u4`是有放大并添加细节的作用的。\n\n## 六、`--tile`详细说明        \n\n用来生成可用作重复拼贴的图像，比如织物、壁纸、纹理等。\n\n> `--tile`适用于[模型](https://docs.midjourney.com/models) 版本`1`、`2`、`3`和`5`。且仅仅生成一个瓦片。\n>\n> 若想根据该瓦片生成完整壁纸/图案/纹理的话，可以[使用像这种无缝模式检查器](https://www.pycheung.com/checker/)这样的模式制作工具来查看拼贴重复。\n\n使用方法示例：\n\n![](/images/image-20230423180758894.png)\n\n它生成的结果是一块一块的，单独一块被称为瓦片。瓦片重复需要自己去拼接。\n\n## 七、`--stylize`\n\n#### Midjourney Bot 经过训练可以生成有利于艺术色彩、构图和形式的图像。或参数影响该训练应用`--stylize`的`--s`强度。\n\n#### **低`--stylize`生成的图像与提示非常匹配，但艺术性较差。**\n\n#### **高`--stylize`创建的图像非常具有艺术性，但与提示的联系较少。**\n\n`--stylize`的默认值为 100，并且在使用默认 [V4 模型] 时接受 0-1000 的整数值。\n\n不同的[Midjourney 版本模型](https://docs.midjourney.com/models)具有不同的风格化范围。\n\n|            |   v5   |   v4   |    v3     | test/testp | Niji  |\n| :--------: | :----: | :----: | :-------: | :--------: | :---: |\n| 程式化默认 |  100   |  100   |   2500    |    2500    | other |\n| 程式化范围 | 0–1000 | 0–1000 | 625–60000 | 1250–5000  | other |\n\n![](/images/image-20230424113107952.png)\n\n![](/images/image-20230424113120666.png)\n\n## 八、复合提示\n\n比如hot dog（热狗）这种词，如果想分开表示hot 和 dog （一只很热的狗），那就需要复合提示。\n\n复合提示使用`::`表示\n\n### 比如：\n\n```\nhot dog\n```\n\n![](https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_hotdog.jpg)\n\n````\nhot:: dog\n````\n\n![](https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_hot-dog.jpg)\n\n### 再比如：\n\n```\ncup cake illustration\n```\n\n![](https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cupCakeIllustration.jpg)\n\n*纸杯蛋糕插图* 被认为是一起制作纸杯蛋糕的插图图像。\n\n```\ncup:: cake illustration\n```\n\n![Midjourney Prompt 杯子的图像:: 蛋糕插图::](https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cup-cakeIllustration.jpg)\n\n*杯子* 与 *蛋糕插图* 分开考虑，制作杯子中的蛋糕图像。\n\n```\ncup:: cake:: illustration\n```\n\n![](https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cup-cake-illustration.jpg)\n\n*杯子* 、 *蛋糕* 和 *插图* 被分开考虑，制作一个杯子里的蛋糕，带有花朵和蝴蝶等常见的插图元素。\n\n### 权重\n复合提示可以赋予权重\n如`hot::2 dog`，意思是hot的重要性比dog大两倍，又可以写成`hot::2 dog::1`\n+ v4可以接受小数做权重，v1-3只能接受整数，默认为1。\n+ 可以接受负数权重，但所有权重的总和必须为正数。\n+ 负数权重可以用来去掉某些元素\n## 九、排列提升\n\n可以同时处理多个作业，这个我暂时用不到，所以略过了。\n\n简单的用法就是用大括号`{}`分割选项列表，然后快速创建多个作业，最多可以同时创建40个。\n\n### 比如：\n`/imagine prompt` `a {red, green, yellow} bird`\n\n创建并处理三个作业。\n\n相当于：\n\n```\n`/imagine prompt` `a red bird`\n`/imagine prompt` `a green bird`\n`/imagine prompt` `a yellow bird\n```\n\n那这样子就方便去创建一些只有部分元素不同，而整体装饰或构图相同的作业。\n\n+ 可以固定部分描述不变，参数也不变，部分描述变体。\n\n  ```\n  /imagine prompt` `a naturalist illustration of a {pineapple, blueberry, rambutan, banana} bird\n  ```\n\n+ 或者固定部分参数不变，描述不变，尺寸变化等等。\n\n  ```\n  /imagine prompt` `a naturalist illustration of a fruit salad bird --ar {3:2, 1:1, 2:3, 1:2}\n  ```\n\n+ 支持多层嵌套\n\n  ```\n  /imagine prompt` `A {sculpture, painting} of a {seagull {on a pier, on a beach}, poodle {on a sofa, in a truck}}.\n  ```\n\n在我看来，有些像remix，但remix会在原图基础上调整。而这个是直接生成新的。\n\n### 转义\n\n大括号内用逗号做分割，但如果描述包含逗号，可以使用转义字符\n\n```\nimagine prompt` `{red, pastel \\, yellow} bird`\n```\n\n相当于\n\n```\n`/imagine prompt` `a red bird`\n`/imagine prompt` `a pastel, yellow bird\n```\n\n","slug":"midjourney4","published":1,"updated":"2023-04-24T06:59:37.561Z","_id":"clgat83w90002p0wiffwo1tdu","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、命令列表\"><a href=\"#一、命令列表\" class=\"headerlink\" title=\"一、命令列表\"></a>一、命令列表</h2><h3 id=\"1-aspect或-ar\"><a href=\"#1-aspect或-ar\" class=\"headerlink\" title=\"1. --aspect或 --ar\"></a><strong>1. <code>--aspect</code>或 <code>--ar</code></strong></h3><p>纵横比。如<code>--ar 16:9</code>就是纵横比16:9</p>\n<h3 id=\"2-chaos-lt-number-0–100-gt\"><a href=\"#2-chaos-lt-number-0–100-gt\" class=\"headerlink\" title=\"2. --chaos &lt;number 0–100&gt;\"></a><strong>2. <code>--chaos &lt;number 0–100&gt;</code></strong></h3><p><code>--chaos &lt;number 0–100&gt;</code> 改变结果的多样性。较高的值会产生更多不寻常的结果。</p>\n<p><code>--chaos</code>接受值 0–100。<br>默认<code>--chaos</code>值为 0。</p>\n<h3 id=\"3-no\"><a href=\"#3-no\" class=\"headerlink\" title=\"3. --no\"></a><strong>3. <code>--no</code></strong></h3><p><code>--no plants</code> 会尝试从图像中移除植物。</p>\n<h3 id=\"4-quality-lt-25-gt-或-q-lt-25-gt\"><a href=\"#4-quality-lt-25-gt-或-q-lt-25-gt\" class=\"headerlink\" title=\"4. --quality &lt;.25&gt;或 --q &lt;.25&gt;\"></a><strong>4. <code>--quality &lt;.25&gt;</code>或 <code>--q &lt;.25&gt;</code></strong></h3><p><code>--quality &lt;.25, .5, 1, or 2&gt;</code>, 或 <code>--q &lt;.25, .5, 1, or 2&gt;</code> 您要花费多少时间进行渲染。默认值为 1。值越高渲染结果越质量越高，值越低渲染结果越质量越低。</p>\n<h3 id=\"5-repeat或-r\"><a href=\"#5-repeat或-r\" class=\"headerlink\" title=\"5. --repeat或--r\"></a><strong>5. <code>--repeat</code>或<code>--r</code></strong></h3><p><code>--repeat &lt;1–40&gt;</code>, or <code>--r &lt;1–40&gt;</code> 从单个提示创建多个作业。<code>--repeat</code>对于多次快速重新运行作业很有用。</p>\n<blockquote>\n<p><code>--repeat</code>适用于 Standard 和 Pro<a href=\"https://docs.midjourney.com/plans\">订阅者，</a><br><code>--repeat</code> Standard 订阅者接受 2–10 的值。<br><code>--repeat</code>Pro 订阅者接受值 2–40。<br>该参数只能在Fast GPU 模式<code>--repeat</code>下使用。 使用作业结果上的重做（重新滚动）🔄 按钮只会重新运行提示一次。</p>\n</blockquote>\n<h3 id=\"6-seed或-sameseed\"><a href=\"#6-seed或-sameseed\" class=\"headerlink\" title=\"6. --seed或--sameseed\"></a><strong>6. <code>--seed</code>或<code>--sameseed</code></strong></h3><p>Midjourney 机器人使用种子编号创建视觉噪声场，如电视静态，作为生成初始图像网格的起点。种子编号是为每个图像随机生成的，但可以使用 –seed 或 –sameseed 参数指定。使用相同的种子编号和提示将产生相似的结束图像。</p>\n<h3 id=\"7-stop\"><a href=\"#7-stop\" class=\"headerlink\" title=\"7. --stop\"></a><strong>7. <code>--stop</code></strong></h3><p>使用<code>--stop</code>参数在流程中途完成作业。以较早的百分比停止作业会产生更模糊、更不详细的结果。</p>\n<h3 id=\"8-style\"><a href=\"#8-style\" class=\"headerlink\" title=\"8. --style\"></a><strong>8. <code>--style</code></strong></h3><p><code>--style &lt;4a, 4b, or 4c&gt;</code>在 Midjourney<a href=\"https://docs.midjourney.com/docs/models\">模型版本</a>4的版本之间<br><code>--style &lt;expressive, or cute&gt;</code>切换 在 Niji<a href=\"https://docs.midjourney.com/docs/models\">模型版本</a>5的版本之间切换</p>\n<h3 id=\"9-stylize-lt-number-gt-或-s-lt-number-gt\"><a href=\"#9-stylize-lt-number-gt-或-s-lt-number-gt\" class=\"headerlink\" title=\"9. --stylize &lt;number&gt;或--s &lt;number&gt;\"></a><strong>9. <code>--stylize &lt;number&gt;</code>或<code>--s &lt;number&gt;</code></strong></h3><p><code>--stylize &lt;number&gt;</code>，或<code>--s &lt;number&gt;</code> 参数会影响 Midjourney 的默认美学风格应用于 Jobs 的强度。</p>\n<h3 id=\"10-tile\"><a href=\"#10-tile\" class=\"headerlink\" title=\"10. --tile\"></a><strong>10. <code>--tile</code></strong></h3><p>用来生成可用作重复拼贴的图像，比如织物、壁纸、纹理等。</p>\n<h3 id=\"11-video\"><a href=\"#11-video\" class=\"headerlink\" title=\"11. --video\"></a><strong>11. <code>--video</code></strong></h3><p>使用该<code>--video</code>参数创建正在生成的初始图像网格的短片。使用信封 ☉️ 表情符号对完成的工作做出反应，让 Midjourney Bot 将视频链接发送到您的直接消息。</p>\n<blockquote>\n<p><code>--video</code>仅适用于图像网格，不适用于高档。<br><code>--video</code>适用于<a href=\"https://docs.midjourney.com/models\">模型版本</a> <code>1</code>、<code>2</code>、<code>3</code>、<code>test</code>和<code>testp</code>。</p>\n</blockquote>\n<p>效果：</p>\n<div>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_VideoResult.gif\">\n</div>\n\n<h3 id=\"12-uplight\"><a href=\"#12-uplight\" class=\"headerlink\" title=\"12. --uplight\"></a><strong>12. <code>--uplight</code></strong></h3><p><img src=\"/images/image-20230423175103467.png\"></p>\n<p><code>--uplight</code>选择 U 按钮时使用替代的“轻型”升频器。结果更接近原始网格图像。放大后的图像细节更少，更平滑。</p>\n<h3 id=\"13-upbeta\"><a href=\"#13-upbeta\" class=\"headerlink\" title=\"13. --upbeta\"></a><strong>13. <code>--upbeta</code></strong></h3><p><img src=\"/images/image-20230423175106275.png\"></p>\n<p><code>--upbeta</code>选择 U 按钮时使用替代的 beta 升频器。结果更接近原始网格图像。放大后的图像添加的细节明显更少。</p>\n<h3 id=\"14-默认参数-Model-Version-4\"><a href=\"#14-默认参数-Model-Version-4\" class=\"headerlink\" title=\"14. 默认参数(Model Version 4)\"></a><strong>14. 默认参数(Model Version 4)</strong></h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">–ar</th>\n<th align=\"center\">–c</th>\n<th align=\"center\">–q</th>\n<th align=\"center\">–seed</th>\n<th align=\"center\">–stop</th>\n<th align=\"center\">–style</th>\n<th align=\"center\">–stylize</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">默认值</td>\n<td align=\"center\">1:1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">随机</td>\n<td align=\"center\">100</td>\n<td align=\"center\">4c</td>\n<td align=\"center\">100</td>\n</tr>\n<tr>\n<td align=\"center\">范围</td>\n<td align=\"center\">1:2–2:1</td>\n<td align=\"center\">0–100</td>\n<td align=\"center\">.25 .5 or 1</td>\n<td align=\"center\">0–4294967295</td>\n<td align=\"center\">10–100</td>\n<td align=\"center\">4a, 4b, or 4c</td>\n<td align=\"center\">0–1000</td>\n</tr>\n</tbody></table>\n<h3 id=\"15-默认参数-Model-Version-5\"><a href=\"#15-默认参数-Model-Version-5\" class=\"headerlink\" title=\"15. 默认参数 (Model Version 5)\"></a><strong>15. 默认参数 (Model Version 5)</strong></h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">–ar</th>\n<th align=\"center\">–c</th>\n<th align=\"center\">–q</th>\n<th align=\"center\">–c</th>\n<th align=\"center\">–stop</th>\n<th align=\"center\">–stylize</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">默认值</td>\n<td align=\"center\">1:1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">随机</td>\n<td align=\"center\">100</td>\n<td align=\"center\">100</td>\n</tr>\n<tr>\n<td align=\"center\">范围</td>\n<td align=\"center\">any</td>\n<td align=\"center\">0–100</td>\n<td align=\"center\">.25 .5, or 1</td>\n<td align=\"center\">0–4294967295</td>\n<td align=\"center\">10–100</td>\n<td align=\"center\">0–1000</td>\n</tr>\n</tbody></table>\n<ul>\n<li>大于 2:1 的宽高比是实验性的，可能会产生不可预测的结果。（实测有时会有黑边。）</li>\n</ul>\n<h2 id=\"二、-seed详细说明\"><a href=\"#二、-seed详细说明\" class=\"headerlink\" title=\"二、--seed详细说明\"></a>二、<code>--seed</code>详细说明</h2><h3 id=\"1-seed说明\"><a href=\"#1-seed说明\" class=\"headerlink\" title=\"1. --seed说明\"></a>1. <code>--seed</code>说明</h3><p>用过 Midjourney 的小伙伴会发现在发送提示词后，MJ 最开始的图像里会有一个非常模糊的噪点团 ，然后逐渐变得具体清晰，而这个噪点团的起点就是“Seed”。<br>MJ 依靠它来创建一个视觉噪音场，作为生成初始图像的起点。每个图像的种子值是为随机生成的，但可以用 –seed 参数指定。<br>在 <strong>v4</strong> 模型中使用相同的种子值和提示词将产生相同的图像结果，利用这点我们可以生成连贯一致的人物形象或者场景。</p>\n<p>Seed是Midjourney图像生成的初始点，每个图像的种子值是随机生成的，但可以用Seed参数保持统一。使用相同的种子值和提示词将产生完全相同的图像结果，利用这但可以生成连贯的人物形象或场景。</p>\n<p>a rabbit –seed 4100004954，只要seed值一致，那么无论生成几次，只要关键词相同结果都是相同的。</p>\n<h3 id=\"2-获取-seed\"><a href=\"#2-获取-seed\" class=\"headerlink\" title=\"2. 获取 --seed\"></a>2. 获取 <code>--seed</code></h3><p>使用时要确保服务器开启了隐私设置。</p>\n<p>如果是自己创建的服务器，那么需要在个人服务器上右键 - 隐私设置</p>\n<p><img src=\"/images/image-20230414155204499.png\"></p>\n<p>也可以全局设置，Discord - Preferences - 隐私与安全 - 允许服务器成员直接向您发起私聊。</p>\n<p>但要注意，这个设置不适用于已经加入的服务器。</p>\n<p><img src=\"/images/image-20230414155237311.png\"></p>\n<p><img src=\"/images/image-20230414155338981.png\"></p>\n<h3 id=\"3-使用示例\"><a href=\"#3-使用示例\" class=\"headerlink\" title=\"3. 使用示例\"></a>3. 使用示例</h3><p>首先输入描述，然后为描述指定<code>seed</code>，<code>seed</code>可以随机填，比如我这里写12345，那么生成的四宫格整张图的<code>seed</code>值就是<code>12345</code></p>\n<p><img src=\"/images/image-20230423181147356.png\"></p>\n<p>比如我选择了图2作为接下来要持续生成的图，点击<code>U2</code></p>\n<p><img src=\"/images/image-20230423182136592.png\"></p>\n<p>然后获取seed值</p>\n<p><img src=\"/images/image-20230424102129976.png\"></p>\n<p>拿到seed值后，根据上面的关键词，尽量不要变动，然后进一步描述场景、细节等</p>\n<p><img src=\"/images/image-20230424102243529.png\"></p>\n<p>就会发现生成的图片是基于上面的图片去变动的（虽然有时候变动的也挺一言难尽）。</p>\n<p><img src=\"/images/image-20230424102616997.png\"></p>\n<p><strong>seed值相同，描述值相同，生成的结果也相同。</strong></p>\n<h2 id=\"三、-chaos（-c）详细说明\"><a href=\"#三、-chaos（-c）详细说明\" class=\"headerlink\" title=\"三、--chaos（--c）详细说明\"></a>三、<code>--chaos</code>（<code>--c</code>）详细说明</h2><h4 id=\"chaos参数影响初始图像网格变化程度。高-chaos值将产生更多不寻常和意想不到的结果和组合。较低的-chaos值具有更可靠、可重复的结果。\"><a href=\"#chaos参数影响初始图像网格变化程度。高-chaos值将产生更多不寻常和意想不到的结果和组合。较低的-chaos值具有更可靠、可重复的结果。\" class=\"headerlink\" title=\"--chaos参数影响初始图像网格变化程度。高--chaos值将产生更多不寻常和意想不到的结果和组合。较低的--chaos值具有更可靠、可重复的结果。\"></a><code>--chaos</code>参数影响初始图像网格变化程度。高<code>--chaos</code>值将产生更多不寻常和意想不到的结果和组合。较低的<code>--chaos</code>值具有更可靠、可重复的结果。</h4><blockquote>\n<p><code>--chaos</code>接受值 0–100。<br>默认<code>--chaos</code>值为 0。</p>\n</blockquote>\n<p>低chaos可以使结果图像差别低，</p>\n<p>高chaos可以使结果图像差别高。</p>\n<p><img src=\"/images/image-20230424112750753.png\"></p>\n<p><img src=\"/images/image-20230424112851699.png\"></p>\n<h2 id=\"四、-remix详细说明\"><a href=\"#四、-remix详细说明\" class=\"headerlink\" title=\"四、 --remix详细说明\"></a>四、 <code>--remix</code>详细说明</h2><h4 id=\"使用remix模式更改提示、参数、模型版本或变体之间的纵横比。Remix-将采用您的起始图像的一般构图，并将其用作新工作的一部分。重新混合可以帮助改变图像的设置或照明、发展主题或实现棘手的构图。\"><a href=\"#使用remix模式更改提示、参数、模型版本或变体之间的纵横比。Remix-将采用您的起始图像的一般构图，并将其用作新工作的一部分。重新混合可以帮助改变图像的设置或照明、发展主题或实现棘手的构图。\" class=\"headerlink\" title=\"使用remix模式更改提示、参数、模型版本或变体之间的纵横比。Remix 将采用您的起始图像的一般构图，并将其用作新工作的一部分。重新混合可以帮助改变图像的设置或照明、发展主题或实现棘手的构图。\"></a>使用remix模式更改提示、参数、模型版本或变体之间的纵横比。Remix 将采用您的起始图像的一般构图，并将其用作新工作的一部分。重新混合可以帮助改变图像的设置或照明、发展主题或实现棘手的构图。</h4><p><code>Remix</code>是一项实验性功能，可能会随时更改或删除。</p>\n<p>使用<code>/prefer remix</code>命令开启或关闭</p>\n<p><img src=\"/images/image-20230424120625511.png\"></p>\n<p>然后在生成图像后，点击<code>Make Variations</code>，会弹出<code>Remix</code>框。（若remix开启成功，按钮将变成绿色）</p>\n<p><img src=\"/images/image-20230424120842336.png\"></p>\n<p>我将 chinese girl 描述词变为了 cat，点击提交</p>\n<p><img src=\"/images/image-20230424120926944.png\"></p>\n<p>新生成的图片就会以原图为基础，女人变成了喵头。（看起来确实一言难尽吖。。。！！）</p>\n<p><img src=\"/images/image-20230424121226422.png\"></p>\n<h2 id=\"五、upscaler详细说明\"><a href=\"#五、upscaler详细说明\" class=\"headerlink\" title=\"五、upscaler详细说明\"></a>五、<code>upscaler</code>详细说明</h2><h3 id=\"1-简略说明\"><a href=\"#1-简略说明\" class=\"headerlink\" title=\"1. 简略说明\"></a>1. 简略说明</h3><h4 id=\"Midjourney-首先为每个作业生成一个低分辨率图像选项网格。您可以在任何网格图像上使用-Midjourney-upscaler-来增加尺寸并添加更多细节。有多种可用于放大图像的放大模型。\"><a href=\"#Midjourney-首先为每个作业生成一个低分辨率图像选项网格。您可以在任何网格图像上使用-Midjourney-upscaler-来增加尺寸并添加更多细节。有多种可用于放大图像的放大模型。\" class=\"headerlink\" title=\"Midjourney 首先为每个作业生成一个低分辨率图像选项网格。您可以在任何网格图像上使用 Midjourney upscaler 来增加尺寸并添加更多细节。有多种可用于放大图像的放大模型。\"></a>Midjourney 首先为每个作业生成一个低分辨率图像选项网格。您可以在任何网格图像上使用 Midjourney upscaler 来增加尺寸并添加更多细节。有多种可用于放大图像的放大模型。</h4><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">每个图像网格下方的按钮</font><font style=\"vertical-align: inherit;\">用于放大所选图像。</font></font><span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U1</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U2</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U3</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U4</code></span><font style=\"vertical-align: inherit;\"></font></p>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--uplight`, `--upbeta` or `--upanime</span><br></pre></td></tr></table></figure>\n\n<p>点击了某个图像放大器之后，会有一排按钮</p>\n<p><img src=\"/images/image-20230424113700430.png\"></p>\n<p>这就是升频器。</p>\n<h3 id=\"2-对应尺寸和大小\"><a href=\"#2-对应尺寸和大小\" class=\"headerlink\" title=\"2. 对应尺寸和大小\"></a>2. 对应尺寸和大小</h3><p><em>所有尺寸均适用于 1:1 宽高比的正方形。</em></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">模型版本</th>\n<th align=\"center\">起始网格大小</th>\n<th align=\"center\">V4 default Upscaler</th>\n<th align=\"center\">Detail Upscale</th>\n<th align=\"center\">Light Upscale</th>\n<th align=\"center\">Beta Upscale</th>\n<th align=\"center\">Anime Upscale</th>\n<th align=\"center\">Max Upscale**</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>默认模型</strong> <strong>版本 4</strong></td>\n<td align=\"center\"><strong>512 x 512</strong></td>\n<td align=\"center\"><strong>1024 x 1024</strong> *</td>\n<td align=\"center\"><strong>1024 x 1024</strong></td>\n<td align=\"center\">1 <strong>024 × 1024</strong></td>\n<td align=\"center\"><strong>2048 x 2048</strong></td>\n<td align=\"center\"><strong>1024 x 1024</strong></td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>版本 5</strong></td>\n<td align=\"center\"><strong>1024 x 1024</strong></td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">v1–v3</td>\n<td align=\"center\">256×256</td>\n<td align=\"center\">-</td>\n<td align=\"center\">1024 x 1024*</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">1664 x 1664</td>\n</tr>\n<tr>\n<td align=\"center\">尼基</td>\n<td align=\"center\">512 x 512</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">2048 x 2048</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">虹5</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">测试/测试</td>\n<td align=\"center\">512 x 512</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">2048 x 2048</td>\n<td align=\"center\">1024 x 1024*</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">高清</td>\n<td align=\"center\">512 x 512</td>\n<td align=\"center\">-</td>\n<td align=\"center\">1536 x 1536*</td>\n<td align=\"center\">1536 x 1536</td>\n<td align=\"center\">2048 x 2048</td>\n<td align=\"center\">-</td>\n<td align=\"center\">1024 x 1024</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><code>*</code>= 每个 Midjourney 版本模型的默认升频器。<br><code>**</code>Max Upscale 是一种较旧的资源密集型升频器，仅在用户处于快速模式时可用。</p>\n</blockquote>\n<p>升频器分为Regular (Default) Upscaler、Light Upscaler、Detailed Upscaler、Beta Upscaler、Anime Upscaler、Remaster。切换方式就在每个图片生成后，下方的一排按钮</p>\n<p><img src=\"/images/image-20230424114321114.png\"></p>\n<p>官方文档对每种升频器的介绍非常详细，这里就不多说了。</p>\n<blockquote>\n<p>Midjourney Model 5</p>\n<p>The newest <a href=\"https://docs.midjourney.com/models\">Midjourney Model Version 5</a> (and Niji 5) produces high-resolution 1024 x1024 px image grids without needing an additional step to upscale each mage. When using Midjourney Model Version 5, the <code>U1</code> <code>U2</code> <code>U3</code> <code>U4</code> buttons under each image grid will separate the selected image from the initial image grid.</p>\n</blockquote>\n<p>人话：v5模型和niji模型的默认升频器包含了放大图像的作用，因为初始生成的图像就已经是1024*1024了，所以点击<code>u1</code>、<code>u2</code>、<code>u3</code>、<code>u4</code>就是将每个图片单独提取出来而已。而其他版本的模型点击<code>u1</code>、<code>u2</code>、<code>u3</code>、<code>u4</code>是有放大并添加细节的作用的。</p>\n<h2 id=\"六、-tile详细说明\"><a href=\"#六、-tile详细说明\" class=\"headerlink\" title=\"六、--tile详细说明\"></a>六、<code>--tile</code>详细说明</h2><p>用来生成可用作重复拼贴的图像，比如织物、壁纸、纹理等。</p>\n<blockquote>\n<p><code>--tile</code>适用于<a href=\"https://docs.midjourney.com/models\">模型</a> 版本<code>1</code>、<code>2</code>、<code>3</code>和<code>5</code>。且仅仅生成一个瓦片。</p>\n<p>若想根据该瓦片生成完整壁纸/图案/纹理的话，可以<a href=\"https://www.pycheung.com/checker/\">使用像这种无缝模式检查器</a>这样的模式制作工具来查看拼贴重复。</p>\n</blockquote>\n<p>使用方法示例：</p>\n<p><img src=\"/images/image-20230423180758894.png\"></p>\n<p>它生成的结果是一块一块的，单独一块被称为瓦片。瓦片重复需要自己去拼接。</p>\n<h2 id=\"七、-stylize\"><a href=\"#七、-stylize\" class=\"headerlink\" title=\"七、--stylize\"></a>七、<code>--stylize</code></h2><h4 id=\"Midjourney-Bot-经过训练可以生成有利于艺术色彩、构图和形式的图像。或参数影响该训练应用-stylize的-s强度。\"><a href=\"#Midjourney-Bot-经过训练可以生成有利于艺术色彩、构图和形式的图像。或参数影响该训练应用-stylize的-s强度。\" class=\"headerlink\" title=\"Midjourney Bot 经过训练可以生成有利于艺术色彩、构图和形式的图像。或参数影响该训练应用--stylize的--s强度。\"></a>Midjourney Bot 经过训练可以生成有利于艺术色彩、构图和形式的图像。或参数影响该训练应用<code>--stylize</code>的<code>--s</code>强度。</h4><h4 id=\"低-stylize生成的图像与提示非常匹配，但艺术性较差。\"><a href=\"#低-stylize生成的图像与提示非常匹配，但艺术性较差。\" class=\"headerlink\" title=\"低--stylize生成的图像与提示非常匹配，但艺术性较差。\"></a><strong>低<code>--stylize</code>生成的图像与提示非常匹配，但艺术性较差。</strong></h4><h4 id=\"高-stylize创建的图像非常具有艺术性，但与提示的联系较少。\"><a href=\"#高-stylize创建的图像非常具有艺术性，但与提示的联系较少。\" class=\"headerlink\" title=\"高--stylize创建的图像非常具有艺术性，但与提示的联系较少。\"></a><strong>高<code>--stylize</code>创建的图像非常具有艺术性，但与提示的联系较少。</strong></h4><p><code>--stylize</code>的默认值为 100，并且在使用默认 [V4 模型] 时接受 0-1000 的整数值。</p>\n<p>不同的<a href=\"https://docs.midjourney.com/models\">Midjourney 版本模型</a>具有不同的风格化范围。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">v5</th>\n<th align=\"center\">v4</th>\n<th align=\"center\">v3</th>\n<th align=\"center\">test/testp</th>\n<th align=\"center\">Niji</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">程式化默认</td>\n<td align=\"center\">100</td>\n<td align=\"center\">100</td>\n<td align=\"center\">2500</td>\n<td align=\"center\">2500</td>\n<td align=\"center\">other</td>\n</tr>\n<tr>\n<td align=\"center\">程式化范围</td>\n<td align=\"center\">0–1000</td>\n<td align=\"center\">0–1000</td>\n<td align=\"center\">625–60000</td>\n<td align=\"center\">1250–5000</td>\n<td align=\"center\">other</td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/image-20230424113107952.png\"></p>\n<p><img src=\"/images/image-20230424113120666.png\"></p>\n<h2 id=\"八、复合提示\"><a href=\"#八、复合提示\" class=\"headerlink\" title=\"八、复合提示\"></a>八、复合提示</h2><p>比如hot dog（热狗）这种词，如果想分开表示hot 和 dog （一只很热的狗），那就需要复合提示。</p>\n<p>复合提示使用<code>::</code>表示</p>\n<h3 id=\"比如：\"><a href=\"#比如：\" class=\"headerlink\" title=\"比如：\"></a>比如：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hot dog</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_hotdog.jpg\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hot:: dog</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_hot-dog.jpg\"></p>\n<h3 id=\"再比如：\"><a href=\"#再比如：\" class=\"headerlink\" title=\"再比如：\"></a>再比如：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cup cake illustration</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cupCakeIllustration.jpg\"></p>\n<p><em>纸杯蛋糕插图</em> 被认为是一起制作纸杯蛋糕的插图图像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cup:: cake illustration</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cup-cakeIllustration.jpg\" alt=\"Midjourney Prompt 杯子的图像:: 蛋糕插图::\"></p>\n<p><em>杯子</em> 与 <em>蛋糕插图</em> 分开考虑，制作杯子中的蛋糕图像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cup:: cake:: illustration</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cup-cake-illustration.jpg\"></p>\n<p><em>杯子</em> 、 <em>蛋糕</em> 和 <em>插图</em> 被分开考虑，制作一个杯子里的蛋糕，带有花朵和蝴蝶等常见的插图元素。</p>\n<h3 id=\"权重\"><a href=\"#权重\" class=\"headerlink\" title=\"权重\"></a>权重</h3><p>复合提示可以赋予权重<br>如<code>hot::2 dog</code>，意思是hot的重要性比dog大两倍，又可以写成<code>hot::2 dog::1</code></p>\n<ul>\n<li>v4可以接受小数做权重，v1-3只能接受整数，默认为1。</li>\n<li>可以接受负数权重，但所有权重的总和必须为正数。</li>\n<li>负数权重可以用来去掉某些元素<h2 id=\"九、排列提升\"><a href=\"#九、排列提升\" class=\"headerlink\" title=\"九、排列提升\"></a>九、排列提升</h2></li>\n</ul>\n<p>可以同时处理多个作业，这个我暂时用不到，所以略过了。</p>\n<p>简单的用法就是用大括号<code>&#123;&#125;</code>分割选项列表，然后快速创建多个作业，最多可以同时创建40个。</p>\n<h3 id=\"比如：-1\"><a href=\"#比如：-1\" class=\"headerlink\" title=\"比如：\"></a>比如：</h3><p><code>/imagine prompt</code> <code>a &#123;red, green, yellow&#125; bird</code></p>\n<p>创建并处理三个作业。</p>\n<p>相当于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`/imagine prompt` `a red bird`</span><br><span class=\"line\">`/imagine prompt` `a green bird`</span><br><span class=\"line\">`/imagine prompt` `a yellow bird</span><br></pre></td></tr></table></figure>\n\n<p>那这样子就方便去创建一些只有部分元素不同，而整体装饰或构图相同的作业。</p>\n<ul>\n<li><p>可以固定部分描述不变，参数也不变，部分描述变体。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/imagine prompt` `a naturalist illustration of a &#123;pineapple, blueberry, rambutan, banana&#125; bird</span><br></pre></td></tr></table></figure></li>\n<li><p>或者固定部分参数不变，描述不变，尺寸变化等等。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/imagine prompt` `a naturalist illustration of a fruit salad bird --ar &#123;3:2, 1:1, 2:3, 1:2&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>支持多层嵌套</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/imagine prompt` `A &#123;sculpture, painting&#125; of a &#123;seagull &#123;on a pier, on a beach&#125;, poodle &#123;on a sofa, in a truck&#125;&#125;.</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>在我看来，有些像remix，但remix会在原图基础上调整。而这个是直接生成新的。</p>\n<h3 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h3><p>大括号内用逗号做分割，但如果描述包含逗号，可以使用转义字符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imagine prompt` `&#123;red, pastel \\, yellow&#125; bird`</span><br></pre></td></tr></table></figure>\n\n<p>相当于</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`/imagine prompt` `a red bird`</span><br><span class=\"line\">`/imagine prompt` `a pastel, yellow bird</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、命令列表\"><a href=\"#一、命令列表\" class=\"headerlink\" title=\"一、命令列表\"></a>一、命令列表</h2><h3 id=\"1-aspect或-ar\"><a href=\"#1-aspect或-ar\" class=\"headerlink\" title=\"1. --aspect或 --ar\"></a><strong>1. <code>--aspect</code>或 <code>--ar</code></strong></h3><p>纵横比。如<code>--ar 16:9</code>就是纵横比16:9</p>\n<h3 id=\"2-chaos-lt-number-0–100-gt\"><a href=\"#2-chaos-lt-number-0–100-gt\" class=\"headerlink\" title=\"2. --chaos &lt;number 0–100&gt;\"></a><strong>2. <code>--chaos &lt;number 0–100&gt;</code></strong></h3><p><code>--chaos &lt;number 0–100&gt;</code> 改变结果的多样性。较高的值会产生更多不寻常的结果。</p>\n<p><code>--chaos</code>接受值 0–100。<br>默认<code>--chaos</code>值为 0。</p>\n<h3 id=\"3-no\"><a href=\"#3-no\" class=\"headerlink\" title=\"3. --no\"></a><strong>3. <code>--no</code></strong></h3><p><code>--no plants</code> 会尝试从图像中移除植物。</p>\n<h3 id=\"4-quality-lt-25-gt-或-q-lt-25-gt\"><a href=\"#4-quality-lt-25-gt-或-q-lt-25-gt\" class=\"headerlink\" title=\"4. --quality &lt;.25&gt;或 --q &lt;.25&gt;\"></a><strong>4. <code>--quality &lt;.25&gt;</code>或 <code>--q &lt;.25&gt;</code></strong></h3><p><code>--quality &lt;.25, .5, 1, or 2&gt;</code>, 或 <code>--q &lt;.25, .5, 1, or 2&gt;</code> 您要花费多少时间进行渲染。默认值为 1。值越高渲染结果越质量越高，值越低渲染结果越质量越低。</p>\n<h3 id=\"5-repeat或-r\"><a href=\"#5-repeat或-r\" class=\"headerlink\" title=\"5. --repeat或--r\"></a><strong>5. <code>--repeat</code>或<code>--r</code></strong></h3><p><code>--repeat &lt;1–40&gt;</code>, or <code>--r &lt;1–40&gt;</code> 从单个提示创建多个作业。<code>--repeat</code>对于多次快速重新运行作业很有用。</p>\n<blockquote>\n<p><code>--repeat</code>适用于 Standard 和 Pro<a href=\"https://docs.midjourney.com/plans\">订阅者，</a><br><code>--repeat</code> Standard 订阅者接受 2–10 的值。<br><code>--repeat</code>Pro 订阅者接受值 2–40。<br>该参数只能在Fast GPU 模式<code>--repeat</code>下使用。 使用作业结果上的重做（重新滚动）🔄 按钮只会重新运行提示一次。</p>\n</blockquote>\n<h3 id=\"6-seed或-sameseed\"><a href=\"#6-seed或-sameseed\" class=\"headerlink\" title=\"6. --seed或--sameseed\"></a><strong>6. <code>--seed</code>或<code>--sameseed</code></strong></h3><p>Midjourney 机器人使用种子编号创建视觉噪声场，如电视静态，作为生成初始图像网格的起点。种子编号是为每个图像随机生成的，但可以使用 –seed 或 –sameseed 参数指定。使用相同的种子编号和提示将产生相似的结束图像。</p>\n<h3 id=\"7-stop\"><a href=\"#7-stop\" class=\"headerlink\" title=\"7. --stop\"></a><strong>7. <code>--stop</code></strong></h3><p>使用<code>--stop</code>参数在流程中途完成作业。以较早的百分比停止作业会产生更模糊、更不详细的结果。</p>\n<h3 id=\"8-style\"><a href=\"#8-style\" class=\"headerlink\" title=\"8. --style\"></a><strong>8. <code>--style</code></strong></h3><p><code>--style &lt;4a, 4b, or 4c&gt;</code>在 Midjourney<a href=\"https://docs.midjourney.com/docs/models\">模型版本</a>4的版本之间<br><code>--style &lt;expressive, or cute&gt;</code>切换 在 Niji<a href=\"https://docs.midjourney.com/docs/models\">模型版本</a>5的版本之间切换</p>\n<h3 id=\"9-stylize-lt-number-gt-或-s-lt-number-gt\"><a href=\"#9-stylize-lt-number-gt-或-s-lt-number-gt\" class=\"headerlink\" title=\"9. --stylize &lt;number&gt;或--s &lt;number&gt;\"></a><strong>9. <code>--stylize &lt;number&gt;</code>或<code>--s &lt;number&gt;</code></strong></h3><p><code>--stylize &lt;number&gt;</code>，或<code>--s &lt;number&gt;</code> 参数会影响 Midjourney 的默认美学风格应用于 Jobs 的强度。</p>\n<h3 id=\"10-tile\"><a href=\"#10-tile\" class=\"headerlink\" title=\"10. --tile\"></a><strong>10. <code>--tile</code></strong></h3><p>用来生成可用作重复拼贴的图像，比如织物、壁纸、纹理等。</p>\n<h3 id=\"11-video\"><a href=\"#11-video\" class=\"headerlink\" title=\"11. --video\"></a><strong>11. <code>--video</code></strong></h3><p>使用该<code>--video</code>参数创建正在生成的初始图像网格的短片。使用信封 ☉️ 表情符号对完成的工作做出反应，让 Midjourney Bot 将视频链接发送到您的直接消息。</p>\n<blockquote>\n<p><code>--video</code>仅适用于图像网格，不适用于高档。<br><code>--video</code>适用于<a href=\"https://docs.midjourney.com/models\">模型版本</a> <code>1</code>、<code>2</code>、<code>3</code>、<code>test</code>和<code>testp</code>。</p>\n</blockquote>\n<p>效果：</p>\n<div>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_VideoResult.gif\">\n</div>\n\n<h3 id=\"12-uplight\"><a href=\"#12-uplight\" class=\"headerlink\" title=\"12. --uplight\"></a><strong>12. <code>--uplight</code></strong></h3><p><img src=\"/images/image-20230423175103467.png\"></p>\n<p><code>--uplight</code>选择 U 按钮时使用替代的“轻型”升频器。结果更接近原始网格图像。放大后的图像细节更少，更平滑。</p>\n<h3 id=\"13-upbeta\"><a href=\"#13-upbeta\" class=\"headerlink\" title=\"13. --upbeta\"></a><strong>13. <code>--upbeta</code></strong></h3><p><img src=\"/images/image-20230423175106275.png\"></p>\n<p><code>--upbeta</code>选择 U 按钮时使用替代的 beta 升频器。结果更接近原始网格图像。放大后的图像添加的细节明显更少。</p>\n<h3 id=\"14-默认参数-Model-Version-4\"><a href=\"#14-默认参数-Model-Version-4\" class=\"headerlink\" title=\"14. 默认参数(Model Version 4)\"></a><strong>14. 默认参数(Model Version 4)</strong></h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">–ar</th>\n<th align=\"center\">–c</th>\n<th align=\"center\">–q</th>\n<th align=\"center\">–seed</th>\n<th align=\"center\">–stop</th>\n<th align=\"center\">–style</th>\n<th align=\"center\">–stylize</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">默认值</td>\n<td align=\"center\">1:1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">随机</td>\n<td align=\"center\">100</td>\n<td align=\"center\">4c</td>\n<td align=\"center\">100</td>\n</tr>\n<tr>\n<td align=\"center\">范围</td>\n<td align=\"center\">1:2–2:1</td>\n<td align=\"center\">0–100</td>\n<td align=\"center\">.25 .5 or 1</td>\n<td align=\"center\">0–4294967295</td>\n<td align=\"center\">10–100</td>\n<td align=\"center\">4a, 4b, or 4c</td>\n<td align=\"center\">0–1000</td>\n</tr>\n</tbody></table>\n<h3 id=\"15-默认参数-Model-Version-5\"><a href=\"#15-默认参数-Model-Version-5\" class=\"headerlink\" title=\"15. 默认参数 (Model Version 5)\"></a><strong>15. 默认参数 (Model Version 5)</strong></h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">–ar</th>\n<th align=\"center\">–c</th>\n<th align=\"center\">–q</th>\n<th align=\"center\">–c</th>\n<th align=\"center\">–stop</th>\n<th align=\"center\">–stylize</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">默认值</td>\n<td align=\"center\">1:1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">随机</td>\n<td align=\"center\">100</td>\n<td align=\"center\">100</td>\n</tr>\n<tr>\n<td align=\"center\">范围</td>\n<td align=\"center\">any</td>\n<td align=\"center\">0–100</td>\n<td align=\"center\">.25 .5, or 1</td>\n<td align=\"center\">0–4294967295</td>\n<td align=\"center\">10–100</td>\n<td align=\"center\">0–1000</td>\n</tr>\n</tbody></table>\n<ul>\n<li>大于 2:1 的宽高比是实验性的，可能会产生不可预测的结果。（实测有时会有黑边。）</li>\n</ul>\n<h2 id=\"二、-seed详细说明\"><a href=\"#二、-seed详细说明\" class=\"headerlink\" title=\"二、--seed详细说明\"></a>二、<code>--seed</code>详细说明</h2><h3 id=\"1-seed说明\"><a href=\"#1-seed说明\" class=\"headerlink\" title=\"1. --seed说明\"></a>1. <code>--seed</code>说明</h3><p>用过 Midjourney 的小伙伴会发现在发送提示词后，MJ 最开始的图像里会有一个非常模糊的噪点团 ，然后逐渐变得具体清晰，而这个噪点团的起点就是“Seed”。<br>MJ 依靠它来创建一个视觉噪音场，作为生成初始图像的起点。每个图像的种子值是为随机生成的，但可以用 –seed 参数指定。<br>在 <strong>v4</strong> 模型中使用相同的种子值和提示词将产生相同的图像结果，利用这点我们可以生成连贯一致的人物形象或者场景。</p>\n<p>Seed是Midjourney图像生成的初始点，每个图像的种子值是随机生成的，但可以用Seed参数保持统一。使用相同的种子值和提示词将产生完全相同的图像结果，利用这但可以生成连贯的人物形象或场景。</p>\n<p>a rabbit –seed 4100004954，只要seed值一致，那么无论生成几次，只要关键词相同结果都是相同的。</p>\n<h3 id=\"2-获取-seed\"><a href=\"#2-获取-seed\" class=\"headerlink\" title=\"2. 获取 --seed\"></a>2. 获取 <code>--seed</code></h3><p>使用时要确保服务器开启了隐私设置。</p>\n<p>如果是自己创建的服务器，那么需要在个人服务器上右键 - 隐私设置</p>\n<p><img src=\"/images/image-20230414155204499.png\"></p>\n<p>也可以全局设置，Discord - Preferences - 隐私与安全 - 允许服务器成员直接向您发起私聊。</p>\n<p>但要注意，这个设置不适用于已经加入的服务器。</p>\n<p><img src=\"/images/image-20230414155237311.png\"></p>\n<p><img src=\"/images/image-20230414155338981.png\"></p>\n<h3 id=\"3-使用示例\"><a href=\"#3-使用示例\" class=\"headerlink\" title=\"3. 使用示例\"></a>3. 使用示例</h3><p>首先输入描述，然后为描述指定<code>seed</code>，<code>seed</code>可以随机填，比如我这里写12345，那么生成的四宫格整张图的<code>seed</code>值就是<code>12345</code></p>\n<p><img src=\"/images/image-20230423181147356.png\"></p>\n<p>比如我选择了图2作为接下来要持续生成的图，点击<code>U2</code></p>\n<p><img src=\"/images/image-20230423182136592.png\"></p>\n<p>然后获取seed值</p>\n<p><img src=\"/images/image-20230424102129976.png\"></p>\n<p>拿到seed值后，根据上面的关键词，尽量不要变动，然后进一步描述场景、细节等</p>\n<p><img src=\"/images/image-20230424102243529.png\"></p>\n<p>就会发现生成的图片是基于上面的图片去变动的（虽然有时候变动的也挺一言难尽）。</p>\n<p><img src=\"/images/image-20230424102616997.png\"></p>\n<p><strong>seed值相同，描述值相同，生成的结果也相同。</strong></p>\n<h2 id=\"三、-chaos（-c）详细说明\"><a href=\"#三、-chaos（-c）详细说明\" class=\"headerlink\" title=\"三、--chaos（--c）详细说明\"></a>三、<code>--chaos</code>（<code>--c</code>）详细说明</h2><h4 id=\"chaos参数影响初始图像网格变化程度。高-chaos值将产生更多不寻常和意想不到的结果和组合。较低的-chaos值具有更可靠、可重复的结果。\"><a href=\"#chaos参数影响初始图像网格变化程度。高-chaos值将产生更多不寻常和意想不到的结果和组合。较低的-chaos值具有更可靠、可重复的结果。\" class=\"headerlink\" title=\"--chaos参数影响初始图像网格变化程度。高--chaos值将产生更多不寻常和意想不到的结果和组合。较低的--chaos值具有更可靠、可重复的结果。\"></a><code>--chaos</code>参数影响初始图像网格变化程度。高<code>--chaos</code>值将产生更多不寻常和意想不到的结果和组合。较低的<code>--chaos</code>值具有更可靠、可重复的结果。</h4><blockquote>\n<p><code>--chaos</code>接受值 0–100。<br>默认<code>--chaos</code>值为 0。</p>\n</blockquote>\n<p>低chaos可以使结果图像差别低，</p>\n<p>高chaos可以使结果图像差别高。</p>\n<p><img src=\"/images/image-20230424112750753.png\"></p>\n<p><img src=\"/images/image-20230424112851699.png\"></p>\n<h2 id=\"四、-remix详细说明\"><a href=\"#四、-remix详细说明\" class=\"headerlink\" title=\"四、 --remix详细说明\"></a>四、 <code>--remix</code>详细说明</h2><h4 id=\"使用remix模式更改提示、参数、模型版本或变体之间的纵横比。Remix-将采用您的起始图像的一般构图，并将其用作新工作的一部分。重新混合可以帮助改变图像的设置或照明、发展主题或实现棘手的构图。\"><a href=\"#使用remix模式更改提示、参数、模型版本或变体之间的纵横比。Remix-将采用您的起始图像的一般构图，并将其用作新工作的一部分。重新混合可以帮助改变图像的设置或照明、发展主题或实现棘手的构图。\" class=\"headerlink\" title=\"使用remix模式更改提示、参数、模型版本或变体之间的纵横比。Remix 将采用您的起始图像的一般构图，并将其用作新工作的一部分。重新混合可以帮助改变图像的设置或照明、发展主题或实现棘手的构图。\"></a>使用remix模式更改提示、参数、模型版本或变体之间的纵横比。Remix 将采用您的起始图像的一般构图，并将其用作新工作的一部分。重新混合可以帮助改变图像的设置或照明、发展主题或实现棘手的构图。</h4><p><code>Remix</code>是一项实验性功能，可能会随时更改或删除。</p>\n<p>使用<code>/prefer remix</code>命令开启或关闭</p>\n<p><img src=\"/images/image-20230424120625511.png\"></p>\n<p>然后在生成图像后，点击<code>Make Variations</code>，会弹出<code>Remix</code>框。（若remix开启成功，按钮将变成绿色）</p>\n<p><img src=\"/images/image-20230424120842336.png\"></p>\n<p>我将 chinese girl 描述词变为了 cat，点击提交</p>\n<p><img src=\"/images/image-20230424120926944.png\"></p>\n<p>新生成的图片就会以原图为基础，女人变成了喵头。（看起来确实一言难尽吖。。。！！）</p>\n<p><img src=\"/images/image-20230424121226422.png\"></p>\n<h2 id=\"五、upscaler详细说明\"><a href=\"#五、upscaler详细说明\" class=\"headerlink\" title=\"五、upscaler详细说明\"></a>五、<code>upscaler</code>详细说明</h2><h3 id=\"1-简略说明\"><a href=\"#1-简略说明\" class=\"headerlink\" title=\"1. 简略说明\"></a>1. 简略说明</h3><h4 id=\"Midjourney-首先为每个作业生成一个低分辨率图像选项网格。您可以在任何网格图像上使用-Midjourney-upscaler-来增加尺寸并添加更多细节。有多种可用于放大图像的放大模型。\"><a href=\"#Midjourney-首先为每个作业生成一个低分辨率图像选项网格。您可以在任何网格图像上使用-Midjourney-upscaler-来增加尺寸并添加更多细节。有多种可用于放大图像的放大模型。\" class=\"headerlink\" title=\"Midjourney 首先为每个作业生成一个低分辨率图像选项网格。您可以在任何网格图像上使用 Midjourney upscaler 来增加尺寸并添加更多细节。有多种可用于放大图像的放大模型。\"></a>Midjourney 首先为每个作业生成一个低分辨率图像选项网格。您可以在任何网格图像上使用 Midjourney upscaler 来增加尺寸并添加更多细节。有多种可用于放大图像的放大模型。</h4><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">每个图像网格下方的按钮</font><font style=\"vertical-align: inherit;\">用于放大所选图像。</font></font><span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U1</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U2</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U3</code></span> <span class=\"discordbtn\" data-tomark-pass=\"\"><code data-tomark-pass=\"\">U4</code></span><font style=\"vertical-align: inherit;\"></font></p>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--uplight`, `--upbeta` or `--upanime</span><br></pre></td></tr></table></figure>\n\n<p>点击了某个图像放大器之后，会有一排按钮</p>\n<p><img src=\"/images/image-20230424113700430.png\"></p>\n<p>这就是升频器。</p>\n<h3 id=\"2-对应尺寸和大小\"><a href=\"#2-对应尺寸和大小\" class=\"headerlink\" title=\"2. 对应尺寸和大小\"></a>2. 对应尺寸和大小</h3><p><em>所有尺寸均适用于 1:1 宽高比的正方形。</em></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">模型版本</th>\n<th align=\"center\">起始网格大小</th>\n<th align=\"center\">V4 default Upscaler</th>\n<th align=\"center\">Detail Upscale</th>\n<th align=\"center\">Light Upscale</th>\n<th align=\"center\">Beta Upscale</th>\n<th align=\"center\">Anime Upscale</th>\n<th align=\"center\">Max Upscale**</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>默认模型</strong> <strong>版本 4</strong></td>\n<td align=\"center\"><strong>512 x 512</strong></td>\n<td align=\"center\"><strong>1024 x 1024</strong> *</td>\n<td align=\"center\"><strong>1024 x 1024</strong></td>\n<td align=\"center\">1 <strong>024 × 1024</strong></td>\n<td align=\"center\"><strong>2048 x 2048</strong></td>\n<td align=\"center\"><strong>1024 x 1024</strong></td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>版本 5</strong></td>\n<td align=\"center\"><strong>1024 x 1024</strong></td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">v1–v3</td>\n<td align=\"center\">256×256</td>\n<td align=\"center\">-</td>\n<td align=\"center\">1024 x 1024*</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">1664 x 1664</td>\n</tr>\n<tr>\n<td align=\"center\">尼基</td>\n<td align=\"center\">512 x 512</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">2048 x 2048</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">虹5</td>\n<td align=\"center\">1024 x 1024</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">测试/测试</td>\n<td align=\"center\">512 x 512</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">2048 x 2048</td>\n<td align=\"center\">1024 x 1024*</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">高清</td>\n<td align=\"center\">512 x 512</td>\n<td align=\"center\">-</td>\n<td align=\"center\">1536 x 1536*</td>\n<td align=\"center\">1536 x 1536</td>\n<td align=\"center\">2048 x 2048</td>\n<td align=\"center\">-</td>\n<td align=\"center\">1024 x 1024</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><code>*</code>= 每个 Midjourney 版本模型的默认升频器。<br><code>**</code>Max Upscale 是一种较旧的资源密集型升频器，仅在用户处于快速模式时可用。</p>\n</blockquote>\n<p>升频器分为Regular (Default) Upscaler、Light Upscaler、Detailed Upscaler、Beta Upscaler、Anime Upscaler、Remaster。切换方式就在每个图片生成后，下方的一排按钮</p>\n<p><img src=\"/images/image-20230424114321114.png\"></p>\n<p>官方文档对每种升频器的介绍非常详细，这里就不多说了。</p>\n<blockquote>\n<p>Midjourney Model 5</p>\n<p>The newest <a href=\"https://docs.midjourney.com/models\">Midjourney Model Version 5</a> (and Niji 5) produces high-resolution 1024 x1024 px image grids without needing an additional step to upscale each mage. When using Midjourney Model Version 5, the <code>U1</code> <code>U2</code> <code>U3</code> <code>U4</code> buttons under each image grid will separate the selected image from the initial image grid.</p>\n</blockquote>\n<p>人话：v5模型和niji模型的默认升频器包含了放大图像的作用，因为初始生成的图像就已经是1024*1024了，所以点击<code>u1</code>、<code>u2</code>、<code>u3</code>、<code>u4</code>就是将每个图片单独提取出来而已。而其他版本的模型点击<code>u1</code>、<code>u2</code>、<code>u3</code>、<code>u4</code>是有放大并添加细节的作用的。</p>\n<h2 id=\"六、-tile详细说明\"><a href=\"#六、-tile详细说明\" class=\"headerlink\" title=\"六、--tile详细说明\"></a>六、<code>--tile</code>详细说明</h2><p>用来生成可用作重复拼贴的图像，比如织物、壁纸、纹理等。</p>\n<blockquote>\n<p><code>--tile</code>适用于<a href=\"https://docs.midjourney.com/models\">模型</a> 版本<code>1</code>、<code>2</code>、<code>3</code>和<code>5</code>。且仅仅生成一个瓦片。</p>\n<p>若想根据该瓦片生成完整壁纸/图案/纹理的话，可以<a href=\"https://www.pycheung.com/checker/\">使用像这种无缝模式检查器</a>这样的模式制作工具来查看拼贴重复。</p>\n</blockquote>\n<p>使用方法示例：</p>\n<p><img src=\"/images/image-20230423180758894.png\"></p>\n<p>它生成的结果是一块一块的，单独一块被称为瓦片。瓦片重复需要自己去拼接。</p>\n<h2 id=\"七、-stylize\"><a href=\"#七、-stylize\" class=\"headerlink\" title=\"七、--stylize\"></a>七、<code>--stylize</code></h2><h4 id=\"Midjourney-Bot-经过训练可以生成有利于艺术色彩、构图和形式的图像。或参数影响该训练应用-stylize的-s强度。\"><a href=\"#Midjourney-Bot-经过训练可以生成有利于艺术色彩、构图和形式的图像。或参数影响该训练应用-stylize的-s强度。\" class=\"headerlink\" title=\"Midjourney Bot 经过训练可以生成有利于艺术色彩、构图和形式的图像。或参数影响该训练应用--stylize的--s强度。\"></a>Midjourney Bot 经过训练可以生成有利于艺术色彩、构图和形式的图像。或参数影响该训练应用<code>--stylize</code>的<code>--s</code>强度。</h4><h4 id=\"低-stylize生成的图像与提示非常匹配，但艺术性较差。\"><a href=\"#低-stylize生成的图像与提示非常匹配，但艺术性较差。\" class=\"headerlink\" title=\"低--stylize生成的图像与提示非常匹配，但艺术性较差。\"></a><strong>低<code>--stylize</code>生成的图像与提示非常匹配，但艺术性较差。</strong></h4><h4 id=\"高-stylize创建的图像非常具有艺术性，但与提示的联系较少。\"><a href=\"#高-stylize创建的图像非常具有艺术性，但与提示的联系较少。\" class=\"headerlink\" title=\"高--stylize创建的图像非常具有艺术性，但与提示的联系较少。\"></a><strong>高<code>--stylize</code>创建的图像非常具有艺术性，但与提示的联系较少。</strong></h4><p><code>--stylize</code>的默认值为 100，并且在使用默认 [V4 模型] 时接受 0-1000 的整数值。</p>\n<p>不同的<a href=\"https://docs.midjourney.com/models\">Midjourney 版本模型</a>具有不同的风格化范围。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">v5</th>\n<th align=\"center\">v4</th>\n<th align=\"center\">v3</th>\n<th align=\"center\">test/testp</th>\n<th align=\"center\">Niji</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">程式化默认</td>\n<td align=\"center\">100</td>\n<td align=\"center\">100</td>\n<td align=\"center\">2500</td>\n<td align=\"center\">2500</td>\n<td align=\"center\">other</td>\n</tr>\n<tr>\n<td align=\"center\">程式化范围</td>\n<td align=\"center\">0–1000</td>\n<td align=\"center\">0–1000</td>\n<td align=\"center\">625–60000</td>\n<td align=\"center\">1250–5000</td>\n<td align=\"center\">other</td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/image-20230424113107952.png\"></p>\n<p><img src=\"/images/image-20230424113120666.png\"></p>\n<h2 id=\"八、复合提示\"><a href=\"#八、复合提示\" class=\"headerlink\" title=\"八、复合提示\"></a>八、复合提示</h2><p>比如hot dog（热狗）这种词，如果想分开表示hot 和 dog （一只很热的狗），那就需要复合提示。</p>\n<p>复合提示使用<code>::</code>表示</p>\n<h3 id=\"比如：\"><a href=\"#比如：\" class=\"headerlink\" title=\"比如：\"></a>比如：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hot dog</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_hotdog.jpg\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hot:: dog</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_hot-dog.jpg\"></p>\n<h3 id=\"再比如：\"><a href=\"#再比如：\" class=\"headerlink\" title=\"再比如：\"></a>再比如：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cup cake illustration</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cupCakeIllustration.jpg\"></p>\n<p><em>纸杯蛋糕插图</em> 被认为是一起制作纸杯蛋糕的插图图像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cup:: cake illustration</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cup-cakeIllustration.jpg\" alt=\"Midjourney Prompt 杯子的图像:: 蛋糕插图::\"></p>\n<p><em>杯子</em> 与 <em>蛋糕插图</em> 分开考虑，制作杯子中的蛋糕图像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cup:: cake:: illustration</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Multi_cup-cake-illustration.jpg\"></p>\n<p><em>杯子</em> 、 <em>蛋糕</em> 和 <em>插图</em> 被分开考虑，制作一个杯子里的蛋糕，带有花朵和蝴蝶等常见的插图元素。</p>\n<h3 id=\"权重\"><a href=\"#权重\" class=\"headerlink\" title=\"权重\"></a>权重</h3><p>复合提示可以赋予权重<br>如<code>hot::2 dog</code>，意思是hot的重要性比dog大两倍，又可以写成<code>hot::2 dog::1</code></p>\n<ul>\n<li>v4可以接受小数做权重，v1-3只能接受整数，默认为1。</li>\n<li>可以接受负数权重，但所有权重的总和必须为正数。</li>\n<li>负数权重可以用来去掉某些元素<h2 id=\"九、排列提升\"><a href=\"#九、排列提升\" class=\"headerlink\" title=\"九、排列提升\"></a>九、排列提升</h2></li>\n</ul>\n<p>可以同时处理多个作业，这个我暂时用不到，所以略过了。</p>\n<p>简单的用法就是用大括号<code>&#123;&#125;</code>分割选项列表，然后快速创建多个作业，最多可以同时创建40个。</p>\n<h3 id=\"比如：-1\"><a href=\"#比如：-1\" class=\"headerlink\" title=\"比如：\"></a>比如：</h3><p><code>/imagine prompt</code> <code>a &#123;red, green, yellow&#125; bird</code></p>\n<p>创建并处理三个作业。</p>\n<p>相当于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`/imagine prompt` `a red bird`</span><br><span class=\"line\">`/imagine prompt` `a green bird`</span><br><span class=\"line\">`/imagine prompt` `a yellow bird</span><br></pre></td></tr></table></figure>\n\n<p>那这样子就方便去创建一些只有部分元素不同，而整体装饰或构图相同的作业。</p>\n<ul>\n<li><p>可以固定部分描述不变，参数也不变，部分描述变体。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/imagine prompt` `a naturalist illustration of a &#123;pineapple, blueberry, rambutan, banana&#125; bird</span><br></pre></td></tr></table></figure></li>\n<li><p>或者固定部分参数不变，描述不变，尺寸变化等等。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/imagine prompt` `a naturalist illustration of a fruit salad bird --ar &#123;3:2, 1:1, 2:3, 1:2&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>支持多层嵌套</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/imagine prompt` `A &#123;sculpture, painting&#125; of a &#123;seagull &#123;on a pier, on a beach&#125;, poodle &#123;on a sofa, in a truck&#125;&#125;.</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>在我看来，有些像remix，但remix会在原图基础上调整。而这个是直接生成新的。</p>\n<h3 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h3><p>大括号内用逗号做分割，但如果描述包含逗号，可以使用转义字符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imagine prompt` `&#123;red, pastel \\, yellow&#125; bird`</span><br></pre></td></tr></table></figure>\n\n<p>相当于</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`/imagine prompt` `a red bird`</span><br><span class=\"line\">`/imagine prompt` `a pastel, yellow bird</span><br></pre></td></tr></table></figure>\n\n"},{"title":"【ai绘画】Midjourney 之 Prompts","date":"2023-04-09T03:55:04.000Z","_content":"\n## 一、Prompts\n\n<p style=\"color:#9AB0FC\">prompts（提示）是 Midjourney Bot 解释以生成图像的短文本短语。Midjourney Bot 将提示中的单词和短语分解为更小的部分，称为标记，可以将其与其训练数据进行比较，然后用于生成图像。精心制作的提示可以帮助制作独特而令人兴奋的图像。</p>\n\n### 1. 结构\n\n提示可以像一个单词、短语、emoji一样简单，也可以使用更高级的提示。\n\n更高级的提示可以包括一个或多个[图像 URL](https://docs.midjourney.com/image-prompts)、[多个文本短语](https://docs.midjourney.com/multi-prompts)以及一个或多个[参数](https://docs.midjourney.com/parameter-list)\n\n![](/images/image-20230404120022600.png)\n\n<div style=\"background-color:#79a70e;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">image Prompts</div>\n\n可以将图像 URL 添加到提示中以影响最终结果的样式和内容。\n\n**图片 URL 始终位于提示的前面。**\n\n<div style=\"background-color:#828ef5;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">Text Prompt</div>\n\n要生成的图像的文本描述。\n\n<div style=\"background-color:#d97706;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">Parameters</div>\n\nParameters位于提示的末尾，它可以改变图像的生成方式。\n\n用--表示。\n\n可以更改宽高比、模型、放大器等等。\n\n### 2. 需要注意的提示点\n\n#### 长度\n\n非常短的提示将在很大程度上依赖于 Midjourney 的默认样式。\n\n更具描述性的提示更适合独特的外观。\n\n#### 语法\n\n不是越长越好，要提取重点词，专注于要创建的主要概念。因为midjourney不是像人类那样理解语法。\n\n要用更精准的词汇，比如：大，是怎么样的大？\n\nbig, try gigantic, enormous, immense\n\n#### 去掉不需要的内容\n\n[`--no`](https://docs.midjourney.com/multi-prompts)参数加上的东西可以告诉midjourney，你不想在图像上出现什么\n\n比如不想要蛋糕，可以加上`--no cake`\n\n（唔、挺惊悚的。。生日没有蛋糕的怒气值叠满了！）\n\n![](/images/image-20230404122021297.png)\n\n#### 考虑哪些细节很重要\n\n**尽量把很重要的任何背景或细节搞清楚：**\n\n- **主题：**人、动物、人物、地点、物体等。\n- **媒介：**照片、绘画、插图、雕塑、涂鸦、挂毯等。\n- **环境：**室内、室外、月球上、纳尼亚、水下、翡翠城等。\n- **照明：**柔和、环境、阴天、霓虹灯、工作室灯等\n- **颜色：**充满活力、柔和、明亮、单色、彩色、黑白、柔和等。\n- **情绪：**稳重、平静、喧闹、精力充沛等。\n- **构图：**肖像、头像、特写、鸟瞰图等。\n\n**把官网的英文摘下来作参考：**\n\n- **Subject:** person, animal, character, location, object, etc.\n- **Medium:** photo, painting, illustration, sculpture, doodle, tapestry, etc.\n- **Environment:** indoors, outdoors, on the moon, in Narnia, underwater, the Emerald City, etc.\n- **Lighting:** soft, ambient, overcast, neon, studio lights, etc\n- **Color:** vibrant, muted, bright, monochromatic, colorful, black and white, pastel, etc.\n- **Mood:** Sedate, calm, raucous, energetic, etc.\n- **Composition:** Portrait, headshot, closeup, birds-eye view, etc.\n\n### 使用具体数字\n\n比如\"three birds\"就比\"birds\"更加精确\n\n### 3. Exprore Prompting（探索提示）\n\n#### 选择媒介\n\n提示示例：`/imagine prompt` `<any art style> style cat`\n\n常用的媒介类型：\n\n<div\n\tstyle=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;\n    margin: 2.5em 0 1.625em 0;\n    text-align:center;color: #ffffff;\"\n\tdata-tomark-pass=\"\">\n\t<div data-tomark-pass=\"\">\n\t\t<strong style=\"color: #ffffff;\"data-tomark-pass=\"\">Block Print<br />版画 </strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Blockprint_Cat.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Folk Art<br />民间艺术</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Folkart.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Cyanotype<br />蓝版</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Cyanotype.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Graffiti<br />涂鸦</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Graffiti.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Paint-by-Numbers<br />数字绘画</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Paint-by-numbers.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Risograph<br />数字印刷</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Risograph.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Ukiyo-e<br />浮世绘</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_UkiyoE.jpg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Pencil Sketch<br />铅笔素描</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Pencilsketch.jpg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Watercolor<br />水彩</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_watercolor.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Pixel Art<br />像素画</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_pixelArt.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Blacklight Painting<br />紫外线画</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_blacklight.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Cross Stitch<br />十字绣</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_crossStitch.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n</div>\n\n### 细化\n\n更精确的单词和短语将有助于创建具有完全正确外观和感觉的图像。\n\n提示示例：`/imagine prompt` `<style> sketch of a cat`\n\n<div class=\"gridsmall\" data-tomark-pass=\"\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;color: #ffffff;\n    margin: 2.5em 0 1.625em 0;text-align: center;\">\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Life Drawing<br />写生</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_lifeDrawingSketch.jpeg\"data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Continuous Line<br />连续线</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_continuousLine.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Loose Gestural<br />随性手势画</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_looseGesturalSketch.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Blind Contour<br />草图速写</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_blindContour.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Value Study<br />明暗对比研究</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_valueStudy.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Charcoal Sketch<br />炭笔素描</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_Charcoal.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n</div>\n\n\n\n### 时间旅行\n\n不同的时代有不同的视觉风格。\n\n提示示例：`/imagine prompt` `<decade> cat illustration`\n\n<div class=\"gridsmall\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;text-align: center;\n    margin: 2.5em 0 1.625em 0;color: #ffffff;\n}\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1700s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1750.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1800s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1800.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1900s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1900.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1910s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1910.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1920s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1920.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1930s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1930.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1940s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1940.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1950s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1950.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1960s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1960.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1970s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1970.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1980s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1980.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1990s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1990.jpeg\" data-lightbox=\"box\">\n</div>\n</div>\n\n### 表情\n\n提示示例：`/imagine prompt` `<emotion> cat`\n\n<div class=\"gridsmall\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;color: #ffffff;text-align:center;\n    margin: 2.5em 0 1.625em 0;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Determined<br />坚定</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Determined_cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Happy<br />快乐</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Happy_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Sleepy<br />困</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Sleepy_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Angry<br />生气</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Angry_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Shy<br />害羞</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Shy_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Embarassed<br />尴尬</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Embarassed_Cat.jpeg\">\n</div>\n</div>\n\n### 使颜色更加丰富\n\n提示示例：`/imagine prompt` `<color word> colored cat`\n\n<div class=\"gridsmall\" style=\"color: #ffffff;    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;text-align:center;\n    margin: 2.5em 0 1.625em 0;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Millennial Pink<br />千禧粉</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_MillenialPink_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Acid Green<br />酸性绿</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Acid_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Desaturated<br />无饱和度</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Desaturated_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Canary Yellow<br />金丝雀黄</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Canary_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Peach<br />桃色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Peach_Cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Two Toned<br />双色调</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Twotoned_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Pastel<br />粉彩</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Pastel_cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Mauve<br />淡紫色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Mauve_Cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Ebony<br />乌木色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Ebony_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Neutral<br />中性色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Neutral_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Day Glo<br />荧光色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Dayglow_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Green Tinted<br />绿色调</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Greentinted_Cat.jpeg\">\n</div>\n</div>\n\n### 环境\n\n提示示例：`/imagine prompt` `<location> cat`\n\n<div class=\"gridsmall\" style=\"color: #ffffff;    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;\n    margin: 2.5em 0 1.625em 0;text-align: center;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Tundra<br />苔原</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Tundra_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Salt Flat<br />盐滩</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Saltflat_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Jungle<br />密林</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Jungle_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Desert<br />沙漠</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Desert_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Mountain<br />山脉</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Mountain_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Cloud Forest<br />云雾森林</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cloudforest_Cat.jpg\">\n</div>\n</div>\n\n### 使用/blend命令混合图像\n\n<span style=\"color:#9AB0FC;font-weight:900\">该`/blend`命令允许您快速上传 2-5 张图像，然后读取每张图像的风格和元素，并将它们合并成一个新颖的新图像。</span>\n\n+ `/blend`与使用多个[图像提示](https://docs.midjourney.com/image-prompts)相同`/imagine`，但界面经过优化以方便在移动设备上使用。\n\n+ `/blend`最多可处理 5 张图像。要在提示中使用 5 个以上的图像，请使用<span style=\"color:#9AB0FC;font-weight:900\">`/imagine prompts`</span>\n\n+ `/blend`，<span style=\"color:#9AB0FC;font-weight:900\">不适用于文本提示</span>。要同时使用文本和图像提示，请使用<span style=\"color:#9AB0FC;font-weight:900\">`/imagine prompts`</span>\n\n![](/images/image-20230404120022600.png)\n\n### `/blend`选项\n\n输入`/blend`命令后，系统会提示您上传两张照片。\n\n![](/images/image-20230410190100608.png)\n\n要添加更多图像，可点击 **增加4** 并选择`image3`、`image4`或`image5`。\n\n![](/images/image-20230410190226854.png)\n\n**该`/blend`命令可能需要比其他命令更长的时间才能启动，因为您的图像必须在 Midjourney Bot 可以处理您的请求之前上传。**\n\n`dimensions`：可设置生成图片比例。混合图像的默认纵横比为 1:1，但您可以使用可选`dimensions`字段在方形纵横比square (1:1)、纵向纵横比portrait (2:3) 或横向纵横比landscape (3:2) 之间进行选择。\n\n![](/images/image-20230410190355527.png)\n\n[自定义后缀](https://docs.midjourney.com/v1/docs/settings-and-presets)被添加到提示的末尾`/blend`，就像任何其他`/imagine`提示一样。作为`/blend`命令的一部分指定的宽高比会覆盖自定义后缀中的宽高比。\n\n### 混合技巧\n\n为获得最佳效果，请上传与您想要的结果具有**相同宽高比**的图像。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/midjourney2.md","raw":"---\ntitle: 【ai绘画】Midjourney 之 Prompts\ndate: 2023-04-09 11:55:04\ntags: Midjourney\ncategories: 绘画\n---\n\n## 一、Prompts\n\n<p style=\"color:#9AB0FC\">prompts（提示）是 Midjourney Bot 解释以生成图像的短文本短语。Midjourney Bot 将提示中的单词和短语分解为更小的部分，称为标记，可以将其与其训练数据进行比较，然后用于生成图像。精心制作的提示可以帮助制作独特而令人兴奋的图像。</p>\n\n### 1. 结构\n\n提示可以像一个单词、短语、emoji一样简单，也可以使用更高级的提示。\n\n更高级的提示可以包括一个或多个[图像 URL](https://docs.midjourney.com/image-prompts)、[多个文本短语](https://docs.midjourney.com/multi-prompts)以及一个或多个[参数](https://docs.midjourney.com/parameter-list)\n\n![](/images/image-20230404120022600.png)\n\n<div style=\"background-color:#79a70e;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">image Prompts</div>\n\n可以将图像 URL 添加到提示中以影响最终结果的样式和内容。\n\n**图片 URL 始终位于提示的前面。**\n\n<div style=\"background-color:#828ef5;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">Text Prompt</div>\n\n要生成的图像的文本描述。\n\n<div style=\"background-color:#d97706;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">Parameters</div>\n\nParameters位于提示的末尾，它可以改变图像的生成方式。\n\n用--表示。\n\n可以更改宽高比、模型、放大器等等。\n\n### 2. 需要注意的提示点\n\n#### 长度\n\n非常短的提示将在很大程度上依赖于 Midjourney 的默认样式。\n\n更具描述性的提示更适合独特的外观。\n\n#### 语法\n\n不是越长越好，要提取重点词，专注于要创建的主要概念。因为midjourney不是像人类那样理解语法。\n\n要用更精准的词汇，比如：大，是怎么样的大？\n\nbig, try gigantic, enormous, immense\n\n#### 去掉不需要的内容\n\n[`--no`](https://docs.midjourney.com/multi-prompts)参数加上的东西可以告诉midjourney，你不想在图像上出现什么\n\n比如不想要蛋糕，可以加上`--no cake`\n\n（唔、挺惊悚的。。生日没有蛋糕的怒气值叠满了！）\n\n![](/images/image-20230404122021297.png)\n\n#### 考虑哪些细节很重要\n\n**尽量把很重要的任何背景或细节搞清楚：**\n\n- **主题：**人、动物、人物、地点、物体等。\n- **媒介：**照片、绘画、插图、雕塑、涂鸦、挂毯等。\n- **环境：**室内、室外、月球上、纳尼亚、水下、翡翠城等。\n- **照明：**柔和、环境、阴天、霓虹灯、工作室灯等\n- **颜色：**充满活力、柔和、明亮、单色、彩色、黑白、柔和等。\n- **情绪：**稳重、平静、喧闹、精力充沛等。\n- **构图：**肖像、头像、特写、鸟瞰图等。\n\n**把官网的英文摘下来作参考：**\n\n- **Subject:** person, animal, character, location, object, etc.\n- **Medium:** photo, painting, illustration, sculpture, doodle, tapestry, etc.\n- **Environment:** indoors, outdoors, on the moon, in Narnia, underwater, the Emerald City, etc.\n- **Lighting:** soft, ambient, overcast, neon, studio lights, etc\n- **Color:** vibrant, muted, bright, monochromatic, colorful, black and white, pastel, etc.\n- **Mood:** Sedate, calm, raucous, energetic, etc.\n- **Composition:** Portrait, headshot, closeup, birds-eye view, etc.\n\n### 使用具体数字\n\n比如\"three birds\"就比\"birds\"更加精确\n\n### 3. Exprore Prompting（探索提示）\n\n#### 选择媒介\n\n提示示例：`/imagine prompt` `<any art style> style cat`\n\n常用的媒介类型：\n\n<div\n\tstyle=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;\n    margin: 2.5em 0 1.625em 0;\n    text-align:center;color: #ffffff;\"\n\tdata-tomark-pass=\"\">\n\t<div data-tomark-pass=\"\">\n\t\t<strong style=\"color: #ffffff;\"data-tomark-pass=\"\">Block Print<br />版画 </strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Blockprint_Cat.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Folk Art<br />民间艺术</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Folkart.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Cyanotype<br />蓝版</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Cyanotype.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Graffiti<br />涂鸦</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Graffiti.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Paint-by-Numbers<br />数字绘画</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Paint-by-numbers.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Risograph<br />数字印刷</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Risograph.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Ukiyo-e<br />浮世绘</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_UkiyoE.jpg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Pencil Sketch<br />铅笔素描</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Pencilsketch.jpg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Watercolor<br />水彩</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_watercolor.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Pixel Art<br />像素画</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_pixelArt.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Blacklight Painting<br />紫外线画</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_blacklight.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n\t<div data-tomark-pass=\"\">\n\t\t<strong data-tomark-pass=\"\">Cross Stitch<br />十字绣</strong>\n\t\t<img\n\t\t\tsrc=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_crossStitch.jpeg\"\n\t\t\tdata-tomark-pass=\"\" />\n\t</div>\n</div>\n\n### 细化\n\n更精确的单词和短语将有助于创建具有完全正确外观和感觉的图像。\n\n提示示例：`/imagine prompt` `<style> sketch of a cat`\n\n<div class=\"gridsmall\" data-tomark-pass=\"\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;color: #ffffff;\n    margin: 2.5em 0 1.625em 0;text-align: center;\">\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Life Drawing<br />写生</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_lifeDrawingSketch.jpeg\"data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Continuous Line<br />连续线</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_continuousLine.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Loose Gestural<br />随性手势画</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_looseGesturalSketch.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Blind Contour<br />草图速写</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_blindContour.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Value Study<br />明暗对比研究</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_valueStudy.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Charcoal Sketch<br />炭笔素描</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_Charcoal.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n</div>\n\n\n\n### 时间旅行\n\n不同的时代有不同的视觉风格。\n\n提示示例：`/imagine prompt` `<decade> cat illustration`\n\n<div class=\"gridsmall\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;text-align: center;\n    margin: 2.5em 0 1.625em 0;color: #ffffff;\n}\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1700s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1750.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1800s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1800.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1900s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1900.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1910s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1910.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1920s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1920.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1930s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1930.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1940s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1940.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1950s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1950.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1960s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1960.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1970s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1970.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1980s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1980.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1990s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1990.jpeg\" data-lightbox=\"box\">\n</div>\n</div>\n\n### 表情\n\n提示示例：`/imagine prompt` `<emotion> cat`\n\n<div class=\"gridsmall\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;color: #ffffff;text-align:center;\n    margin: 2.5em 0 1.625em 0;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Determined<br />坚定</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Determined_cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Happy<br />快乐</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Happy_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Sleepy<br />困</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Sleepy_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Angry<br />生气</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Angry_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Shy<br />害羞</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Shy_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Embarassed<br />尴尬</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Embarassed_Cat.jpeg\">\n</div>\n</div>\n\n### 使颜色更加丰富\n\n提示示例：`/imagine prompt` `<color word> colored cat`\n\n<div class=\"gridsmall\" style=\"color: #ffffff;    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;text-align:center;\n    margin: 2.5em 0 1.625em 0;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Millennial Pink<br />千禧粉</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_MillenialPink_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Acid Green<br />酸性绿</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Acid_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Desaturated<br />无饱和度</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Desaturated_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Canary Yellow<br />金丝雀黄</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Canary_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Peach<br />桃色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Peach_Cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Two Toned<br />双色调</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Twotoned_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Pastel<br />粉彩</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Pastel_cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Mauve<br />淡紫色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Mauve_Cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Ebony<br />乌木色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Ebony_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Neutral<br />中性色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Neutral_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Day Glo<br />荧光色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Dayglow_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Green Tinted<br />绿色调</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Greentinted_Cat.jpeg\">\n</div>\n</div>\n\n### 环境\n\n提示示例：`/imagine prompt` `<location> cat`\n\n<div class=\"gridsmall\" style=\"color: #ffffff;    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;\n    margin: 2.5em 0 1.625em 0;text-align: center;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Tundra<br />苔原</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Tundra_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Salt Flat<br />盐滩</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Saltflat_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Jungle<br />密林</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Jungle_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Desert<br />沙漠</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Desert_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Mountain<br />山脉</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Mountain_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Cloud Forest<br />云雾森林</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cloudforest_Cat.jpg\">\n</div>\n</div>\n\n### 使用/blend命令混合图像\n\n<span style=\"color:#9AB0FC;font-weight:900\">该`/blend`命令允许您快速上传 2-5 张图像，然后读取每张图像的风格和元素，并将它们合并成一个新颖的新图像。</span>\n\n+ `/blend`与使用多个[图像提示](https://docs.midjourney.com/image-prompts)相同`/imagine`，但界面经过优化以方便在移动设备上使用。\n\n+ `/blend`最多可处理 5 张图像。要在提示中使用 5 个以上的图像，请使用<span style=\"color:#9AB0FC;font-weight:900\">`/imagine prompts`</span>\n\n+ `/blend`，<span style=\"color:#9AB0FC;font-weight:900\">不适用于文本提示</span>。要同时使用文本和图像提示，请使用<span style=\"color:#9AB0FC;font-weight:900\">`/imagine prompts`</span>\n\n![](/images/image-20230404120022600.png)\n\n### `/blend`选项\n\n输入`/blend`命令后，系统会提示您上传两张照片。\n\n![](/images/image-20230410190100608.png)\n\n要添加更多图像，可点击 **增加4** 并选择`image3`、`image4`或`image5`。\n\n![](/images/image-20230410190226854.png)\n\n**该`/blend`命令可能需要比其他命令更长的时间才能启动，因为您的图像必须在 Midjourney Bot 可以处理您的请求之前上传。**\n\n`dimensions`：可设置生成图片比例。混合图像的默认纵横比为 1:1，但您可以使用可选`dimensions`字段在方形纵横比square (1:1)、纵向纵横比portrait (2:3) 或横向纵横比landscape (3:2) 之间进行选择。\n\n![](/images/image-20230410190355527.png)\n\n[自定义后缀](https://docs.midjourney.com/v1/docs/settings-and-presets)被添加到提示的末尾`/blend`，就像任何其他`/imagine`提示一样。作为`/blend`命令的一部分指定的宽高比会覆盖自定义后缀中的宽高比。\n\n### 混合技巧\n\n为获得最佳效果，请上传与您想要的结果具有**相同宽高比**的图像。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"midjourney2","published":1,"updated":"2023-04-12T11:23:30.605Z","_id":"clgat83wa0004p0wihp9eh5rm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、Prompts\"><a href=\"#一、Prompts\" class=\"headerlink\" title=\"一、Prompts\"></a>一、Prompts</h2><p style=\"color:#9AB0FC\">prompts（提示）是 Midjourney Bot 解释以生成图像的短文本短语。Midjourney Bot 将提示中的单词和短语分解为更小的部分，称为标记，可以将其与其训练数据进行比较，然后用于生成图像。精心制作的提示可以帮助制作独特而令人兴奋的图像。</p>\n\n<h3 id=\"1-结构\"><a href=\"#1-结构\" class=\"headerlink\" title=\"1. 结构\"></a>1. 结构</h3><p>提示可以像一个单词、短语、emoji一样简单，也可以使用更高级的提示。</p>\n<p>更高级的提示可以包括一个或多个<a href=\"https://docs.midjourney.com/image-prompts\">图像 URL</a>、<a href=\"https://docs.midjourney.com/multi-prompts\">多个文本短语</a>以及一个或多个<a href=\"https://docs.midjourney.com/parameter-list\">参数</a></p>\n<p><img src=\"/images/image-20230404120022600.png\"></p>\n<div style=\"background-color:#79a70e;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">image Prompts</div>\n\n<p>可以将图像 URL 添加到提示中以影响最终结果的样式和内容。</p>\n<p><strong>图片 URL 始终位于提示的前面。</strong></p>\n<div style=\"background-color:#828ef5;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">Text Prompt</div>\n\n<p>要生成的图像的文本描述。</p>\n<div style=\"background-color:#d97706;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">Parameters</div>\n\n<p>Parameters位于提示的末尾，它可以改变图像的生成方式。</p>\n<p>用–表示。</p>\n<p>可以更改宽高比、模型、放大器等等。</p>\n<h3 id=\"2-需要注意的提示点\"><a href=\"#2-需要注意的提示点\" class=\"headerlink\" title=\"2. 需要注意的提示点\"></a>2. 需要注意的提示点</h3><h4 id=\"长度\"><a href=\"#长度\" class=\"headerlink\" title=\"长度\"></a>长度</h4><p>非常短的提示将在很大程度上依赖于 Midjourney 的默认样式。</p>\n<p>更具描述性的提示更适合独特的外观。</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><p>不是越长越好，要提取重点词，专注于要创建的主要概念。因为midjourney不是像人类那样理解语法。</p>\n<p>要用更精准的词汇，比如：大，是怎么样的大？</p>\n<p>big, try gigantic, enormous, immense</p>\n<h4 id=\"去掉不需要的内容\"><a href=\"#去掉不需要的内容\" class=\"headerlink\" title=\"去掉不需要的内容\"></a>去掉不需要的内容</h4><p><a href=\"https://docs.midjourney.com/multi-prompts\"><code>--no</code></a>参数加上的东西可以告诉midjourney，你不想在图像上出现什么</p>\n<p>比如不想要蛋糕，可以加上<code>--no cake</code></p>\n<p>（唔、挺惊悚的。。生日没有蛋糕的怒气值叠满了！）</p>\n<p><img src=\"/images/image-20230404122021297.png\"></p>\n<h4 id=\"考虑哪些细节很重要\"><a href=\"#考虑哪些细节很重要\" class=\"headerlink\" title=\"考虑哪些细节很重要\"></a>考虑哪些细节很重要</h4><p><strong>尽量把很重要的任何背景或细节搞清楚：</strong></p>\n<ul>\n<li><strong>主题：</strong>人、动物、人物、地点、物体等。</li>\n<li><strong>媒介：</strong>照片、绘画、插图、雕塑、涂鸦、挂毯等。</li>\n<li><strong>环境：</strong>室内、室外、月球上、纳尼亚、水下、翡翠城等。</li>\n<li><strong>照明：</strong>柔和、环境、阴天、霓虹灯、工作室灯等</li>\n<li><strong>颜色：</strong>充满活力、柔和、明亮、单色、彩色、黑白、柔和等。</li>\n<li><strong>情绪：</strong>稳重、平静、喧闹、精力充沛等。</li>\n<li><strong>构图：</strong>肖像、头像、特写、鸟瞰图等。</li>\n</ul>\n<p><strong>把官网的英文摘下来作参考：</strong></p>\n<ul>\n<li><strong>Subject:</strong> person, animal, character, location, object, etc.</li>\n<li><strong>Medium:</strong> photo, painting, illustration, sculpture, doodle, tapestry, etc.</li>\n<li><strong>Environment:</strong> indoors, outdoors, on the moon, in Narnia, underwater, the Emerald City, etc.</li>\n<li><strong>Lighting:</strong> soft, ambient, overcast, neon, studio lights, etc</li>\n<li><strong>Color:</strong> vibrant, muted, bright, monochromatic, colorful, black and white, pastel, etc.</li>\n<li><strong>Mood:</strong> Sedate, calm, raucous, energetic, etc.</li>\n<li><strong>Composition:</strong> Portrait, headshot, closeup, birds-eye view, etc.</li>\n</ul>\n<h3 id=\"使用具体数字\"><a href=\"#使用具体数字\" class=\"headerlink\" title=\"使用具体数字\"></a>使用具体数字</h3><p>比如”three birds”就比”birds”更加精确</p>\n<h3 id=\"3-Exprore-Prompting（探索提示）\"><a href=\"#3-Exprore-Prompting（探索提示）\" class=\"headerlink\" title=\"3. Exprore Prompting（探索提示）\"></a>3. Exprore Prompting（探索提示）</h3><h4 id=\"选择媒介\"><a href=\"#选择媒介\" class=\"headerlink\" title=\"选择媒介\"></a>选择媒介</h4><p>提示示例：<code>/imagine prompt</code> <code>&lt;any art style&gt; style cat</code></p>\n<p>常用的媒介类型：</p>\n<div\n    style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;\n    margin: 2.5em 0 1.625em 0;\n    text-align:center;color: #ffffff;\"\n    data-tomark-pass=\"\">\n    <div data-tomark-pass=\"\">\n        <strong style=\"color: #ffffff;\"data-tomark-pass=\"\">Block Print<br />版画 </strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Blockprint_Cat.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Folk Art<br />民间艺术</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Folkart.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Cyanotype<br />蓝版</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Cyanotype.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Graffiti<br />涂鸦</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Graffiti.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Paint-by-Numbers<br />数字绘画</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Paint-by-numbers.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Risograph<br />数字印刷</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Risograph.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Ukiyo-e<br />浮世绘</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_UkiyoE.jpg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Pencil Sketch<br />铅笔素描</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Pencilsketch.jpg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Watercolor<br />水彩</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_watercolor.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Pixel Art<br />像素画</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_pixelArt.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Blacklight Painting<br />紫外线画</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_blacklight.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Cross Stitch<br />十字绣</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_crossStitch.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n</div>\n\n<h3 id=\"细化\"><a href=\"#细化\" class=\"headerlink\" title=\"细化\"></a>细化</h3><p>更精确的单词和短语将有助于创建具有完全正确外观和感觉的图像。</p>\n<p>提示示例：<code>/imagine prompt</code> <code>&lt;style&gt; sketch of a cat</code></p>\n<div class=\"gridsmall\" data-tomark-pass=\"\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;color: #ffffff;\n    margin: 2.5em 0 1.625em 0;text-align: center;\">\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Life Drawing<br />写生</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_lifeDrawingSketch.jpeg\"data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Continuous Line<br />连续线</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_continuousLine.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Loose Gestural<br />随性手势画</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_looseGesturalSketch.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Blind Contour<br />草图速写</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_blindContour.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Value Study<br />明暗对比研究</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_valueStudy.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Charcoal Sketch<br />炭笔素描</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_Charcoal.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n</div>\n\n\n\n<h3 id=\"时间旅行\"><a href=\"#时间旅行\" class=\"headerlink\" title=\"时间旅行\"></a>时间旅行</h3><p>不同的时代有不同的视觉风格。</p>\n<p>提示示例：<code>/imagine prompt</code> <code>&lt;decade&gt; cat illustration</code></p>\n<div class=\"gridsmall\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;text-align: center;\n    margin: 2.5em 0 1.625em 0;color: #ffffff;\n}\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1700s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1750.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1800s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1800.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1900s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1900.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1910s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1910.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1920s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1920.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1930s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1930.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1940s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1940.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1950s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1950.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1960s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1960.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1970s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1970.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1980s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1980.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1990s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1990.jpeg\" data-lightbox=\"box\">\n</div>\n</div>\n\n<h3 id=\"表情\"><a href=\"#表情\" class=\"headerlink\" title=\"表情\"></a>表情</h3><p>提示示例：<code>/imagine prompt</code> <code>&lt;emotion&gt; cat</code></p>\n<div class=\"gridsmall\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;color: #ffffff;text-align:center;\n    margin: 2.5em 0 1.625em 0;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Determined<br />坚定</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Determined_cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Happy<br />快乐</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Happy_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Sleepy<br />困</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Sleepy_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Angry<br />生气</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Angry_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Shy<br />害羞</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Shy_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Embarassed<br />尴尬</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Embarassed_Cat.jpeg\">\n</div>\n</div>\n\n<h3 id=\"使颜色更加丰富\"><a href=\"#使颜色更加丰富\" class=\"headerlink\" title=\"使颜色更加丰富\"></a>使颜色更加丰富</h3><p>提示示例：<code>/imagine prompt</code> <code>&lt;color word&gt; colored cat</code></p>\n<div class=\"gridsmall\" style=\"color: #ffffff;    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;text-align:center;\n    margin: 2.5em 0 1.625em 0;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Millennial Pink<br />千禧粉</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_MillenialPink_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Acid Green<br />酸性绿</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Acid_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Desaturated<br />无饱和度</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Desaturated_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Canary Yellow<br />金丝雀黄</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Canary_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Peach<br />桃色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Peach_Cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Two Toned<br />双色调</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Twotoned_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Pastel<br />粉彩</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Pastel_cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Mauve<br />淡紫色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Mauve_Cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Ebony<br />乌木色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Ebony_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Neutral<br />中性色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Neutral_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Day Glo<br />荧光色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Dayglow_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Green Tinted<br />绿色调</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Greentinted_Cat.jpeg\">\n</div>\n</div>\n\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>提示示例：<code>/imagine prompt</code> <code>&lt;location&gt; cat</code></p>\n<div class=\"gridsmall\" style=\"color: #ffffff;    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;\n    margin: 2.5em 0 1.625em 0;text-align: center;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Tundra<br />苔原</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Tundra_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Salt Flat<br />盐滩</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Saltflat_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Jungle<br />密林</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Jungle_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Desert<br />沙漠</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Desert_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Mountain<br />山脉</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Mountain_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Cloud Forest<br />云雾森林</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cloudforest_Cat.jpg\">\n</div>\n</div>\n\n<h3 id=\"使用-blend命令混合图像\"><a href=\"#使用-blend命令混合图像\" class=\"headerlink\" title=\"使用/blend命令混合图像\"></a>使用/blend命令混合图像</h3><p><span style=\"color:#9AB0FC;font-weight:900\">该<code>/blend</code>命令允许您快速上传 2-5 张图像，然后读取每张图像的风格和元素，并将它们合并成一个新颖的新图像。</span></p>\n<ul>\n<li><p><code>/blend</code>与使用多个<a href=\"https://docs.midjourney.com/image-prompts\">图像提示</a>相同<code>/imagine</code>，但界面经过优化以方便在移动设备上使用。</p>\n</li>\n<li><p><code>/blend</code>最多可处理 5 张图像。要在提示中使用 5 个以上的图像，请使用<span style=\"color:#9AB0FC;font-weight:900\"><code>/imagine prompts</code></span></p>\n</li>\n<li><p><code>/blend</code>，<span style=\"color:#9AB0FC;font-weight:900\">不适用于文本提示</span>。要同时使用文本和图像提示，请使用<span style=\"color:#9AB0FC;font-weight:900\"><code>/imagine prompts</code></span></p>\n</li>\n</ul>\n<p><img src=\"/images/image-20230404120022600.png\"></p>\n<h3 id=\"blend选项\"><a href=\"#blend选项\" class=\"headerlink\" title=\"/blend选项\"></a><code>/blend</code>选项</h3><p>输入<code>/blend</code>命令后，系统会提示您上传两张照片。</p>\n<p><img src=\"/images/image-20230410190100608.png\"></p>\n<p>要添加更多图像，可点击 <strong>增加4</strong> 并选择<code>image3</code>、<code>image4</code>或<code>image5</code>。</p>\n<p><img src=\"/images/image-20230410190226854.png\"></p>\n<p><strong>该<code>/blend</code>命令可能需要比其他命令更长的时间才能启动，因为您的图像必须在 Midjourney Bot 可以处理您的请求之前上传。</strong></p>\n<p><code>dimensions</code>：可设置生成图片比例。混合图像的默认纵横比为 1:1，但您可以使用可选<code>dimensions</code>字段在方形纵横比square (1:1)、纵向纵横比portrait (2:3) 或横向纵横比landscape (3:2) 之间进行选择。</p>\n<p><img src=\"/images/image-20230410190355527.png\"></p>\n<p><a href=\"https://docs.midjourney.com/v1/docs/settings-and-presets\">自定义后缀</a>被添加到提示的末尾<code>/blend</code>，就像任何其他<code>/imagine</code>提示一样。作为<code>/blend</code>命令的一部分指定的宽高比会覆盖自定义后缀中的宽高比。</p>\n<h3 id=\"混合技巧\"><a href=\"#混合技巧\" class=\"headerlink\" title=\"混合技巧\"></a>混合技巧</h3><p>为获得最佳效果，请上传与您想要的结果具有<strong>相同宽高比</strong>的图像。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Prompts\"><a href=\"#一、Prompts\" class=\"headerlink\" title=\"一、Prompts\"></a>一、Prompts</h2><p style=\"color:#9AB0FC\">prompts（提示）是 Midjourney Bot 解释以生成图像的短文本短语。Midjourney Bot 将提示中的单词和短语分解为更小的部分，称为标记，可以将其与其训练数据进行比较，然后用于生成图像。精心制作的提示可以帮助制作独特而令人兴奋的图像。</p>\n\n<h3 id=\"1-结构\"><a href=\"#1-结构\" class=\"headerlink\" title=\"1. 结构\"></a>1. 结构</h3><p>提示可以像一个单词、短语、emoji一样简单，也可以使用更高级的提示。</p>\n<p>更高级的提示可以包括一个或多个<a href=\"https://docs.midjourney.com/image-prompts\">图像 URL</a>、<a href=\"https://docs.midjourney.com/multi-prompts\">多个文本短语</a>以及一个或多个<a href=\"https://docs.midjourney.com/parameter-list\">参数</a></p>\n<p><img src=\"/images/image-20230404120022600.png\"></p>\n<div style=\"background-color:#79a70e;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">image Prompts</div>\n\n<p>可以将图像 URL 添加到提示中以影响最终结果的样式和内容。</p>\n<p><strong>图片 URL 始终位于提示的前面。</strong></p>\n<div style=\"background-color:#828ef5;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">Text Prompt</div>\n\n<p>要生成的图像的文本描述。</p>\n<div style=\"background-color:#d97706;color:white;font-weight:800;padding:10px;width:fit-content;border-radius:10px;margin:0\">Parameters</div>\n\n<p>Parameters位于提示的末尾，它可以改变图像的生成方式。</p>\n<p>用–表示。</p>\n<p>可以更改宽高比、模型、放大器等等。</p>\n<h3 id=\"2-需要注意的提示点\"><a href=\"#2-需要注意的提示点\" class=\"headerlink\" title=\"2. 需要注意的提示点\"></a>2. 需要注意的提示点</h3><h4 id=\"长度\"><a href=\"#长度\" class=\"headerlink\" title=\"长度\"></a>长度</h4><p>非常短的提示将在很大程度上依赖于 Midjourney 的默认样式。</p>\n<p>更具描述性的提示更适合独特的外观。</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><p>不是越长越好，要提取重点词，专注于要创建的主要概念。因为midjourney不是像人类那样理解语法。</p>\n<p>要用更精准的词汇，比如：大，是怎么样的大？</p>\n<p>big, try gigantic, enormous, immense</p>\n<h4 id=\"去掉不需要的内容\"><a href=\"#去掉不需要的内容\" class=\"headerlink\" title=\"去掉不需要的内容\"></a>去掉不需要的内容</h4><p><a href=\"https://docs.midjourney.com/multi-prompts\"><code>--no</code></a>参数加上的东西可以告诉midjourney，你不想在图像上出现什么</p>\n<p>比如不想要蛋糕，可以加上<code>--no cake</code></p>\n<p>（唔、挺惊悚的。。生日没有蛋糕的怒气值叠满了！）</p>\n<p><img src=\"/images/image-20230404122021297.png\"></p>\n<h4 id=\"考虑哪些细节很重要\"><a href=\"#考虑哪些细节很重要\" class=\"headerlink\" title=\"考虑哪些细节很重要\"></a>考虑哪些细节很重要</h4><p><strong>尽量把很重要的任何背景或细节搞清楚：</strong></p>\n<ul>\n<li><strong>主题：</strong>人、动物、人物、地点、物体等。</li>\n<li><strong>媒介：</strong>照片、绘画、插图、雕塑、涂鸦、挂毯等。</li>\n<li><strong>环境：</strong>室内、室外、月球上、纳尼亚、水下、翡翠城等。</li>\n<li><strong>照明：</strong>柔和、环境、阴天、霓虹灯、工作室灯等</li>\n<li><strong>颜色：</strong>充满活力、柔和、明亮、单色、彩色、黑白、柔和等。</li>\n<li><strong>情绪：</strong>稳重、平静、喧闹、精力充沛等。</li>\n<li><strong>构图：</strong>肖像、头像、特写、鸟瞰图等。</li>\n</ul>\n<p><strong>把官网的英文摘下来作参考：</strong></p>\n<ul>\n<li><strong>Subject:</strong> person, animal, character, location, object, etc.</li>\n<li><strong>Medium:</strong> photo, painting, illustration, sculpture, doodle, tapestry, etc.</li>\n<li><strong>Environment:</strong> indoors, outdoors, on the moon, in Narnia, underwater, the Emerald City, etc.</li>\n<li><strong>Lighting:</strong> soft, ambient, overcast, neon, studio lights, etc</li>\n<li><strong>Color:</strong> vibrant, muted, bright, monochromatic, colorful, black and white, pastel, etc.</li>\n<li><strong>Mood:</strong> Sedate, calm, raucous, energetic, etc.</li>\n<li><strong>Composition:</strong> Portrait, headshot, closeup, birds-eye view, etc.</li>\n</ul>\n<h3 id=\"使用具体数字\"><a href=\"#使用具体数字\" class=\"headerlink\" title=\"使用具体数字\"></a>使用具体数字</h3><p>比如”three birds”就比”birds”更加精确</p>\n<h3 id=\"3-Exprore-Prompting（探索提示）\"><a href=\"#3-Exprore-Prompting（探索提示）\" class=\"headerlink\" title=\"3. Exprore Prompting（探索提示）\"></a>3. Exprore Prompting（探索提示）</h3><h4 id=\"选择媒介\"><a href=\"#选择媒介\" class=\"headerlink\" title=\"选择媒介\"></a>选择媒介</h4><p>提示示例：<code>/imagine prompt</code> <code>&lt;any art style&gt; style cat</code></p>\n<p>常用的媒介类型：</p>\n<div\n    style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;\n    margin: 2.5em 0 1.625em 0;\n    text-align:center;color: #ffffff;\"\n    data-tomark-pass=\"\">\n    <div data-tomark-pass=\"\">\n        <strong style=\"color: #ffffff;\"data-tomark-pass=\"\">Block Print<br />版画 </strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Blockprint_Cat.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Folk Art<br />民间艺术</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Folkart.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Cyanotype<br />蓝版</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Cyanotype.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Graffiti<br />涂鸦</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Graffiti.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Paint-by-Numbers<br />数字绘画</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Paint-by-numbers.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Risograph<br />数字印刷</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Risograph.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Ukiyo-e<br />浮世绘</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_UkiyoE.jpg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Pencil Sketch<br />铅笔素描</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_Pencilsketch.jpg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Watercolor<br />水彩</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cat_watercolor.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Pixel Art<br />像素画</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_pixelArt.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Blacklight Painting<br />紫外线画</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_blacklight.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n    <div data-tomark-pass=\"\">\n        <strong data-tomark-pass=\"\">Cross Stitch<br />十字绣</strong>\n        <img\n            src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_crossStitch.jpeg\"\n            data-tomark-pass=\"\" />\n    </div>\n</div>\n\n<h3 id=\"细化\"><a href=\"#细化\" class=\"headerlink\" title=\"细化\"></a>细化</h3><p>更精确的单词和短语将有助于创建具有完全正确外观和感觉的图像。</p>\n<p>提示示例：<code>/imagine prompt</code> <code>&lt;style&gt; sketch of a cat</code></p>\n<div class=\"gridsmall\" data-tomark-pass=\"\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;color: #ffffff;\n    margin: 2.5em 0 1.625em 0;text-align: center;\">\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Life Drawing<br />写生</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_lifeDrawingSketch.jpeg\"data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Continuous Line<br />连续线</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_continuousLine.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Loose Gestural<br />随性手势画</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_looseGesturalSketch.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Blind Contour<br />草图速写</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_blindContour.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Value Study<br />明暗对比研究</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_valueStudy.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Charcoal Sketch<br />炭笔素描</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_Charcoal.jpeg\" data-tomark-pass=\"\" data-lightbox=\"box\">\n</div>\n</div>\n\n\n\n<h3 id=\"时间旅行\"><a href=\"#时间旅行\" class=\"headerlink\" title=\"时间旅行\"></a>时间旅行</h3><p>不同的时代有不同的视觉风格。</p>\n<p>提示示例：<code>/imagine prompt</code> <code>&lt;decade&gt; cat illustration</code></p>\n<div class=\"gridsmall\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;text-align: center;\n    margin: 2.5em 0 1.625em 0;color: #ffffff;\n}\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1700s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1750.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1800s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1800.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1900s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1900.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1910s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1910.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1920s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1920.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1930s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1930.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1940s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1940.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1950s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1950.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1960s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1960.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1970s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1970.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1980s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1980.jpeg\" data-lightbox=\"box\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">1990s</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_cat_1990.jpeg\" data-lightbox=\"box\">\n</div>\n</div>\n\n<h3 id=\"表情\"><a href=\"#表情\" class=\"headerlink\" title=\"表情\"></a>表情</h3><p>提示示例：<code>/imagine prompt</code> <code>&lt;emotion&gt; cat</code></p>\n<div class=\"gridsmall\" style=\"display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;color: #ffffff;text-align:center;\n    margin: 2.5em 0 1.625em 0;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Determined<br />坚定</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Determined_cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Happy<br />快乐</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Happy_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Sleepy<br />困</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Sleepy_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Angry<br />生气</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Angry_Cat.jpeg\" data-tomark-pass=\"\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Shy<br />害羞</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Shy_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Embarassed<br />尴尬</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Embarassed_Cat.jpeg\">\n</div>\n</div>\n\n<h3 id=\"使颜色更加丰富\"><a href=\"#使颜色更加丰富\" class=\"headerlink\" title=\"使颜色更加丰富\"></a>使颜色更加丰富</h3><p>提示示例：<code>/imagine prompt</code> <code>&lt;color word&gt; colored cat</code></p>\n<div class=\"gridsmall\" style=\"color: #ffffff;    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;text-align:center;\n    margin: 2.5em 0 1.625em 0;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Millennial Pink<br />千禧粉</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_MillenialPink_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Acid Green<br />酸性绿</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Acid_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Desaturated<br />无饱和度</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Desaturated_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Canary Yellow<br />金丝雀黄</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Canary_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Peach<br />桃色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Peach_Cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Two Toned<br />双色调</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Twotoned_cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Pastel<br />粉彩</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Pastel_cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Mauve<br />淡紫色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Mauve_Cat.jpeg\">\n</div>\n <div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Ebony<br />乌木色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Ebony_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Neutral<br />中性色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Neutral_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Day Glo<br />荧光色</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Dayglow_Cat.jpeg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Green Tinted<br />绿色调</font></font></strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Greentinted_Cat.jpeg\">\n</div>\n</div>\n\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>提示示例：<code>/imagine prompt</code> <code>&lt;location&gt; cat</code></p>\n<div class=\"gridsmall\" style=\"color: #ffffff;    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n    gap: 0.875rem;\n    margin: 2.5em 0 1.625em 0;text-align: center;\" data-tomark-pass=\"\">\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Tundra<br />苔原</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Tundra_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Salt Flat<br />盐滩</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Saltflat_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Jungle<br />密林</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Jungle_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Desert<br />沙漠</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Desert_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Mountain<br />山脉</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Mountain_Cat.jpg\">\n</div>\n<div data-tomark-pass=\"\">\n<strong data-tomark-pass=\"\">Cloud Forest<br />云雾森林</strong>\n<img src=\"https://cdn.document360.io/3040c2b6-fead-4744-a3a9-d56d621c6c7e/Images/Documentation/MJ_Cloudforest_Cat.jpg\">\n</div>\n</div>\n\n<h3 id=\"使用-blend命令混合图像\"><a href=\"#使用-blend命令混合图像\" class=\"headerlink\" title=\"使用/blend命令混合图像\"></a>使用/blend命令混合图像</h3><p><span style=\"color:#9AB0FC;font-weight:900\">该<code>/blend</code>命令允许您快速上传 2-5 张图像，然后读取每张图像的风格和元素，并将它们合并成一个新颖的新图像。</span></p>\n<ul>\n<li><p><code>/blend</code>与使用多个<a href=\"https://docs.midjourney.com/image-prompts\">图像提示</a>相同<code>/imagine</code>，但界面经过优化以方便在移动设备上使用。</p>\n</li>\n<li><p><code>/blend</code>最多可处理 5 张图像。要在提示中使用 5 个以上的图像，请使用<span style=\"color:#9AB0FC;font-weight:900\"><code>/imagine prompts</code></span></p>\n</li>\n<li><p><code>/blend</code>，<span style=\"color:#9AB0FC;font-weight:900\">不适用于文本提示</span>。要同时使用文本和图像提示，请使用<span style=\"color:#9AB0FC;font-weight:900\"><code>/imagine prompts</code></span></p>\n</li>\n</ul>\n<p><img src=\"/images/image-20230404120022600.png\"></p>\n<h3 id=\"blend选项\"><a href=\"#blend选项\" class=\"headerlink\" title=\"/blend选项\"></a><code>/blend</code>选项</h3><p>输入<code>/blend</code>命令后，系统会提示您上传两张照片。</p>\n<p><img src=\"/images/image-20230410190100608.png\"></p>\n<p>要添加更多图像，可点击 <strong>增加4</strong> 并选择<code>image3</code>、<code>image4</code>或<code>image5</code>。</p>\n<p><img src=\"/images/image-20230410190226854.png\"></p>\n<p><strong>该<code>/blend</code>命令可能需要比其他命令更长的时间才能启动，因为您的图像必须在 Midjourney Bot 可以处理您的请求之前上传。</strong></p>\n<p><code>dimensions</code>：可设置生成图片比例。混合图像的默认纵横比为 1:1，但您可以使用可选<code>dimensions</code>字段在方形纵横比square (1:1)、纵向纵横比portrait (2:3) 或横向纵横比landscape (3:2) 之间进行选择。</p>\n<p><img src=\"/images/image-20230410190355527.png\"></p>\n<p><a href=\"https://docs.midjourney.com/v1/docs/settings-and-presets\">自定义后缀</a>被添加到提示的末尾<code>/blend</code>，就像任何其他<code>/imagine</code>提示一样。作为<code>/blend</code>命令的一部分指定的宽高比会覆盖自定义后缀中的宽高比。</p>\n<h3 id=\"混合技巧\"><a href=\"#混合技巧\" class=\"headerlink\" title=\"混合技巧\"></a>混合技巧</h3><p>为获得最佳效果，请上传与您想要的结果具有<strong>相同宽高比</strong>的图像。</p>\n"},{"title":"【ai绘画】Midjourney 之 Commands（实用命令）","date":"2023-04-19T06:16:35.000Z","_content":"\n太常用的就不列举了，比如 `/imagine`\n\n感觉比较常用的实用的如下：\n`/info`\n`/blend`\n`/describe`\n`/remix`\n`/show`\n`/settings`","source":"_posts/midjourney3-1.md","raw":"---\ntitle: 【ai绘画】Midjourney 之 Commands（实用命令）\ndate: 2023-04-19 14:16:35\ntags: Midjourney\ncategories: 绘画\n---\n\n太常用的就不列举了，比如 `/imagine`\n\n感觉比较常用的实用的如下：\n`/info`\n`/blend`\n`/describe`\n`/remix`\n`/show`\n`/settings`","slug":"midjourney3-1","published":1,"updated":"2023-04-20T10:00:51.118Z","_id":"clgncb3ne00005hwi678p6e6c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>太常用的就不列举了，比如 <code>/imagine</code></p>\n<p>感觉比较常用的实用的如下：<br><code>/info</code><br><code>/blend</code><br><code>/describe</code><br><code>/remix</code><br><code>/show</code><br><code>/settings</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>太常用的就不列举了，比如 <code>/imagine</code></p>\n<p>感觉比较常用的实用的如下：<br><code>/info</code><br><code>/blend</code><br><code>/describe</code><br><code>/remix</code><br><code>/show</code><br><code>/settings</code></p>\n"},{"title":"【网页】六位颜色和八位颜色的区别","date":"2023-04-23T03:34:11.000Z","_content":"\n在定义颜色的时候，#ffffff 和 #ffffffff 都是十六进制的表示方式，表示的是 RGB 或 RGBA 颜色模式下的颜色值。\n\n#ffffff 表示的是 RGB 颜色模式下的白色，其中每两个相同的字符表示一个颜色通道的数值，即 #RRGGBB，其中 RR 表示红色通道的数值，GG 表示绿色通道的数值，BB 表示蓝色通道的数值。每个通道的数值都是一个 0-255 之间的十进制数。\n\n#ffffffff 则表示的是 RGBA 颜色模式下的白色，其中除了 RGB 部分的颜色通道数值以外，还有一个表示透明度的通道数值，即 #RRGGBBAA，其中 AA 表示透明度的数值，数值范围也是 0-255 的十进制数。\n\n八位的颜色表示方式则是指用一个 32 位的无符号整数来表示颜色，其中最高的 8 位表示透明度通道的数值，接下来每 8 位表示一个颜色通道的数值，即 AA RR GG BB，每个通道的数值也是一个 0-255 之间的十进制数。\n\n因此，六位和八位颜色表示方式的区别在于**八位方式多了一个表示透明度的通道**，而且将四个颜色通道和透明度通道的数值压缩到一个 32 位的整数中，可以更加节省存储空间。\n\n<hr>\n\n#### 六位颜色和八位颜色的区别\n\n当我们在网页设计和开发中定义颜色时，一般使用十六进制表示法。这种表示法使用一个带有 # 符号的字符串，后面跟着六个或八个十六进制数字，来表示颜色。\n\n六位颜色表示法使用 # 符号后面跟着六个十六进制数字，用来表示红、绿、蓝（RGB）三个颜色通道的值。每个颜色通道的值都是介于 00 到 FF 之间的十六进制数字，其中 00 表示最小值，FF 表示最大值。例如，#FF0000 表示红色，#00FF00 表示绿色，#0000FF 表示蓝色。\n\n而八位颜色表示法则将 RGB 值和一个透明度通道值（Alpha）结合起来，使用一个带有 # 符号的字符串后面跟着八个十六进制数字，用来表示红、绿、蓝（RGB）三个颜色通道以及透明度通道的值。每个颜色通道的值仍然是介于 00 到 FF 之间的十六进制数字，而透明度通道的值则表示颜色的不透明度，也是介于 00 到 FF 之间的十六进制数字。例如，#FF0000FF 表示红色，透明度为不透明（即不透明度为 FF）。\n\n六位颜色表示法适用于大多数情况，比如定义文本颜色、背景颜色等。而八位颜色表示法则更适用于需要定义半透明颜色的情况，比如定义阴影颜色、边框颜色等。在实际开发中，使用六位和八位颜色表示法时需要根据具体的需求来选择，遵循“合适即好”的原则。\n\n总之，六位和八位颜色表示法是网页设计和开发中常用的颜色表示方式，通过了解这两种表示法的区别和应用场景，我们可以更好地运用它们来实现我们的网页设计需求。\n","source":"_posts/六位颜色和八位颜色的区别.md","raw":"---\ntitle: 【网页】六位颜色和八位颜色的区别\ndate: 2023-04-23 11:34:11\ntags: 绘画\n---\n\n在定义颜色的时候，#ffffff 和 #ffffffff 都是十六进制的表示方式，表示的是 RGB 或 RGBA 颜色模式下的颜色值。\n\n#ffffff 表示的是 RGB 颜色模式下的白色，其中每两个相同的字符表示一个颜色通道的数值，即 #RRGGBB，其中 RR 表示红色通道的数值，GG 表示绿色通道的数值，BB 表示蓝色通道的数值。每个通道的数值都是一个 0-255 之间的十进制数。\n\n#ffffffff 则表示的是 RGBA 颜色模式下的白色，其中除了 RGB 部分的颜色通道数值以外，还有一个表示透明度的通道数值，即 #RRGGBBAA，其中 AA 表示透明度的数值，数值范围也是 0-255 的十进制数。\n\n八位的颜色表示方式则是指用一个 32 位的无符号整数来表示颜色，其中最高的 8 位表示透明度通道的数值，接下来每 8 位表示一个颜色通道的数值，即 AA RR GG BB，每个通道的数值也是一个 0-255 之间的十进制数。\n\n因此，六位和八位颜色表示方式的区别在于**八位方式多了一个表示透明度的通道**，而且将四个颜色通道和透明度通道的数值压缩到一个 32 位的整数中，可以更加节省存储空间。\n\n<hr>\n\n#### 六位颜色和八位颜色的区别\n\n当我们在网页设计和开发中定义颜色时，一般使用十六进制表示法。这种表示法使用一个带有 # 符号的字符串，后面跟着六个或八个十六进制数字，来表示颜色。\n\n六位颜色表示法使用 # 符号后面跟着六个十六进制数字，用来表示红、绿、蓝（RGB）三个颜色通道的值。每个颜色通道的值都是介于 00 到 FF 之间的十六进制数字，其中 00 表示最小值，FF 表示最大值。例如，#FF0000 表示红色，#00FF00 表示绿色，#0000FF 表示蓝色。\n\n而八位颜色表示法则将 RGB 值和一个透明度通道值（Alpha）结合起来，使用一个带有 # 符号的字符串后面跟着八个十六进制数字，用来表示红、绿、蓝（RGB）三个颜色通道以及透明度通道的值。每个颜色通道的值仍然是介于 00 到 FF 之间的十六进制数字，而透明度通道的值则表示颜色的不透明度，也是介于 00 到 FF 之间的十六进制数字。例如，#FF0000FF 表示红色，透明度为不透明（即不透明度为 FF）。\n\n六位颜色表示法适用于大多数情况，比如定义文本颜色、背景颜色等。而八位颜色表示法则更适用于需要定义半透明颜色的情况，比如定义阴影颜色、边框颜色等。在实际开发中，使用六位和八位颜色表示法时需要根据具体的需求来选择，遵循“合适即好”的原则。\n\n总之，六位和八位颜色表示法是网页设计和开发中常用的颜色表示方式，通过了解这两种表示法的区别和应用场景，我们可以更好地运用它们来实现我们的网页设计需求。\n","slug":"六位颜色和八位颜色的区别","published":1,"updated":"2023-05-06T02:40:36.534Z","_id":"clgsvk4cl0000h1wi50rvdzqb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在定义颜色的时候，#ffffff 和 #ffffffff 都是十六进制的表示方式，表示的是 RGB 或 RGBA 颜色模式下的颜色值。</p>\n<p>#ffffff 表示的是 RGB 颜色模式下的白色，其中每两个相同的字符表示一个颜色通道的数值，即 #RRGGBB，其中 RR 表示红色通道的数值，GG 表示绿色通道的数值，BB 表示蓝色通道的数值。每个通道的数值都是一个 0-255 之间的十进制数。</p>\n<p>#ffffffff 则表示的是 RGBA 颜色模式下的白色，其中除了 RGB 部分的颜色通道数值以外，还有一个表示透明度的通道数值，即 #RRGGBBAA，其中 AA 表示透明度的数值，数值范围也是 0-255 的十进制数。</p>\n<p>八位的颜色表示方式则是指用一个 32 位的无符号整数来表示颜色，其中最高的 8 位表示透明度通道的数值，接下来每 8 位表示一个颜色通道的数值，即 AA RR GG BB，每个通道的数值也是一个 0-255 之间的十进制数。</p>\n<p>因此，六位和八位颜色表示方式的区别在于<strong>八位方式多了一个表示透明度的通道</strong>，而且将四个颜色通道和透明度通道的数值压缩到一个 32 位的整数中，可以更加节省存储空间。</p>\n<hr>\n\n<h4 id=\"六位颜色和八位颜色的区别\"><a href=\"#六位颜色和八位颜色的区别\" class=\"headerlink\" title=\"六位颜色和八位颜色的区别\"></a>六位颜色和八位颜色的区别</h4><p>当我们在网页设计和开发中定义颜色时，一般使用十六进制表示法。这种表示法使用一个带有 # 符号的字符串，后面跟着六个或八个十六进制数字，来表示颜色。</p>\n<p>六位颜色表示法使用 # 符号后面跟着六个十六进制数字，用来表示红、绿、蓝（RGB）三个颜色通道的值。每个颜色通道的值都是介于 00 到 FF 之间的十六进制数字，其中 00 表示最小值，FF 表示最大值。例如，#FF0000 表示红色，#00FF00 表示绿色，#0000FF 表示蓝色。</p>\n<p>而八位颜色表示法则将 RGB 值和一个透明度通道值（Alpha）结合起来，使用一个带有 # 符号的字符串后面跟着八个十六进制数字，用来表示红、绿、蓝（RGB）三个颜色通道以及透明度通道的值。每个颜色通道的值仍然是介于 00 到 FF 之间的十六进制数字，而透明度通道的值则表示颜色的不透明度，也是介于 00 到 FF 之间的十六进制数字。例如，#FF0000FF 表示红色，透明度为不透明（即不透明度为 FF）。</p>\n<p>六位颜色表示法适用于大多数情况，比如定义文本颜色、背景颜色等。而八位颜色表示法则更适用于需要定义半透明颜色的情况，比如定义阴影颜色、边框颜色等。在实际开发中，使用六位和八位颜色表示法时需要根据具体的需求来选择，遵循“合适即好”的原则。</p>\n<p>总之，六位和八位颜色表示法是网页设计和开发中常用的颜色表示方式，通过了解这两种表示法的区别和应用场景，我们可以更好地运用它们来实现我们的网页设计需求。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在定义颜色的时候，#ffffff 和 #ffffffff 都是十六进制的表示方式，表示的是 RGB 或 RGBA 颜色模式下的颜色值。</p>\n<p>#ffffff 表示的是 RGB 颜色模式下的白色，其中每两个相同的字符表示一个颜色通道的数值，即 #RRGGBB，其中 RR 表示红色通道的数值，GG 表示绿色通道的数值，BB 表示蓝色通道的数值。每个通道的数值都是一个 0-255 之间的十进制数。</p>\n<p>#ffffffff 则表示的是 RGBA 颜色模式下的白色，其中除了 RGB 部分的颜色通道数值以外，还有一个表示透明度的通道数值，即 #RRGGBBAA，其中 AA 表示透明度的数值，数值范围也是 0-255 的十进制数。</p>\n<p>八位的颜色表示方式则是指用一个 32 位的无符号整数来表示颜色，其中最高的 8 位表示透明度通道的数值，接下来每 8 位表示一个颜色通道的数值，即 AA RR GG BB，每个通道的数值也是一个 0-255 之间的十进制数。</p>\n<p>因此，六位和八位颜色表示方式的区别在于<strong>八位方式多了一个表示透明度的通道</strong>，而且将四个颜色通道和透明度通道的数值压缩到一个 32 位的整数中，可以更加节省存储空间。</p>\n<hr>\n\n<h4 id=\"六位颜色和八位颜色的区别\"><a href=\"#六位颜色和八位颜色的区别\" class=\"headerlink\" title=\"六位颜色和八位颜色的区别\"></a>六位颜色和八位颜色的区别</h4><p>当我们在网页设计和开发中定义颜色时，一般使用十六进制表示法。这种表示法使用一个带有 # 符号的字符串，后面跟着六个或八个十六进制数字，来表示颜色。</p>\n<p>六位颜色表示法使用 # 符号后面跟着六个十六进制数字，用来表示红、绿、蓝（RGB）三个颜色通道的值。每个颜色通道的值都是介于 00 到 FF 之间的十六进制数字，其中 00 表示最小值，FF 表示最大值。例如，#FF0000 表示红色，#00FF00 表示绿色，#0000FF 表示蓝色。</p>\n<p>而八位颜色表示法则将 RGB 值和一个透明度通道值（Alpha）结合起来，使用一个带有 # 符号的字符串后面跟着八个十六进制数字，用来表示红、绿、蓝（RGB）三个颜色通道以及透明度通道的值。每个颜色通道的值仍然是介于 00 到 FF 之间的十六进制数字，而透明度通道的值则表示颜色的不透明度，也是介于 00 到 FF 之间的十六进制数字。例如，#FF0000FF 表示红色，透明度为不透明（即不透明度为 FF）。</p>\n<p>六位颜色表示法适用于大多数情况，比如定义文本颜色、背景颜色等。而八位颜色表示法则更适用于需要定义半透明颜色的情况，比如定义阴影颜色、边框颜色等。在实际开发中，使用六位和八位颜色表示法时需要根据具体的需求来选择，遵循“合适即好”的原则。</p>\n<p>总之，六位和八位颜色表示法是网页设计和开发中常用的颜色表示方式，通过了解这两种表示法的区别和应用场景，我们可以更好地运用它们来实现我们的网页设计需求。</p>\n"},{"title":"【prettier】vscode项目配置prettier","date":"2018-04-26T03:29:40.000Z","_content":"\n### 1. 项目中安装prettier\n\nnpm i prettier --save-dev\n\n### 2. 在vsocde中安装prettier插件\n\n![](/images/image-20230426113405622.png)\n\n注：虽然在项目中安装了 Prettier 以后，可以通过命令行或其他工具来进行代码格式化，但在 VS Code 中使用 Prettier 插件可以使代码格式化更加便捷，而且可以在保存文件时自动格式化代码。因此，建议还是在 VS Code 中安装 Prettier 插件。\n\n### 3. 设置配置规则\n\n在项目根目录新建.prettierrc文件，配置规则\n\n![](/images/image-20230426113907920.png)\n\n### 4. 设置.prettierrc的读取\n\n![](/images/image-20230426113555877.png)\n\n![](/images/image-20230426113023587.png)\n\n### 5. 设置保存时自动格式化\n\n![](/images/image-20230426114118275.png)\n\n### 6. 配置格式化程式\n\n![](/images/image-20230426114437094.png)\n\n![](/images/image-20230426114709495.png)\n\n然后选择`prettier`即可。\n\n### 7. 完成\n\n此时保存，就可以自动格式化了。\n","source":"_posts/prettier配置.md","raw":"---\ntitle: 【prettier】vscode项目配置prettier\ndate: 2018-04-26 11:29:40\ntags: prettier \ncategories:\n  - 程序员的自我修养\n---\n\n### 1. 项目中安装prettier\n\nnpm i prettier --save-dev\n\n### 2. 在vsocde中安装prettier插件\n\n![](/images/image-20230426113405622.png)\n\n注：虽然在项目中安装了 Prettier 以后，可以通过命令行或其他工具来进行代码格式化，但在 VS Code 中使用 Prettier 插件可以使代码格式化更加便捷，而且可以在保存文件时自动格式化代码。因此，建议还是在 VS Code 中安装 Prettier 插件。\n\n### 3. 设置配置规则\n\n在项目根目录新建.prettierrc文件，配置规则\n\n![](/images/image-20230426113907920.png)\n\n### 4. 设置.prettierrc的读取\n\n![](/images/image-20230426113555877.png)\n\n![](/images/image-20230426113023587.png)\n\n### 5. 设置保存时自动格式化\n\n![](/images/image-20230426114118275.png)\n\n### 6. 配置格式化程式\n\n![](/images/image-20230426114437094.png)\n\n![](/images/image-20230426114709495.png)\n\n然后选择`prettier`即可。\n\n### 7. 完成\n\n此时保存，就可以自动格式化了。\n","slug":"prettier配置","published":1,"updated":"2023-04-26T03:48:59.511Z","_id":"clgx5heyb00009gwi10yraccl","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-项目中安装prettier\"><a href=\"#1-项目中安装prettier\" class=\"headerlink\" title=\"1. 项目中安装prettier\"></a>1. 项目中安装prettier</h3><p>npm i prettier –save-dev</p>\n<h3 id=\"2-在vsocde中安装prettier插件\"><a href=\"#2-在vsocde中安装prettier插件\" class=\"headerlink\" title=\"2. 在vsocde中安装prettier插件\"></a>2. 在vsocde中安装prettier插件</h3><p><img src=\"/images/image-20230426113405622.png\"></p>\n<p>注：虽然在项目中安装了 Prettier 以后，可以通过命令行或其他工具来进行代码格式化，但在 VS Code 中使用 Prettier 插件可以使代码格式化更加便捷，而且可以在保存文件时自动格式化代码。因此，建议还是在 VS Code 中安装 Prettier 插件。</p>\n<h3 id=\"3-设置配置规则\"><a href=\"#3-设置配置规则\" class=\"headerlink\" title=\"3. 设置配置规则\"></a>3. 设置配置规则</h3><p>在项目根目录新建.prettierrc文件，配置规则</p>\n<p><img src=\"/images/image-20230426113907920.png\"></p>\n<h3 id=\"4-设置-prettierrc的读取\"><a href=\"#4-设置-prettierrc的读取\" class=\"headerlink\" title=\"4. 设置.prettierrc的读取\"></a>4. 设置.prettierrc的读取</h3><p><img src=\"/images/image-20230426113555877.png\"></p>\n<p><img src=\"/images/image-20230426113023587.png\"></p>\n<h3 id=\"5-设置保存时自动格式化\"><a href=\"#5-设置保存时自动格式化\" class=\"headerlink\" title=\"5. 设置保存时自动格式化\"></a>5. 设置保存时自动格式化</h3><p><img src=\"/images/image-20230426114118275.png\"></p>\n<h3 id=\"6-配置格式化程式\"><a href=\"#6-配置格式化程式\" class=\"headerlink\" title=\"6. 配置格式化程式\"></a>6. 配置格式化程式</h3><p><img src=\"/images/image-20230426114437094.png\"></p>\n<p><img src=\"/images/image-20230426114709495.png\"></p>\n<p>然后选择<code>prettier</code>即可。</p>\n<h3 id=\"7-完成\"><a href=\"#7-完成\" class=\"headerlink\" title=\"7. 完成\"></a>7. 完成</h3><p>此时保存，就可以自动格式化了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-项目中安装prettier\"><a href=\"#1-项目中安装prettier\" class=\"headerlink\" title=\"1. 项目中安装prettier\"></a>1. 项目中安装prettier</h3><p>npm i prettier –save-dev</p>\n<h3 id=\"2-在vsocde中安装prettier插件\"><a href=\"#2-在vsocde中安装prettier插件\" class=\"headerlink\" title=\"2. 在vsocde中安装prettier插件\"></a>2. 在vsocde中安装prettier插件</h3><p><img src=\"/images/image-20230426113405622.png\"></p>\n<p>注：虽然在项目中安装了 Prettier 以后，可以通过命令行或其他工具来进行代码格式化，但在 VS Code 中使用 Prettier 插件可以使代码格式化更加便捷，而且可以在保存文件时自动格式化代码。因此，建议还是在 VS Code 中安装 Prettier 插件。</p>\n<h3 id=\"3-设置配置规则\"><a href=\"#3-设置配置规则\" class=\"headerlink\" title=\"3. 设置配置规则\"></a>3. 设置配置规则</h3><p>在项目根目录新建.prettierrc文件，配置规则</p>\n<p><img src=\"/images/image-20230426113907920.png\"></p>\n<h3 id=\"4-设置-prettierrc的读取\"><a href=\"#4-设置-prettierrc的读取\" class=\"headerlink\" title=\"4. 设置.prettierrc的读取\"></a>4. 设置.prettierrc的读取</h3><p><img src=\"/images/image-20230426113555877.png\"></p>\n<p><img src=\"/images/image-20230426113023587.png\"></p>\n<h3 id=\"5-设置保存时自动格式化\"><a href=\"#5-设置保存时自动格式化\" class=\"headerlink\" title=\"5. 设置保存时自动格式化\"></a>5. 设置保存时自动格式化</h3><p><img src=\"/images/image-20230426114118275.png\"></p>\n<h3 id=\"6-配置格式化程式\"><a href=\"#6-配置格式化程式\" class=\"headerlink\" title=\"6. 配置格式化程式\"></a>6. 配置格式化程式</h3><p><img src=\"/images/image-20230426114437094.png\"></p>\n<p><img src=\"/images/image-20230426114709495.png\"></p>\n<p>然后选择<code>prettier</code>即可。</p>\n<h3 id=\"7-完成\"><a href=\"#7-完成\" class=\"headerlink\" title=\"7. 完成\"></a>7. 完成</h3><p>此时保存，就可以自动格式化了。</p>\n"},{"title":"【构成】色彩构成（未完）","date":"2023-05-06T02:40:09.000Z","_content":"\n跟着书过，不知道看多久\n\n## 一、色彩构成的情感表达\n\n### 第一节：色彩的总结\n\n### 1. 红色：\n\n热情、爱、力量、勇气、危险、愤怒、血液、情欲、诱惑、紧张等情感。\n\n### 2. 黄色：\n\n明朗、喜悦、阳光、警告\n\n### 3. 橙色：\n\n活力、温暖、食欲\n\n### 4. 绿色：\n\n生命、希望、健康\n\n### 5. 蓝色：\n\n清爽、理性、智慧、镇定\n\n### 6. 紫色：\n\n浪漫、神秘、幻想、富有\n\n### 7. 粉红色：\n\n温柔、甜蜜、浪漫、女性化、童话、浪漫、无邪\n\n### 8. 白色：\n\n纯洁、无辜、宁静、明亮、简约、无私\n\n### 9. 黑色：\n\n神秘、力量、庄严、悲伤、死亡、恶意、保守、冷酷\n\n### 10. 灰色：\n\n高雅、含蓄、内敛、中性\n\n### 11. 金银色：\n\n奢华、富丽\n\n### 第二节：色彩的通感\n\n### 1. 色彩的软硬感\n\n色彩的软硬感是色彩与视觉共同形成的软硬感觉作用于人的心理结果。明度是影响色彩软硬感的关键因素。\n\n明度高，色彩感觉偏软。明度低吖色彩感觉偏硬。\n\n色彩的软硬度还与纯度有关。\n\n高纯度的色彩有坚硬的感觉，低纯度的色彩有柔软感。\n\n### 2. 色彩的轻重感\n\n色彩的轻重感与明度纯度和透明度有关系。\n\n明度与纯度：\n\n明度纯度都高的颜色，给人以轻柔感。\n\n明度纯度都低的颜色，给人以重量感。\n\n色相：\n\n暖色给人以轻的感觉，冷色给人以重的感觉。\n\n色彩的位置接近作品上方时，可以强调轻盈感，处于下方则可以强调厚重的感觉。\n\n（当色彩的位置接近作品的上方时，可以营造出轻盈、明亮的感觉，这是因为人们习惯将天空与轻盈、明亮的氛围联系在一起。反之，当色彩的位置接近作品的下方时，会强调厚重、稳重的感觉，因为人们将大地与厚重、稳定的感觉联系在一起。）\n\n透明度：\n\n透明度高给人以轻盈的印象。\n\n透明度低给人以沉重的印象。\n\n### 3. 色彩的绚丽感和质朴感\n\n使用色相丰富的高纯度、高明度的色彩，就会给人绚丽的感觉。\n\n使用色相单一的低纯度、低明度的色彩，就会给人质朴的感觉。\n\n### 4. 色彩的兴奋感与沉静感\n\n色彩的兴奋感与沉静感与色相的联系紧密。\n\n红、橙、黄给人以兴奋感。\n\n蓝、蓝绿、蓝紫则给人以沉静感。\n\n一般来说，暖色比冷色更容易引起人的兴奋感。\n\n<!--\n\n建子任务，预估工时，手动补全实际完成公式\n\n在任务下建新任务，然后填写预估工时\n\n![](../images/image-20230506135300582.png)\n\n开始切换为进行中，点为不需要自动补足blabla\n\n![](../images/image-20230506135322713.png)\n\n如果自动补全工时，创建时间和预计开始时间范围内的时间会被补位任务工时。\n\n![](../images/image-20230506135410013.png)\n\n -->\n","source":"_posts/色彩构成.md","raw":"---\ntitle: 【构成】色彩构成（未完）\ndate: 2023-05-06 10:40:09\ntags:\n  - 绘画\ncategories:\n  - 绘画\n---\n\n跟着书过，不知道看多久\n\n## 一、色彩构成的情感表达\n\n### 第一节：色彩的总结\n\n### 1. 红色：\n\n热情、爱、力量、勇气、危险、愤怒、血液、情欲、诱惑、紧张等情感。\n\n### 2. 黄色：\n\n明朗、喜悦、阳光、警告\n\n### 3. 橙色：\n\n活力、温暖、食欲\n\n### 4. 绿色：\n\n生命、希望、健康\n\n### 5. 蓝色：\n\n清爽、理性、智慧、镇定\n\n### 6. 紫色：\n\n浪漫、神秘、幻想、富有\n\n### 7. 粉红色：\n\n温柔、甜蜜、浪漫、女性化、童话、浪漫、无邪\n\n### 8. 白色：\n\n纯洁、无辜、宁静、明亮、简约、无私\n\n### 9. 黑色：\n\n神秘、力量、庄严、悲伤、死亡、恶意、保守、冷酷\n\n### 10. 灰色：\n\n高雅、含蓄、内敛、中性\n\n### 11. 金银色：\n\n奢华、富丽\n\n### 第二节：色彩的通感\n\n### 1. 色彩的软硬感\n\n色彩的软硬感是色彩与视觉共同形成的软硬感觉作用于人的心理结果。明度是影响色彩软硬感的关键因素。\n\n明度高，色彩感觉偏软。明度低吖色彩感觉偏硬。\n\n色彩的软硬度还与纯度有关。\n\n高纯度的色彩有坚硬的感觉，低纯度的色彩有柔软感。\n\n### 2. 色彩的轻重感\n\n色彩的轻重感与明度纯度和透明度有关系。\n\n明度与纯度：\n\n明度纯度都高的颜色，给人以轻柔感。\n\n明度纯度都低的颜色，给人以重量感。\n\n色相：\n\n暖色给人以轻的感觉，冷色给人以重的感觉。\n\n色彩的位置接近作品上方时，可以强调轻盈感，处于下方则可以强调厚重的感觉。\n\n（当色彩的位置接近作品的上方时，可以营造出轻盈、明亮的感觉，这是因为人们习惯将天空与轻盈、明亮的氛围联系在一起。反之，当色彩的位置接近作品的下方时，会强调厚重、稳重的感觉，因为人们将大地与厚重、稳定的感觉联系在一起。）\n\n透明度：\n\n透明度高给人以轻盈的印象。\n\n透明度低给人以沉重的印象。\n\n### 3. 色彩的绚丽感和质朴感\n\n使用色相丰富的高纯度、高明度的色彩，就会给人绚丽的感觉。\n\n使用色相单一的低纯度、低明度的色彩，就会给人质朴的感觉。\n\n### 4. 色彩的兴奋感与沉静感\n\n色彩的兴奋感与沉静感与色相的联系紧密。\n\n红、橙、黄给人以兴奋感。\n\n蓝、蓝绿、蓝紫则给人以沉静感。\n\n一般来说，暖色比冷色更容易引起人的兴奋感。\n\n<!--\n\n建子任务，预估工时，手动补全实际完成公式\n\n在任务下建新任务，然后填写预估工时\n\n![](../images/image-20230506135300582.png)\n\n开始切换为进行中，点为不需要自动补足blabla\n\n![](../images/image-20230506135322713.png)\n\n如果自动补全工时，创建时间和预计开始时间范围内的时间会被补位任务工时。\n\n![](../images/image-20230506135410013.png)\n\n -->\n","slug":"色彩构成","published":1,"updated":"2023-05-08T06:33:50.913Z","_id":"clhbkxctx0000ypwi0ths3est","comments":1,"layout":"post","photos":[],"link":"","content":"<p>跟着书过，不知道看多久</p>\n<h2 id=\"一、色彩构成的情感表达\"><a href=\"#一、色彩构成的情感表达\" class=\"headerlink\" title=\"一、色彩构成的情感表达\"></a>一、色彩构成的情感表达</h2><h3 id=\"第一节：色彩的总结\"><a href=\"#第一节：色彩的总结\" class=\"headerlink\" title=\"第一节：色彩的总结\"></a>第一节：色彩的总结</h3><h3 id=\"1-红色：\"><a href=\"#1-红色：\" class=\"headerlink\" title=\"1. 红色：\"></a>1. 红色：</h3><p>热情、爱、力量、勇气、危险、愤怒、血液、情欲、诱惑、紧张等情感。</p>\n<h3 id=\"2-黄色：\"><a href=\"#2-黄色：\" class=\"headerlink\" title=\"2. 黄色：\"></a>2. 黄色：</h3><p>明朗、喜悦、阳光、警告</p>\n<h3 id=\"3-橙色：\"><a href=\"#3-橙色：\" class=\"headerlink\" title=\"3. 橙色：\"></a>3. 橙色：</h3><p>活力、温暖、食欲</p>\n<h3 id=\"4-绿色：\"><a href=\"#4-绿色：\" class=\"headerlink\" title=\"4. 绿色：\"></a>4. 绿色：</h3><p>生命、希望、健康</p>\n<h3 id=\"5-蓝色：\"><a href=\"#5-蓝色：\" class=\"headerlink\" title=\"5. 蓝色：\"></a>5. 蓝色：</h3><p>清爽、理性、智慧、镇定</p>\n<h3 id=\"6-紫色：\"><a href=\"#6-紫色：\" class=\"headerlink\" title=\"6. 紫色：\"></a>6. 紫色：</h3><p>浪漫、神秘、幻想、富有</p>\n<h3 id=\"7-粉红色：\"><a href=\"#7-粉红色：\" class=\"headerlink\" title=\"7. 粉红色：\"></a>7. 粉红色：</h3><p>温柔、甜蜜、浪漫、女性化、童话、浪漫、无邪</p>\n<h3 id=\"8-白色：\"><a href=\"#8-白色：\" class=\"headerlink\" title=\"8. 白色：\"></a>8. 白色：</h3><p>纯洁、无辜、宁静、明亮、简约、无私</p>\n<h3 id=\"9-黑色：\"><a href=\"#9-黑色：\" class=\"headerlink\" title=\"9. 黑色：\"></a>9. 黑色：</h3><p>神秘、力量、庄严、悲伤、死亡、恶意、保守、冷酷</p>\n<h3 id=\"10-灰色：\"><a href=\"#10-灰色：\" class=\"headerlink\" title=\"10. 灰色：\"></a>10. 灰色：</h3><p>高雅、含蓄、内敛、中性</p>\n<h3 id=\"11-金银色：\"><a href=\"#11-金银色：\" class=\"headerlink\" title=\"11. 金银色：\"></a>11. 金银色：</h3><p>奢华、富丽</p>\n<h3 id=\"第二节：色彩的通感\"><a href=\"#第二节：色彩的通感\" class=\"headerlink\" title=\"第二节：色彩的通感\"></a>第二节：色彩的通感</h3><h3 id=\"1-色彩的软硬感\"><a href=\"#1-色彩的软硬感\" class=\"headerlink\" title=\"1. 色彩的软硬感\"></a>1. 色彩的软硬感</h3><p>色彩的软硬感是色彩与视觉共同形成的软硬感觉作用于人的心理结果。明度是影响色彩软硬感的关键因素。</p>\n<p>明度高，色彩感觉偏软。明度低吖色彩感觉偏硬。</p>\n<p>色彩的软硬度还与纯度有关。</p>\n<p>高纯度的色彩有坚硬的感觉，低纯度的色彩有柔软感。</p>\n<h3 id=\"2-色彩的轻重感\"><a href=\"#2-色彩的轻重感\" class=\"headerlink\" title=\"2. 色彩的轻重感\"></a>2. 色彩的轻重感</h3><p>色彩的轻重感与明度纯度和透明度有关系。</p>\n<p>明度与纯度：</p>\n<p>明度纯度都高的颜色，给人以轻柔感。</p>\n<p>明度纯度都低的颜色，给人以重量感。</p>\n<p>色相：</p>\n<p>暖色给人以轻的感觉，冷色给人以重的感觉。</p>\n<p>色彩的位置接近作品上方时，可以强调轻盈感，处于下方则可以强调厚重的感觉。</p>\n<p>（当色彩的位置接近作品的上方时，可以营造出轻盈、明亮的感觉，这是因为人们习惯将天空与轻盈、明亮的氛围联系在一起。反之，当色彩的位置接近作品的下方时，会强调厚重、稳重的感觉，因为人们将大地与厚重、稳定的感觉联系在一起。）</p>\n<p>透明度：</p>\n<p>透明度高给人以轻盈的印象。</p>\n<p>透明度低给人以沉重的印象。</p>\n<h3 id=\"3-色彩的绚丽感和质朴感\"><a href=\"#3-色彩的绚丽感和质朴感\" class=\"headerlink\" title=\"3. 色彩的绚丽感和质朴感\"></a>3. 色彩的绚丽感和质朴感</h3><p>使用色相丰富的高纯度、高明度的色彩，就会给人绚丽的感觉。</p>\n<p>使用色相单一的低纯度、低明度的色彩，就会给人质朴的感觉。</p>\n<h3 id=\"4-色彩的兴奋感与沉静感\"><a href=\"#4-色彩的兴奋感与沉静感\" class=\"headerlink\" title=\"4. 色彩的兴奋感与沉静感\"></a>4. 色彩的兴奋感与沉静感</h3><p>色彩的兴奋感与沉静感与色相的联系紧密。</p>\n<p>红、橙、黄给人以兴奋感。</p>\n<p>蓝、蓝绿、蓝紫则给人以沉静感。</p>\n<p>一般来说，暖色比冷色更容易引起人的兴奋感。</p>\n<!--\n\n建子任务，预估工时，手动补全实际完成公式\n\n在任务下建新任务，然后填写预估工时\n\n![](../images/image-20230506135300582.png)\n\n开始切换为进行中，点为不需要自动补足blabla\n\n![](../images/image-20230506135322713.png)\n\n如果自动补全工时，创建时间和预计开始时间范围内的时间会被补位任务工时。\n\n![](../images/image-20230506135410013.png)\n\n -->\n","site":{"data":{}},"excerpt":"","more":"<p>跟着书过，不知道看多久</p>\n<h2 id=\"一、色彩构成的情感表达\"><a href=\"#一、色彩构成的情感表达\" class=\"headerlink\" title=\"一、色彩构成的情感表达\"></a>一、色彩构成的情感表达</h2><h3 id=\"第一节：色彩的总结\"><a href=\"#第一节：色彩的总结\" class=\"headerlink\" title=\"第一节：色彩的总结\"></a>第一节：色彩的总结</h3><h3 id=\"1-红色：\"><a href=\"#1-红色：\" class=\"headerlink\" title=\"1. 红色：\"></a>1. 红色：</h3><p>热情、爱、力量、勇气、危险、愤怒、血液、情欲、诱惑、紧张等情感。</p>\n<h3 id=\"2-黄色：\"><a href=\"#2-黄色：\" class=\"headerlink\" title=\"2. 黄色：\"></a>2. 黄色：</h3><p>明朗、喜悦、阳光、警告</p>\n<h3 id=\"3-橙色：\"><a href=\"#3-橙色：\" class=\"headerlink\" title=\"3. 橙色：\"></a>3. 橙色：</h3><p>活力、温暖、食欲</p>\n<h3 id=\"4-绿色：\"><a href=\"#4-绿色：\" class=\"headerlink\" title=\"4. 绿色：\"></a>4. 绿色：</h3><p>生命、希望、健康</p>\n<h3 id=\"5-蓝色：\"><a href=\"#5-蓝色：\" class=\"headerlink\" title=\"5. 蓝色：\"></a>5. 蓝色：</h3><p>清爽、理性、智慧、镇定</p>\n<h3 id=\"6-紫色：\"><a href=\"#6-紫色：\" class=\"headerlink\" title=\"6. 紫色：\"></a>6. 紫色：</h3><p>浪漫、神秘、幻想、富有</p>\n<h3 id=\"7-粉红色：\"><a href=\"#7-粉红色：\" class=\"headerlink\" title=\"7. 粉红色：\"></a>7. 粉红色：</h3><p>温柔、甜蜜、浪漫、女性化、童话、浪漫、无邪</p>\n<h3 id=\"8-白色：\"><a href=\"#8-白色：\" class=\"headerlink\" title=\"8. 白色：\"></a>8. 白色：</h3><p>纯洁、无辜、宁静、明亮、简约、无私</p>\n<h3 id=\"9-黑色：\"><a href=\"#9-黑色：\" class=\"headerlink\" title=\"9. 黑色：\"></a>9. 黑色：</h3><p>神秘、力量、庄严、悲伤、死亡、恶意、保守、冷酷</p>\n<h3 id=\"10-灰色：\"><a href=\"#10-灰色：\" class=\"headerlink\" title=\"10. 灰色：\"></a>10. 灰色：</h3><p>高雅、含蓄、内敛、中性</p>\n<h3 id=\"11-金银色：\"><a href=\"#11-金银色：\" class=\"headerlink\" title=\"11. 金银色：\"></a>11. 金银色：</h3><p>奢华、富丽</p>\n<h3 id=\"第二节：色彩的通感\"><a href=\"#第二节：色彩的通感\" class=\"headerlink\" title=\"第二节：色彩的通感\"></a>第二节：色彩的通感</h3><h3 id=\"1-色彩的软硬感\"><a href=\"#1-色彩的软硬感\" class=\"headerlink\" title=\"1. 色彩的软硬感\"></a>1. 色彩的软硬感</h3><p>色彩的软硬感是色彩与视觉共同形成的软硬感觉作用于人的心理结果。明度是影响色彩软硬感的关键因素。</p>\n<p>明度高，色彩感觉偏软。明度低吖色彩感觉偏硬。</p>\n<p>色彩的软硬度还与纯度有关。</p>\n<p>高纯度的色彩有坚硬的感觉，低纯度的色彩有柔软感。</p>\n<h3 id=\"2-色彩的轻重感\"><a href=\"#2-色彩的轻重感\" class=\"headerlink\" title=\"2. 色彩的轻重感\"></a>2. 色彩的轻重感</h3><p>色彩的轻重感与明度纯度和透明度有关系。</p>\n<p>明度与纯度：</p>\n<p>明度纯度都高的颜色，给人以轻柔感。</p>\n<p>明度纯度都低的颜色，给人以重量感。</p>\n<p>色相：</p>\n<p>暖色给人以轻的感觉，冷色给人以重的感觉。</p>\n<p>色彩的位置接近作品上方时，可以强调轻盈感，处于下方则可以强调厚重的感觉。</p>\n<p>（当色彩的位置接近作品的上方时，可以营造出轻盈、明亮的感觉，这是因为人们习惯将天空与轻盈、明亮的氛围联系在一起。反之，当色彩的位置接近作品的下方时，会强调厚重、稳重的感觉，因为人们将大地与厚重、稳定的感觉联系在一起。）</p>\n<p>透明度：</p>\n<p>透明度高给人以轻盈的印象。</p>\n<p>透明度低给人以沉重的印象。</p>\n<h3 id=\"3-色彩的绚丽感和质朴感\"><a href=\"#3-色彩的绚丽感和质朴感\" class=\"headerlink\" title=\"3. 色彩的绚丽感和质朴感\"></a>3. 色彩的绚丽感和质朴感</h3><p>使用色相丰富的高纯度、高明度的色彩，就会给人绚丽的感觉。</p>\n<p>使用色相单一的低纯度、低明度的色彩，就会给人质朴的感觉。</p>\n<h3 id=\"4-色彩的兴奋感与沉静感\"><a href=\"#4-色彩的兴奋感与沉静感\" class=\"headerlink\" title=\"4. 色彩的兴奋感与沉静感\"></a>4. 色彩的兴奋感与沉静感</h3><p>色彩的兴奋感与沉静感与色相的联系紧密。</p>\n<p>红、橙、黄给人以兴奋感。</p>\n<p>蓝、蓝绿、蓝紫则给人以沉静感。</p>\n<p>一般来说，暖色比冷色更容易引起人的兴奋感。</p>\n<!--\n\n建子任务，预估工时，手动补全实际完成公式\n\n在任务下建新任务，然后填写预估工时\n\n![](../images/image-20230506135300582.png)\n\n开始切换为进行中，点为不需要自动补足blabla\n\n![](../images/image-20230506135322713.png)\n\n如果自动补全工时，创建时间和预计开始时间范围内的时间会被补位任务工时。\n\n![](../images/image-20230506135410013.png)\n\n -->\n"},{"title":"【反向代理】webpack-dev-server反向代理的原理及简介","date":"2023-05-08T06:21:19.000Z","_content":"\n在 Web 开发中，由于浏览器的安全机制限制，同源策略（Same-Origin Policy）会阻止来自不同源（协议、域名、端口）的 Web 应用程序之间的访问。这意味着如果你的 Web 应用程序试图从一个不同的域名请求数据，将会收到一个跨域请求错误。\n\n在本地开发时，由于 api 从测试环境提供，而本地的域名为 localhost，会导致跨域。此时可以使用 webpack-dev-server 的反向代理功能去设置。\n\n## 1. 什么是 webpack-dev-server\n\n`webpack-dev-server`是一个开发环境下的服务器，它能够为我们提供一个本地的开发环境，实时重新加载页面，并且能够支持各种类型的静态资源。它内置了 webpack 编译器，可以自动编译项目代码并在浏览器中实时展示。\n\n## 2. 什么是反向代理\n\n在开发环境中，我们可能需要从本地访问远程的服务器接口，但是由于跨域的限制，我们无法直接访问远程服务器。这时候就需要借助反向代理服务器来实现。反向代理服务器可以在本地开启一个代理服务，将本地请求转发到远程服务器，从而解决跨域问题。\n\n## 3. webpack-dev-server 实现反向代理的原理\n\nwebpack-dev-server 内置了 express 服务器，并且支持配置代理服务器。通过配置代理服务器，我们可以将本地的请求转发到远程服务器。具体的实现原理如下：\n\n1. 在`webpack.config.js`中配置代理服务器相关的选项，比如`proxy`、`before`、`after`等。\n2. 在启动 webpack-dev-server 时，会自动启动一个 express 服务器，并监听开发服务器的端口。\n3. 当我们在浏览器中发起请求时，express 服务器会拦截请求，并判断该请求是否满足代理规则。\n4. 如果请求满足代理规则，express 服务器会将该请求转发到代理服务器。\n5. 代理服务器会将请求发送到远程服务器，并将响应返回给 express 服务器。\n6. express 服务器收到远程服务器的响应后，将响应返回给浏览器。\n\n## 4. 如何配置 webpack-dev-server 反向代理\n\n在`webpack.config.js`文件中，我们可以通过`devServer.proxy`选项来配置反向代理服务器，其常见配置如下：\n\n```js\nmodule.exports = {\n\t// ...\n\tdevServer: {\n\t\tproxy: {\n\t\t\t// 代理规则\n\t\t\t\"/api\": {\n\t\t\t\ttarget: \"http://localhost:3000\",\n\t\t\t\tpathRewrite: { \"^/api\": \"\" },\n\t\t\t},\n\t\t},\n\t},\n};\n```\n\n上述配置的含义是：将以`/api`开头的请求转发到`http://localhost:3000`服务器上，并且去掉`/api`前缀。\n\n其中，`target`选项表示需要转发的远程服务器地址，`pathRewrite`选项用于重写请求路径。\n\n## 5. 使用案例\n\n假设我们有一个 Vue.js 项目，需要通过反向代理来访问后端 API。后端 API 的地址为 `https://api.example.com`。\n\n首先，我们需要安装 `webpack-dev-server` 和 `http-proxy-middleware`：\n\n```bash\nnpm install webpack-dev-server http-proxy-middleware --save-dev\n```\n\n接下来，在 `vue.config.js` 中添加以下配置：\n\n```js\nconst proxy = require(\"http-proxy-middleware\");\n\nmodule.exports = {\n\tdevServer: {\n\t\tproxy: {\n\t\t\t\"/api\": {\n\t\t\t\ttarget: \"https://api.example.com\",\n\t\t\t\tchangeOrigin: true,\n\t\t\t\tpathRewrite: {\n\t\t\t\t\t\"^/api\": \"\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n};\n```\n\n这个配置的意思是：所有以 `/api` 开头的请求都会被代理到 `https://api.example.com`，并且会在请求头中加上 `Origin: http://localhost:8080`，以模拟跨域请求。`changeOrigin` 选项表示是否改变请求头中的 `Origin` 字段，设为 `true` 可以解决一些跨域问题。`pathRewrite` 选项表示将请求路径中的 `/api` 替换为空，以便后端接收请求时不会包含 `/api`。\n\n然后在前端代码中，我们可以这样来访问 API：\n\n```js\naxios.get(\"/api/some-api\");\n```\n\n这样，`axios` 库会将请求发送到 `http://localhost:8080/api/some-api`，`webpack-dev-server` 会将这个请求转发到 `https://api.example.com/some-api`，最终将后端 API 的响应返回给前端。\n\n需要注意的是，由于是通过代理服务器来访问后端 API，所以我们无法直接在浏览器中访问 `https://api.example.com`，必须通过代理服务器来访问。在开发环境下，我们可以使用 `webpack-dev-server` 提供的 `/webpack-dev-server/` 页面来访问代理服务器的相关信息。\n","source":"_posts/反向代理.md","raw":"---\ntitle: 【反向代理】webpack-dev-server反向代理的原理及简介\ndate: 2023-05-08 14:21:19\ntags:\n  - webpack\ncategories:\n  - 程序员的自我修养\n---\n\n在 Web 开发中，由于浏览器的安全机制限制，同源策略（Same-Origin Policy）会阻止来自不同源（协议、域名、端口）的 Web 应用程序之间的访问。这意味着如果你的 Web 应用程序试图从一个不同的域名请求数据，将会收到一个跨域请求错误。\n\n在本地开发时，由于 api 从测试环境提供，而本地的域名为 localhost，会导致跨域。此时可以使用 webpack-dev-server 的反向代理功能去设置。\n\n## 1. 什么是 webpack-dev-server\n\n`webpack-dev-server`是一个开发环境下的服务器，它能够为我们提供一个本地的开发环境，实时重新加载页面，并且能够支持各种类型的静态资源。它内置了 webpack 编译器，可以自动编译项目代码并在浏览器中实时展示。\n\n## 2. 什么是反向代理\n\n在开发环境中，我们可能需要从本地访问远程的服务器接口，但是由于跨域的限制，我们无法直接访问远程服务器。这时候就需要借助反向代理服务器来实现。反向代理服务器可以在本地开启一个代理服务，将本地请求转发到远程服务器，从而解决跨域问题。\n\n## 3. webpack-dev-server 实现反向代理的原理\n\nwebpack-dev-server 内置了 express 服务器，并且支持配置代理服务器。通过配置代理服务器，我们可以将本地的请求转发到远程服务器。具体的实现原理如下：\n\n1. 在`webpack.config.js`中配置代理服务器相关的选项，比如`proxy`、`before`、`after`等。\n2. 在启动 webpack-dev-server 时，会自动启动一个 express 服务器，并监听开发服务器的端口。\n3. 当我们在浏览器中发起请求时，express 服务器会拦截请求，并判断该请求是否满足代理规则。\n4. 如果请求满足代理规则，express 服务器会将该请求转发到代理服务器。\n5. 代理服务器会将请求发送到远程服务器，并将响应返回给 express 服务器。\n6. express 服务器收到远程服务器的响应后，将响应返回给浏览器。\n\n## 4. 如何配置 webpack-dev-server 反向代理\n\n在`webpack.config.js`文件中，我们可以通过`devServer.proxy`选项来配置反向代理服务器，其常见配置如下：\n\n```js\nmodule.exports = {\n\t// ...\n\tdevServer: {\n\t\tproxy: {\n\t\t\t// 代理规则\n\t\t\t\"/api\": {\n\t\t\t\ttarget: \"http://localhost:3000\",\n\t\t\t\tpathRewrite: { \"^/api\": \"\" },\n\t\t\t},\n\t\t},\n\t},\n};\n```\n\n上述配置的含义是：将以`/api`开头的请求转发到`http://localhost:3000`服务器上，并且去掉`/api`前缀。\n\n其中，`target`选项表示需要转发的远程服务器地址，`pathRewrite`选项用于重写请求路径。\n\n## 5. 使用案例\n\n假设我们有一个 Vue.js 项目，需要通过反向代理来访问后端 API。后端 API 的地址为 `https://api.example.com`。\n\n首先，我们需要安装 `webpack-dev-server` 和 `http-proxy-middleware`：\n\n```bash\nnpm install webpack-dev-server http-proxy-middleware --save-dev\n```\n\n接下来，在 `vue.config.js` 中添加以下配置：\n\n```js\nconst proxy = require(\"http-proxy-middleware\");\n\nmodule.exports = {\n\tdevServer: {\n\t\tproxy: {\n\t\t\t\"/api\": {\n\t\t\t\ttarget: \"https://api.example.com\",\n\t\t\t\tchangeOrigin: true,\n\t\t\t\tpathRewrite: {\n\t\t\t\t\t\"^/api\": \"\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n};\n```\n\n这个配置的意思是：所有以 `/api` 开头的请求都会被代理到 `https://api.example.com`，并且会在请求头中加上 `Origin: http://localhost:8080`，以模拟跨域请求。`changeOrigin` 选项表示是否改变请求头中的 `Origin` 字段，设为 `true` 可以解决一些跨域问题。`pathRewrite` 选项表示将请求路径中的 `/api` 替换为空，以便后端接收请求时不会包含 `/api`。\n\n然后在前端代码中，我们可以这样来访问 API：\n\n```js\naxios.get(\"/api/some-api\");\n```\n\n这样，`axios` 库会将请求发送到 `http://localhost:8080/api/some-api`，`webpack-dev-server` 会将这个请求转发到 `https://api.example.com/some-api`，最终将后端 API 的响应返回给前端。\n\n需要注意的是，由于是通过代理服务器来访问后端 API，所以我们无法直接在浏览器中访问 `https://api.example.com`，必须通过代理服务器来访问。在开发环境下，我们可以使用 `webpack-dev-server` 提供的 `/webpack-dev-server/` 页面来访问代理服务器的相关信息。\n","slug":"反向代理","published":1,"updated":"2023-05-08T06:35:20.338Z","_id":"clhegw17d0000dywi1d1caxrv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在 Web 开发中，由于浏览器的安全机制限制，同源策略（Same-Origin Policy）会阻止来自不同源（协议、域名、端口）的 Web 应用程序之间的访问。这意味着如果你的 Web 应用程序试图从一个不同的域名请求数据，将会收到一个跨域请求错误。</p>\n<p>在本地开发时，由于 api 从测试环境提供，而本地的域名为 localhost，会导致跨域。此时可以使用 webpack-dev-server 的反向代理功能去设置。</p>\n<h2 id=\"1-什么是-webpack-dev-server\"><a href=\"#1-什么是-webpack-dev-server\" class=\"headerlink\" title=\"1. 什么是 webpack-dev-server\"></a>1. 什么是 webpack-dev-server</h2><p><code>webpack-dev-server</code>是一个开发环境下的服务器，它能够为我们提供一个本地的开发环境，实时重新加载页面，并且能够支持各种类型的静态资源。它内置了 webpack 编译器，可以自动编译项目代码并在浏览器中实时展示。</p>\n<h2 id=\"2-什么是反向代理\"><a href=\"#2-什么是反向代理\" class=\"headerlink\" title=\"2. 什么是反向代理\"></a>2. 什么是反向代理</h2><p>在开发环境中，我们可能需要从本地访问远程的服务器接口，但是由于跨域的限制，我们无法直接访问远程服务器。这时候就需要借助反向代理服务器来实现。反向代理服务器可以在本地开启一个代理服务，将本地请求转发到远程服务器，从而解决跨域问题。</p>\n<h2 id=\"3-webpack-dev-server-实现反向代理的原理\"><a href=\"#3-webpack-dev-server-实现反向代理的原理\" class=\"headerlink\" title=\"3. webpack-dev-server 实现反向代理的原理\"></a>3. webpack-dev-server 实现反向代理的原理</h2><p>webpack-dev-server 内置了 express 服务器，并且支持配置代理服务器。通过配置代理服务器，我们可以将本地的请求转发到远程服务器。具体的实现原理如下：</p>\n<ol>\n<li>在<code>webpack.config.js</code>中配置代理服务器相关的选项，比如<code>proxy</code>、<code>before</code>、<code>after</code>等。</li>\n<li>在启动 webpack-dev-server 时，会自动启动一个 express 服务器，并监听开发服务器的端口。</li>\n<li>当我们在浏览器中发起请求时，express 服务器会拦截请求，并判断该请求是否满足代理规则。</li>\n<li>如果请求满足代理规则，express 服务器会将该请求转发到代理服务器。</li>\n<li>代理服务器会将请求发送到远程服务器，并将响应返回给 express 服务器。</li>\n<li>express 服务器收到远程服务器的响应后，将响应返回给浏览器。</li>\n</ol>\n<h2 id=\"4-如何配置-webpack-dev-server-反向代理\"><a href=\"#4-如何配置-webpack-dev-server-反向代理\" class=\"headerlink\" title=\"4. 如何配置 webpack-dev-server 反向代理\"></a>4. 如何配置 webpack-dev-server 反向代理</h2><p>在<code>webpack.config.js</code>文件中，我们可以通过<code>devServer.proxy</code>选项来配置反向代理服务器，其常见配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 代理规则</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;/api&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">target</span>: <span class=\"string\">&quot;http://localhost:3000&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">pathRewrite</span>: &#123; <span class=\"string\">&quot;^/api&quot;</span>: <span class=\"string\">&quot;&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上述配置的含义是：将以<code>/api</code>开头的请求转发到<code>http://localhost:3000</code>服务器上，并且去掉<code>/api</code>前缀。</p>\n<p>其中，<code>target</code>选项表示需要转发的远程服务器地址，<code>pathRewrite</code>选项用于重写请求路径。</p>\n<h2 id=\"5-使用案例\"><a href=\"#5-使用案例\" class=\"headerlink\" title=\"5. 使用案例\"></a>5. 使用案例</h2><p>假设我们有一个 Vue.js 项目，需要通过反向代理来访问后端 API。后端 API 的地址为 <code>https://api.example.com</code>。</p>\n<p>首先，我们需要安装 <code>webpack-dev-server</code> 和 <code>http-proxy-middleware</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server http-proxy-middleware --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>接下来，在 <code>vue.config.js</code> 中添加以下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http-proxy-middleware&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;/api&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">target</span>: <span class=\"string\">&quot;https://api.example.com&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;^/api&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个配置的意思是：所有以 <code>/api</code> 开头的请求都会被代理到 <code>https://api.example.com</code>，并且会在请求头中加上 <code>Origin: http://localhost:8080</code>，以模拟跨域请求。<code>changeOrigin</code> 选项表示是否改变请求头中的 <code>Origin</code> 字段，设为 <code>true</code> 可以解决一些跨域问题。<code>pathRewrite</code> 选项表示将请求路径中的 <code>/api</code> 替换为空，以便后端接收请求时不会包含 <code>/api</code>。</p>\n<p>然后在前端代码中，我们可以这样来访问 API：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/api/some-api&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样，<code>axios</code> 库会将请求发送到 <code>http://localhost:8080/api/some-api</code>，<code>webpack-dev-server</code> 会将这个请求转发到 <code>https://api.example.com/some-api</code>，最终将后端 API 的响应返回给前端。</p>\n<p>需要注意的是，由于是通过代理服务器来访问后端 API，所以我们无法直接在浏览器中访问 <code>https://api.example.com</code>，必须通过代理服务器来访问。在开发环境下，我们可以使用 <code>webpack-dev-server</code> 提供的 <code>/webpack-dev-server/</code> 页面来访问代理服务器的相关信息。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 Web 开发中，由于浏览器的安全机制限制，同源策略（Same-Origin Policy）会阻止来自不同源（协议、域名、端口）的 Web 应用程序之间的访问。这意味着如果你的 Web 应用程序试图从一个不同的域名请求数据，将会收到一个跨域请求错误。</p>\n<p>在本地开发时，由于 api 从测试环境提供，而本地的域名为 localhost，会导致跨域。此时可以使用 webpack-dev-server 的反向代理功能去设置。</p>\n<h2 id=\"1-什么是-webpack-dev-server\"><a href=\"#1-什么是-webpack-dev-server\" class=\"headerlink\" title=\"1. 什么是 webpack-dev-server\"></a>1. 什么是 webpack-dev-server</h2><p><code>webpack-dev-server</code>是一个开发环境下的服务器，它能够为我们提供一个本地的开发环境，实时重新加载页面，并且能够支持各种类型的静态资源。它内置了 webpack 编译器，可以自动编译项目代码并在浏览器中实时展示。</p>\n<h2 id=\"2-什么是反向代理\"><a href=\"#2-什么是反向代理\" class=\"headerlink\" title=\"2. 什么是反向代理\"></a>2. 什么是反向代理</h2><p>在开发环境中，我们可能需要从本地访问远程的服务器接口，但是由于跨域的限制，我们无法直接访问远程服务器。这时候就需要借助反向代理服务器来实现。反向代理服务器可以在本地开启一个代理服务，将本地请求转发到远程服务器，从而解决跨域问题。</p>\n<h2 id=\"3-webpack-dev-server-实现反向代理的原理\"><a href=\"#3-webpack-dev-server-实现反向代理的原理\" class=\"headerlink\" title=\"3. webpack-dev-server 实现反向代理的原理\"></a>3. webpack-dev-server 实现反向代理的原理</h2><p>webpack-dev-server 内置了 express 服务器，并且支持配置代理服务器。通过配置代理服务器，我们可以将本地的请求转发到远程服务器。具体的实现原理如下：</p>\n<ol>\n<li>在<code>webpack.config.js</code>中配置代理服务器相关的选项，比如<code>proxy</code>、<code>before</code>、<code>after</code>等。</li>\n<li>在启动 webpack-dev-server 时，会自动启动一个 express 服务器，并监听开发服务器的端口。</li>\n<li>当我们在浏览器中发起请求时，express 服务器会拦截请求，并判断该请求是否满足代理规则。</li>\n<li>如果请求满足代理规则，express 服务器会将该请求转发到代理服务器。</li>\n<li>代理服务器会将请求发送到远程服务器，并将响应返回给 express 服务器。</li>\n<li>express 服务器收到远程服务器的响应后，将响应返回给浏览器。</li>\n</ol>\n<h2 id=\"4-如何配置-webpack-dev-server-反向代理\"><a href=\"#4-如何配置-webpack-dev-server-反向代理\" class=\"headerlink\" title=\"4. 如何配置 webpack-dev-server 反向代理\"></a>4. 如何配置 webpack-dev-server 反向代理</h2><p>在<code>webpack.config.js</code>文件中，我们可以通过<code>devServer.proxy</code>选项来配置反向代理服务器，其常见配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 代理规则</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;/api&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">target</span>: <span class=\"string\">&quot;http://localhost:3000&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">pathRewrite</span>: &#123; <span class=\"string\">&quot;^/api&quot;</span>: <span class=\"string\">&quot;&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上述配置的含义是：将以<code>/api</code>开头的请求转发到<code>http://localhost:3000</code>服务器上，并且去掉<code>/api</code>前缀。</p>\n<p>其中，<code>target</code>选项表示需要转发的远程服务器地址，<code>pathRewrite</code>选项用于重写请求路径。</p>\n<h2 id=\"5-使用案例\"><a href=\"#5-使用案例\" class=\"headerlink\" title=\"5. 使用案例\"></a>5. 使用案例</h2><p>假设我们有一个 Vue.js 项目，需要通过反向代理来访问后端 API。后端 API 的地址为 <code>https://api.example.com</code>。</p>\n<p>首先，我们需要安装 <code>webpack-dev-server</code> 和 <code>http-proxy-middleware</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server http-proxy-middleware --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>接下来，在 <code>vue.config.js</code> 中添加以下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http-proxy-middleware&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;/api&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">target</span>: <span class=\"string\">&quot;https://api.example.com&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;^/api&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个配置的意思是：所有以 <code>/api</code> 开头的请求都会被代理到 <code>https://api.example.com</code>，并且会在请求头中加上 <code>Origin: http://localhost:8080</code>，以模拟跨域请求。<code>changeOrigin</code> 选项表示是否改变请求头中的 <code>Origin</code> 字段，设为 <code>true</code> 可以解决一些跨域问题。<code>pathRewrite</code> 选项表示将请求路径中的 <code>/api</code> 替换为空，以便后端接收请求时不会包含 <code>/api</code>。</p>\n<p>然后在前端代码中，我们可以这样来访问 API：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/api/some-api&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样，<code>axios</code> 库会将请求发送到 <code>http://localhost:8080/api/some-api</code>，<code>webpack-dev-server</code> 会将这个请求转发到 <code>https://api.example.com/some-api</code>，最终将后端 API 的响应返回给前端。</p>\n<p>需要注意的是，由于是通过代理服务器来访问后端 API，所以我们无法直接在浏览器中访问 <code>https://api.example.com</code>，必须通过代理服务器来访问。在开发环境下，我们可以使用 <code>webpack-dev-server</code> 提供的 <code>/webpack-dev-server/</code> 页面来访问代理服务器的相关信息。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cldbhl5et000pp2wifahkbkdf","category_id":"cldbhl5eu000up2wi50t325zu","_id":"cldbhl5ey001fp2wihu0p3yub"},{"post_id":"cldbhl5f1001tp2wib8lr9zrc","category_id":"cldbhl5eu000up2wi50t325zu","_id":"cldbhl5f30024p2wi9n7j6s48"},{"post_id":"cldbmnw54000004wi2zc2ejkp","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbmnw5b000604wi4qltdv5l"},{"post_id":"cldbmnw5d000h04wi2zob8jbw","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbmnw5e000r04wibtcqca48"},{"post_id":"cldbmnw5d000k04wi5xmv1lhj","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbmnw5e000u04wi2e0whdh1"},{"post_id":"cldbmnw5d000n04wi6yp0erup","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldbmnw5f000x04wi8a5p5j6j"},{"post_id":"cldbmnw5e000t04wib54o28m0","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldbmnw5f001304wi332p5zbf"},{"post_id":"cldbmnw5e000w04wi1v3q74d3","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldbmnw5g001604wi53jje3p1"},{"post_id":"cldbmnw5f000z04wi16p89ttz","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldbmnw5g001904wiglgidjj1"},{"post_id":"cldbmnw5g001804wif6wk93mr","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldbmnw5h001h04wi3tifdqrs"},{"post_id":"cldbmnw5h001o04wi5ghh8xdg","category_id":"cldapzfh20000cwwicedtdic5","_id":"cldbmnw5i001w04wi4oqvfnmo"},{"post_id":"cldbmnw5i001r04wi51tm5dgn","category_id":"cldapzfh20000cwwicedtdic5","_id":"cldbmnw5i001z04wi16ckfdab"},{"post_id":"cldbmnw5i001t04wi7ikfg99l","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldbmnw5j002104wid031241w"},{"post_id":"cldbmnw5i001v04wi5cbr9fsb","category_id":"cldapzfh20000cwwicedtdic5","_id":"cldbmnw5j002304wih16402wg"},{"post_id":"cldbmnw5i001y04wihuypb8je","category_id":"cldapzfh20000cwwicedtdic5","_id":"cldbmnw5j002504wiez5v3jw0"},{"post_id":"cldbmnw5j002004wie9kw89ql","category_id":"cldapzfh20000cwwicedtdic5","_id":"cldbmnw5j002704wi2yec8j22"},{"post_id":"cldbmnw5l002904wicefm8k5x","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbmnw5m002h04wihbhgblbh"},{"post_id":"cldbmnw5m002d04wi3aprgqxn","category_id":"cldapzfh20000cwwicedtdic5","_id":"cldbmnw5n002l04wigtri0bly"},{"post_id":"cldbn5nu10000f0wi0gst02wl","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbn5nu30002f0wi1mvseh9l"},{"post_id":"cldbn5nu40003f0wi890hfnbh","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbn5nu60008f0wietcl920y"},{"post_id":"cldbn5nu50004f0wi06xi04jf","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbn5nu60009f0wieclkdo5d"},{"post_id":"cldbn5nu50006f0wi4pqv5d3h","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbn5nu6000af0wi5gev7ub8"},{"post_id":"cldbnaatn0000r0wih8moc1oa","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldbnaatq0003r0wi3rx8fmwe"},{"post_id":"cldborqa20000snwiaolpe35e","category_id":"cldbhl5ew0012p2wi79628qbx","_id":"cldborqaa0003snwi3f5o8tmb"},{"post_id":"cldbmnw5l002804wi4u1c9qt2","category_id":"cldbhl5f2001xp2wigmcdbg8a","_id":"cldborqad000dsnwidgd2c087"},{"post_id":"cldbmnw5m002b04wi2w4b7y3f","category_id":"cldapzfh20000cwwicedtdic5","_id":"cldborqae000fsnwi3697dsmc"},{"post_id":"cldborqac0009snwidgxtfleg","category_id":"cldbhl5eq000ep2wi8qo24b7o","_id":"cldborqae000lsnwi0ea22fls"},{"post_id":"cldborqad000csnwi69w5efgt","category_id":"cldbhl5eq000ep2wi8qo24b7o","_id":"cldborqaf000psnwi0ipe8krm"},{"post_id":"cldborqad000esnwi6hxqd3pu","category_id":"cldbhl5eq000ep2wi8qo24b7o","_id":"cldborqaf000qsnwi6jzg1w13"},{"post_id":"cldborqae000isnwi4adp1q1s","category_id":"cldbhl5eq000ep2wi8qo24b7o","_id":"cldborqaf000ssnwi9j0dbtkq"},{"post_id":"cldborqae000ksnwi9lf45sgh","category_id":"cldbhl5eq000ep2wi8qo24b7o","_id":"cldborqaf000usnwi3upxanyg"},{"post_id":"cldborqae000nsnwi2ihd5o77","category_id":"cldbhl5eq000ep2wi8qo24b7o","_id":"cldborqaf000vsnwihssz9ovi"},{"post_id":"cldbr7q3c0000zewifqf6ehml","category_id":"cldaq68j40002icwi6wo12szc","_id":"cldbr7q3m0007zewi0437f8xw"},{"post_id":"cldbr7q3g0001zewi4qdt2iz3","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbr7q3n0009zewi09lkci0x"},{"post_id":"cldbr7q3h0003zewi819vage7","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbr7q3o000czewig0ok9w7g"},{"post_id":"cldbr7q3m0006zewi1af1gha4","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbr7q3p000ezewihxzcf896"},{"post_id":"cldbr7q3n0008zewic8lvhw28","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbr7q3p000hzewi2agb2cr1"},{"post_id":"cldbr7q3n000azewieg88bjy0","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbr7q3p000jzewif8f3fca7"},{"post_id":"cldbtr6m90000yuwi41wx20pu","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbtr6mi0005yuwi2c1f96ad"},{"post_id":"cldbvzzd60000nfwigm421hdd","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbvzzdg0005nfwi3oik27d2"},{"post_id":"cldbvzzda0001nfwi4aql7xgy","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbvzzdh0008nfwieytghgpm"},{"post_id":"cldbvzzdf0003nfwid3afc3qh","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbvzzdi000cnfwi8mzi6ary"},{"post_id":"cldbvzzdh000bnfwid9rq8vvt","category_id":"cldatmjem0001towicg6i4z60","_id":"cldbvzzdi000infwi98q6dt7a"},{"post_id":"cldbwvppa00002bwi0cte4l38","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldbwvppb00032bwi4eds4tqd"},{"post_id":"cldc119730000mywi1vv77we0","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc119760002mywiepjw0w7t"},{"post_id":"cldc2n9sd0000ogwi3u7x9bcz","category_id":"cldbhl5ew0012p2wi79628qbx","_id":"cldc3bju900026awifgg8153q"},{"post_id":"cldc3bju800006awidwgo8ey1","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc3bju900056awi60tjgl5z"},{"post_id":"cldc3bju900016awic6xa6ts1","category_id":"cldbhl5eq000ep2wi8qo24b7o","_id":"cldc3bju900066awi29lpcqq4"},{"post_id":"cldc53ife0000kdwifzao5bua","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifi0006kdwi09rka5r2"},{"post_id":"cldc53ifg0001kdwi68bp7let","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifi0009kdwiguhr22kd"},{"post_id":"cldc53ifh0003kdwi7e6ch6xf","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifj000ckdwicug7bvqw"},{"post_id":"cldc53ifh0005kdwid99mcpgx","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifj000fkdwi13xs6s9k"},{"post_id":"cldc53ifi0008kdwi3apg5mzl","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifj000ikdwi5l9thnbt"},{"post_id":"cldc53ifi000bkdwi8bkt3uap","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifk000lkdwi6z67ggd6"},{"post_id":"cldc53ifj000ekdwigd1l6e32","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifk000okdwib3dp9ydu"},{"post_id":"cldc53ifj000hkdwibm3xejhv","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifk000rkdwibgbx69px"},{"post_id":"cldc53ifj000kkdwib0a4db11","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifl000ukdwifgwf92b9"},{"post_id":"cldc53ifk000nkdwidlk170ro","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifl000xkdwieye291uy"},{"post_id":"cldc53ifk000qkdwi84b97aor","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifl0010kdwi9w6q52hi"},{"post_id":"cldc53ifl000tkdwigr170bi8","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifm0013kdwigf73bn2v"},{"post_id":"cldc53ifl000wkdwi602j03hg","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifm0015kdwi51xjg985"},{"post_id":"cldc53ifl000zkdwi8gqzcw1f","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifm0017kdwih3dl0wx4"},{"post_id":"cldc53ifm0012kdwi1grw0lz5","category_id":"cldatmjem0001towicg6i4z60","_id":"cldc53ifm0018kdwi8gsueucc"},{"post_id":"cldcat0dg00004kwia7negdwc","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldcat0di00024kwi8yrq5rmr"},{"post_id":"cldcco6b2000003wi6n1l9lkh","category_id":"cldapzfh20000cwwicedtdic5","_id":"cldcco6b5000603wi956xesgg"},{"post_id":"cldcco6b4000103widm874s32","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldcco6b6000803widtysbcjd"},{"post_id":"cldcco6b5000303wi893v1t4z","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldcco6b6000b03wi10f013op"},{"post_id":"cldcco6b5000503wi26zmh6jo","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldcco6bc000e03wi963k2bz1"},{"post_id":"cldcco6b6000a03wi727qc5o2","category_id":"cldbhl5e80002p2wi6dknfrm7","_id":"cldcco6bc000h03wi1a54gqmy"},{"post_id":"cldcco6bb000d03wih9lrgx4b","category_id":"cldapzfh20000cwwicedtdic5","_id":"cldcco6bd000k03wi5f01dyjh"},{"post_id":"cldcco6bc000g03wifnto6zot","category_id":"cldaq68j40002icwi6wo12szc","_id":"cldcco6bd000m03wi2cvzb7ec"},{"post_id":"clddbcume000036wi0fiu7q40","category_id":"cldatmjem0001towicg6i4z60","_id":"clddbcumo000336wi3lpbbhe1"},{"post_id":"clddbcumh000136wi9cdifmpt","category_id":"cldatmjem0001towicg6i4z60","_id":"clddbcumo000436wievad69x1"},{"post_id":"clde6qeda0001j7wi7gao9v6v","category_id":"cldatmjem0001towicg6i4z60","_id":"clde6qedf0003j7wiejpr0169"},{"post_id":"clde6qed70000j7wi67qu0gxh","category_id":"cldatmjem0001towicg6i4z60","_id":"clde7wdtc000223wi9yq2a7cx"},{"post_id":"clde6qed70000j7wi67qu0gxh","category_id":"cldbhl5ew0012p2wi79628qbx","_id":"clde7wdtc000323widyfh8ohr"},{"post_id":"cldlkywhf0002tuwiarsa7txr","category_id":"cldatmjem0001towicg6i4z60","_id":"cldlkywhh0009tuwidyj7aomf"},{"post_id":"cldqqvwbz00002vwi04s4313m","category_id":"cldatmjem0001towicg6i4z60","_id":"cldqqvwc300022vwi45zsa4q2"},{"post_id":"cldtoud1w0000u3wifxds8u6n","category_id":"cldatmjem0001towicg6i4z60","_id":"cldtoud1y0002u3wi4ncp9p68"},{"post_id":"cldvissie0000obwi6rkz6da5","category_id":"cldatmjem0001towicg6i4z60","_id":"cldvissif0002obwi5cr7aqq0"},{"post_id":"clezlha2t0000iawi37vw9421","category_id":"cldatmjem0001towicg6i4z60","_id":"clezlha2w0002iawibcms750u"},{"post_id":"clf8224jp0001tewi3zv39kj4","category_id":"cldatmjem0001towicg6i4z60","_id":"clf8224jq0003tewi30j645wz"},{"post_id":"clf8224jq0004tewi28wtgdp3","category_id":"cldatmjem0001towicg6i4z60","_id":"clf8224jr0008tewi03d5afem"},{"post_id":"clf8224jr0005tewi9iloamum","category_id":"cldatmjem0001towicg6i4z60","_id":"clf8224jr0009tewi3v04hua6"},{"post_id":"clfgkv9ry0000nuwi6z07a2cg","category_id":"clfgkv9s10002nuwicr8ydhau","_id":"clfgkv9s90006nuwi9gr7hd25"},{"post_id":"clfgkv9s10001nuwi13bcc3ls","category_id":"clfgkv9s10002nuwicr8ydhau","_id":"clfgkv9s90007nuwi875y9ycy"},{"post_id":"clfgkv9s70003nuwi0l2pgqid","category_id":"clfgkv9s10002nuwicr8ydhau","_id":"clfgkv9s90008nuwi8muueiof"},{"post_id":"clfhqty9a0001vtwi6e5y5vfm","category_id":"cldatmjem0001towicg6i4z60","_id":"clfj4xh580003jiwi2gkd1wia"},{"post_id":"clfgnjial0000dowieops88v0","category_id":"cldatmjem0001towicg6i4z60","_id":"clfj4xh590005jiwi30xd7z8s"},{"post_id":"clfhqty9b0002vtwi5gsgfrgk","category_id":"cldatmjem0001towicg6i4z60","_id":"clfj4xh590006jiwihlae5dlj"},{"post_id":"clfgnsb160000jbwib97i7aoh","category_id":"cldatmjem0001towicg6i4z60","_id":"clfj4xh590008jiwifxv11bf5"},{"post_id":"clfj4xh590004jiwigpdifvh4","category_id":"cldatmjem0001towicg6i4z60","_id":"clfj4xh590009jiwib4wbghrn"},{"post_id":"clfrttyfn00002rwi27oe6xl6","category_id":"cldatmjem0001towicg6i4z60","_id":"clfrttyfq00022rwi5b3m11xr"},{"post_id":"clfv1xb9f0000u1wigrsq7tfo","category_id":"cldatmjem0001towicg6i4z60","_id":"clfv1xb9g0001u1wib9md2ctp"},{"post_id":"clg08g2os0001miwi7t6r4cmz","category_id":"cldatmjem0001towicg6i4z60","_id":"clg08g2p10005miwi2ouygo2m"},{"post_id":"clg09nklx00002twi90r563de","category_id":"cldatmjem0001towicg6i4z60","_id":"clg09nkm000012twidqk92iq4"},{"post_id":"clg08g2op0000miwi4hax842w","category_id":"clg0c077900019dwie2ub718o","_id":"clg0c077j00069dwi4bqkcxip"},{"post_id":"clg0c2l6s0000bhwicoh6gl9e","category_id":"cldapzfh20000cwwicedtdic5","_id":"clg0c2l6u0002bhwiha9xc645"},{"post_id":"clgaggurj0000jwwi2gt6ehhg","category_id":"cldatmjem0001towicg6i4z60","_id":"clgaggurt0002jwwi26ho3u1g"},{"post_id":"clgat83w90001p0wi20ih03uu","category_id":"cldapzfh20000cwwicedtdic5","_id":"clgat83wa0006p0wi3v3w8cme"},{"post_id":"clgat83w90002p0wiffwo1tdu","category_id":"cldapzfh20000cwwicedtdic5","_id":"clgat83wb0008p0wia1f4e5j3"},{"post_id":"clgat83wa0004p0wihp9eh5rm","category_id":"cldapzfh20000cwwicedtdic5","_id":"clgat83wb0009p0wi3e7n9ixz"},{"post_id":"clgat83w20000p0wic7dc6m57","category_id":"cldapzfh20000cwwicedtdic5","_id":"clgatb10d0001siwih8ahcvq0"},{"post_id":"clfo9kg200000g1wifxqbdlg5","category_id":"cldatmjem0001towicg6i4z60","_id":"clgbn7fjd0000x7wi2b4qbhcu"},{"post_id":"clfhqty970000vtwica6f5jyf","category_id":"cldatmjem0001towicg6i4z60","_id":"clgdlsoqu0001ijwibyoaa852"},{"post_id":"clgncb3ne00005hwi678p6e6c","category_id":"cldapzfh20000cwwicedtdic5","_id":"clgncb3ni00025hwi6tojf0ky"},{"post_id":"clgx5heyb00009gwi10yraccl","category_id":"cldatmjem0001towicg6i4z60","_id":"clgx5heyl00029gwi0zredi5s"},{"post_id":"clhbkxctx0000ypwi0ths3est","category_id":"cldapzfh20000cwwicedtdic5","_id":"clhbkxcu00003ypwi23pm527a"},{"post_id":"clhegw17d0000dywi1d1caxrv","category_id":"cldatmjem0001towicg6i4z60","_id":"clhegxvbd0001h9wid0yr6kx6"}],"PostTag":[{"post_id":"cldbhl5et000pp2wifahkbkdf","tag_id":"cldbhl5ev000vp2wi6225fxvg","_id":"cldbhl5ew0015p2wi5dmpew50"},{"post_id":"cldbhl5f1001tp2wib8lr9zrc","tag_id":"cldbhl5ev000vp2wi6225fxvg","_id":"cldbhl5f6002jp2wi50ej0920"},{"post_id":"cldbhl5f1001tp2wib8lr9zrc","tag_id":"cldbhl5f6002gp2wi0ry5cack","_id":"cldbhl5f6002kp2wicr4c3xwf"},{"post_id":"cldbmnw5d000h04wi2zob8jbw","tag_id":"cldbhl5ex001ap2wif2kn3xdp","_id":"cldbmnw5d000m04wi15lm8cr9"},{"post_id":"cldbmnw5d000k04wi5xmv1lhj","tag_id":"cldbhl5ex001ap2wif2kn3xdp","_id":"cldbmnw5e000p04wierwy530z"},{"post_id":"cldbmnw5d000n04wi6yp0erup","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldbmnw5e000s04wi4glbhnud"},{"post_id":"cldbmnw5e000t04wib54o28m0","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldbmnw5f000y04wi1dgzecwn"},{"post_id":"cldbmnw5e000w04wi1v3q74d3","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldbmnw5f001104wic6xqb2pz"},{"post_id":"cldbmnw5f000z04wi16p89ttz","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldbmnw5g001404wig0yzhdvi"},{"post_id":"cldbmnw5g001804wif6wk93mr","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldbmnw5g001d04wiczpa590z"},{"post_id":"cldbmnw5i001t04wi7ikfg99l","tag_id":"cldbhl5f5002ep2wi3mu19tf0","_id":"cldbmnw5i001x04wi7l3ohih5"},{"post_id":"cldbmnw5i001y04wihuypb8je","tag_id":"cldbhl5f0001np2wi3cm0cm5r","_id":"cldbmnw5j002204wi3i3qb5tx"},{"post_id":"cldbmnw5i001y04wihuypb8je","tag_id":"cldbhl5f1001vp2wi7nvuhv9i","_id":"cldbmnw5j002404wi061g5dp0"},{"post_id":"cldbmnw5l002804wi4u1c9qt2","tag_id":"cldbhl5f30026p2wib6t87ile","_id":"cldbmnw5m002a04wid1zcawb6"},{"post_id":"cldbmnw5l002904wicefm8k5x","tag_id":"cldatmjeo0002towicjn4b1q1","_id":"cldbmnw5m002c04wia58jhdxu"},{"post_id":"cldbn5nu10000f0wi0gst02wl","tag_id":"cldbmnw58000404wi05k5d1t0","_id":"cldbn5nu30001f0wi5t0u23z2"},{"post_id":"cldbn5nu40003f0wi890hfnbh","tag_id":"cldbmnw58000404wi05k5d1t0","_id":"cldbn5nu50005f0wi1417fpu5"},{"post_id":"cldbnaatn0000r0wih8moc1oa","tag_id":"cldbhl5f5002ep2wi3mu19tf0","_id":"cldbnaatq0001r0wifdnx28w6"},{"post_id":"cldbnaatn0000r0wih8moc1oa","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldbnaatq0002r0wih7i04cam"},{"post_id":"cldborqa20000snwiaolpe35e","tag_id":"cldbhl5ew0013p2wi8trfgyvv","_id":"cldborqa60001snwi090i1xgw"},{"post_id":"cldbmnw5j002004wie9kw89ql","tag_id":"cldborqab0005snwig46f1v3z","_id":"cldborqac0007snwi59ws7anl"},{"post_id":"cldbmnw5m002b04wi2w4b7y3f","tag_id":"cldborqab0005snwig46f1v3z","_id":"cldborqae000hsnwi6hr32ykj"},{"post_id":"cldbmnw5i001r04wi51tm5dgn","tag_id":"cldborqac0006snwi01lfh49r","_id":"cldborqae000jsnwidjl4dlw2"},{"post_id":"cldbmnw5i001v04wi5cbr9fsb","tag_id":"cldborqac0006snwi01lfh49r","_id":"cldborqaf000osnwi8fhl04t9"},{"post_id":"cldbmnw5h001o04wi5ghh8xdg","tag_id":"cldborqab0005snwig46f1v3z","_id":"cldborqaf000rsnwi1heyag96"},{"post_id":"cldbmnw5m002d04wi3aprgqxn","tag_id":"cldborqab0005snwig46f1v3z","_id":"cldborqaf000tsnwih76rfw4e"},{"post_id":"cldbr7q3c0000zewifqf6ehml","tag_id":"cldborqa70002snwi2xkn8juz","_id":"cldbr7q3h0002zewi97s0dw1d"},{"post_id":"cldbr7q3c0000zewifqf6ehml","tag_id":"cldborqab0005snwig46f1v3z","_id":"cldbr7q3m0005zewid6il86b9"},{"post_id":"cldbr7q3n0008zewic8lvhw28","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldbr7q3p000dzewi9pub28es"},{"post_id":"cldbr7q3g0001zewi4qdt2iz3","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldbr7q3p000fzewi6d3mdpvv"},{"post_id":"cldbr7q3n000azewieg88bjy0","tag_id":"cldbmnw58000404wi05k5d1t0","_id":"cldbr7q3p000izewi90ywdcz8"},{"post_id":"cldbr7q3h0003zewi819vage7","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldbr7q3p000kzewihtbk3ltm"},{"post_id":"cldbr7q3m0006zewi1af1gha4","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldbr7q3q000lzewi11hs2yj2"},{"post_id":"cldbtr6m90000yuwi41wx20pu","tag_id":"cldbtr6mc0002yuwi3f23e9g6","_id":"cldbtr6mj0007yuwi4lm9gj87"},{"post_id":"cldbvzzdf0003nfwid3afc3qh","tag_id":"cldbkr0yh000212wie3k63ffp","_id":"cldbvzzdg0006nfwib39k3fe2"},{"post_id":"cldbvzzd60000nfwigm421hdd","tag_id":"cldbvzzdb0002nfwid4uc1j66","_id":"cldbvzzdh000anfwihoiw7vba"},{"post_id":"cldbvzzda0001nfwi4aql7xgy","tag_id":"cldbvzzdb0002nfwid4uc1j66","_id":"cldbvzzdi000gnfwiek3ye6od"},{"post_id":"cldbvzzdh000bnfwid9rq8vvt","tag_id":"cldbvzzdj000mnfwi0ziqbl5q","_id":"cldbvzzdj000pnfwi4ki5h1y6"},{"post_id":"cldbmnw5d000k04wi5xmv1lhj","tag_id":"cldbtr6mj0006yuwi61w3e9d0","_id":"cldbwvppb00012bwi4az04w20"},{"post_id":"cldbwvppa00002bwi0cte4l38","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldbwvppb00022bwih3sh0nd0"},{"post_id":"cldc3bju800006awidwgo8ey1","tag_id":"cldbtr6mj0006yuwi61w3e9d0","_id":"cldc3bju900036awi4qyq1z60"},{"post_id":"cldc3bju800006awidwgo8ey1","tag_id":"cldbhl5ex001ap2wif2kn3xdp","_id":"cldc3bju900046awi9svm80mw"},{"post_id":"cldc53ife0000kdwifzao5bua","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifh0002kdwi1eh349pc"},{"post_id":"cldc53ifg0001kdwi68bp7let","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifh0004kdwi03ovb9ma"},{"post_id":"cldc53ifh0003kdwi7e6ch6xf","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifi0007kdwi7w1eh8po"},{"post_id":"cldc53ifh0005kdwid99mcpgx","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifi000akdwib133gpd4"},{"post_id":"cldc53ifi0008kdwi3apg5mzl","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifj000dkdwi22104dcu"},{"post_id":"cldc53ifi000bkdwi8bkt3uap","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifj000gkdwi60cl5ri3"},{"post_id":"cldc53ifj000ekdwigd1l6e32","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifj000jkdwicjzwhkor"},{"post_id":"cldc53ifj000hkdwibm3xejhv","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifk000mkdwi5o614cj2"},{"post_id":"cldc53ifj000kkdwib0a4db11","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifk000pkdwi5jkk9bdt"},{"post_id":"cldc53ifk000nkdwidlk170ro","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifl000skdwie8jhbio2"},{"post_id":"cldc53ifk000qkdwi84b97aor","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifl000vkdwi82pk7k3s"},{"post_id":"cldc53ifl000tkdwigr170bi8","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifl000ykdwi7kwwf4tu"},{"post_id":"cldc53ifl000wkdwi602j03hg","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifm0011kdwi7bde8t79"},{"post_id":"cldc53ifl000zkdwi8gqzcw1f","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifm0014kdwigb7q0vlv"},{"post_id":"cldc53ifm0012kdwi1grw0lz5","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldc53ifm0016kdwigs3f1vro"},{"post_id":"cldcat0dg00004kwia7negdwc","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldcat0di00014kwifiwd18pv"},{"post_id":"cldcco6b2000003wi6n1l9lkh","tag_id":"cldborqab0005snwig46f1v3z","_id":"cldcco6b5000203wict6aby3a"},{"post_id":"cldcco6b4000103widm874s32","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldcco6b5000403wi1r694nwl"},{"post_id":"cldcco6b5000303wi893v1t4z","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldcco6b6000703wi39hmc62w"},{"post_id":"cldcco6b5000503wi26zmh6jo","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldcco6b6000903wiaxu48kle"},{"post_id":"cldcco6b6000a03wi727qc5o2","tag_id":"cldbhl5ea0003p2wi5cwg57pj","_id":"cldcco6bc000f03wi4qrodda2"},{"post_id":"cldcco6bc000g03wifnto6zot","tag_id":"cldborqa70002snwi2xkn8juz","_id":"cldcco6bc000j03wi9xqmhspz"},{"post_id":"cldcco6bc000g03wifnto6zot","tag_id":"cldborqab0005snwig46f1v3z","_id":"cldcco6bd000l03wia9g19tt0"},{"post_id":"cldcat0dg00004kwia7negdwc","tag_id":"cldcco6b7000c03wi7t657jrz","_id":"cldcco6bd000n03widhwfh3l0"},{"post_id":"cldcco6bb000d03wih9lrgx4b","tag_id":"cldborqa70002snwi2xkn8juz","_id":"cldcco6bd000o03wiat4y8cao"},{"post_id":"cldcco6bb000d03wih9lrgx4b","tag_id":"cldborqab0005snwig46f1v3z","_id":"cldcco6bd000p03wicusk1hgd"},{"post_id":"cldcco6bb000d03wih9lrgx4b","tag_id":"cldcco6bc000i03wi0zs58ml3","_id":"cldcco6bd000q03wi1fa7cvqi"},{"post_id":"clddbcume000036wi0fiu7q40","tag_id":"clddbcumi000236wi6p5l6hgm","_id":"clddbcump000636widfgc28co"},{"post_id":"cldbn5nu50004f0wi06xi04jf","tag_id":"cldlkywh90001tuwi0po71s4z","_id":"cldlkywhg0005tuwi1i6led6y"},{"post_id":"clddbcumh000136wi9cdifmpt","tag_id":"cldlkywh90001tuwi0po71s4z","_id":"cldlkywhg0006tuwi7dfkb0si"},{"post_id":"cldlkywhf0002tuwiarsa7txr","tag_id":"cldbvzzdi000fnfwi93p5dbjc","_id":"cldlkywhh0008tuwi2cy36yki"},{"post_id":"cldc119730000mywi1vv77we0","tag_id":"cldlkywh90001tuwi0po71s4z","_id":"cldlkywhi000dtuwicav61x5p"},{"post_id":"clde6qed70000j7wi67qu0gxh","tag_id":"cldlkywh90001tuwi0po71s4z","_id":"cldlkywhi000etuwigla6hp14"},{"post_id":"clde6qeda0001j7wi7gao9v6v","tag_id":"cldlkywhh000atuwi66dl8hgy","_id":"cldlkywhi000ftuwiaav7gfx9"},{"post_id":"cldbn5nu50006f0wi4pqv5d3h","tag_id":"cldlkywhi000ctuwi68axc02f","_id":"cldlkywhi000gtuwigb806sp9"},{"post_id":"cldqqvwbz00002vwi04s4313m","tag_id":"cldlkywh90001tuwi0po71s4z","_id":"cldqqvwc200012vwi1ayc5l4a"},{"post_id":"cldvissie0000obwi6rkz6da5","tag_id":"cldbr7q3i0004zewiaipm1rbd","_id":"cldvissif0001obwi57a502oh"},{"post_id":"clezlha2t0000iawi37vw9421","tag_id":"cldbvzzdi000fnfwi93p5dbjc","_id":"clezlha2w0001iawi0wui8lvd"},{"post_id":"clf8224jp0001tewi3zv39kj4","tag_id":"cldbmnw5n002k04wi45qm5n8e","_id":"clf8224jq0002tewih7p37cx3"},{"post_id":"clf8224jq0004tewi28wtgdp3","tag_id":"cldbvzzdi000jnfwi7a2bh49y","_id":"clf8224jr0006tewiajdchqd8"},{"post_id":"clf8224jr0005tewi9iloamum","tag_id":"cldbvzzdi000jnfwi7a2bh49y","_id":"clf8224jr0007tewidf3e1eht"},{"post_id":"clfgnjial0000dowieops88v0","tag_id":"clfj4xh510002jiwi62gx1pcb","_id":"clfj4xh590007jiwi2d8ndhcw"},{"post_id":"clfj4xh590004jiwigpdifvh4","tag_id":"clfj4xh510002jiwi62gx1pcb","_id":"clfo9kg230001g1wib5r28hvd"},{"post_id":"clfrttyfn00002rwi27oe6xl6","tag_id":"cldbtr6mj0006yuwi61w3e9d0","_id":"clfrttyfq00012rwig92e4qwb"},{"post_id":"clg08g2os0001miwi7t6r4cmz","tag_id":"clg08g2ot0003miwig89844k6","_id":"clg08g2p10006miwibi1j461n"},{"post_id":"clg08g2op0000miwi4hax842w","tag_id":"clg0c077i00029dwigjt1hpbl","_id":"clg0c077j00059dwi0hc6flsd"},{"post_id":"clg09nklx00002twi90r563de","tag_id":"clfj4xh510002jiwi62gx1pcb","_id":"clg94idhu0008rjwi3zvrgdv9"},{"post_id":"clgaggurj0000jwwi2gt6ehhg","tag_id":"clgaggurm0001jwwi8zf3c2gi","_id":"clgaggurt0003jwwi42clescc"},{"post_id":"clg0c2l6s0000bhwicoh6gl9e","tag_id":"cldbhl5f1001vp2wi7nvuhv9i","_id":"clgdlsoqs0000ijwie3ezdqoz"},{"post_id":"clgat83w90001p0wi20ih03uu","tag_id":"cldbhl5f1001vp2wi7nvuhv9i","_id":"clgdlsoqu0002ijwi72u9hbob"},{"post_id":"clgat83wa0004p0wihp9eh5rm","tag_id":"cldbhl5f1001vp2wi7nvuhv9i","_id":"clgdlsoqu0003ijwi16w39dtn"},{"post_id":"clgat83w90002p0wiffwo1tdu","tag_id":"cldbhl5f1001vp2wi7nvuhv9i","_id":"clgdlsoqu0004ijwi0jw3e3hq"},{"post_id":"clgat83w20000p0wic7dc6m57","tag_id":"cldbhl5f1001vp2wi7nvuhv9i","_id":"clgdlsoqu0005ijwi9bmgd2aj"},{"post_id":"clgncb3ne00005hwi678p6e6c","tag_id":"cldbhl5f1001vp2wi7nvuhv9i","_id":"clgncb3ni00015hwi8wbn1tmu"},{"post_id":"clg09nklx00002twi90r563de","tag_id":"clgvnjuvp0000rfwi736w5ipm","_id":"clgvnjuw40002rfwi2dpr3p4u"},{"post_id":"clfj4xh590004jiwigpdifvh4","tag_id":"clgvnjuvp0000rfwi736w5ipm","_id":"clgvnjuw50003rfwicoro2qfd"},{"post_id":"clfhqty9b0002vtwi5gsgfrgk","tag_id":"clgvnjuw40001rfwi4ppzd066","_id":"clgvnjuw60005rfwi3uj3bsga"},{"post_id":"clfgnjial0000dowieops88v0","tag_id":"clgvnjuvp0000rfwi736w5ipm","_id":"clgvnjuw80007rfwi5g9a1fz6"},{"post_id":"clfv1xb9f0000u1wigrsq7tfo","tag_id":"clgvnjuw40001rfwi4ppzd066","_id":"clgvnjuw80009rfwi302k0u92"},{"post_id":"clfgnsb160000jbwib97i7aoh","tag_id":"clgvnjuw80008rfwif6b3bmhc","_id":"clgvnjuw8000arfwibgh3g7dv"},{"post_id":"clgx5heyb00009gwi10yraccl","tag_id":"clgx5heyd00019gwi4n919i9b","_id":"clgx5heyl00039gwihh2zbnih"},{"post_id":"cldbmnw54000004wi2zc2ejkp","tag_id":"clgx5heyd00019gwi4n919i9b","_id":"clgx5pwls0000mcwi2hvncnz2"},{"post_id":"clhbkxctx0000ypwi0ths3est","tag_id":"cldborqab0005snwig46f1v3z","_id":"clhbkxcu00001ypwi65qn1syr"},{"post_id":"clgsvk4cl0000h1wi50rvdzqb","tag_id":"cldborqab0005snwig46f1v3z","_id":"clhbkxcu00002ypwi177cemxk"},{"post_id":"clhegw17d0000dywi1d1caxrv","tag_id":"cldbvzzdb0002nfwid4uc1j66","_id":"clhegxvbc0000h9wi3wzs1dmi"}],"Tag":[{"name":"babel","_id":"cldatmjeo0002towicjn4b1q1"},{"name":"模块化","_id":"cldaubju00001r4wigv7fatry"},{"name":"blender","_id":"cldbhl5ea0003p2wi5cwg57pj"},{"name":"粤拼","_id":"cldbhl5ev000vp2wi6225fxvg"},{"name":"菜谱","_id":"cldbhl5ew0013p2wi8trfgyvv"},{"name":"node","_id":"cldbhl5ex001ap2wif2kn3xdp"},{"name":"练习","_id":"cldbhl5ey001gp2wi9qdf928g"},{"name":"ai绘画","_id":"cldbhl5f0001np2wi3cm0cm5r"},{"name":"Midjourney","_id":"cldbhl5f1001vp2wi7nvuhv9i"},{"name":"练字","_id":"cldbhl5f30026p2wib6t87ile"},{"name":"写写写","_id":"cldbhl5f5002ap2wibaug6x53"},{"name":"zbrush","_id":"cldbhl5f5002ep2wi3mu19tf0"},{"name":"粤语","_id":"cldbhl5f6002gp2wi0ry5cack"},{"name":"api","_id":"cldbkr0yh000212wie3k63ffp"},{"name":"开发效率","_id":"cldbmnw58000404wi05k5d1t0"},{"name":"react","_id":"cldbmnw5n002k04wi45qm5n8e"},{"name":"生活","_id":"cldborqa70002snwi2xkn8juz"},{"name":"绘画","_id":"cldborqab0005snwig46f1v3z"},{"name":"构成","_id":"cldborqac0006snwi01lfh49r"},{"name":"js","_id":"cldbr7q3i0004zewiaipm1rbd"},{"name":"axios","_id":"cldbtr6mc0002yuwi3f23e9g6"},{"name":"npm","_id":"cldbtr6mj0006yuwi61w3e9d0"},{"name":"webpack","_id":"cldbvzzdb0002nfwid4uc1j66"},{"name":"typescript","_id":"cldbvzzdi000fnfwi93p5dbjc"},{"name":"vue","_id":"cldbvzzdi000jnfwi7a2bh49y"},{"name":"微信小程序","_id":"cldbvzzdj000mnfwi0ziqbl5q"},{"name":"萌え〜","_id":"cldc2n9sk0002ogwi6qwzepwv"},{"name":"pr","_id":"cldcco6b7000c03wi7t657jrz"},{"name":"表情包","_id":"cldcco6bc000i03wi0zs58ml3"},{"name":"jsdelivr","_id":"clddbcumi000236wi6p5l6hgm"},{"name":"gitalk","_id":"clde6qeda0002j7wi56k9gibo"},{"name":"ChatGPT","_id":"clde7wdt6000023widhxrfi96"},{"name":"实用小插件","_id":"cldectj6b0000eawi2evhcog0"},{"name":"实用开源代码or工具","_id":"cldlkywh90001tuwi0po71s4z"},{"name":"实用开源代码","_id":"cldlkywhh000atuwi66dl8hgy"},{"name":"github","_id":"cldlkywhi000ctuwi68axc02f"},{"name":"程序员的自我修养","_id":"clfgnjiao0001dowi0yskes32"},{"name":"css","_id":"clfj4xh510002jiwi62gx1pcb"},{"name":"性能优化","_id":"clg08g2ot0003miwig89844k6"},{"name":"乱七八糟","_id":"clg0c077i00029dwigjt1hpbl"},{"name":"midjourney","_id":"clg0c077i00049dwi94us5bse"},{"name":"iv","_id":"clg94idhj0002rjwi17sme7xr"},{"name":"uni-app","_id":"clgaggurm0001jwwi8zf3c2gi"},{"name":"iv1","_id":"clgvnjuvp0000rfwi736w5ipm"},{"name":"iv2","_id":"clgvnjuw40001rfwi4ppzd066"},{"name":"iv3","_id":"clgvnjuw80008rfwif6b3bmhc"},{"name":"prettier","_id":"clgx5heyd00019gwi4n919i9b"}]}}